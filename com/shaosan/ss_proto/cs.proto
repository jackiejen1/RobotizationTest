syntax = "proto2";
//cleint <---> scene
package cs;

message User {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint32 vit = 4; //体力
  required uint32 spirit = 5; //精力
  required uint32 refresh_vit_time = 6;
  required uint32 refresh_spirit_time = 7;
  required uint32 exp = 8;
  required uint32 money = 9;
  required uint32 gold = 10;
  required uint32 prestige = 11; //声望
  optional uint32 skill_point = 12;//技能点
  required uint32 medal = 13; //奖章
  required uint32 tower_score = 14; //爬塔积分
  required uint64 fight_value = 15; //战斗力
  required uint32 battle_token = 16; //出征令
  required uint32 battle_token_time = 17; //出征令恢复时间
  optional uint32 essence = 18; //精魄
  required uint32 forbid_battle_time = 19;//免战时间戳
  optional uint32 guide_id = 20;
  optional uint32 corp_point = 21;//军团贡献
  optional uint32 wheel_score = 22;//转盘积分
  optional uint32 god_soul = 23; //神魂
  optional uint32 contest_point = 24;//比武点
  optional uint32 title_id = 25; //称号ID
  repeated TitleInfo title_list = 26; //称号列表
  optional uint32 spread_sum_score = 27; //推广积分
  optional uint32 coupon = 28; //团购券
  optional uint32 fid = 29;	// 头像框ID
  optional uint32 fight_score = 30;	// 征战积分
  optional uint32 cloth_id = 31;
  optional uint32 cloth_time = 32;
  optional bool	  cloth_open = 33;
  optional uint32 ksoul_point = 34;//灵玉
  optional uint32 cnt = 35;//改名次数
  optional uint32 ksoul_summon_score = 36;//奇遇值
  optional uint32 ksoul_fight_base = 37;//底座
  optional uint32 wid  = 38;//装备的神翼bid
  optional uint32 trade_point = 39;//交易点
  optional uint32 transexual_count = 40;//变性次数
  optional uint32 zero_hour_level = 41;//今天零点的等级
  optional uint32 corp_medal = 42; //军团勋章
  optional uint32 crystal = 43; //水晶
  optional uint32 server_open_time = 44; //开服时间
  optional uint32 home_level = 45;//家园等级
  optional uint32 home_exp = 46;//家园经验
  optional uint32 city_defense_score = 47;//物资
  optional uint32 petty_recharge_num = 48;//小额充值次数
  optional uint32 city_war_point = 49;//国战勋章
  optional uint32 soul_crystal = 50; //魂晶
  optional uint32 chat_shield = 51; //聊天屏蔽
  optional uint32 famous_point = 52; //名将点
  optional uint32 famous_soul = 53; //名将魂
  optional bool is_verify = 54; //是否实名认证
  optional uint32 recharge_score = 55; //充值积分
  optional uint32 action_score = 56; //活跃积分
  optional uint32 skytest_score = 57; //通天试炼积分
  optional uint32 salary = 58; //官银
  optional uint32 rice = 59; //粮草
  optional uint32 extend_level = 60;//额外等级
	optional uint32 chat_bubble_id = 61;	//聊天泡泡id
  optional bool ph_num_verify = 62; //是否已绑定手机号
	optional uint32 anct = 63;  //上阵阵法
  optional uint32 create_time = 64; //创建时间
  repeated FrameInfo frame_list = 65; //头像框列表
  repeated ChatBubbleInfo chat_bubble_list = 66; //聊天气泡列表
  repeated KeyValueI64 user_flags = 67; //玩家的一些标记  
  optional uint32 job_id = 68;//主角职业id 
  optional uint32 job_level =69;//主角职业等级
  repeated StudyBookCell study_books =70;//主角研习书籍数据
  optional uint32 transferStatus = 71;//转职流程副本试炼状态[1:成功]
}

message Knight {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 level = 3;
  required uint32 exp = 4;
  required uint32 time = 5;
  required uint32 user_id = 6;
  required KnightTraining training = 7;//历练
  required uint32 halo_level = 8;//光环等级
  required uint32 halo_exp = 9;//光环成长值
  required uint32 halo_ts = 10;//光环成长值有效时间戳
  repeated uint32 association = 11;//人物羁绊
  repeated uint32 passive_skill = 12;//被动技能
  required uint32 awaken_level = 13;//觉醒等级
  repeated uint32 awaken_items = 14;//装备觉醒道具
  required uint32 pulse_level = 15; // 脉等级
  optional uint32 frag_consume = 16; // 升神脉或神阶消耗的碎片数
  optional uint32 swid  = 17;        // 返回的穿戴神器id
  optional uint32 swbid  = 18;        // 返回的穿戴神器bid 查看其它玩家用的神器用的
  optional uint32 horse_advance_id = 19; //穿戴的战马
  optional Horse horse = 20;
  optional uint32 golden_task = 21;     // 已完成的任务
  optional bool golden_task_accept = 22;     // 是否已接受下一个任务
  optional uint32 golden_task_value = 23;     // 任务进度，目前只有收集类用到
  optional Runestone runestone = 24; //兵符
	optional LegendTree legend_tree = 25;	//转职
  optional uint32 og_star_level = 26;//天金将升星等级
  optional uint32 og_swallow_level = 27;//天金将吞噬等级
  optional uint32 og_swallow_exp = 28;//天金将吞噬经验
	optional uint32 soul_level = 29;//武将魂引等级
  optional uint32 fmt_pos = 30; //上阵时的位置
  optional uint32 skin = 31;//武将皮肤
  optional uint32 skin_st = 32;//武将皮肤过期时间
}

message KnightTraining {
  required uint32 hp = 1;//生命历练值
  required int32 hp_tmp = 2;//生命历练临时值
  required uint32 at = 3;//攻击历练值
  required int32 at_tmp = 4;//攻击历练临时值
  required uint32 pd = 5;//物防历练值
  required int32 pd_tmp = 6;//物防历练临时值
  required uint32 md = 7;//法防历练值
  required int32 md_tmp = 8;//法防历练临时值
}

message Equipment {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 time = 3;
  required uint32 user_id = 4;
  required uint32 level = 5;
  required uint32 refining_level = 6;
  required uint32 refining_exp = 7;
  required uint32 money = 8;
  optional uint32 star = 9;
  optional uint32 star_exp = 10;
  optional uint32 luck_value = 11;
  optional uint32 gold_step = 12;
  optional uint32 quench_lv = 13;
  repeated uint32 spirits_id = 14;	//器灵id
  optional uint32 soul_step = 15;	//铸魂等级
  optional uint32 soul_exp = 16;	//当前等级经验	
  repeated EquipmentSpirit spirits = 17; //只用于阵容
}

message Dress {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 level = 3;
  optional uint32 fairy_level = 4;
}
message SetGem {
    required uint32 id  = 1;
    required uint32 pos = 2;
}
message Wing {
	required uint32 id = 1;
	required uint32 base_id = 2;
	required uint32 level = 3;
	required uint32 money = 4;
	required uint32 num = 5;
	repeated SetGem    gems = 6;
	optional uint32 star = 7;
	repeated uint32 moults = 8;
	optional uint32 moultLv = 9;
}
message WingProtect {
  required uint32 id = 1;
  repeated uint32 protect_id = 2;
}

message C2S_WingMoultUpgrade {
    required uint32 wid = 1;		//神翼id
  	required uint32 moultPos = 2;	//升级位置
  	required uint32 lv = 3;			//升多少级
}

message S2C_WingMoultUpgrade {
    required uint32 ret = 1;
	required uint32 wid = 2;
    required uint32 mlv = 3;
   	repeated uint32 moults = 4;
}

message Pet {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 level = 3;
  required uint32 exp = 4;
  required uint32 addition_exp = 5;
  required uint32 addition_lvl = 6;
  required uint32 fight_value = 7;
  optional uint32 swallow_exp = 8;
  optional uint32 swallow_level = 9;
  optional uint64 sid = 10;
  optional uint32 uid = 11;
  optional bool selected = 12; //九州中选择上阵
  optional uint32 formation_level = 13;
  optional FormationExp formation_exp = 14;
  optional FormationExp darkgold_formation_exp = 15;//暗金玄阵经验
  optional uint32 darkgold_formation_level = 16;//暗金玄阵等级
  optional FormationExp colorgold_formation_exp = 17; //彩金玄阵经验
  optional uint32 colorgold_formation_level = 18; //彩金玄阵等级
}

message Treasure {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 time = 3;
  required uint32 user_id = 4;
  required uint32 level = 5;
  required uint32 exp = 6;
  required uint32 refining_level = 7;
  optional uint32 gold_level = 8; // 对应treasure_gold_info表的level
  optional uint32 star_level = 9; //升星等级
	repeated uint32 source_trace = 10;
}

message Item {
  required uint32 id = 1;
  required uint32 num = 2;
}

message TimeItem {
	required uint64 id  = 1;
	required uint32 base_id = 2;//关联配置中的id
	required uint64 destroy_time = 3;
}

message AwakenItem {
  required uint32 id = 1;
  required uint32 num = 2;
}

message Fragment {
  required uint32 id = 1;
  required uint32 num = 2;
}

message TreasureFragment {
  required uint32 id = 1;
  required uint32 num = 2;
}

message FormationExp {
  required uint32 hpExp = 1;
  required uint32 atExp = 2;
  required uint32 pdExp = 3;
  required uint32 mdExp = 4;
}

message ArenaBattleUser {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint64 fight_value = 4;
  repeated Knight knights = 5;
  repeated Equipment equipments = 6;
  repeated Treasure treasures = 7;
  repeated FightEquipment fight_equipments = 8;
  repeated FightTreasure fight_treasures = 9;
  repeated Dress dresses = 10;
  optional uint32 dress_slot = 11;
  optional Pet fpet = 12; //出战宠物信息
  repeated bool has_ppet = 13; // 是否有宠物护佑
  repeated Pet ppet = 14; // 宠物护佑
  optional uint32 clid = 15;
  optional uint32 cltm = 16;
  optional bool   clop = 17;
  repeated Famous fam = 19; //名将
  optional uint32 extend_level = 20;//额外等级
  repeated Militarist militarist = 21; //上阵的军师
  repeated MilitaristProperty milit_prop = 22; //上阵军师的属性
  optional Wing wing = 23;//装备的神翼
  optional uint32 job_id = 24;//职业id 
  optional uint32 job_level = 25;//职业等级
}

message TitleInfo {
  required uint32 id = 1;
  required uint32 time = 2;
}

message UserRice {
  required uint32 rice_rank = 1; //粮草排名
  required uint32 init_rice = 2; //可抢夺粮草
  required uint32 growth_rice = 3; //不可夺粮草
  required uint32 rice_refresh_time = 4; //粮草自增刷新时间
  repeated RiceRival rivals = 5; //对手列表
  required uint32 rival_flush_time = 6; //对手匹配时间
  required uint32 revenge_token = 7; //复仇令数量
  required uint32 buy_revtoken_times = 8; //购买复仇令次数
  required uint32 rob_token = 9; //抢粮令数量
  required uint32 rob_token_refresh_time = 10; //抢粮令刷新时间戳
  required uint32 last_rob_time = 11; //上次抢粮时间戳
  required uint32 buy_robtoken_times = 12; //抢粮令购买次数
  //required uint32 achievement_id = 13; //已完成成就
  repeated uint32 achievement_list = 13;
  required uint32 rank_award = 14; //排行榜奖励领取时间戳(0:未领取/大于0:已领取)
}

message RiceEnemy {
  required uint32 id = 1;
  required uint32 user_id = 2; //仇人uid
  required uint32 rob_result = 3; //抢夺结果 0:失败/1:成功
  required uint32 rob_rice = 4; //抢夺粮草
  required uint32 revenge = 5; //复仇状态 0:未复仇/1:已复仇/2:不能复仇
  required uint32 time = 6;
  required string name = 7;
  required uint64 fight_value = 8;
  required uint32 init_rice = 9;
  required uint32 base_id = 10;
  required uint32 dress_base = 11;
  required uint32 level = 12;
  optional uint32 clid = 13;
  optional uint32 cltm = 14;
  optional bool   clop = 15;
  optional uint32 wid	= 16;
}

message RiceRival {
  required uint32 user_id = 1;
  required string name = 2;
  required uint64 fight_value = 3; //战力
  required uint32 init_rice = 4; //可夺粮草
  required uint32 base_id = 5;
  required uint32 growth_rice = 6; //固定粮草
  required uint32 corp_id = 7;
}

message RiceRankUser {
  required uint32 user_id = 1;
  required uint32 rice_rank = 2;
  required string name = 3;
  required uint32 rice = 4;
  required uint64 fight_value = 5;
  required uint32 level = 6;
  required uint32 base_id = 7;
  required uint32 dress_base = 8;
  optional uint32 clid = 9;
  optional uint32 cltm = 10;
  optional bool	  clop = 11;
}

message Shop {
  required uint32 id = 1; //商店ID
  optional uint32 flush_time = 2; //商店刷新时间
  optional uint32 free_times = 3; //免费是刷新次数
  optional uint32 free_add_time = 4; //免费次数自增时间
  optional uint32 flush_times = 5; //当日刷新次数
  repeated ShopGoods goodsList = 6; //商品信息
}

message ShopGoods {
  required uint32 id = 1; //商品ID
  optional uint32 total = 2; //总量剩余(限量销售)
  optional uint32 buy = 3; //自己是否购买(0:未购买/1:已购买)
}

enum RET {
  RET_ERROR = 0;
  RET_OK = 1;
  RET_SERVER_MAINTAIN = 2; //服务器维护
  RET_USER_NOT_EXIST = 3; //玩家不存在
  RET_LOGIN_REPEAT = 4; //重复登陆
  RET_USER_NAME_REPEAT = 5; //创建角色时,玩家名字重复
  RET_CHAT_OUT_OF_LENGTH = 6; // 聊天 - 话太多
  RET_CHAT_CHAN_INEXISTENCE = 7; // 聊天 - 频道不存在
  RET_ITEM_BAG_FULL = 8; //物品背包满
  RET_FRIEND_FULL_1 = 9; // 自己好友已满
  RET_FRIEND_FULL_2 = 10; // 对方好友已满
  RET_STAGEDUNGEON_OVERLIMIT = 11;//副本超过挑战次数
  RET_NOT_ENOUGH_VIT = 12;//体力不足
  RET_STAGEBOX_REWARDED = 13;//副本类宝箱奖励已经领取
  RET_FASTEXECUTE_LOCK = 14;//秒杀CD中
  RET_CHAPTERACHVRWD_ALREAD_FINISHED = 15;//章节星星奖励已经领取
  RET_NOT_ENOUGH_STAR = 16;//章节星星总数不够
  RET_CHAPTERBOX_REWARDED = 17;//章节宝箱奖励已经领取
  RET_NOT_ENOUGH_CHAPTERBOX_STAR = 18;//章节宝箱星星数不够
  RET_NOT_ENOUGH_GOLD = 19;///////////////////////元宝不足
  RET_NOT_ENOUGH_MONEY = 20;/////////////////////银两数量不足
  RET_KNIGHT_BAG_FULL = 21; //卡牌背包满
  RET_EQUIP_BAG_FULL = 22; //装备背包满
  RET_DUNGEON_NOT_FINISHED = 23;//副本未通过
  RET_IS_NOT_UP_TO_LEVEL = 24;//等级不够
  RET_NOT_ENOUGH_SPIRIT = 25;//精力不够
  RET_VIP_SHOP_UP_LIMIT = 26; //购买到达上限
  RET_NOT_ENOUGH_PRESTIGE = 27;//声望不够
  RET_KNIGHT_NOT_EXIST = 28;//武将不存在
  RET_CANNOT_UPGRADE_MAINROLE = 29;//主将不可强化
  RET_KNIGHT_LEVEL_EXCEED_MAINROLE = 30;//强化武将等级超过主将
  RET_MAINROLE_CANNOT_BE_UPGRADE = 31;//主将不可用作强化材料
  RET_BE_UPGRADE_KNIGHT_NOT_EXIST = 32;//强化材料武将不存在
  RET_BE_UPGRADE_KNIGHT_REPEAT = 33;//强化材料武将重复
  RET_ONTEAM_KNIGHT_CANNOT_BE_UPGRADE = 34;//出阵武将不可作为强化材料
  RET_KNIGHT_ADVANCED_LEVEL_EXCEED_LIMIT = 35;//武将升阶等级已经达到最大
  RET_KNIGHT_ADVANCED_NOT_ENOUGH_NUM = 36;//武将升阶需求卡牌数量不足
  RET_ADVANCED_COST_KNIGHT_ERR = 37;//武将升阶材料卡牌id不对
  RET_ONTEAM_KNIGHT_CANNOT_BE_ADVANCED = 38;//出阵武将不可当作升阶材料
  RET_ITEM_NUM_NOT_ENOUGH = 39;//道具数量不足
  RET_FRONT_SKILL_NOTLEARNED = 40;//前置技能未学习
  RET_SKILL_REACH_MAXLEVEL = 41;//技能达到满级
  RET_NOT_ENOUGH_SKILLPOINT = 42;//技能点不足
  RET_SKILL_NOT_FOUND = 43;//技能未找到
  RET_NOT_ENOUGH_PEER_SKILL = 44;//同类型技能不够导致无法洗技能
  RET_ILLEAGAL_SKILL_SLOT = 45;//技能槽位错误
  RET_KNIGHT_TRAINING_VALUE_EXCEED_LIMIT = 46;//武将历练值超过限制
  RET_ILLEGAL_RESET_SLOT = 47;//洗技能所洗槽位不为空
  RET_STORYDUNGEON_OVERLIMIT = 48;//剧情副本次数超过限制
  RET_SGZAWARD_ALREAD_FINISHED = 49;//三国志奖励已经领取
  RET_EQIUP_NOT_EXIST = 50; //装备不存在
  RET_EQUIP_LEVEL_EXCEED_LIMIT = 51;//装备强化等级超过限制
  RET_EQUIP_REFINING_LEVEL_EXCEED_LIMIT = 52;//装备精炼等级超过限制
  RET_ITEM_TYPE_ERROR = 53;//道具类型不对
  RET_KNIGHT_HALO_LEVEL_EXCEED_LIMIT = 54;//武将光环等级已经达到最大
  RET_KNIGHT_HALO_ADVANCE_LEVEL_NOT_REACH = 55;//武将光环等级不够
  RET_MYSTICAL_SHOP_UP_LIMIT = 56; //神秘商店购买到达上限
  RET_NOT_ENOUGH_ESSENCE = 57;  //精魄数量不足
  RET_REBEL_NOT_VAILD = 58; //叛军无效
  RET_NOT_ENOUGH_BATTLE_TOKEN = 59; //没有足够的出征令
  RET_NO_FIND_REBEL_EXPLOIT_AWARD = 60; //没找到叛军奖励ID
  RET_TREASURE_BAG_FULL = 61;  //宝物背包已满
  RET_KNIGHT_CANNOT_BE_ADVANCED = 62;//武将不能被升阶
  RET_TREASURE_NOT_EXIST = 63; //宝物不存在
  RET_BE_UPGRADE_TREASURE_REPEAT = 64;//强化材料宝物重复
  RET_TREASURE_REFINING_NOT_ENOUGH_NUM = 65;//精炼材料宝物数据不足
  RET_TREASURE_FRAGMENT_NOT_ENOUGH = 66;//宝物碎片数量不足
  RET_REBEL_NOT_PUBLIC = 67; //叛军没公开
  RET_REBEL_NOT_FRIEND = 68; //不是自己好友的叛军
  RET_TREASURE_IN_FIGHT_POSTION = 69;//宝物出阵中
  RET_TREASURE_CANNOT_STRENGTH = 70;//该宝物不能被强化或精炼
  RET_NOT_ENOUGH_MEDAL = 71;//没有足够的勋章
  RET_NOT_ENOUGH_TOWERSCORE = 72;// 没有足够试练塔积分
  RET_ARENA_RANK_LOCK = 73;//竞技场排名已更新
  RET_EQUIP_NOT_EXIST = 74;//装备不在
  RET_NOT_SKILL_NOTENOUGH_ITEM = 75;//装备学习所需道具不足
  RET_ILLEGAL_SKILL_LEVEL = 76;//重置技能 技能等级非法
  RET_USER_DATA_LOCK = 77;//玩家数据更新中
  RET_TREASURE_FRAGMENT_ROBBED = 78;//宝物碎片已被抢夺
  RET_USER_OFFLINE = 79;// 玩家已下线
  RET_NOT_FRIEND = 80;// 对方不是你的好友
  RET_SCORE_SHOP_UP_LIMIT = 81; //积分商城购买到达上限
  RET_SCORE_SHOP_NO_ARENA_LIMIT = 82; //积分商城未达到竞技场排名需求
  RET_SCORE_SHOP_NO_TOWER_LIMIT = 83; //积分商城未达到闯关层数需求
  RET_VIP_DUNGEON_NOT_OPEN = 84; // VIP副本未开启
  RET_VIP_DUNGEON_MAX_COUNT = 85; // VIP副本次数用完
  RET_VIP_LEVEL_NOT_ENOUGH = 86; // VIP等级不够
  RET_CHAT_HIGH_FREQUENCY = 87; // 聊天太频繁
  RET_HUODONG_OVER = 88; // 活动结束
  RET_MONTHCARD_ALREADY_USED = 89; // 月卡已经使用过了
  RET_WORSHIP_CD = 90; // 祭拜关公cd
  RET_DAILYMISSION_PROGRESS_ERROR = 91;//每日任务进度不足
  RET_DAILIYMISSION_ALREAD_FINISH = 92;//每日任务奖励已经领取
  RET_DAILIYMISSION_BOX_ALREAD_FINISH = 93;//每日任务宝箱奖励已经领取
  RET_DAILIYMISSION_BOX_NOT_ENOUGH_POINT = 94;//每日任务宝箱奖励点数不够
  RET_RESET_COUNT_MAX = 95;//重置次数达到上限
  RET_CHAT_FORBID = 96;  // 被禁言
  RET_LOGIN_BAN_USER = 97;//被封号了
  RET_KNIGHT_LEVEL_NOT_REACH = 98;//武将等级不够
  RET_LOGIN_TOKEN_TIME_OUT = 99;
  RET_LOGIN_BAN_USER2 = 100;//不在白名单
  RET_USER_IN_FORBID_BATTLE_TIME = 101;//玩家在免战状态不能抢夺
  RET_ARENA_RANK_NOT_REACH_20 = 102;//竞技场排名20名之后不能直接挑战前10名
  RET_GIFT_CODE_ERR = 103; //错误的礼品码
  RET_VERSION_ERR = 104; //客户端版本错误
  RET_HOF_SIGN_LENGTH_ERROR = 105; //名人堂签名过长
  RET_HOF_SIGN_GOLD_ERROR = 106; //名人堂改签名元宝不足
  RET_SERVER_NOT_OPEN = 107;//服务器还未开放
  RET_FUND_BUY_TIME_EXPIRE = 108;//基金购买时间过期
  RET_FUND_BUY_REPEATE = 109;//基金购买重复
  RET_USER_NOT_BUY_FUND = 110; //玩家未购买基金
  RET_FUND_WEAL_TIME_EXPIRE = 111;//基金福利领取时间过期
  RET_FUND_HAS_AWARD = 112;//基金奖励已经领取
  RET_FUND_HAS_WEAL = 113; //基金福利已经领取
  RET_FUND_CANNOT_WEAL = 114; //基金福利领取条件未达成
  RET_ACTIVITY_STATUS_NO_PERMIT = 115; //活动奖励条件不可领取
  RET_ACTIVITY_DEC_NOT_ENOUGHT = 116; //活动奖励兑换物品不足
  RET_ACTIVITY_SELL_ALREADY_BOUGHT = 117; //活动限购已经参与
  RET_ACTIVITY_SELL_MAX = 118; //活动限购已经被抢购完了
  RET_ACTIVITY_CLOSED= 119; //活动已经结束
  RET_RIOT_ASSISTED = 120; //暴动已被解决
  RET_GC_TIME_OUT = 121;//礼品码时间过期
  RET_GC_NOT_ENOUGH_PARAM = 122; //礼品码缺少参数
  RET_GC_PARAM_ERR = 123; //参数错误
  RET_GC_ACT_CODE_NOT_USE = 124; //活动批次的码失效
  RET_GC_CODE_NOT_USE = 125; //码已经失效
  RET_GC_CODE_NOT_EXIST = 126; //码不存在
  RET_GC_ACT_TIMEOUT = 127; //活动过期
  RET_GC_CODE_USE_MORE_TIME = 128; //码超过使用次数
  RET_GC_ACT_CODE_ERR = 129; //活动游戏编码错误
  RET_GC_USER_ERR = 130; //用户名非该码绑定用户
  RET_GC_VERIFY_CODE_ERR = 131; //校验码错误
  RET_CORP_NOT_EXIST = 132; //军团不存在
  RET_CORP_NAME_ILLEGAL = 133; //非法军团名
  RET_CORP_NAME_REPEAT = 134; //军团名已存在
  RET_JOIN_CORP_EXIST= 135; //申请的军团已存在
  RET_JOIN_CORP_MAX = 136; //申请的军团数量到达上限
  RET_QUIT_CORP_INCD = 137; //退出军团时间CD中（在玩家主动退出 或者 军团长T人时候提示）
  RET_CORP_MEMBER_FULL = 138; //军团人数已满
  RET_CORP_AUTH_NO_PERMIT = 139; //军团权限不够
  RET_USER_HAS_JOINED_ANOTHER_CORP = 140; //玩家已经加入另外个军团
  RET_CORP_FRAME_DEMAND_NOT_MEET = 141; //军团边框条件不满足
  RET_CORP_VLEADER_FULL= 142; //军团副军团人数满了
  RET_DISMISS_MEMBER_ILLEGAL= 143; //军团人数大于最小解散军团人数
  RET_CORP_WORSHIP_ALREADY_DONE = 144; //已经做过军团贡献
  RET_CORP_WORSHIP_AWARD_GOT = 145; //已经领过军团贡献奖励
  RET_CORP_WORSHIP_POINT_ILLEGAL = 146; //军团贡献奖励点数不足 无法领取奖励
  RET_NOT_ENOUGH_CORP_POINT = 147; //军团点数不足
  RET_CA_AWARD_TIMES_EXCEED_LIMIT = 148; //可配置活动奖励次数超过限制
  RET_CA_AWARD_TIMES_EXCEED_SERVER_LIMIT = 149; //可配置活动全服奖励次数超过限制
  RET_CA_QUEST_ISNOT_COMPLETE = 150; //可配置活动奖励不可领取
  RET_CA_AWARD_ID_ERROR = 151; //可配置活动奖励ID错误
  RET_KNIGHT_NUM_NOT_ENOUGH = 152; //卡牌数量不足
  RET_EQUIP_NUM_NOT_ENOUGH = 153; //装备数量不足
  RET_TREASURE_NUM_NOT_ENOUGH = 154; //宝物数量不足
  RET_CA_AWARD_TIMENOT_REACH = 155; //可配置任务奖励领取时间未到
  RET_CORP_NOT_IN_EXCHANGE_TIME = 156; //弹劾军团长 时间未到
  RET_CORP_LEADER_CANNOT_QUIT = 157; //军团长不能退出军团
  RET_CORP_SHOP_REQUEST_OVERDUE = 158; //军团商店ID不存在 请求过期
  RET_USER_HAS_NO_CORP = 159; //玩家没有军团
  RET_USER_HAS_CORP = 160; //玩家已经有军团
  RET_DRESS_LEVEL_EXCEED_LIMIT = 161;//时装强化等级超过限制
  RET_DRESS_NOT_EXIST = 162;//时装不在
  RET_CORP_SHOP_HAS_BOUGHT = 163; //玩家已经购买了该军团商城道具
  RET_CORP_SET_CHAPTER_ILLEGAL = 164; //设置军团章节信息条件不足
  RET_CORP_CHAPTER_EXECUTE_MAX = 165; //最大军团副本执行次数
  RET_CORP_CHAPTER_INFORMATION_ERROR = 166; //军团副本信息错误 信息过期
  RET_CORP_CHAPTER_FINISHED = 167; //军团副本已经结束
  RET_CORP_CHAPTER_DUNGEON_NOT_FINISH = 168; //军团副本没通关
  RET_CORP_CHAPTER_DUNGEON_NO_AWARD = 169; //该玩家没有军团副本奖励
  RET_CORP_CHAPTER_AWARD_HAS_GOT = 170; //该玩家已经领取的军团副本奖励
  RET_HOLIDAY_AWARD_TIMES_EXCEED_LIMIT = 171; //节日活动领奖次数超过限制
  RET_HOLIDAY_EVENT_IS_NOT_OPEN = 172; //节日活动还未开放
  RET_ITEM_IS_EXPIRE = 173; //道具已过期
  RET_CORP_CHAPTER_AWARD_BELONG_TO_OTHERS= 174; //这个蛋已经被别人砸了
  RET_CORP_ANNOUNCEMENT_ILLEGAL = 175; //非法军团对外公告
  RET_CORP_NOTIFICATION_ILLEGAL = 176; //非法军团对内公告
  RET_GIFT_CODE_OP_TOO_FAST = 177; //礼品码操作过快
  RET_JOIN_CORP_INCD = 178; //加入军团时间CD中
  RET_JOIN_CORP_USER_REQUEST_NOT_EXIST = 179; //玩家军团申请不存在
  RET_CORP_WORSHIP_MAX_COUNT = 180; //军团祭天达到最大值
  RET_SERVER_USER_OVER_CEILING = 181; //服务器到达承载上线
  RET_CORP_SHOP_NO_LEFT = 182; //军团商城物品已经售完
  RET_DISMISS_CORP_INCD = 183; //解散军团时间CD中
  RET_VIP_DUNGEON_RESET_ERROR= 184; //无法购买日常副本次数
  RET_RECHARGE_BACK_ENDED = 185; //冲返活动已经结束
  RET_RECHARGE_BACK_REQUEST_ILLEGAL = 186; //请求过于频繁
  RET_RECHARGE_BACK_FAILED_FINISHED = 187; //冲返领取失败已经在别的服务器领取过
  RET_RECHARGE_BACK_FAILED = 188; //冲返领取失败
  RET_AWAKEN_ITEM_BAG_FULL = 189; //觉醒道具包裹已满
  RET_NOT_ENOUGH_WHEEL = 190;//转盘积分不足
  RET_NOT_ENOUGH_WHEEL_TOTAL = 191;//转盘总积分不足
  RET_AWAKEN_ITEM_NOT_ENOUGH = 192; //觉醒道具数量不足
  RET_KNIGHT_CANNOT_AWAKEN = 193; //武将不能觉醒
  RET_KNIGHT_AWAKEN_ITEM_POS_ERROR = 194; //武将觉醒道具位置不对
  RET_AWAKEN_ITEM_NOT_EXIST = 195; //觉醒道具不存在
  RET_KNIGHT_AWAKEN_LEVEL_EXCEED_LIMIT = 196; //武将觉醒等级超过限制
  RET_KNIGHT_AWAKEN_ITEM_NOT_COMPLETE = 197; //武将觉醒道具未集齐
  RET_AWAKEN_KNIGHT_NOT_ENOUGH = 198; //武将觉醒材料卡牌数量不足
  RET_AWAKEN_COST_KNIGHT_ERR = 199; //武将觉醒材料卡牌不对
  RET_ONTEAM_KNIGHT_CANNOT_BE_AWAKEN = 200; //出阵武将不可作为觉醒材料
  RET_NOT_ENOUGH_SOUL = 201;// 没有足够神魂
  RET_CORP_REQUEST_MAX = 202;//该军团申请已满
  RET_CORP_DUNGEON_RESET_MAX = 203;//军团副本购买次数达到上限
  RET_TITLE_IN_USE = 204; //称号已装备
  RET_TITLE_IS_EXPIRED = 205; //称号已过期
  RET_NOT_ENOUGH_CONTEST_POINT= 206; //比武勋章不足
  RET_NOT_ENOUGH_CORPPOINT_TOTAL = 207;//军团点数不足
  RET_NOT_ENOUGH_CONTESTWINS_TOTAL = 208;//比武连胜次数不足
  RET_TIME_DUNGEON_NOT_OPEN = 209; //限时副本未开放
  RET_TIME_DUNGEON_IS_COMPLETED = 210; //限时副本挑战已完成
  RET_GAME_TIME_ERROR1 = 211;//转盘活动已结束
  RET_GAME_TIME_ERROR2 = 212;//大富翁活动已结束
  RET_PAY_PRICE_TYPE_NIL = 213;//未知价格类型
  RET_GAME_TIME_ERROR0 = 214;//当前没有活动开启
  RET_USER_CHAT_NOT_EXIST = 215; //在线列表中无此玩家
  RET_MAIL_LONG = 216; //邮件长度超长
  RET_HARD_CHAPTER_ROIT_ERROR = 217; //精英副本状态错误
  RET_BATTLE_TOO_FREQUENT = 218;//战斗请求太频繁
  RET_USER_RECOVER = 219;//玩家数据需要恢复
  RET_CREATE_LIMIT = 220;//同一ip建号数量达到上限
  RET_CLIENT_REQUEST_ERROR = 221; //客户端请求错误
  RET_REBEL_BOSS_NOT_OPEN = 222;//叛军BOSS活动未开启
  RET_CHALLENGE_COUNT_NOT_ENOUGH = 223; //叛军BOSS挑战次数不足
  RET_REBEL_BOSS_NOT_REPEAT_AWARD = 224; //叛军奖励已经领取
  RET_REBEL_BOSS_DIE = 225; //叛军BOSS已死亡
  RET_LOGIN_BLACKCARD_USER = 226;//黑卡封禁用户
  RET_REBEL_BOSS_GROUP_EXIST = 227; //阵营已经选择过
  RET_SPREAD_USER_LVL_LIMIT = 228;//推广玩家等级不够
  RET_SPREAD_MAX_COUNT = 229;//推广玩家达到最大数
  RET_SPREAD_DRAW_ERROR = 230;//推广奖励领取不成功
  RET_SPREAD_NOT_ENOUGH = 231;//推广积分不够
  RET_RICE_ROB_TIME_END = 232; //粮草抢夺时间结束了
  RET_RICE_ROB_NOT_OPEN = 233; //粮草抢夺活动未开放
  RET_USER_NOT_JOIN_RICE_ROB = 234; //玩家未加入粮草战
  RET_RICE_RIVALS_FLUSH_IN_CD = 235; //对手匹配CD中
  RET_RICE_ROB_TOKEN_NOT_ENOUGH = 236; //抢粮剩余次数不足
  RET_RICE_ROB_IN_CD = 237; //抢粮CD时间中
  RET_USER_NOT_IN_RICE_RIVALS = 238; //对方不在对手列表中
  RET_RICE_REVENGE_TOKEN_NOT_ENOUGH = 239; //复仇令不足
  RET_RICE_ENEMY_NOT_EXIST = 240; //仇人不存在
  RET_RICE_ENEMY_CANNOT_REVENGED = 241; //不能复仇
  RET_RICE_ACHIEVEMENT_ID_ERROR = 242; //成就ID错误
  RET_RICE_ACHIEVEMEN_NOT_REACH = 243; //成就未达成
  RET_RICE_ENEMY_NOT_NEED_REVENGE = 244; //不需要复仇
  RET_SHOPTIME_GOODS_NOT_ENOUGH = 245;//限时优惠商店商品不足
  RET_SHOPTIME_ACTIVITY_NOT_START = 246;//限时优惠未开始
  RET_OUTLET_SHOP_UP_LIMIT = 247;//限时优惠商店购买到达上限
  RET_OUTLET_SHOP_REWARD_HAS_AWARD = 248;//限时优惠商店全服福利已经领取
  RET_OUTLET_SHOP_REWARD_CAN_NOT_WELFARE = 249;//限时优惠商店全服福利不能领取
  RET_NOT_RICE_RANK_AWARD_TIME = 250; //非粮草战排行榜领奖时间
  RET_RICE_RANK_AWARD_HAS_RECEIVED = 251; //粮草排行榜奖励已经领取
  RET_RICE_RANK_NOT_AWARD = 252; //粮草排行没有奖励
  RET_RICE_TOKEN_EXCEED_BUY_LIMIT = 253; //粮草令牌购买次数超过限制
  RET_RICE_TOKEN_BUY_PRICE_ERROR = 254; //粮草令牌价格错误
  RET_OUTLET_SHOP_RECHARGE_NOT_FIND_ID = 255;//限时优惠商店未找到充值id
  RET_OUTLET_SHOP_GET_GOODS_ERROR = 256;//限时优惠商店未找到商品
  RET_SPREAD_INVALID_INPUT = 257;//推广非法输入
  RET_REGISTER_SPREAD_ERROR = 258;//已经注册
  RET_REGISTERING_SPREAD    = 259;//正在建立注册关系，请稍等
  RET_REGISTERING_ERROR     = 260;//注册失败(新老玩家不在同一个跨服上)
	RET_REBEL_BOSS_REFRESH_TOO_FREQUENT = 261; //叛军BOSS刷新请求太频繁
	RET_REBEL_BOSS_BATTLE_TOO_FREQUENT = 262; //叛军BOSS战斗请求太频繁
	RET_REBEL_BOSS_REWARD_NO_PERMIT = 263; //奖励不可领取
  RET_REGISTER_CONNECT_CROSS_ERROR     = 264;//注册时连跨服失败
	RET_REBEL_BOSS_CORP_REWARD_NOT_PERMIT = 265;//无法领取，每次活动只可领取1次军团奖励
  RET_RICE_RANK_ACHIEVEMENT_RECEIVED = 266; //粮草战成就奖励已领取
  RET_CORP_CHAPTER_AWARD_FINISHED = 267; //玩家已经领取过军团章节奖励
  RET_CORP_CHAPTER_DUNGEON_NOT_OPEN = 268; //军团副本未开启 不能攻打
  RET_MONTH_FUND_ACTIVITY_CFG_ERROR = 269; //月基金配置出错
  RET_MONTH_FUND_ACTIVITY_NOT_START = 270; //月基金未开始
  RET_MONTH_FUND_NOT_FIND_USER_DATA = 271; //月基金找不到玩家数据
  RET_MONTH_FUND_NOT_IN_AWARD_TIME = 272; //月基金不在领取奖励时间
  RET_MONTH_FUND_AWARD_HAS_ACQUIRED = 273; //月基金奖励已经领取过了
  RET_MONTH_FUND_HAVE_NOT_BUY_BEFORE = 274; //没有购买过月基金
  RET_CUSTOM_ACTIVITY_LEVEL_NOT_MATCH = 275; //可配置活动等级不匹配
  RET_CUSTOM_ACTIVITY_VIP_NOT_MATCH = 276; //可配置活动vip等级不匹配
  RET_MAIL_STRANGER_LEVEL = 277; //给陌生人发邮件等级不足
  RET_MAIL_STRANGER_COUNT = 278; //今天给陌生人发邮件已达到次数限制
  RET_ROOKIE_INACTIVE = 279; //新手光环活动已关闭
  RET_THEME_DROP_ZY_CHANGE			= 280;	//限时抽将阵营已变
  RET_THEME_DROP_TIMES_LACK			= 281;	//限时抽将次数不足
  RET_THEME_DROP_KNIGHT_ERROR		= 282;	//限时抽将主题将不符合
  RET_THEME_DROP_SV_LACK			= 283;	//限时抽将缺少星运值
  RET_GROUP_BUY_PURCHASE_COUNT_LIMIT = 284; //限时团购购买次数不足
  RET_GROUP_BUY_GET_TASK_AWARD_ID_ERROR = 285; //限时团购领奖Id错误
  RET_GROUP_BUY_GET_TASK_AWARD_SELF_SCORE_NOT_ENOUGH = 286; //限时团购领奖个人积分不足
  RET_GROUP_BUY_GET_TASK_AWARD_MAX_SCORE_NOT_ENOUGH = 287; //限时团购领奖全服最高积分不足
  RET_GROUP_BUY_TASK_AWARD_GET_BEFORE = 288;//限时团购奖励已经领取过
  RET_GROUP_BUY_TASK_AWARD_BACK_GOLD_ERROR = 289;//限时团购返还元宝出错
  RET_GROUP_BUY_VIP_LEVLE_NOT_ENOUGH = 290;//限时团购vip等级不足
  RET_GROUP_BUY_LEVLE_NOT_ENOUGH = 291;//限时团购等级不足
  RET_GROUP_BUY_NOT_IN_BUY_TIME = 292;//限时团购不在购买状态
  RET_GROUP_BUY_USER_DATA_ERROR = 293;//限时团购玩家数据异常
  RET_GROUP_BUY_NOT_IN_ACTIVITY_TIME = 294;//限时团购不在活动时间
  RET_GROUP_BUY_NOT_IN_AWARD_TIME = 295;//限时团购不在领奖时间
  RET_GROUP_BUY_USER_DATA_NOT_LOAD = 296;//限时团购玩家数据异常
  RET_PICTURE_FRAME_ID_ERROR		= 297;//更换头像框ID错误
  RET_PET_BAG_FULL = 298; //宠物背包满
  RET_PET_NOT_EXIST = 299; //宠物不存在
  RET_PET_IS_IN_FIGHT = 300; //宠物已上阵
  RET_BATTLE_FIELD_GONEXT_ERROR = 301;//远征进入下一关条件不满足
  RET_BATTLE_FIELD_RESET_ERROR = 302;//远征无法重置
  RET_BATTLE_FIELD_OUTOFDATE = 303;//远征信息过期
  RET_BATTLE_FIELD_AWARD_ERROR = 304;//远征领奖错误
  RET_BATTLE_FIELD_CHALLENGE_ERROR= 305;//远征关卡已经挑战过
  RET_BATTLE_FIELD_LOADING = 306;//远征关卡载入中
  RET_BATTLE_FIELD_SHOP_UP_LIMIT = 307;
  RET_CORP_DUNGEON_AWARD_OVER_DIFF = 308;//军团奖励领取异常 利用工作室
  RET_FIGHT_SCORE_NOT_ENOUGH = 309;//兽魂数量不足
  RET_DELAY_RELOAD_ERROR = 310;//正在努力加载数据，请稍后
  RET_CORP_TECH_ID_NOT_OPEN = 311;//军团科技未开放（军团等级不够）
  RET_CORP_TECH_ID_NOT_EXIST = 312; //军团科技id错误
  RET_CORP_TECH_ID_REACH_MAX_LEVEL = 313; //军团科技达到最高等级
  RET_CORP_TECH_ID_USER_LEVEL_REACH_CORP_LEVEL = 314; //军团科技 玩家科技等级达到军团科技等级
  RET_CORP_TECH_CORP_EXP_NOT_ENOUGH = 315; //军团科技研发，军团经验不足
  RET_CORP_UP_LEVEL_REACH_MAX_LEVEL = 316; //军团升级到达最高等级
  RET_CORP_UP_LEVEL_NOT_ENOUGH_EXP = 317; //军团升级经验不足
  RET_CROSS_PVP_RANK_LIMIT_ERROR = 318; //跨服夺帅竞技场排名条件不符
  RET_CROSS_PVP_INSPIRE_COUNT_LIMIT = 319; //跨服夺帅鼓舞达到上限
  RET_CROSS_RANK_BUSY = 320; //排行榜正在结算
  RET_GAME_TIME_ERROR3 = 321;//奇门八卦活动已结束
  RET_CROSS_PVP_FLOWER_SELF_ILLEGAL = 322; //不能给自己鲜花鸡蛋
  RET_CROSS_PVP_STAGE_ILLEGAL = 323; //请求的战场不存在
  RET_CROSS_PVP_FLOWER_TYPE_ILLEGAL = 324; //鲜花鸡蛋类型错误
  RET_CROSS_PVP_CONFIG_ERROR = 325; //跨服夺帅配置异常
  RET_CROSS_PVP_SLAVE_DATA_ERROR = 326; //跨服夺帅数据异常
  RET_CROSS_PVP_INSPIRE_TYPE_ILLEGAL = 327; //跨服夺帅鼓舞类型错误
  RET_CROSS_PVP_GET_AWARD_ERROR = 328; //跨服夺帅领奖出错
  RET_CROSS_PVP_FLOWER_COUNT_TOO_MUCH = 329; //跨服夺帅投注次数太多
  RET_SPECIAL_HOLIDAY_TASK_NOT_FINISHED = 330; //长假活动，中秋国庆领奖任务未完成
  RET_SPECIAL_HOLIDAY_TASK_NOT_IN_TIME = 331; //中秋国庆活动已过
  RET_SPECIAL_HOLIDAY_TASK_FINISHED = 332; //中秋活动奖励已领取
  RET_SPECIAL_HOLIDAY_SALE_REACH_MAX = 333; //中秋活动兑换达到最大次数
  RET_SPECIAL_HOLIDAY_SALE_PRICE_NOT_ENOUGH = 334; //中秋活动兑换资源不足
  RET_SPECIAL_HOLIDAY_SALE_NOT_IN_TIME = 335; //中秋活动兑换 时间不对
  RET_BULLET_SCREEN_IN_CD = 336; //发送弹幕CD中
  RET_BULLET_SCREEN_CONTENT_ILLEGAL = 337; //发送弹幕内容错误
  RET_BULLET_SCREEN_BUSY = 338; //弹幕系统繁忙
  RET_EXPANSIVE_DUNGEON_STAGE_NOT_OPEN = 339; //关卡未开启
  RET_EXPANSIVE_DUNGEON_CHAPTER_NOT_OPEN = 340; //章节未开启
  RET_HAVE_GET_MAX_STAR = 341; //已三星通关
  RET_HAS_GET_CHAPTER_AWARD = 342; //已经领取过章节奖励
  RET_BATTLE_ON_SLOT_KNIGHT_ERROR = 343; //战斗缺少上阵侠客
  RET_EXPANSIVE_DUNGEON_SHOP_BUY_COUNT_ERROR = 344; //资料片副本商品购买次数不足
  RET_EXPANSIVE_DUNGEON_SHOP_ITEM_NOT_EXIST = 345; //资料片副本商品不存在
  RET_EXPANSIVE_DUNGEON_SHOP_CHAPTER_NOT_FINISH = 346; //资料片副本章节未完成
  RET_FRAGMENT_COMPOUND_NOT_ENOUGH = 347; //合成碎片不足
  RET_OLDER_PLAYER_VIP_AWARD = 348; //已经领取过老玩家VIP奖励
  RET_NOT_OLDER_PLAYER = 349; //不是老玩家
  RET_OLDER_PLAYER_LEVEL_AWARD = 350; //已经领取过老玩家等级奖励
  RET_GET_OLDER_PLAYER_INFO = 351; //已经在获取老玩家数据
  RET_EXPANSIVE_DUNGEON_NOT_START = 352; //资料片副本未开启
  RET_ACCOUNT_BINDING_REWARDED = 353; //社交账号绑定奖励已领取
  RET_CONNECT_CROSS_ERROR = 354; //连跨服失败
  RET_NOT_ENOUGH_KSOUL = 355; //将灵不足
  RET_NOT_ENOUGH_KSOUL_POINT = 356; //灵玉不足
  RET_ACTIVE_DEMAND_NOT_MEET = 357; //条件不足 无法激活
  RET_HAS_ALREAD_ACTIVE = 358; //已经激活
  RET_KSOUL_SHOP_ITEM_BUYED = 359; //灵玉商店物品已购买
  RET_KSOUL_SHOP_ITEM_NOT_EXIST = 360; //灵玉商店物品不存在
  RET_KSOUL_SUMMON_ERROR = 361; //点将错误
  RET_KSOUL_SUMMON_POINT_NOT_ENOUGH = 362; //点将奇遇点不足
  RET_KSOUL_SUMMON_EXCHANGE_MAX = 363; //点将奇遇最大次数
  RET_CITY_ALL_NO_OPEN = 364;		// 城池未都攻下
  RET_CITY_PATROL_CONFIG = 365; // 城池巡逻配置错误
  RET_CITY_TECH_CONFIG = 367;	// 城池科技配置错误
  RET_CITY_TECHUP_TIME_NO_ATTACH = 368;	// 城池科技升级巡逻时间但没达到
  RET_CITY_TECHUP_CONSUME_NO_ATTACH = 369;	// 城池科技升级消耗品不足
  RET_KNIGHT_GOD_NO_ATTACH_POTENTIALITY = 370; // 化神, 武将没有达到化神的潜质
  RET_KNIGHT_GOD_CONFIG	= 371;					// 化神, 化神神脉配置错误
  RET_KNIGHT_GOD_CONSUME_NO_ENOUGH = 372;		// 化神, 化神消耗不足
  RET_KNIGHT_TRANSFORM_NO_SAME_GROUP_LEVEL = 373; // 八卦镜跨阵营转换等级不足
  RET_DAYS_SEVEN_COMP_NO_IN_AWARD_TIME = 374; // 开服七日战力比拼不在领奖时间内
  RET_NOT_ENOUGH_KSOUL_SUMMON_SCORE = 375; // 奇遇点不足
  RET_DAYS_SEVEN_COMP_RANK_IS_EMPTY = 376; // 开服七日战力比拼榜是空
  RET_DAYS_SEVEN_COMP_NO_ON_RANK = 377; // 开服七日战力比拼你不在榜上
  RET_DAYS_SEVEN_COMP_CONF_EROR = 378; // 开服七日战力比配置异常
  RET_DAYS_SEVEN_COMP_HAD_AWARD = 379; // 开服七日战力比拼你已经领奖
  RET_DAYS_SEVEN_COMP_SWITCH_CLOSE = 380; // 开服七日战力比拼活动开关关闭
  RET_SHARE_FRIEND_AWARD_NO_LOAD_CONF = 381; // 新马服FB好友分享配置没有加载
  RET_SHARE_FRIEND_AWARD_NO_LOAD_DATA = 382; // 新马服FB好友分享数据没有加载
  RET_SHARE_FRIEND_AWARD_CONF_ERROR   = 383; // 新马服FB好友分享配置错误
  RET_SHARE_FRIEND_AWARD_HAVE_AWARD	  = 384; // 新马服FB好友分享当日奖励已将领取
  RET_FORTUNE_TODAY_TIMES_MAX		  = 385; // 招财符今日招财次数已达上限
  RET_FORTUNE_BOX_TIMES_NO_ENOUGH	  = 386; // 招财符抽宝箱招财次数不够
  RET_FORTUNE_BOX_ID_NO_EXIST		  = 387; // 招财符抽宝箱id不存在
  RET_FORTUNE_BOX_ID_HAD_AWARD		  = 388; // 招财符抽宝箱id今日已领
  RET_FORTUNE_BOX_AWARD_CONF_ERROR	  = 389; // 招财符抽宝箱配置问题
  RET_GAME_TIME_ERROR4 = 390;//翻牌活动已结束
  RET_SECOND_WEEK_CLOSED = 391; //8-14日活动时间已过
  RET_SECOND_WEEK_AWARDED = 392; //8-14日活动奖励已领
  RET_SECOND_WEEK_ACTIVITY_NOT_FINISHED = 393; //8-14日活动任务未完成
  RET_SECOND_WEEK_SALE_CNT_TO_MUCH = 394; //8-14日活动购买次数超出
  RET_CORP_MSG_BOARD_NO_CONTENT	 = 395;	  //军团留言板没有更多留言
  RET_CORP_MSG_BOARD_CONTENT_SO_LONG	 = 396;	  //军团留言板留言内容过长或为空
  RET_CORP_MSG_BOARD_ONLY_BY_LEADER		= 397;	  //军团留言板置顶功能仅军团长可以
  RET_CORP_MSG_BOARD_CONTENT_ID_NO_EXIST = 398; //军团留言板设置置顶留言Id不存在
  RET_CORP_MSG_BOARD_HAD_TOPED	= 399;	//军团留言板设置置顶留言已经置顶了
  RET_SECOND_WEEK_SALE_SOLD_OUT = 400; //8-14日活动全服限购，已卖完
  RET_CORP_MSG_BOARD_HAVE_NO_TOPED	= 401;	//军团留言板设置置顶留言已经置顶了
  RET_CORP_NOT_EXIST_RED_ENVELOPE = 402; //军团中没有红包
  RET_RED_ENVELOPE_LOADING_NOW = 403; //正在加载红包数据
  RET_RED_ENVELOPE_NOT_LOAD_BEFORE = 404; //未加载红包数据
  RET_RED_ENVELOPE_RDEV_ID_ERROR = 405; //红包id不对
  RET_RED_ENVELOPE_WISH_IS_EMPTY = 406; //红包寄语不能为空
  RET_RED_ENVELOPE_ITEM_NOT_ENOUGH = 407; //红包道具不足
  RET_RED_ENVELOPE_NOT_EXIST = 408; //红包不存在
  RET_RED_ENVELOPE_CAN_NOT_ROB_OTHERS = 409; //不能抢夺其他军团红包
  RET_RED_ENVELOPE_HAVE_ROBBED_BEFORE = 410; //已经领取过
  RET_RED_ENVELOPE_NOT_AVAILABLE = 411; //红包已被领完
  RET_RED_ENVELOPE_OUT_OF_TIME = 412; //红包超时不可用
  RET_RED_ENVELOPE_ACHIEVE_AWARDED = 413; //红包成就奖励已经领取
  RET_RED_ENVELOPE_ACH_GOLD_NOT_ENOUGH = 414; //红包成就未完成
  RET_RED_ENVELOPE_ROB_TIMES_LIMIT = 415; //抢红包次数已用完
  RET_RED_ENVELOPE_USE_TIMES_LIMIT = 416; //发红包次数已用完
  RET_CORP_MSG_BOARD_CD	= 417;	//军团留言板你的留言过于频繁
  RET_MONEY_OVERFLOW = 418; //银两太多，继续增加银两将导致溢出
  RET_LUCKY_BAG_AWARD_ERROR = 419; //领福袋奖励错误
  RET_GEM_NUM_NOT_ENOUGH = 420; //所需宝石不足
  RET_NOT_ENOUGH_GROUP_BUY_COUPON = 421; //团购券不足
  RET_NOT_ENOUGH_TRADE_POINT = 422;//交易币不足
  RET_SACREDWP_NOT_EXIST = 423;//神兵不存在
  RET_SACREDWP_LEVEL_IS_MAX = 424; //神兵已升到最高阶
  RET_SACREDWP_LEVEL_UP_ITEM_NOT_ENOUGH = 425; //神兵进阶材料不足
  RET_SACREDWP_HAS_EQUIPED = 426; //神兵已装备
  RET_CONSUMEWP_NOT_MATCH = 427; //不是相同类型神兵
  RET_CONSUMEWP_LEVEL_TOO_BIG = 428; //消耗的神兵等级太高
  RET_SACREDWP_ATTR_HAS_LOCKED = 429;//神兵属性已上锁
  RET_SACREDWP_ATTR_HAS_UNLOCKED = 430;//神兵属性未上锁
  RET_SACREDWP_NO_ATTR_TO_BAPTIZE = 431;//没有可以洗炼的属性
  RET_NOT_ENOUGH_BAPTIZE_STONE = 432; //洗炼石不足
  RET_SACREDWP_BAG_FULL = 433; //神兵背包满
  RET_SEVEN_DAYS_DAILY_SALE_REACH_MAX = 434; //七日活动商店购买次数不足
  RET_SEVEN_DAYS_DAILY_SALE_NOT_IN_SELL_TIME = 435; //七日活动商店商品不在购买时间
  RET_FORBID_CREATE_USER_IN_MERGE = 436; //合服的服务器不允许创建角色
  RET_SM_LOCK_NOT_RELEASE = 437; //交易锁未开启
  RET_SM_PWD_ERROR = 438; //交易密码错误
  RET_SM_LOCK_IN_CD = 439; //交易锁CD中
  RET_NOT_IN_WEEK_FUND_TIME = 440;// 不在周基金活动时间
  RET_WEEK_FUND_AWARD_ACQUIRED = 441;// 周基金奖励已经领取过
  RET_WEEK_FUND_NOT_ACTIVATED = 442;// 周基金未激活
  RET_UNLOAD_GEM_EXCEPTION = 443;//宝石卸载异常，请联系客服
  RET_SACREDWP_BAPTIZE_DAILY_TASK_AWARD = 444;//神兵洗炼每日奖励已领取
  RET_OPTIONS_ERROR = 445;//一键叛军参数错误
  RET_NOT_IN_LABOUR_DAY_TIME = 446;//不在五一活动期间
  RET_OPERATOR_NOT_HAVE_THIS_ACTIVITY = 447; //运营商没有该活动
  RET_NO_MORE_LABOUR_DAY_AWARD = 448;//五一活动奖励已领取
  RET_NOT_IN_YYB_521_AWARD_TIME = 449;//不在521领奖时间
  RET_NOT_PARTICIPATE_ACTIVITY_BEFORE = 450; //未参与活动
  RET_GET_THE_AWARDS_BEFORE = 451; //已领取奖励
  RET_VETERAN_ERROR_TIME = 452;//时间错误
  RET_VETERAN_RECAHRGE_NOT_ENOUGH = 453;//充值金额不足
  RET_MAX_BUY_NUM = 454;//购买数量达到最大
  RET_ALREADY_HAS_HORSE = 455; //已有同名战马
  RET_COMPOUND_MORE_THAN_ONE_HORSE = 456; //同名战马只能合成一个
  RET_HORSE_COMPOSE_NOT_ACTIVE = 457; //战马图鉴未激活
  RET_HORSE_COMPOSE_HORSE_STAR_NOT_ENOUGH = 458; //战马星数不足
  RET_NOT_ENOUGH_HORSE_SOUL = 459; //马魂不足
  RET_LOCAL_VETERAN_FINISH = 460;//本服老玩家回归结束
  RET_WELFARE_GOT_BEFORE = 461;//福利已经领取
  RET_HORSE_CONJURE_CNT_NOT_ENOUGH = 462; //相马次数不足
  RET_HORSE_LEVEL_TARGET_NOT_ENOUGH = 463; //驯马术好感度不足
  RET_HORSE_LEVEL_TARGET_HIT_LIMIT = 464; //驯马术达到最大值
  RET_HORSE_COMPOSE_HIT_MAX_LEVEL = 465; //战马图鉴已到最高级
  RET_HORSE_STAR_HIT_MAX = 466; //战马星级已到最高
  RET_HORSE_FEED_ITEM_NOT_ENOUGH = 467; //喂养战马食物不足
  RET_HORSE_LEVEL_HIT_MAX = 468; //战马已到最高等级
  RET_PLAY_CD = 469; //请勿使用第三方加速软件
  RET_CORP_ACTIVE_MISSION_PROGRESS_NOT_ENOUGH = 470; //军团活跃，进度不足
  RET_CORP_ACTIVE_MISSION_AWARDED = 471; //军团活跃，任务已完成
  RET_CORP_ACTIVE_INVALID_MISSION_ID = 472; //军团活跃，任务id非法
  RET_CORP_ACTIVE_LOTTERY_OUT_DATE = 473; //军团勋章抽奖时间已过
  RET_CORP_ACTIVE_LOTTERY_NOT_IN_CORP_LAST_WEEK = 474; //军团勋章抽奖，上周不在军团
  RET_CORP_ACTIVE_LOTTERY_PLAYED = 475; //军团活跃已经抽奖过了
  RET_NOT_ENOUGH_CORP_MEDAL = 476; //军团勋章不足
  RET_CORP_ACTIVE_PREV_MISSION_NOT_FINISHED = 477; //军团活跃，前置任务未完成
  RET_SACREDWP_SOULTAIN_LOST_NIL = 478; //没有遗漏的神兵魂炼属性
  RET_NOT_ENOUGH_CRYSTAL = 479;//水晶不足
  RET_CORP_RICE_NOT_OPEN = 480; // 军团夺粮，没有开
  RET_CORP_RICE_CD = 481; // 军团夺粮，cd中
  RET_CORP_RICE_CORP_DISAPPEAR = 483; // 军团粮草，军团消失
  RET_CORP_RICE_USER_QUIT_CORP = 484; // 军团粮草，玩家退出军团了
  RET_CORP_RICE_ENEMY_OUT_OF_DATE = 485; // 军团粮草，仇人过期
  RET_CORP_RICE_NOT_ENOUGH_ATTACK_CNT = 486; // 军团粮草，没有攻打次数
  RET_CORP_RICE_NO_REVENGE_CNT = 487; // 军团粮草，没有复仇次数
  RET_CORP_RICE_MAX_RICE_NOT_ENOUGH = 488; // 军团粮草，最大粮草不足
  RET_CORP_RICE_ACHIEVEMENT_FINISHED = 489; // 军团粮草，成就已领
  RET_CORP_RICE_ANNOUNCE_TOO_LONG = 490; // 军团粮草，宣言太长
  RET_CORP_RICE_NO_ASSIST_CNT = 491; // 军团粮草，没有协助次数
  RET_CROSS_REBEL_BOSS_RANK_NOT_OPEN = 492; // 跨服叛军boss排行榜未开启
  RET_HORSE_CAN_NOT_REBORN = 493; // 战马不能重生
  RET_NEW_HOLIDAY_LOTTERY_COUNT_NOT_ENOUGH = 494; // 抽奖次数不足
  RET_NEW_HOLIDAY_NOT_IN_ACTIVITY_TIME = 495; // 不在活动期间
  RET_NEW_HOLIDAY_NOT_IN_LOTTERY_TIME = 496; // 不在抽奖活动期间
  RET_NEW_HOLIDAY_LOTTERY_BACK_AWARDED = 497; //累抽福利已领取
  RET_NEW_HOLIDAY_ALREADY_SIGN_IN_TODAY = 498; //今日已签到
  RET_NEW_HOLIDAY_NOT_IN_EXCHANGE_TIME = 499; // 不在兑换活动期间
  RET_NEW_HOLIDAY_EXCHANGE_NUM_TOO_MORE = 500; // 兑换数量过多
  RET_NEW_HOLIDAY_EXCHANGE_LEVEL_NOT_SUITABLE = 501; //兑换等级不对
  RET_PET_CANNOT_SWALLOW = 502; //宠物不可吞噬
  RET_PET_SWALLOW_LEVEL_LIMIT = 503; //宠物吞噬等级已满
  RET_PET_FRAGMENT_CANNOT_SWALLOW = 504; //宠物碎片不可以被吞噬
  RET_NEW_HOLIDAY_GET_FRIENDS_INFO_FAILED = 505; //获取好友信息失败
  RET_NEW_HOLIDAY_ACTION_AWARDED = 506; //行为奖励已领取
  RET_NOT_ENOUGH_SKILL_TREE_POINT = 507; //技能点不足
  RET_HOME_AWARD_ERROR = 508; //家园官衔奖励异常
  RET_HOME_INFO_ERROR = 509; //家园留言长度异常
  RET_HOME_SKILL_PRE_ERROR = 510; //家园技能前置条件不满足
  RET_CLIENT_HOME_TASK_AWARD_ERROR = 511; //家园任务领奖数据异常
  RET_HOME_TASK_PROGRESS_ERROR = 512; //家园任务进度异常
  RET_NIGHTMARE_PRE_DUNGEON_NOT_PASSED = 513; //噩梦副本前置关卡未通过
  RET_NIGHTMARE_LOCK_TYPE_NOT_PASS = 514; //噩梦副本关卡条件未满足
  RET_NIGHTMARE_CHALLENGE_CNT_USED_UP = 515; //噩梦副本次数用光
  RET_NIGHTMARE_CHAPTER_BOX_OPENED = 516; //噩梦副本，章节宝箱已开
  RET_NIGHTMARE_STAR_NOT_ENOUGH = 517; //噩梦副本，星数不足
  RET_NIGHTMARE_STAR_AWARD_ALREADY_GET = 518; //噩梦副本，星数奖励已领取
  RET_ARENA_CHALLEAGE_IN_CD_TIME = 519; //竞技场挑战CD中
  RET_CORP_CAVE_ATTACK_NUM_NOT_ENOUGH = 520; //军团谜窟挑战次数不足
  RET_CORP_CAVE_NOT_START = 521; //军团谜窟未开始
  RET_PRIVATE_CHAT_ERROR = 522; //玩家接受陌生消息超过限制，请加好友或稍后再试
  RET_TEAM_PVP_REPORT_OVERDUE = 523; //组队PVP录像过期
  RET_DAILY_REFRESH_NUM_LIMIT = 524; //每日刷新次数已用完
  RET_KSOUL_GROUP_NOT_ACTIVE_BEFORE = 525; //阵图未激活
  RET_FAST_GAIN_NUM_LIMIT = 526; //快速收获次数达到上限
  RET_USER_IS_NOT_ENEMY = 527; //不是你的敌人
  RET_NOT_ENOUGH_CITY_DEFENSE_SCORE = 528;//物资不足
  RET_CITY_DEFENSE_NOT_OPEN = 529;//攻城略地暂未开放
  RET_PROTECT_WING_CAN_NOT_EQUIP = 530;//护佑神翼不能上阵
  RET_PROTECT_WING_CAN_NOT_REBIRTH = 531;//护佑神翼不能重生
  RET_PROTECT_WING_CAN_NOT_UP_LEVEL = 532;//护佑神翼不能强化
  RET_PROTECT_WING_CAN_NOT_SET_GEM = 533;//护佑神翼不能镶嵌宝石
  RET_HAS_SET_PROTECT_WING = 534;//已经设置护佑神翼
  RET_HAS_BE_USED_PROTECT_WING = 535;//已经被设置成护佑神翼
  RET_HAS_NOT_SET_PROTECT_WING = 536;//未设置护佑神翼
  RET_VOICEMAIL_CD = 537; //语音cd中
  RET_GEM_WING_CAN_NOT_USE_PROTECT = 538;//带宝石的神翼不能护佑
  RET_SPECIAL_QUESTIONNAIRE_ITEM_NOT_EXIST = 539; //特殊问卷道具不足
  RET_SPECIAL_QUESTIONNAIRE_ITEM_IS_EXPIRE = 540; //特殊问卷道具已过期
  RET_SPECIAL_QUESTIONNAIRE_ITEM_HAS_USED = 541;  //特殊问卷道具已使用过
  RET_SPECIAL_HOLIDAY_GOD_NOT_START = 542;    //神像铸造未开始
  RET_NOT_ENOUGH_SOUL_CRYSTAL = 543;//魂晶不足
  RET_NOT_ENOUGH_CITY_WAR_POINT = 544;//国战勋章不足
  RET_COMPOUND_MORE_THAN_ONE_RUNESTONE = 545; //合成超过1个兵符
  RET_ALREADY_HAS_RUNESTONE = 546; //已经拥有这种兵符
  RET_RUNESTONE_INFO_NOT_FOUND = 547; //此种兵符不存在
  RET_WAR_SOUL_NUM_NOT_ENOUGH = 548; //战魂数量不足
  RET_RAW_MATERIALS_NOT_ENOUGH = 549; //原材料不足
  RET_COMPOUND_FAILED = 550; //合成失败
  RET_THIS_GOOD_NOT_ENOUGH = 551; //商品已售完
  RET_SHOPPING_FAILED = 552; //购买失败
  RET_REFRESH_NUM_NOT_ENOUGH = 553; //刷新次数不足
  RET_CITY_WAR_SCORE_NOT_ENOUGH= 554; //国战积分不足
  RET_WAR_SOUL_NOT_EXIST = 555; //战魂不存在
  //刷新商店
  RET_FLUSH_SHOP_FREE_NUM_NOT_ENOUGH = 556; //刷新商店免费次数不足
  RET_FLUSH_SHOP_IS_LOADING = 557; //刷新商店加载中
  RET_FLUSH_SHOP_GOODS_IS_SELLOUT = 558; //刷新商店的商品已经销售完
  RET_FLUSH_SHOP_GOODS_HAS_BUYED = 559; //刷新商店的商品已经买过
  RET_FLUSH_SHOP_GOODS_IS_CHANGED = 560; //刷新商店的商品已经变化
  RET_FLUSH_SHOP_TIMES_EXCEED_LIMIT = 561; //刷新次数超过限制
  RET_CAN_NOT_EQUIP_SAME_KIND_WAR_SOUL = 562; //不能镶嵌同种类型战魂

  RET_NOT_ENOUGH_GOLD_WHEEL = 563; //金色转盘积分不足
  RET_NOT_ENOUGH_HOME_COIN = 564; //家园银币不够
  RET_NOT_ENOUGH_HOME_WOOD = 565; //家园木头不够

  RET_CAN_NOT_ADD_SELF_SERVER = 566; //不能添加自己服好友
  RET_CAN_NOT_RECOMMEND_FRIEND = 567; //未找到可推荐好友
  RET_HAS_ALREADY_IN_BLACKLIST = 568; //已经在黑名单
  RET_CORP_MSG_BOARD_DEL_PRIVILEGE_LIMITED = 569; //军团留言板删除留言操作权限限制(职位大于等于副军团)
  RET_CORP_MSG_BOARD_DEL_TOPED = 570; //军团留言板 不可删除置顶留言
  //名将
  RET_COMPOUND_MORE_THAN_ONE_FAMOUS = 571; //名将不能添加多余一个
  RET_FAMOUS_INFO_NOT_FOUND         = 572; //名将未配置
  RET_ALREADY_HAS_FAMOUS            = 573; //名将已存在
  RET_FAMOUS_NOT_FOUND              = 574; //名将不存在
  RET_FAMOUS_STAR_LIMIT             = 575; //名将已达最高星级
  RET_FAMOUS_LEVEL_INFO_NOT_FOUND   = 576; //名将图鉴未配置
  RET_FAMOUS_LEVEL_LIMIT            = 577; //名将图鉴已达最高等级
  RET_FAMOUS_STAR_NOT_ENOUGH        = 578; //名将星级不足
  RET_FAMOUS_FORMATION_LIMIT        = 579; //名将上阵数量已达上限
  RET_FAMOUS_REBIRTH_AWARD_NIL      = 580; //名将不可重生

  //好友度
  RET_FRIEND_FAVOR_HAS_SEND = 581;  //该好友已赠送过礼物
  RET_FRIEND_FAVOR_ALL_SEND = 582;  //好友已全部赠送过礼物
  RET_FRIEND_FAVOR_RCV_OVER = 583;  //今日收礼次数已用完
  RET_FRIEND_FAVOR_NO_GIFT  = 584;  //无好友礼物
  RET_FRIEND_FAVOR_NOT_ENOUGH = 585; //今日好友度不足，不可赠送

  RET_NOT_ENOUGH_FAMOUS_POINT = 586; //名将点不足
  RET_NOT_ENOUGH_FAMOUS_SOUL = 587; //名将魂不足
  RET_LEVEL_GIFT_BUY_LIMIT = 588; //等级礼包购买次数限制
	RET_NO_TEAM = 589;	//不在队伍中

  //积分兑礼活动
  RET_SCORE_EXCHARGE_NOT_IN_ACTIVITY_TIME = 590; //活动未开启
  RET_SCORE_EXCHARGE_ADD_ZERO = 591; //无可领取的积分
  RET_SCORE_EXCHARGE_GOT_LIMIT = 592; //积分领取已达上限
  RET_SCORE_EXCHARGE_NUM_TOO_MORE = 593; //兑换道具已达上限
  RET_NOT_ENOUGH_RECHARGE_SCORE = 594; //充值积分不足
  RET_NOT_ENOUGH_ACTION_SCORE = 595; //活跃积分不足

  //通天试炼
  RET_NOT_ENOUGH_SKYTEST_SCORE = 596; //通天试炼积分不足
  RET_SKYTEST_NOT_IN_ACTIVITY_TIME = 597; //通天试炼活动未开启
  RET_SKYTEST_HAS_ENTER = 598; //通天试炼已进入
  RET_SKYTEST_NOT_ENTER = 599; //通天试炼未进入
  RET_SKYTEST_TIMES_NOT_ENOUGH = 600; //通天试炼次数不足
  RET_SKYTEST_SELECT_ENTRY_ERROR = 601; //选择指路人失败
  RET_SKYTEST_BUYED_LIMIT = 602; //通天试炼购买次数达到上限
  RET_SKYTEST_HAS_INIT_FLOOR = 603; //通天试炼当层已开启
  RET_SKYTEST_EVENT_ERROR = 604; //通天试炼事件配置错误
  RET_SKYTEST_ITEM_NOT_ENOUGH = 605; //通天试炼道具不足
  RET_SKYTEST_ITEM_NIL = 606; //通天试炼道具配置错误
  RET_SKYTEST_HAS_BUFF = 607; //已存在同类型的buff
  RET_SKYTEST_DEL_BUFF_EMPTY = 608; //当前不需要使用它
  RET_SKYTEST_NOT_SELECT_ENTRY = 609; //未选择指路人
  RET_SKYTEST_HAS_SELECT_ENTRY = 610; //已选择指路人
  RET_SKYTEST_MONSTERCARD_EVENT_ERROR = 611; //怪物卡事件错误
  RET_SKYTEST_SHOP_BUYED_LIMIT = 612; //商品购买达到上限
  RET_SKYTEST_SHOP_ERROR = 613; //通天试炼商店配置错误
  RET_SKYTEST_PLAYER_NIL = 614; //通天试炼读取玩家信息错误
  RET_SKYTEST_FLOOR_NOT_INTIME = 615; //通天试炼关卡未解封
  RET_SKYTEST_FLOOR_NOT_PASSED = 616; //通天试炼关卡未通关
  RET_SKYTEST_FLOOR_AWARD_GOT = 617; //通天试炼关卡奖励已领取
  RET_SKYTEST_FLOOR_AWARD_ALL_GOT = 618; //通天试炼关卡奖励已全部领取
  RET_SKYTEST_ASKHELP_LIMIT = 619; //求援达到上限
  RET_SKYTEST_HELPUSER_LIMIT = 620; //协助达到上限
  RET_SKYTEST_USER_NOT_ONLINE = 621; //协助玩家不在线

  //明星送礼
  RET_STAR_GIFT_NOT_OPEN = 622;//明星送礼活动未开启
  RET_NOT_IN_STAR_LIKE_TIME = 623;//明星点赞已结束
  RET_CROSS_SERVER_IS_BUSY = 624;//服务器繁忙
  RET_STAR_PIECE_HAS_AWARDED = 625;//明星翻牌奖励已领取
  RET_STAR_GIFT_USER_LEVEL_NOT_ENOUGH = 626;//玩家等级不足
  RET_CURRENT_PIECE_CAN_NOT_LIKE = 627;//当前格子不可点赞
  RET_REQUEST_TOO_FREQUENTLY = 628;//点赞请求太频繁
  RET_HOMEPRO_COLLEGE_LEVEL_NOT_ENOUGH = 629; //学院等级不足
  RET_SKYTEST_BUFF_FULL = 630; //buff已满

  RET_NOT_ENOUGH_SALARY = 631; //官银不足
  RET_NOT_ENOUGH_RICE = 632; //粮草不足
  RET_HOMEPRO_SHOP_GET_GOODS_ERROR = 633; //交易阁商品错误
  RET_HOMEPRO_SHOP_LEVEL_NOT_ENOUGH = 634; //交易阁等级不足
  RET_HOMEPRO_SHOP_UP_LIMIT = 635; //交易阁购买达到上限
  RET_HOMEPRO_SALARY_GOT = 636; //今日俸禄已领取
  RET_HOMEPRO_SALARY_INFO_NIL = 637; //俸禄配置错误
  RET_HOMEPRO_DEFENSE_ALREADY_MAX = 638; //城防值已满
  RET_HOMEPRO_TECH_LEVEL_NOT_ENOUGH = 639; //学院技能等级不足

	//传奇(转职)系统 3.9.0
	RET_LEGEND_NOT_RED_KNIGHT = 640;	//非主角或红将不可培养
	RET_LEGEND_NODE_MAX_LEVEL = 641;	//该节点已满级
	RET_LEGEND_NODE_TASK_LACK = 642;	//不满足升级条件(任务未完成)
	RET_LEGEND_NODE_PARENT_INACTIVE = 643;	//不满足升级条件(未激活上层节点)
	RET_LEGEND_NODE_PATH_ERROR = 644;	//节点不属于本道路
	RET_LEGEND_NOT_MODULE_KNIGHT = 645;	//该武将不可培养(需要特定红将)
	RET_LEGEND_NOT_MODULE_ERROR = 646;	//模块数据错误(配表错误)
	RET_LEGEND_IS_ACTIVE = 647;					//已激活转职树
	RET_LEGEND_NOT_GOLDEN = 648;				//非金将不可进行转职

	//七星坛系统 3.9.5
	RET_DIPPER_GOTTEN_AWARD = 650;						//奖励已领取
	RET_DIPPER_AWARD_ID_NOT_MATCH = 651;			//奖励不属于当前经验条
	RET_DIPPER_SACRIFICE_COUNT_LACK = 652;		//祭祀次数不足
	RET_DIPPER_TASK_NOT_YESTERDAY = 653;			//非昨日任务
	RET_DIPPER_TASK_STATE_CANNOT_BUY = 654;		//任务不可购买
	RET_DIPPER_TASK_NOT_TODAY = 655;					//非今日任务
	RET_DIPPER_TASK_STATE_CANNOT_GET = 656;		//任务不可领取
	RET_DIPPER_TASK_NOT_FINISHED = 657;				//任务未完成
	RET_DIPPER_ACT_NOT_OPEN = 658;						//非活动时间

  //团购修改 4.0.0
  RET_GROUP_BUY_MD5_SAME = 659; //团购配置md5相同

	//军团联盟 4.0.0
	RET_CORPALLIANCE_LEVEL_LIMIT	= 660;	//创建等级不足
	RET_CORPALLIANCE_NAME_ILLEGAL = 661;	//名字非法
	RET_CORPALLIANCE_NAME_REPEAT = 662;		//名字重复
	RET_CORPALLIANCE_NO_ALLIANCE = 663;		//未加入联盟
	RET_CORPALLIANCE_TASK_CFG_ERROR = 664;	//获取任务配置错误
	RET_CORPALLIANCE_AWARD_LEVEL_ERROR = 665;	//非联盟对应等级的奖励
	RET_CORPALLIANCE_AWARD_EXP_ERROR = 666;	//经验值不满足，不可领取
	RET_CORPALLIANCE_AWARD_GOTTEN = 667;	//奖励已领取
	RET_CORPALLIANCE_TASKID_ERROR = 668;	//无效的任务
	RET_CORPALLIANCE_TASK_NOT_FINISHED = 669;	//领取任务奖励，任务未完成
	RET_CORPALLIANCE_REFRESH_GOTTEN = 670;	//刷新任务，奖励已领取不可刷新
	RET_CORPALLIANCE_WORLD_WAR_DURATION = 671;	//天下玩法期间不可操作(退出，踢出等操作)
	RET_CORPALLIANCE_APPLY_QUIT_LIMIT = 672;	//主动退出联盟，24小时内不可加入任何联盟

	//宠物玄阵 4.1.0
	RET_PET_CANNOT_FORMATION	= 673;	//宠物不能玄阵
	RET_PET_FORMATION_LEVEL_LIMIT = 674;  //宠物玄阵等级限制
	RET_PET_FRAGMENT_CANNOT_FORMATION = 675;  //宠物碎片不能被玄阵

	RET_USER_VIP_LEVEL_NOT_ENOUGH = 676;	//vip等级不足
	RET_USER_FFK_LEVEL_NOT_ENOUGH = 677;	//王者争霸段位不足
	RET_USER_EXT_LEVEL_NOT_ENOUGH = 678;	//荣耀等级不足
	RET_CANNOT_SET_IN_FFK_TIME = 679;			//王者争霸活动中不可设置
  RET_NOT_ENOUGH_ROAD_POINT = 680; //传奇点不足
  RET_NOT_ENOUGH_ROAD_ASK_IN_CD = 681; //传奇之路请求道具CD中
  RET_ROAD_QUESTION_ERROR = 682; //答题错误
  RET_NOT_ENOUGH_ROAD_ITEM = 683; //传奇之路道具不足
  RET_NOT_ENOUGH_ROAD_FRAG = 684; //传奇之路碎片不足

  //神兵红色魂炼 4.1.70
  RET_RED_SOUL_TRAIN_ATTR_MAX = 685; //红色魂炼属性已满
  RET_RED_SOUL_TRAIN_FV_NOT_ENOUGH = 686; //红色魂炼评分不足
  //直冲活动
  RET_INDIERECHARGE_ACTIVITY_NOT_OPEN = 687; //活动未开始
  RET_INDIERECHARGE_TASK_NOT_COMPLETE = 688; //任务未完成

  //新签到
  RET_DAILY_SIGN_TYPE_DATE_NOT_MATCH = 689;  //类型对应的日期不匹配
  RET_DAILY_SIGN_SIGN_ALREADY = 690;            //签到次数到上限

	//暗金神翼
	RET_WING_STAR_QUA_LIMIT = 691;	//非暗金神翼不可升星
	RET_WING_STAR_FULL = 692;	//神翼星级已满

  //制霸骁勇榜
  RET_NOT_EXIST_BRAVE_LIST_VIDEO = 693;	//挑战录像不存在
  RET_BRAVELIST_ROOM_DATA_LOADING = 694; //房间数据正在加载
  RET_BRAVE_LIST_ROOM_INFO_ERROR = 695;	//房间信息错误
  RET_BRAVE_LIST_STATUE_ERROR = 696; //活动状态不允许当前操作
  RET_BRAVE_LIST_NO_FIND_ROOM = 697;  //未找到房间信息
  RET_BRAVE_LIST_BATTLE_ERR = 698; //挑战时服务器错误
  RET_BRAVE_LIST_IN_ROCKET_CD = 699; //直升挑战CD中
  RET_FAST_ARENA_RANK_NOT_REACH = 700; //不能扫荡排名比自己高的玩家
  RET_FAST_ARENA_ITEM_NOT_ENOUGH = 701; //精力丹不足停止扫荡
  RET_FAST_ARENA_SPIRIT_NOT_ENOUGH = 702; //精力不足停止扫荡
  RET_FAST_ARENA_ITEM_BAG_FULL = 703; //背包满停止扫荡
	RET_FUNCTION_CLOSED = 704;	//当前活动已被关闭

  //老玩家回归三周年活动
  RET_LOCAL_VETERAN_EXTRA_GROUP_ZERO = 705; //未参加老玩家回归三周年活动
  RET_LOCAL_VETERAN_EXTRA_SELL_OVER = 706; //老玩家回归三周年贩售时间结束了
  RET_LOCAL_VETERAN_EXTRA_TASK_NOT_COMPLETE = 707; //老玩家回归三周年任务未完成

	//三国庆典
	RET_CELEBRATION_CLOSE = 708;//三国庆典未开启
	RET_CELEBRATION_CHECK_ERROR = 709; //奖励领取失败
	RET_CELEBRATION_NOT_ENOUGH = 710; //兑换所需道具不足
	RET_CELEBRATION_LEVEL_LIMIT = 711; //等级限制
	RET_CELEBRATION_BUY_TOO_MANY = 712; //剩余购买数量不足
	RET_CELEBRATION_SHOPPING_ERROR =713; 	//购买失败
	RET_CELEBRATION_WANT_USER_DATA = 714;	//玩家数据还没加载完

  RET_BRAVE_LIST_CHANGE_ROOM_EXCEED_LIMIT = 715; //骁勇榜换房间次数超过限制
  RET_BRAVE_LIST_CANNOT_CHANGE_ROOM = 716; //当前段位不可以换房间
  RET_BRAVE_LIST_CHANGE_ROOM_ERROR = 717; //骁勇榜换房间失败
  RET_BRAVE_LIST_CHANGE_ROOM_TIME_ERROR = 718; //骁勇榜结算前10分钟不能换房间
  RET_INVALID_CHAT = 719; //聊天内容含广告，黄色，敏感信息等
  RET_CHAT_FILTER_SERVER_BUSY = 720; //聊天过滤系统繁忙
  RET_CHAT_FILTER_SERVER_ERROR = 721; //聊天过滤系统错误
  RET_RESOURCE_NOT_ENOUGH = 722; //积分资源数量不足
  RET_FAMOUS_CANNOT_PROTECT = 723; //名将不能护佑
  RET_FAMOUS_CANNOT_PROTECTED = 724; //名将主将不能被护佑
  RET_FAMOUS_FORMATION_NOT_CHANGE = 725; //名将位置没有变化
  RET_SM_GET_GOODS_TOO_FREQUENT = 726; //拉取交易所信息太频繁
  RET_SERVER_REJECT_CREATE = 727; //服务器禁止创角
  RET_LOGIN_IP_LIMIT = 728; //同ip登录人数限制
  RET_KNIGHT_GOLDEN_COUNT_TO_MAX = 729;//试炼任务条件数已达最大
  RET_RUNE_BOOK_NOT_UNLOCK = 730; //符文书未解锁
  RET_RUNE_NOT_ENOUGH = 731; //符文数量不足
  RET_RUNE_LEVEL_IS_FULL = 732; //符文等级满级
  RET_RUNE_BOOK_CANNOT_UNLOCK = 733; //符文书解锁条件未达成
  	RET_GUIDE_TASK_NOT_COMPLETE = 734;	//新向导成就任务未完成
	RET_GUIDE_TASK_DATA_ERROR = 735;//新向导成就，数据异常
	RET_GUIDE_TASK_CHECKED = 736; 	//新向导成就奖励已领取
	RET_GUIDE_BROAD_REPEATED = 737;	//新向导讨论版 已有一条评论
	RET_GUIDE_BROAD_TALK_NOT_EXIST = 738; //新向导讨论版 未找到评论
  RET_FRAME_IS_EXPIRED = 739; //头像框已过期
  RET_CHAT_BUBBLE_IS_EXPIRED = 740; //聊天气泡已过期
  RET_PET_FRAG_NOT_ENOUGH_TO_FORMATION = 741; //宠物玄阵升阶碎片不足
	RET_REBEL_BOSS_CROSS_CLOSE = 742; //跨服叛军boss关闭
	RET_REBEL_BOSS_CROSS_BATTLE_ERROR = 743; //跨服叛军boss战斗时错误
	RET_REBEL_BOSS_CROSS_CANNOT_CHALLENGE = 745; //跨服叛军boss玩家实力不够，不能打
  RET_TREASURE_CONNOT_UPGRADE_STAR = 746; //宝物不可升星
  RET_TREASURE_CONNOT_PACKAGE = 747; //宝物不可打包
  RET_WORLD_CUP_GUESS_NOT_OPEN = 748; //世界杯竞猜活动未开放
  RET_WORLD_CUP_GUESS_NOT_LOAD = 749; //竞猜数据未加载
  RET_WORLD_CUP_NOT_GUESS_TIME = 750; //非竞猜时间
  RET_WORLD_CUP_GUESS_TEAM_IS_OUT = 751; //所猜球队已被淘汰
  RET_WORLD_CUP_GUESS_REPEATED = 752; //重复竞猜
  RET_WORLD_CUP_USER_NO_GUESS = 753; //玩家未参加竞猜
  RET_WORLD_CUP_GAME_AWARD_RECEIVED = 754; //单场奖励已经领取
  RET_WORLD_CUP_GAME_GUESS_TEAM_OUT = 755; //支持球队不争气
  RET_WORLD_CUP_MERIT_AWARD_RECEIVED = 756; //成就奖励已经领取
  RET_WORLD_CUP_MERIT_GUESS_TIMES_NOT_ENOUGH = 757; //竞猜成功次数不足

	RET_SHURA_FIELD_REFRESH_FAIL = 758; //刷新失败
	RET_SHURA_FIELD_NO_LIFE = 759; //武运值为零，不能操作
	RET_SHURA_FIELD_SEARCHING = 760; //正在搜索新的敌人
	RET_SHURA_FIELD_CHALLENGING = 761; //当前正在挑战中
	RET_SHURA_FIELD_AWARED_NOT_MET = 762; //奖励领取条件不满足
	RET_SHURA_FIELD_DATA_LOADING = 763; //修罗道场数据加载中，请稍后
	RET_SHURA_FIELD_PK_BETON_REPEAT = 764; //今日已竞猜
	RET_SHURA_FIELD_PK_BETON_NIL = 765; //无对决信息，不可竞猜
	RET_SHURA_FIELD_PK_BETON_EXPIRED = 766; //对决已过期，正生成新的对决
	RET_SHURA_FIELD_PK_VIEW_REPORT_FAIL = 767; //回看对决战斗失败，无法获取战斗信息
	RET_SHURA_FIELD_PK_BETON_NOT_INTIME = 768; //非竞猜时间段
	RET_SHURA_FIELD_REFRESH_CD = 769; //刷新CD中
	RET_SHURA_FIELD_CHALLENG_CD = 770; //挑战CD中
	RET_SHURA_FIELD_AREA_NOT_OPEN = 771; //当前战区未满足开启条件
	RET_SHURA_FIELD_RESET = 772;	//正在打扫战场，将于周一0点10分重新开放
	RET_SHURA_FIELD_SEARCH_FAIL = 773;	//刷新失败，请重试
	RET_REBEL_BOSS_CROSS_ON_POSITION_NO_CHALLENGE = 774; //台上玩家禁止攻击其他人
	RET_LIANDONG_NOT_OPEN = 775; //联动活动未开启
	RET_JIGSEW_AWARD_RECEIVED = 776; //拼图奖励已领取

	RET_NOT_ENOUGH_MYSTERY_COIN = 777; //秘境点数不足
	RET_MYSTERY_MONSTER_DATA_ERR = 778; //秘境怪物数据异常
	RET_MYSTERY_MAKE_MONSTER_DATA_FAIL = 779; //生成怪物数据失败
	RET_MYSTERY_COMPOSE_ERR = 780; //幸运组合数据异常
	RET_MYSTERY_PURCHASE_COUNT_NOT_ENOUGH = 781; //购买次数不足
	RET_MYSTERY_NO_PLAYER = 782; //未找到助战玩家
	RET_MYSTERY_HELP_COUNT_NOT_ENOUGH = 783; //助战次数不足
	RET_MYSTERY_STATIC_NO_CHALLENGE = 785; //不在挑战阶段
	RET_MYSTERY_CLOSE = 786; //活动关闭

  RET_SACREDWP_INHERIT_ATTR_CONFLICT = 787; //神兵继承属性冲突

  RET_BANUSER_REASON_ONE = 788; //玩家事件处理
  RET_BANUSER_REASON_TWO = 789; //玩家特殊问题处理
  RET_BANUSER_REASON_THREE = 790; //充错帐号
  RET_BANUSER_REASON_FOUR = 791; //帐号争议
  RET_BANUSER_REASON_FIVE = 792; //重大bug处理
  RET_BANUSER_REASON_SIX = 793; //玩家违规


	RET_MGKNIGHT_HANDBOOK_CANNOT_UPGRADE = 794;	//图鉴不满足升级条件
	RET_MGKNIGHT_HANDBOOK_NOT_ACTIVE = 795;	//图鉴未激活
	RET_MGKNIGHT_HANDBOOK_MAX_LEVEL = 796; //图鉴已达最高等级

  RET_MARTIAL_REQLEVEL_NOT_REACH = 797; //前置武学等级未达到
  RET_TALENT_POOL_REQCOST_NOT_REACH = 798; //前置天赋池消耗天赋未达标
  RET_TALENT_POOL_ACTCOUNT_LIMIT = 799; //天赋池激活天赋数量限制
  //4.9.0列传-武将换肤
  RET_BIOGRAPHY_VOICE_MISMATCH = 800; // 武将声音与武将信息不匹配
  RET_BIOGRAPHY_SKIN_EXIST = 801; // 武将换肤皮肤信息不存在
  RET_BIOGRAPHY_SKIN_INFO_ERR = 802; // 武将皮肤配置错误
  RET_BIOGRAPHY_VOICE_EXIST = 803; // 音频信息不存在
  RET_BIOGRAPHY_KNIGHT_EXIST = 804; // 武将换肤武将未上阵
  RET_BIOGRAPHY_SOME_SKIN = 805; // 不可更换相同皮肤
  RET_BIOGRAPHY_NOACTIVATE_SKIN = 806; // 皮肤未激活或已过期
  RET_BIOGRAPHY_SKIN_FOREVER = 807; // 永久皮肤不可被延期
  RET_ERR_KNIGHT_TO_SKIN = 809;// 该武将不能穿点此皮肤
  RET_ERR_KNIGHT_TO_SKIN_ITEM = 810;//非激活武将皮肤道具
  RET_KNIGHT_TO_SKIN_ITEM_ERR = 811;//该物品不能激活此皮肤

  RET_KNIGHT_IN_VICEFORMATION = 812; //当前武将已登录副将阵容中
  RET_LOCAL_VETERAN_DIRECT_CHARGE_TIMES_LIMIT = 813; //该礼包已经到直冲次数上限
  RET_LOCAL_VETERAN_DIRECT_CHARGE_LEVEL_LIMIT = 814; //等级未到，该礼包不能直冲
  RET_LOCAL_VETERAN_DIRECT_CHARGE_NOT_OPEN = 815;    //该礼包没到开放时间，或者过期
  RET_LOCAL_VETERAN_DIRECT_REWARD_INDEX = 816;       //错误的索引

  //4.9.50外观商店
  RET_INDIERECHARGE_CONFIG_ERROR = 817;//读取直充配置信息错误
  RET_SURFACESHOP_CONFIG_ERROR = 818;//读取商品信息配置错误
  RET_AVATARINFO_CONFIG_ERROR = 819;//读取商品购买限制配置错误
  RET_SURFACESHOP_ITEM_ERROR = 820;//配置表配置商品信息错误
  RET_SURFACESHOP_HSKIN_FOREVER = 821;//官邸皮肤已经永久,不可再购买
  RET_SURFACESHOP_SKIN_FOREVER = 822;//武将皮肤已经永久,不可再购买
  RET_SURFACESHOP_STAR_NOT_ENOGHT = 823;//噩梦副本星数不足，不能购买该物品
  RET_SURFACESHOP_AVATAR_ERROR = 824;//配置表配置商品购买限制信息错误
  RET_SURFACESHOP_DIRECT_ITEM = 825;//直充商品不可用道具兑换

  //5.0.0军师系统
  RET_MILITARIST_NOT_FOUND = 826; //没有找到军师
  RET_MILITARIST_STAR_LIMIT = 827; //军师升星达到最高级，不能继续升星
  RET_MILITRAIST_REBIRTH_FORMATION = 828; //先要下阵才能继续升星
  RET_MILITRAIST_TRANS_SAME_MILIT = 829; //不能自己转生自己
  RET_MILITRAIST_TRANS_NOT_SAME_BANCH = 830; //不同批次的不能转生
  RET_MILITBOOK_NOT_FOUND = 831; //没有找到军师图鉴
  RET_MILITBOOK_STAR_MAX = 832; //军师图鉴已经升满星，请升阶
  RET_MILITBOOK_LVUP_LV_MAX = 833; //军师图鉴已经升阶到最高级，不能再升阶
  RET_MILIBOOK_LVUP_STAR_NOT_ENOUGH = 834; //军师图鉴本阶还没升满星，不能升阶
  RET_MILIBOOK_LVUP_SCORE_NOT_ENOUGH = 835; //军师图鉴评分不足，不能升阶
  RET_UNITER_FORMATION_NOT_IN = 836; //该单位没有上阵，不能下阵
  RET_UNITER_FORMATION_ALREADY_IN = 837; //该单位已经上阵了，不能重复上阵
  RET_MILITARIST_BAG_FULL = 838; //军师背包已经满了
  RET_MILITARIST_INFO_NOT_FOUND = 839;//军师配置信息未找到
  //5.0.0-少三之路
  RET_ANNIVERSARY_MAP_CONFIG_ERROR = 840;//读取据点信息配置错误
  RET_ANNIVERSARY_JIGSAW_CONFIG_ERROR = 841;//读取拼图配置信息错误
  RET_ANNIVERSARY_REWARD_CONFIG_ERROR = 842;//读取拼图奖励配置错误
  RET_ANNIVERSARY_BEFORE_BEHIND_ERROR = 843;//据点前置后置配置错误,此节点不是后置节点
  RET_ANNIVERSARY_SCORE_NOT_ENOUGHT = 844;//玩家活动积分不足
  RET_ANNIVERSARY_CAN_NOT_SELF = 845;//该据点不可手动领奖
  RET_ANNIVERSARY_REWARD_IS_YES = 846;//该据点奖励已经领取
  RET_ANNIVERSARY_POINT_NOT_ACTIVITY = 847;//该据点未激活
  RET_ANNIVERSARY_CLIENT_ERROR = 848;//前端传错大图id
  RET_ANNIVERSARY_JIASAW_ACTIVITY_LITTLE = 849;//该小拼图已经激活
  RET_ANNIVERSARY_JIASAW_NOT_ACTIVITY_BIG = 850;//该大拼图未完成
  RET_ANNIVERSARY_JIASAW_REWARD_IS_YES = 851;//该拼图奖励已经领取
  RET_ANNIVERSARY_IS_CLOSE = 852;//活动未开启或已结束
  RET_ANNIVERSARY_POINT_END = 854;//据点已经到达终点,不可攀登
  RET_ANNIVERSARY_JIGSAW_ITEM_NOT_ENOUGHT = 855;//玩家拼图激活道具不足
  RET_ANNIVERSARY_JIGSAW_ITEM_TYPE_ERROR = 856;//玩家拼图激活道具类型错误,非激活道具
  RET_WORLD_WAR_HOME_BUY_CD = 853;//天下联盟城防购买cd
  RET_ANNIVERSARY_JIGSAW_BEFORE_NOT_ACTIVITY = 857;//前置大拼图未集齐
  RET_ANNIVERSARY_JIGSAW_USER_DATA_LOADING = 858;//玩家数据还未加载完成,还在延迟加载中
  RET_GAME_MOT_REWARD_TIME = 859;//活动正在进行,不在领奖时间
  RET_GAME_IS_REWARD = 860;//活动奖励已经领取
  RET_SKYTEST_RESET_SHOP_CANNOT_ENTER = 861; //通天试炼重置商品不可再购买
  RET_LOGIN_IN_ANTIINDUL = 862; //进入防沉迷，被踢
  RET_BUY_HELPER_SIZE_EXCEED_LIMIT = 863; //购买助手配置数量超限(200)
  RET_RECRUIT_HELPER_NO_TIMES =864;//游戏助手-一次神将招募已完成
  RET_SACRED_HELPER_NO_TIMES =865;//游戏助手-五次神兵神炼已完成
  RET_CORP_HELPER_NO_TIMES = 866;//游戏助手-一次军团购买已完成
	// 5.1.0 联盟合战
	RET_ALLIANCE_BATTLE_DAILY_NUM_LACK = 867; //今日挑战次数不足
	RET_ALLIANCE_BATTLE_STAGE_NUM_LACK = 868; //关卡剩余挑战次数不足
	RET_ALLIANCE_BATTLE_STAGE_RWD_GOTTEN = 869; //关卡奖励已领取
	RET_ALLIANCE_BATTLE_NO_PLAYER = 870; //未找到助战玩家
	RET_ALLIANCE_BATTLE_HELP_COUNT_NOT_ENOUGH = 871; //助战次数不足
	RET_ALLIANCE_BATTLE_AIM_AWARD_NOT_FINISH = 872; //不满足目标奖励领取条件
	RET_ALLIANCE_BATTLE_BATTLE_SCORE_LIMIT = 873; //联盟积分不满足领取条件
  RET_PET_DARKGOLD_FORMATION_TYPE_FULL = 878;//玩家当前暗金玄阵的当前次属性已满
  RET_PET_DRAKGOLD_FORMATION_LEVEL_LIMIT = 880;  //宠物暗金玄阵等级限制
  RET_PET_DARKGOLD_FRAGMENT_CANNOT_FORMATION = 881;  //宠物碎片不能被暗金玄阵
  RET_PET_DARKGOLD_CANNOT_FORMATION  = 882;  //宠物不能暗金玄阵

	RET_DAILY_SIGN_SHOP_NOT_ENOUGH = 879; //新签到商店，签到次数不足
	RET_DAILY_SIGN_SHOP_TIME_ERROR = 883; //不在商店限购时间
  RET_MILITARIST_IN_VICEFORMATION = 884; //当前军师已登录副将阵容中
	RET_ROGUE_CHALLENGE_COUNT_ERROR = 885; //寻龙摸金挑战次数不足
	RET_CLIENT_REQUEST_QUICK = 886;		//请求过于频繁

  //随机商店自动刷新停止
  RET_SHOP_AUTO_REFRESH_STOP_FRESH_TIME_LIMIT = 887;          //商店刷新次数到达设置次数
  RET_SHOP_AUTO_REFRESH_STOP_BUY_FAILED = 888;       //商店购买失败
  RET_SHOP_AUTO_REFRESH_STOP_FRESH_FAILED = 889;     //商店刷新失败
  RET_SHOP_AUTO_REFRESH_STOP_GOODS_ALL_BOUGHT = 890;              //设置物品购买完毕

	RET_DONT_BE_NAUGHTY = 891; //别淘气~


  //天下战宠
  RET_SUMMER_MONSTER_NOT_EXISTS = 900; //战宠没找到

//-------------------------------------我 叫 分 隔 符-------------------------------------------------
  //1000以上共享用 和crosspk同步 不然尼玛转换就想死了
  RET_CORP_CROSS_PK_STATE_ERROR = 1000; //跨服军团状态错误
  RET_CORP_CROSS_PK_HAS_APPLY= 1001; //跨服军团已经报名
  RET_CORP_CROSS_PK_HAS_NOT_APPLY= 1002; //跨服军团未报名
  RET_CORP_CROSS_PK_DEMAND_NOT_MEET = 1004; //跨服军团报名条件不满足
  RET_CORP_CROSS_PK_ENCOURAGE_OVER_MAX = 1005; //跨服鼓舞超过军团最大次数
  RET_CORP_CROSS_PK_ENCOURAGE_OVER_MEMBERMAX = 1006; //跨服鼓舞超过玩家最大次数
  RET_CORP_CROSS_PK_IN_REFRESH_CD = 1007; //跨服战斗刷新CD中
  RET_CORP_CROSS_PK_IN_PK_CD = 1008; //跨服战斗CD中
  RET_CORP_CROSS_PK_NOT_IN_PK_CD = 1009; //不在跨服战斗CD中 不用重置
  RET_CORP_CROSS_PK_FIELD_NOT_EXIT = 1010; //战场不存在
  RET_CORP_QUERY_ERROR = 1011; //查询异常
  RET_CORP_CROSS_PK_CORP_NOT_EXIT = 1012; //军团不存在
  RET_CORP_CROSS_PK_CORP_MEMBER_MAX_CHALLENGE= 1013; //军团挑战玩家打到最大次数
  RET_CORP_CROSS_PK_CORP_SET_FIREON_ERROR = 1014; //不能设置自己为集火目标
  RET_CORP_CROSS_PK_CORP_STATE_LOCK = 1015; //军团战状态锁定中
  RET_CORP_CROSS_PK_SERVER_ERROR = 1016; //跨服服务器失联
  RET_CORP_CROSS_PK_RESET_MAX = 1017; //跨服战战斗重置达到上限
  RET_USER_CROSS_PK_SERVER_ERROR = 1018;//比武服务器战场信息错误
  RET_USER_CROSS_PK_STATE_ERROR = 1019;//比武状态错误
  RET_USER_CROSS_PK_GROUP_ERROR  = 1020;//比武玩家未选择阵营
  RET_USER_CROSS_PK_REFRESH_ERROR = 1021;//比武玩家没有刷新次数
  RET_USER_CROSS_PK_FREQUENCE_ERROR = 1022;//比武玩家请求列表频繁
  RET_USER_CROSS_PK_BATTLE_ERROR = 1023;//比武玩家请求战斗错误
  RET_USER_CROSS_PK_USER_CHALLENGED = 1024;//比武玩家已经挑战过了
  RET_USER_CROSS_PK_USER_NO_CHALLENGE= 1025;//比武玩家没有挑战次数
  RET_USER_CROSS_PK_GET_ENEMY_ERROR = 1026;//比武玩家获取对手信息失败
  RET_USER_CROSS_PK_ARENA_NO_INVITATION = 1027;//没有邀请资格
  RET_USER_CROSS_PK_ARENA_BET_ERROR = 1028;//投注错误
  RET_USER_CROSS_PK_ARENA_HAS_SERVER_AWARD = 1029;//已经领取过全服奖励
  RET_USER_CROSS_PK_ARENA_AWARD_NOT_PREPARED= 1030;//奖励初始化中
  RET_USER_CROSS_PK_ARENA_AWARD_ILLEGAL= 1031;//奖励条件不满足
  RET_USER_CROSS_PK_ARENA_NOT_OPEN = 1032;//争霸赛未开启
  RET_USER_CROSS_PK_ARENA_BET_INIT = 1033;//投注初始化中
  RET_USER_CROSS_PK_ARENA_BET_FINISH = 1034;//投注结算中
  RET_USER_CROSS_PK_ARENA_CHALLENGE_ERROR = 1035;//挑战信息错误
  RET_USER_CROSS_PK_ARENA_CHALLENGE_LOCK = 1036;//正在被挑战
  RET_USER_CROSS_PK_ARENA_BET_MAX = 1037;//投注超过上限
  RET_USER_CROSS_PK_ARENA_BET_AWARD_FINISH = 1038;//已经领取过投注奖励
  RET_USER_CROSS_PK_GET_USER_INFO_FAILED = 1039;//玩家信息获取失败
  RET_USER_CROSS_GB_NOT_IN_AWARD_TIME = 1040;//不在团购领奖时间内
  RET_USER_CROSS_GB_NOT_IN_AWARD_RANK = 1041;//不在团购排行榜奖励中
  RET_USER_CROSS_GB_GET_RANK_AWARD_BEFORE = 1042;//团购奖励已经领取过

  RET_WAR_HAS_APPLY =1043;//军团战已经报名
  RET_WAR_SERVER_ERROR =1044;//服务器未知错误
  RET_WAR_HAS_NOT_APPLY =1045;//军团战未报名
  RET_WAR_SET_DEFEND_ERROR =1046;//军团战设置防守错误
  RET_WAR_STATE_ERROR =1047;//军团战状态异常
  RET_WAR_FIELD_NOT_EXIT =1048;//军团战战场不存在
  RET_WAR_SERVER_BUSY =1049;//军团战服务器繁忙,稍后再试
  RET_WAR_QUERY_CORP_NOT_EXIST =1050;//军团战对面军团不存在
  RET_WAR_CHALLENGE_COUNT_MAX =1051;//军团战达到最大挑战次数
  RET_WAR_CHALLENGE_USER_ERROR =1052;//军团战挑战错误
  RET_WAR_CHALLENGE_USER_MAX=1053;//军团战对手没有次数
  RET_WAR_CHALLENGE_CITY_FINISH =1054;//军团战城门已告破
  RET_WAR_APPLY_ERROR =1055;//军团战条件不满足
  RET_WAR_CHALLENGE_LOCK =1056;//军团战挑战锁定中
  RET_WAR_AWARD_HAS_GOT =1057;//军团战个人奖励已经领取
  RET_WAR_AWARD_DEMAND_NOT_MEET =1058;//条件不满足
  RET_WAR_BIG_FIELD_ERROR =1059;//军团大区设置错误
  RET_WAR_JOIN_CD =1060;//军团战加入新军团CD中 无法参与军团战

  RET_TEAM_PVP_CROSS_SERVER_ERROR = 1100; // 组队pvp，跨服服务器失联
  RET_TEAM_PVP_HAS_TEAM = 1101; //组队PVP,已经有队伍
  RET_TEAM_PVP_JOINING_TEAM = 1102; // 组队pvp, 在自动匹配队伍中
  RET_TEAM_PVP_NOT_IN_TEAM = 1103; // 组队pvp，不在队伍中
  RET_TEAM_PVP_NOT_TEAM_LEADER = 1104; //组队pvp，不是队长
  RET_TEAM_PVP_KICK_NO_TEAM_MEMBER = 1105; // 组队pvp，踢的人不在队伍中_
  RET_TEAM_PVP_CAN_NOT_KICK_SELF = 1106; //组队pvp，不能踢自己
  RET_TEAM_PVP_INVITE_TARGET_NOT_ONLINE = 1107; //组队pvp，邀请对象不在线
  RET_TEAM_PVP_INVITE_TARGET_NOT_FRIEND = 1108; //组队pvp，邀请对象非好友
  RET_TEAM_PVP_INVITOR_QUIT_TEAM = 1109; // 组队pvp，邀请人已退出
  RET_TEAM_PVP_INVITE_TICKET_INVALID = 1110; // 组队pvp，无效邀请
  RET_TEAM_PVP_TEAM_FULL = 1111; // 组队pvp，队伍已满
  RET_TEAM_PVP_ALREADY_INVITING_NPC = 1112; // 组队pvp，已经在邀请NPC了
  RET_TEAM_PVP_TEAM_NOT_FULL = 1113; //组队pvp，队伍未满
  RET_TEAM_PVP_TEAM_IS_MATCHING = 1114; // 组队pvp，已经在匹配其他队伍中
  RET_TEAM_PVP_TEAM_MEMBERS_DISAGREE = 1115; // 组队pvp，有队员不同意出战
  RET_TEAM_PVP_CHANGE_POSITION_INVALID = 1116; // 组队pvp，换位置无效
  RET_TEAM_PVP_TEAM_IS_NOT_MATCHING = 1117; // 组队pvp，队伍不在匹配其他队伍
  RET_TEAM_PVP_USER_LEVEL_NOT_ENOUGH = 1118; // 组队pvp，玩家等级不足
  RET_TEAM_PVP_NPC_SEARCH_CD = 1119; // 组队pvp，npc  cd中
  RET_TEAM_PVP_NOT_ENOUGH_SCORE = 1120; // 组队pvp商店，积分不足
  RET_TEAM_PVP_NOT_ENOUGH_HONOR = 1121; // 组队pvp商店，荣誉不足
  RET_TEAM_PVP_HAS_TEAM_OR_JOINING = 1122; // 组队pvp，已在队伍中或正在匹配
  RET_TEAM_PVP_TEAM_LEADER_QUIT = 1123; // 队长已退
  RET_TEAM_PVP_APPLYER_CANCEL_APPLY = 1124; // 申请者已取消申请

  RET_SM_GOODS_NOT_EXIST = 1200;//交易所物品不存在
  RET_SM_SERVER_ERROR = 1201;//查询服务器失联
  RET_SM_CLOSED = 1202;//交易所暂时关闭中
  RET_SM_GOODS_LOCKING = 1203;//交易所物品锁定中
  RET_SM_SORT_FULL = 1204;//交易所队列满
  RET_SM_ERROR = 1205;//交易所错误
  RET_SM_GOODS_HAS_SOLD = 1206;//物品已经出售掉了
  RET_SM_GOODS_STATUS_ERROR = 1207;//交易物品状态错误
  RET_SM_SORT_TYPE_ERROR = 1208;//交易所排序类型错误
  RET_SM_SORT_RANK_ERROR = 1209;//交易所排序已经过期
  RET_SM_SERVER_BUSY = 1210;//交易所繁忙
  RET_SM_GOODS_NO_DETAIL = 1211;//物品没有详细信息
  RET_SM_MAX_SELL = 1212;//交易所卖物品达到最大个数

  RET_GVE_CROSS_SERVER_ERROR = 1300; // 北伐，跨服服务器失联
  RET_GVE_HAS_TEAM = 1301; //北伐,已经有队伍
  RET_GVE_JOINING_TEAM = 1302; // 北伐, 在自动匹配队伍
  RET_GVE_NOT_IN_TEAM = 1303; // 北伐，不在队伍中
  RET_GVE_NOT_TEAM_LEADER = 1304; //北伐，不是队长
  RET_GVE_KICK_NO_TEAM_MEMBER = 1305; // 北伐，踢的人不在队伍中_
  RET_GVE_CAN_NOT_KICK_SELF = 1306; //北伐，不能踢自己
  RET_GVE_INVITE_TARGET_NOT_ONLINE = 1307; //北伐，邀请对象不在线
  RET_GVE_INVITE_TARGET_NOT_FRIEND = 1308; //北伐，邀请对象非好友
  RET_GVE_INVITOR_QUIT_TEAM = 1309; // 北伐，邀请人已退出
  RET_GVE_INVITE_TICKET_INVALID = 1310; // 北伐，无效邀请
  RET_GVE_TEAM_FULL = 1311; // 北伐，队伍已满
  RET_GVE_ALREADY_INVITING_NPC = 1312; // 北伐，已经在邀请NPC了
  RET_GVE_TEAM_NOT_FULL = 1313; //北伐，队伍未满
  RET_GVE_TEAM_MEMBERS_DISAGREE = 1315; // 北伐，有队员不同意出战
  RET_GVE_CHANGE_POSITION_INVALID = 1316; // 北伐，换位置无效
  RET_GVE_USER_LEVEL_NOT_ENOUGH = 1318; // 北伐，玩家等级不足
  RET_GVE_NPC_SEARCH_CD = 1319; // 北伐，npc  cd中
  RET_GVE_NOT_ENOUGH_SCORE = 1320; // 北伐商店，积分不足
  RET_GVE_NOT_ENOUGH_HONOR = 1321; // 北伐商店，荣誉不足
  RET_GVE_INVALID_CHAPTER = 1322; // 北伐，章节id错误
  RET_GVE_TEAM_ONLY_INVITED = 1323; // 北伐，队伍不开放

  RET_FFK_CROSS_SERVER_ERROR = 1400; // 王者争霸，跨服服务器失联
  RET_FFK_USER_LEVEL_NOT_ENOUGH = 1401; // 王者争霸，玩家等级不足
  RET_FFK_CLOSED = 1402; // 王者争霸，活动关闭
  RET_FFK_TASK_NOT_EXIST = 1403; //王者争霸，任务不存在
  RET_FFK_TASK_AWARDED = 1404; //王者争霸，任务已领取
  RET_FFK_TASK_NOT_COMPLETE = 1405; //王者争霸, 任务未完成
  RET_FFK_NOT_ENOUGH_ACTIVE = 1406; //王者争霸，活跃点不足
  RET_FFK_PEAK_OUT_OF_DATE = 1407; //王者争霸， 巅峰对决过期
  RET_FFK_CROSS_SERVER_BUSY = 1408; // 王者争霸，服务器繁忙
  RET_FFK_AREA_NOT_CONFIG = 1409; //王者争霸，赛区未设置
  RET_FFK_CD = 1410; //王者争霸，请求过于频繁
  RET_FFK_NO_BATTLE_OF_THIS_SEASON = 1411; //王者争霸，本赛季尚未战斗过

  RET_TC_CLOSED = 1430;//群雄逐鹿暂时无法匹配
  RET_TC_IN_GAME = 1431;//群雄逐鹿游戏中
  RET_TC_GAME_NOT_EXIST = 1432;//游戏不存在
  RET_TC_GAME_NO_ITEM = 1433;//没有道具
  RET_TC_GAME_ITEM_ERROR = 1434;//道具错误
  RET_TC_GAME_ERROR = 1435;//游戏发生未知错误
  RET_TC_IN_PROCESS = 1436;//内部使用 游戏正在处理中
  RET_TC_GAME_BATTLE_FAILED = 1437;//战斗失败
  RET_TC_INVITE_USER_NOT_ONLINE = 1438;//邀请玩家不在线
  RET_TC_INVITE_TEAM_FULL = 1439;//邀请队伍已经满员
  RET_TC_INVITE_USER_IN_TEAM = 1440;//玩家已经在一个队伍
  RET_TC_INVITE_USER_NO_TEAM = 1441;//队伍不存在
  RET_TC_USER_NOT_LEADER = 1442;//玩家不是队长
  RET_TC_GAME_PONIT_UNAVAILABLE = 1443;//游戏坐标暂时不可移动
  RET_TC_GAME_USER_LOCK = 1444;//游戏玩家锁定中
  RET_TC_GAME_MOVE_REQUEST_ERROR = 1445;//错误的移动请求
  RET_TC_SERVER_ERROR = 1446;//服务器失联异常
	RET_TC_GAME_RESET_TIME_NOT_ENOUGH = 1447;	//只能重置超时挂机的队友
	RET_TC_GAME_RESET_HOME_NO_USER = 1448;	//旗帜位置无队友

  RET_AUCTION_ITEM_NOT_EXIST = 1450;//拍卖行道具不存在或者已被出售
  RET_AUCTION_ITEM_INFO_ERROR = 1451;//拍卖行道具信息错误
  RET_AUCTION_ITEM_PRICE_ERROR = 1452;//拍卖行价格错误（过期）
  RET_AUCTION_ITEM_ITEM_IN_PROCESS = 1453;//道具正在处理中

  RET_CORP_RICE_SERVER_BUSY = 1470; // 军团粮草，服务器失联
  RET_CITY_DEFENSE_SERVER_BUSY = 1471; // 攻城掠地服务器繁忙
  RET_CITY_DEFENSE_YOU_HAVE_A_ROOM = 1472; //已经拥有仓库
  RET_CITY_DEFENSE_ROOM_NOT_EXIST = 1473; //仓库不存在
  RET_CITY_DEFENSE_ROOM_NO_MORE_AWARD = 1474; //没有可收获的了
  RET_CITY_DEFNESE_EXTEND_HOUR_TOO_BIG = 1475; //延长时间已满
  RET_CITY_DEFENSE_ENEMY_SERVER_BUSY = 1476; //对手服务器繁忙
  RET_CITY_DEFENSE_ROOM_NOT_EMPTY = 1477;//仓库非空
  RET_CITY_DEFENSE_ENEMY_IN_BATTLE = 1478;//占领者正在战斗中
  RET_CITY_DEFENSE_REQUEST_ERROR = 1479;//请求错误

  RET_CITY_WAR_AREA_ERROR = 1480;//国战地图大区信息错误
  RET_CITY_WAR_MAP_ERROR = 1481;//国战地图信息错误
  RET_CITY_WAR_GET_USER_ERROR = 1482;//国战获取玩家信息错误
  RET_CITY_WAR_ATTACK_NO_FIND = 1483;//国战匹配悬赏失败
  RET_CITY_WAR_USER_INFO_ERROR = 1484;//国战玩家自身数据异常
  RET_CITY_WAR_MAP_LOCK = 1485;//国战玩家地图位置锁定中
  RET_CITY_WAR_SERVER_ERROR = 1486; // 跨服服务器失联
  RET_CITY_WAR_INFO_ERROR = 1487; //国战信息错误（信息不是最新）
  RET_CITY_WAR_OVER = 1488; //国战结束
  RET_CITY_WAR_BATTLE_CD = 1489; //国战战斗CD
  RET_CITY_WAR_QUERY_CD = 1490; //国战请求太频繁
  RET_CITY_WAR_MAP_ATTACK_ERROR = 1491; //国战悬赏令位置过期

  RET_GROUPDUNGEON_CROSS_SERVER_ERROR = 1500; // 九州巡礼，跨服服务器失联
  RET_GROUPDUNGEON_HAS_TEAM = 1501; //九州巡礼,已经有队伍
  RET_GROUPDUNGEON_JOINING_TEAM = 1502; // 九州巡礼, 在自动匹配队伍
  RET_GROUPDUNGEON_NOT_IN_TEAM = 1503; // 九州巡礼，不在队伍中
  RET_GROUPDUNGEON_NOT_TEAM_LEADER = 1504; //九州巡礼，不是队长
  RET_GROUPDUNGEON_KICK_NO_TEAM_MEMBER = 1505; // 九州巡礼，踢的人不在队伍中_
  RET_GROUPDUNGEON_CAN_NOT_KICK_SELF = 1506; //九州巡礼，不能踢自己
  RET_GROUPDUNGEON_INVITE_TARGET_NOT_ONLINE = 1507; //九州巡礼，邀请对象不在线
  RET_GROUPDUNGEON_INVITE_TARGET_NOT_FRIEND = 1508; //九州巡礼，邀请对象非好友
  RET_GROUPDUNGEON_INVITOR_QUIT_TEAM = 1509; // 九州巡礼，邀请人已退出
  RET_GROUPDUNGEON_INVITE_TICKET_INVALID = 1510; // 九州巡礼，无效邀请
  RET_GROUPDUNGEON_TEAM_FULL = 1511; // 九州巡礼，队伍已满
  RET_GROUPDUNGEON_TEAM_NOT_FULL = 1513; //九州巡礼，队伍未满
  RET_GROUPDUNGEON_TEAM_MEMBERS_DISAGREE = 1515; // 九州巡礼，有队员不同意出战
  RET_GROUPDUNGEON_USER_LEVEL_NOT_ENOUGH = 1518; // 九州巡礼，玩家等级不足
  RET_GROUPDUNGEON_NOT_ENOUGH_COIN = 1520; // 九州巡礼商店，九州币不足
  RET_GROUPDUNGEON_NOT_ENOUGH_HONOR = 1521; // 九州巡礼商店，荣誉不足
  RET_GROUPDUNGEON_INVALID_DUNGEONID = 1522; // 九州巡礼，副本id错误
  RET_GROUPDUNGEON_TEAM_ONLY_INVITED = 1523; // 九州巡礼，队伍不开放
  RET_GROUPDUNGEON_SELECT_KNIGHT_INVALID = 1524; // 九州巡礼，上阵武将错误
  RET_GROUPDUNGEON_CLOSED_TODAY = 1525; // 九州巡礼，副本今日关闭
  RET_GROUPDUNGEON_INVITE_TARGET_NOT_PASS = 1526; //九州巡礼，邀请对象未解锁关卡
  RET_GROUPDUNGEON_DIFFICULTY_NOT_PASS = 1527; //九州巡礼，该难度关卡无通过
  RET_GROUPDUNGEON_HELPER_NO_TIMES = 1528;//征战九州,玩家助手挑战次数已用尽

  RET_HOME_SERVER_ERROR =1530;//宴会服务器繁忙
  RET_HOME_DINNER_NOT_EXIST =1531;//宴会不存在或者已经过期
  RET_HOME_DINNER_NOT_FINISH = 1532;//上次宴会未结束
  RET_HOME_DINNER_FINISH = 1533 ;//宴会已经结束
  RET_HOME_DINNER_HAS_AWARD = 1534;//宴会奖励已经领取
  RET_HOME_DINNER_NOT_HAS_AWARD = 1535;//宴会奖励未领取
  RET_HOME_DINNER_INVITE_NOT_ONLINE = 1536;//宴会邀请对象不在线
  RET_HOME_DINNER_POS_OCCUPY = 1537;//宴会位置已经有人
  RET_HOME_DINNER_QUERY_ERROR = 1538;//宴会玩家信息错误
  RET_HOME_DINNER_HAS_ATTEND = 1539;//将军，您已参加过该宴会

  RET_CROSS_FRIEND_SERVER_ERROR = 1540; //跨服分区繁忙 请稍后再试
  RET_CROSS_FRIEND_SERVER_BUSY = 1541;  //好友服务器繁忙
  RET_DURING_CROSS_FRIEND_QUERY_CD = 1542; //跨服好友查询CD中
  RET_CROSS_FRIEND_REQUEST_ERROR = 1543; //跨服好友请求错误
  RET_ALREAD_IN_CROSS_FRIEND_LIST = 1544; //已经是跨服好友
  RET_CROSS_FRIEND_NUM_LIMIT = 1545; //跨服好友数量达到上限
  RET_CROSS_FRIEND_DATA_ILLEGAL = 1546; //跨服好友数据异常
  RET_CROSS_FRIEND_NOT_EXIST = 1547; //跨服好友不存在
  RET_CROSS_FRIEND_NOT_FIND_PLAYER = 1548; //未找到跨服玩家
  RET_TARGET_SESSION_NOT_FIND = 1549;//对方服务器失联
  RET_RECOMMEND_SERVER_NOT_FIND = 1550; //推荐服务器失联
  RET_LEVEL_OR_VIP_NOT_ENOUGH = 1551;//等级或VIP不足
  RET_CROSS_MAIL_SERVER_BUSY = 1552;//邮箱服务器繁忙
  RET_MAIL_REQUEST_ERROR = 1553;//跨服邮件请求错误

  RET_WORLD_WAR_SERVER_ERROR = 1554; //日常大地图，服务器错误
  RET_WORLD_WAR_MAP_POSITION_NOT_FREE = 1555; //日常大地图，目标位置有物体
  RET_WORLD_WAR_MAP_INFOMATION_OUT_OF_DATE = 1556; //日常大地图，信息过时
  RET_WORLD_WAR_MONSTER_BUSY = 1557; //日常大地图，怪物正被其他玩家攻打
  RET_WORLD_WAR_CORP_BOSS_NOT_OPEN = 1558; //日常大地图，军团boss没开
  RET_WORLD_WAR_MIGRATE_POINT_NOT_ENOUGH = 1559; //日常大地图，迁城令不足
  RET_WORLD_WAR_CAMPAIGN_POINT_NOT_ENOUGH = 1560; //日常大地图，出征令不足
  RET_WORLD_WAR_ATTACK_SUMMON_CNT_NOT_ENOUGH = 1561; //日常大地图，攻打召唤怪次数不足
  RET_WORLD_WAR_SUMMONED_MONSTER_ALIVE = 1562; //日常大地图，召唤怪还没死
  RET_WORLD_WAR_SERVER_BUSY = 1563; //日常大地图，服务器繁忙
  RET_WORLD_WAR_NO_BOSS_GROUP = 1564; //日常大地图，没有选阵营
  RET_WORLD_WAR_INVALID_COOR = 1565; //日常大地图，无效坐标
  RET_WORLD_WAR_MONSTER_NOT_AVAILALBE = 1566; //日常大地图，今天怪物不开放
  RET_WORLD_WAR_MONSTER_NOT_UNLOCK = 1567; //怪物未解锁
  RET_WORLD_WAR_RED_NAME     = 1568; //红名不能进入异族

	//群雄逐鹿 3.8.0
	RET_TC_HAS_TEAM = 1570;	//创建队伍失败，已有队伍
	RET_TC_NOT_IN_TEAM = 1571; //不在队伍
	RET_TC_GTID_ERROR = 1572; //队伍号不匹配
	RET_TC_NOT_TEAM_LEADER = 1573; //非队伍队长
	RET_TC_IS_IN_TEAM = 1574;  //已在本队伍中
	RET_TC_NO_TEAM = 1575; //无指定的队伍号
	RET_TC_TEAM_CLOSED = 1576; //队伍未开放
	RET_TC_TEAM_FULL = 1577;   //队伍已满
	RET_TC_TEAM_MATCHING = 1578; //队伍匹配中

  RET_WORLD_WAR_HAS_FARM_LAND = 1600; //日常大地图，已经有粮田了
  RET_WORLD_WAR_NO_FARM_LAND = 1601; //日常大地图，没有粮田
  RET_WORLD_WAR_FARM_LAND_NOT_RIPE = 1602; //日常大地图，粮田没成熟
  RET_WORLD_WAR_FARM_LAND_BE_ROBED_TOO_MUCH = 1603; //日常大地图，粮田被抢的太多了，不能再抢了
  RET_WORLD_WAR_FARM_LAND_BUSY = 1604; //日常大地图，粮田正被其他玩家攻打
  RET_WORLD_WAR_USER_BUSY = 1605; //日常大地图，官邸繁忙
  RET_WORLD_WAR_I_AM_ON_FIRE = 1606; //日常大地图，自己官邸着火
  RET_WORLD_WAR_ROB_FARM_CNT_NOT_ENOUGH = 1607; //日常大地图，抢粮次数不足
  RET_WORLD_WAR_TIRED_POINT_NOT_ENOUGH = 1608; //日常大地图，疲劳值(虎符)不足
  RET_WORLD_WAR_IN_PROTECTION = 1609; //日常大地图，免战中
  RET_WORLD_WAR_CREATE_FARM_CNT_NOT_ENOUGH = 1610; //日常大地图，种田次数不足
  RET_WORLD_WAR_CITY_BUILDING_PROTECT_CD = 1611; //日常大地图，城池建筑保护cd中,, 还剩%d秒
  RET_WORLD_WAR_CITY_BUSY = 1612; //日常大地图，城池繁忙
  RET_WORLD_WAR_CAN_NOT_ATTACK_SAME_CORP_ALLIANCE = 1613; //日常大地图，同军团联盟不能攻击
  RET_WORLD_WAR_CITY_BUILDING_IN_ATTACKED_CD = 1614; //日常大地图，城池驻守cd中, 还剩%d秒
  RET_WORLD_WAR_CITY_MIGRATE_CD = 1615; //日常大地图，城池迁城cd, 还剩%d秒
  RET_WORLD_WAR_CITY_ATTACK_CD = 1616; //日常大地图，城池攻城cd, 还剩%d秒
  RET_WORLD_WAR_CITY_REPAIR_CD = 1617; //日常大地图，城防修整cd, 还剩%d秒
  RET_WORLD_WAR_CITY_NOT_OPEN = 1618; //日常大地图，不在活动时间
  RET_WORLD_WAR_CITY_FULL = 1619; //日常大地图，容纳玩家数已满
  RET_WORLD_WAR_HAS_CITY_TITLE = 1620; //日常大地图，已经有城池头衔
  RET_WORLD_WAR_NOT_IN_MAP = 1621; //日常大地图，不在地图里
  RET_WORLD_WAR_NOT_LUOYANG_WINNER = 1622; //日常大地图，非洛阳城主
  RET_WORLD_WAR_CITY_BUILDING_IS_OTHERS = 1623; //日常大地图，建筑是别的军团的
  RET_WORLD_WAR_CITY_POINT_IS_OTHERS = 1624; //日常大地图，建筑点是别人打下来的
  RET_WORLD_WAR_CITY_ITEM_NOT_ENOUGH = 1625; //日常大地图，攻城道具不足
  RET_WORLD_WAR_CORP_GUARD_ERROR = 1626; //日常大地图，演武台守将已退出军团
  RET_WORLD_WAR_ALLIANCE_GUARD_DUPLICATE = 1627; //日常大地图，已经是军备所守卫了
  RET_WORLD_WAR_NOT_IN_MY_ALLIANCE = 1628; //日常大地图，对方不在我的联盟里
  RET_WORLD_WAR_ALLIANCE_GUARD_ERROR = 1629; //日常大地图，军备所已守将退出
  RET_WORLD_WAR_ALLIANCE_GUARD_BROKEN = 1630; //日常大地图， 军备所守将复活中
  RET_WORLD_WAR_ARSENAL_GOODS_TOO_FEW_TO_ROB = 1631; //日常大地图，军备所资材太少了，不能抢
  RET_WORLD_WAR_ARSENAL_DEFENSE_NOT_ZERO = 1632; //日常大地图，军备所城防大于0

	//军团联盟 4.0.0
	RET_CORPALLIANCE_IN_ALLIANCE = 1640;					//已在联盟
	RET_CORPALLIANCE_INVALID_ALLIANCE = 1641;			//对应的联盟不存在
	RET_CORPALLIANCE_CORP_FULL = 1642;						//联盟军团已满
	RET_CORPALLIANCE_APPLIED_FULL = 1643;					//申请的军团数超过限制(小于5)
	RET_CORPALLIANCE_APPLY_REPEAT = 1644;       	//申请重复
	RET_CORPALLIANCE_NOT_APPLIED = 1645;					//取消申请，未申请过该联盟
	RET_CORPALLIANCE_NO_APPLY = 1646;							//审核，无对应的军团申请
	RET_CORPALLIANCE_TARGET_IN_ALLIANCE = 1647; 	//审核，对方军团已加入联盟
	RET_CORPALLIANCE_NO_PRIVILEGE = 1648;					//无权限操作，要求是联盟长或副联盟长
	RET_CORPALLIANCE_NO_CORP = 1649;							//联盟无该军团
	RET_CORPALLIANCE_SERVER_ERROR = 1650;					//服务器错误,失联
	RET_CORPALLIANCE_SVR_NO_CORP = 1651;					//服务器无该军团
	RET_CORPALLIANCE_CORP_NO_MEMBER = 1652;				//军团无该成员
	RET_CORPALLIANCE_APPOINT_LEADER_NEED_CORP_LEADER = 1653;		//任命联盟长要求对方是军团长
	RET_CORPALLIANCE_KICK_LEADER = 1654;					//踢出，不能踢出联盟长所属军团
	RET_CORPALLIANCE_CORP_NO_ALLIANCE = 1655;			//军团未加入联盟
	RET_CORPALLIANCE_LEADER_QUIT = 1656;					//联盟长不能退出联盟
	RET_CORPALLIANCE_IMPEACH_LEADER_SELF = 1657;	//联盟长不能弹劾自己
	RET_CORPALLIANCE_SKILL_UPING = 1658;					//有技能正在研究
	RET_CORPALLIANCE_OP_NEED_CORP_LEADER = 1659;	//仅军团长可操作
	RET_CORPALLIANCE_OP_NEED_ALLIANCE_LEADER = 1660;	//仅联盟长可操作
	RET_CORPALLIANCE_APPLY_HAS_ALLIANCE = 1661;		//申请联盟，已加入联盟不可申请
	RET_CORPALLIANCE_IMPEACH_SELF = 1662;					//弹劾，不能弹劾联盟长自己
	RET_CORPALLIANCE_LEADER_CORP_CANNOT_QUIT = 1663;	//退出，联盟长所在军团不可退出
	RET_CORPALLIANCE_SKILL_MAX_LEVEL = 1664;		//研究，已经满级
	RET_CORPALLIANCE_UPSKILL_LACK_GOODS = 1665;		//研究，资材不足
	RET_CORPALLIANCE_MSGBOARD_NO_CONTENT = 1666;	//留言板，留言不存在
	RET_CORPALLIANCE_MSGBOARD_IS_TOP = 1667;			//留言板，该留言已经置顶了
	RET_CORPALLIANCE_MSGBOARD_NOT_TOP = 1668;			//留言板，改留言未置顶
	RET_CORPALLIANCE_WAIT_DATA_SYNC = 1669;				//加载中，请稍后操作（服务器数据同步中）
	RET_CORPALLIANCE_IMPEACH_LACK_OFFLINE = 1670;	//弹劾，不满足离线5日条件
	RET_CORPALLIANCE_UPSKILL_CANCEL_ERROR = 1671;				//研究，取消失败不在研究
	RET_CORPALLIANCE_CORP_IS_ALLIANCE_LEADER = 1672;	//联盟长军团不允许解散
	RET_CORPALLIANCE_APPOINT_POSITION_ERR = 1673;	//任命，职位错误
	RET_CORPALLIANCE_APPOINT_VICE_FULL = 1674;	//任命，副联盟长已满
	RET_CORPALLIANCE_KICK_LIMIT_TIME = 1675;	//该军团加入联盟不足24小时，不可踢出
	RET_CORPALLIANCE_START_SYNC_DATA = 1676;	//加载中，请稍后操作（服务器数据开始同步中）
	RET_CORPALLIANCE_NAME_REPEAT_CROSS = 1677;		//名称重复
	RET_CORPALLIANCE_FOREIGN_MSGBOARD_MY_ALLIANCE = 1678; //联盟外交留言板，不能给自己联盟留言

  RET_USER_NOT_ONLINE = 1680; //玩家不在线
  RET_ROAD_GIVE_ITEM_ERROR = 1681;//道具信息错误（已经被人抢先）

  RET_BRAVE_LIST_NOT_OPEN = 1682; //活动未开启
  RET_BRAVE_LIST_IN_REPAIR = 1683; //活动维护中
  RET_BRAVE_LIST_ERROR = 1684; //活动异常

	RET_KP_BETON_REPEAT = 1685;	//今日已参与竞猜
	RET_KP_NOT_IN_RANK = 1686;	//竞猜玩家不在排行榜前3
	RET_KP_NO_BETON = 1687;	//未参与竞猜
	RET_KP_RWD_NOT_RDY = 1688;	//领取时间未到
	RET_KP_RWD_GOTTEN = 1689;	//已领取竞猜奖励
	RET_KP_RWD_BETON_FAIL = 1690;	//竞猜失败了，无奖励领取
	RET_KP_ACT_NOT_OPEN = 1691;	//当前非竞猜时间

  RET_BRAVE_LIST_IN_CLEAR = 1692; //活动结算中
  RET_BRAVE_LIST_ROOM_NOT_SAME = 1693; //玩家在不同房间
  RET_BRAVE_LIST_USER_LOCKED = 1694; //玩家被锁定
  RET_BRAVE_LIST_USER_NOT_ENOUGH = 1695; //房间内人数不足，不能直升
  RET_BRAVE_LIST_ROOM_IS_FULL = 1696; //目标房间人数已满，不能再直升进入

  RET_CK_IN_GAME = 1700;//游戏中
  RET_CK_CLOSED = 1701;//暂时无法匹配
  RET_CK_GAME_NOT_EXIST = 1702;//游戏不存在
	RET_CK_TEAM_MATCHING = 1703;	//当前队伍匹配中
	RET_CK_DEAD = 1704; //玩家已死亡
	RET_CK_CD = 1705; //冷却中
	RET_CK_ATTACKABLE = 1706; //当前不能攻击该目标
  RET_CK_ERROR = 1707;	// 请求太频繁
	RET_CK_TEAMER_IN_GAME = 1708; //队友正在游戏中
	RET_CK_INVITE_TEAM_FULL = 1709; //邀请队伍已经满员
	RET_CK_INVITE_USER_IN_TEAM = 1710; //玩家已经在一个队伍
	RET_CK_INVITE_USER_NOT_ONLINE = 1711;//邀请玩家不在线
	RET_CK_IS_IN_TEAM = 1712; //已在本队伍中
	RET_CK_NOT_IN_TEAM = 1713; //不在队伍
	RET_CK_GTID_ERROR = 1714; //队伍号不匹配
	RET_CK_NOT_TEAM_LEADER = 1715; //非队伍队长
	RET_CK_TEAM_FULL = 1716; //队伍已满
	RET_CK_NO_TEAM = 1717; //无指定的队伍号
	RET_CK_TEAM_CLOSED = 1718; //队伍未开放
	RET_CK_INVITE_USER_NO_TEAM = 1719; //队伍不存在
	RET_CK_TAR_IN_GAME = 1720; //对方正在游戏中

  RET_WORLD_WAR_CAMP_MIGRATE_CD = 1730; //营寨迁移cd
  RET_WORLD_WAR_CAMP_ATTACK_CD = 1731; //营寨攻打cd
  RET_WORLD_WAR_CAMP_NOT_OPEN = 1732; //营寨未开
  RET_WORLD_WAR_CAMP_NO_AWARD_CNT = 1733; //营寨没有奖励次数
  RET_WORLD_WAR_CAN_NOT_MIGRATE_BETWEEN_CAMP_AND_CITY = 1734; //城池和营寨直接不能之间迁移
  RET_WORLD_WAR_NOT_IN_CAMP = 1735; //玩家官邸不再营寨中
  RET_WORLD_WAR_NOT_KICKED_FROM_CAMP = 1736; //不是从营寨里被踢走的
  RET_WORLD_WAR_NOT_CAMP_WINNER = 1737; //不是营寨归属者
  RET_WORLD_WAR_CAMP_BAN_USER_ATTACK_USER = 1738; //这个营寨禁止玩家打玩家
  RET_WORLD_WAR_CAMP_CAN_NOT_REVIVE_MORE_THAN_ONCE= 1739; //营寨只能复活一次
  RET_WORLD_WAR_CAMP_WINNER_LOCKED = 1740; //营寨归属者被锁

  RET_WORLD_WAR_HAS_TEAM = 1741; //天下已经有队伍
  RET_WORLD_WAR_MUST_ON_BIG_MAP_TO_JOIN_TEAM = 1742; //天下加入队伍时必须在大地图上
  RET_WORLD_WAR_TEAM_TARGET_INVALID = 1743; //天下队伍目标无效
  RET_WORLD_WAR_TEAM_NOT_EXIST = 1744; //天下队伍不存在
  RET_WORLD_WAR_TEAM_FULL = 1745; //天下队伍已满
  RET_WORLD_WAR_TEAM_NOT_MY_ALLIANCE = 1746; //天下队伍不是同联盟
  RET_WORLD_WAR_TEAM_NOT_LEADER = 1747; //天下队伍，不是队长
  RET_WORLD_WAR_TEAM_POS_ERROR = 1748; //天下队伍，位置错误
  RET_WORLD_WAR_TEAM_FORMATION_ERROR = 1749; //天下队伍，阵型错误
  RET_WORLD_WAR_TEAM_INVITE_TARGET_NOT_FRIEND = 1750; //天下队伍，不是好友
  RET_WORLD_WAR_TEAM_TARGET_IS_SELF = 1751;  //天下队伍目标是自己
  RET_WORLD_WAR_TEAM_REPORT_NOT_EXIST = 1752;      //天下队伍战报不存在
  RET_WORLD_WAR_TEAM_USER_REPORT_NOT_EXIST = 1753; //天下玩家队伍战报不存在
  RET_WORLD_WAR_TEAM_INVITE_CD = 1754; //天下队伍，邀请cd
  RET_WORLD_WAR_TEAM_LIST_CD = 1755; //天下队伍，邀请cd

  RET_WORLD_WAR_CAMP_RED_EVIL = 1756; //天下异族，善恶值为0，红名状态，不能打玩家
  RET_WORLD_WAR_CAMP_EVIL_FULL = 1757; //天下异族，善恶值满了
  RET_WORLD_WAR_BOSS_MAP_NOT_EXIST = 1758; //天下boss副本不存在
  RET_WORLD_WAR_TEAM_TENT_NOT_UNLOCK = 1759;//营寨未解锁
  RET_WORLD_WAR_TEAM_POINT_NOT_FREE = 1760;//不能迁
  RET_WORLD_WAR_TEAM_BOOS_TIMES_LIMIT = 1761; //天下boss攻打次数不够
  RET_WORLD_WAR_TEAM_IS_STARTED     = 1762; //队伍已经开始了
  RET_WORLD_WAR_NO_USE_ATTACT       = 1763; //无效攻击
  RET_WORLD_WAR_BOSS_TEAM_TO_MAX    = 1764; //boss房间满了
  RET_WORLD_WAR_SEARCH_PET_CD       = 1765; //战宠查找cd
	//5.0.0 军团驻地
	RET_ALLIANCE_FARM_NO_FIND = 1775; //农庄粮田未找到
	RET_ALLIANCE_FARM_HELPED_COUNT_OVER = 1776; //农庄粮田除虫已满

	//4.6.50 跨服叛军boss
	RET_REBEL_BOSS_CROSS_ENEMY_ERROR = 1770;//跨服叛军boss对手数据异常
	RET_REBEL_BOSS_CROSS_ERROR_POS = 1771;	//选择位置无效
	RET_REBEL_BOSS_CROSS_CD = 1772; 	//处于CD中
	RET_REBEL_BOSS_CROSS_TARGET_SELF = 1773; //我们打的是自己人
	RET_REBEL_BOSS_CROSS_TARGET_SERVER_ERROR = 1774; //目标服务器异常

  //5.2.0 天下宠物扩展
  RET_WOLRD_WAR_SUMMON_TIMES_LIMIT = 1777; //宠物每日召唤次数上限
  RET_WOLRD_WAR_SUMMON_USER_NOT_IN_MAP = 1778; //玩家位置跟召唤地点不在同一个地图
  RET_WOLRD_WAR_SUMMON_CANNOT_IN_MAP = 1779;   //该宠物不允许在该地图召唤
  RET_WOLRD_WAR_ATTACK_SUMMON_IN_PROTECT_TIME = 1780; //宠物在保护时间不能被攻击
  RET_WOLRD_WAR_ATTACK_SUMMON_IN_ATTACK_CD = 1781;    //在攻击cd中
  RET_WOLRD_WAR_ATTACK_SUMMON_ALREADY_MISS = 1782;    //宠物已经消失，可能被打死也可能时间到了
  RET_WORLD_WAR_ATTACK_SUMMON_TIRED_NOT_ENOUGH = 1783; //疲劳值(虎符)不足
  RET_WORLD_WAR_NOT_IN_SUMMON_PROTECT_AREA = 1784; //不在保护区域不能攻击宠物
  RET_WORLD_WAR_CREATE_FARM_INPROTECT_AREA = 1785; //不能在宠物保护区域种田
  RET_WORLD_WAR_AUTO_PR0TECT_IN_SUMMON_PROTECT_AREA = 1786; //在战宠保护区域是无法开启免战的


	//5.3.0 寻龙探宝
	RET_ROGUE_CELL_STATIC_ERROR = 1787;	//当前格子状态不允许此操作
	RET_ROGUE_MAP_INIT_ERROR = 1788; //地图初始化错误
	RET_ROGUE_CANNOT_ACTIVE = 1789; //当前无法行动
	RET_ROGUE_INVALID_OPER = 1790; //无效操作
	RET_ROGUE_ROOM_NOT_EXIST	= 1791;	//房间不存在
	RET_ROGUE_ROOM_PLAYER_FULL = 1792;	//房间人满
	RET_ROGUE_DATA_ERROR = 1793;  //游戏数据异常
	RET_ROGUE_AMSWER_ERROR = 1794; //答题错误
	RET_ROGUE_MAP_LOADING = 1795; //地图加载
  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!上面别加游戏服的RET 游戏服的RET方放在1000以内!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //------------------------slave master -----------------------------------------
  RET_CROSS_PVP_APPLY_FULL = 2000;//跨服报名已满
  RET_CROSS_PVP_ROLE_EXIST = 2001;//跨服战已经报名
  RET_CROSS_PVP_NO_EXIST_ACT_ID = 2002;//跨服赛区不存在
  RET_CROSS_PVP_NO_FIND_ROOM = 2003;//跨服房间不存在
  RET_SERVER_BUSY = 2004;//跨服服务器繁忙
  RET_CROSS_PVP_NO_FIND_RESOURCE = 2005;//跨服资源点错误
  RET_CROSS_PVP_NO_EXIST_ID = 2006;//跨服挑战对象不存在
  RET_PVP_LOCK = 2007;//资源点因为攻击被锁
  RET_PVP_COLDDOWN = 2008;//玩家处于冷却时间
  RET_PVPING = 2009;//玩家正在攻击资源
  RET_PVP_OCCUPY = 2010;//玩家已经占领了一个资源点
  RET_PVP_M2M = 2011;//玩家自己攻击自己
  RET_CROSS_PVP_STATE_ERROR = 2012;//跨服PVP状态错误
  RET_CROSS_PVP_LEVEL_ERROR = 2013;//跨服报名等级不满足
  RET_CROSS_PVP_TYPE_ERROR = 2014;//跨服报名战场不存在
  RET_CROSS_PVP_BUFF_MAX = 2015;//BUFF已最大
  RET_CROSS_PVP_BUFF_TYPE_ERROR = 2016;//BUFF类型错误
  RET_FLOWER_EGG_TYPE_ERROR = 2017;//鲜花鸡蛋类型错误
  RET_CROSS_PVP_NO_BET = 2018;//该轮没有鲜花鸡蛋押注
  RET_FLOWER_EGG_ONLY_ONE = 2019;//鲜花/鸡蛋只能押一个人
  RET_FLOWEREGG_AWARDED = 2020;//鲜花鸡蛋奖励已经领取了
  RET_FLOWEREGG_NOT_MEET = 2021;//鲜花鸡蛋奖励条件不满足
  RET_CROSS_PVP_RANK_GOT_AWARD = 2022;//已经领取过排行奖励
  RET_CROSS_PVP_NOT_OB = 2023;//不在OB列表内
	RET_CROSS_PVP_SERVER_ILLEGAL = 2024;//新服务器本轮无法参与
  RET_CROSS_PVP_CANT_APPLY = 2025;//不满足报名条件
  RET_CROSS_PVP_HAS_APPLY = 2026;//已报名
  RET_CROSS_PVP_NOT_APPLY = 2027;//未报名
  //新赤壁新增错误码,同步到cs的返回码中
  RET_ANCIENT_PVP_CANT_MOVE = 2028;//玩家不能移动
  RET_ANCIENT_PVP_PLAY_CHANGE = 2029;//cross上玩家位置已发生变化
  RET_ANCIENT_PVP_MOVE_CD = 2030;//move cd期内
  RET_ANCIENT_PVP_ROLE_NOT_ROOM = 2031;//玩家不在房间内
  RET_ANCIENT_PVP_POINT_NOT_EXIST = 2032;//据点不存在
  RET_ANCIENT_PVP_POINT_PCD = 2033;//据点在保护cd内,不能被攻打
  RET_ANCIENT_PVP_USER_PCD = 2034;//玩家攻打太频繁
  RET_ANCIENT_PVP_PK_AFTER = 2035;//据点已被其他玩家占领
  RET_ANCIENT_PVP_RICE_NOT_EXIST = 2036;//粮车不存在
  RET_ANCIENT_PVP_RICE_CD = 2037;//粮车cd中
  RET_ANCIENT_PVP_HAS_APPLY = 2038;//玩家已报名
  RET_ANCIENT_PVP_GUWU  = 2039;//不在鼓舞状态,不能鼓舞
  RET_ANCIENT_PVP_POS_ERROR  = 2040;//玩家发送的位置信息不对
  RET_ANCIENT_PVP_CANT_ATTACK = 2041;//位置不对,不能攻打
  RET_ANCIENT_PVP_CANT_OB = 2042;//不能观战
  RET_ANCIENT_PVP_CANT_OBROOM = 2043;//没有房间可观战
  RET_ANCIENT_PVP_IN_ROOM = 2044;//已在房间内
  RET_ANCIENT_PVP_NOT_WAIT = 2045;//不在回顾状态
  RET_ANCIENT_PVP_NOT_BATTLE = 2046;//不在战斗状态
  RET_ANCIENT_PVP_TRY_LOGIN = 2047;//请先获取玩家信息
  RET_ANCIENT_PVP_BET_SELF = 2048;//不能投注给自己
  RET_ANCIENT_PVP_IN_RICE = 2049;//不能从粮车上离开
  RET_ANCIENT_PVP_MARSHAL_BU = 2050;//获取战斗数据失败
  RET_ANCIENT_PVP_ACT_NOT_OPEN = 2051;//活动未开启
  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!上面别加游戏服的RET 游戏服的RET方放在1000以内!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//!!!!!!!!!!!!!!!!!!!!!!!!错误码定义新规则-新加都加到下面!!!!!!!!!!!!!!!!!!!!!!!!!!!!
///////////////////////////200000 -- 290000 C2S/////////////////////////////////
	RET_MYSTERY_FAST_CH_OVER = 200000; //无上秘境快速挑战已结束
	//RET_TREASURE_FRAGMENT_NOT_ENOUGH_NUM = 200001; //宝物碎片不足
	RET_WORLD_WAR_AUTO_PROTECT_IN_SPIRIT_AREA = 200002; //在鏖战英灵区域无法开启免战
	RET_SPIRIT_CORP_REWARD_USER_ERROR = 200003;	//军团分配鏖战奖励，目标玩家无资格
	RET_SPIRIT_CORP_REWARD_ITEM_NOT_ENOUGH = 200004; //军团分配鏖战奖励，道具不足
	RET_WORLD_WAR_SPIRIT_DEFENSE_NOT_ENOUGH = 200005; //迁入鏖战英灵攻击区域时，城防值不足
	RET_ALLIANCE_SPIRIT_AWARD_OVER = 200006; //在鏖战英灵军团奖励已耗尽

    //5.5.0 英雄远征
    RET_AREAPVE_ID_NOT_ACTIVE = 200007; //战备副本未解锁
    RET_AREAPVE_CHALLENGE_TIME_NOT_ENOUGH = 200008; //挑战次数不足
    RET_AREA_PVP_CROSS_SERVER_ERROR = 200009; //英雄远征，跨服服务器失联
    RET_AREAPVE_AWARD_ALREADY_GOT = 200010; //英雄远征，战备阶段守护兽奖励已领取
    RET_AREAPVE_AWARD_NOT_UNLOCK = 200011; //英雄远征，战备阶段守护兽奖励未解锁

  //沃野战场 200100 - 200200
  RET_SHURA_GAME_TYPE_ERROR = 200100;    //类型错误
  RET_SHURA_FIELD_AREA_NOT_OPEN_TIME = 200101;    //非修罗战场开启时间段
  RET_SHURA_FIELD_WAIT_UPDATE = 200102; //等待战场切换

  //5.6.50 限时红包 200201- 200300
	RET_TIME_ITEM_BAG_FULL	= 200201;	//背包满了
	RET_TIME_ITEM_EXPIRED	= 200202;	//过期

	//5.7.0 表情包
	RET_NOT_OWNED_EMOJI = 200300; //还未拥有这个表情

	//5.7.0 换包奖励 200301 - 200350
	RET_UPDATE_REWARD_RECEIVED				= 200301; //已经领取过了
	RET_UPDATE_REWARD_VERSION_NOT_ENOUGH	= 200302; //领取版本不够 

  //5.7.0 通行证 200351 -- 200400
  RET_BATTLE_PASS_NOT_OPEN = 200351; // 活动没有开放
  RET_BATTLE_PASS_DATA_ERROR = 200352; // 数据错误
  RET_BATTLE_PASS_NO_REWARD = 200353; // 没有可以领取的奖励

  //5.7.5 客户端获配置表格 200401 -- 200450
  RET_EXCEL_DATA_INTERNAL_ERROR = 200401; // 获取表格配置数据内部错误(线上未使用)
  RET_EXCEL_DATA_INVALID_EXCEL_DATA_TYPE = 200402; // 未处理的表格类型(线上未使用)

	//6.0.0春节祝福语 200451--200500
	RET_SPRING_WORDS_EXPIRED = 200451; //活动过期
	RET_SPRING_WORDS_OVERFLOW = 200452; //超过次数
	
	//6.0.0汉室秘宝 200501-200550
	RET_RATE_TREASURE_NO_SELECTED	= 200501; //奖池未置换完成
	RET_RATE_TREASURE_SELECT_REPEAT	= 200502; //奖池置换有重复奖品
	RET_RATE_TREASURE_DRAWING 		= 200503; //已开始抽奖，不能置换了
	RET_RATE_TREASURE_NO_DRAWED 	= 200504; //没有开始抽奖，不能重置
	
	//6.2.0l琉金转盘200601-200604
	RET_GOLD_WHEEL_INFO_NOT_FOUND			= 200601; //轮盘配置不存在
	RET_GOLD_WHEEL_PROGRESS_NOT_REACH		= 200602; //轮盘积分进度未达到
	RET_GOLD_WHEEL_PROGRESS_REWARD_HAS_GET	= 200603; //轮盘积分奖已领取
	RET_GOLD_WHEEL_PROGRESS_INFO_NOT_FOUND  = 200604; //轮盘积分奖读取失败

	//6.2.50推送礼包200701-200707
	RET_PROPELLING_GROUP_INFO_NOT_FOUND     = 200701; //推送组表单信息不存在
	RET_PROPELLING_GIFT_INFO_NOT_FOUND      = 200702; //推送礼包表单信息不存在
	RET_PROPELLING_DIRECT_INFO_NOT_FOUND    = 200703; //直充礼包信息不存在
	RET_PROPELLING_DIRECT_ID_NOT_SAME       = 200704; //直充礼包ID和推送的礼包ID不相同
	RET_PROPELLING_USER_GROUP_NOT_FOUND     = 200705; //玩家推送信息不存在
	RET_PROPELLING_GROUP_STATUS_ERROR       = 200706; //礼包不是可领取状态
	RET_PROPELLING_INDEX_ERROR              = 200707; //领取奖励的选项值错误
	
	//6.3.0定制欢庆200801-200806
	RET_CUSTOM_FESTIVAL_TASK_NOT_FINISHED = 200801; //定制欢庆领奖任务未完成
	RET_CUSTOM_FESTIVAL_TASK_NOT_IN_TIME = 200802; //定制欢庆活动时间已过
	RET_CUSTOM_FESTIVAL_TASK_FINISHED = 200803; //定制欢庆活动已领取
	RET_CUSTOM_FESTIVAL_SALE_REACH_MAX = 200804; //定制欢庆兑换达到最大次数
	RET_CUSTOM_FESTIVAL_SALE_PRICE_NOT_ENOUGH = 200805; //定制欢庆兑换资源不足
	RET_CUSTOM_FESTIVAL_SALE_NOT_IN_TIME = 200806; //定制欢庆兑换时间已过
	
	//6.3.0H5预抽卡200901-200909
	RET_PRE_LOTTERY_USER_HAS_BIND = 200901; //用户已绑定过激活码
	RET_PRE_LOTTERY_CODE_HAS_BIND = 200902; //激活码已经被绑定
	RET_PRE_LOTTERY_CODE_IS_INVALID = 200903; //激活码无效
	RET_PRE_LOTTERY_AWARD_HAS_GET = 200904; //奖励已领取
	RET_PRE_LOTTERY_AWARD_TASK_NOT_FINISH = 200905; //奖励任务未完成
	RET_PRE_LOTTERY_CODE_NOT_BIND = 200906; // 未绑定激活码
	RET_PRE_LOTTERY_AWARD_NOT_EXIST = 200907; // 奖励礼包不存在
	RET_PRE_LOTTERY_ACT_NOT_OPEN = 200908; //活动未开启
	RET_PRE_LOTTERY_BIND_CD      = 200909; //绑定CD中
	
	//6.4.0新版月基金201001-201099
	RET_DIRECT_MONTH_FUND_USER_NOT_BUY = 201001; //用户没有购买此档基金
	RET_DIRECT_MONTH_FUND_ACT_NOT_EXIST = 201002; //此基金活动不存在
	RET_DIRECT_MONTH_FUND_NOT_IN_AWARD_TIME = 201003; //不在可领取奖励时间内
	RET_DIRECT_MONTH_FUND_AWARDID_NOT_EXIST = 201004; //奖励ID不存在
	RET_DIRECT_MONTH_FUND_AWARD_HAS_GET = 201005; //奖励已经被领取
	RET_DIRECT_MONTH_FUND_AWARD_NOT_EXIST = 201006; //奖励不存在或不合法
	//6.4.50-首充累登 
	RET_NEW_FIRST_RRECHARGE_DATA_ERROR        = 201050;//首充数据错误
	RET_NEW_FIRST_RECHARGE_AWARD_OBTAINE      = 201051;//登录奖励已经领取
	RET_NEW_FIRST_RECHARGE_AWARD_NO_ACTIVE    = 201052;//登录奖励未激活
	RET_NEW_FIRST_RECHARGE_ACT_NO_ACTIVE      = 201053;//首充活动未激活

	//6.4.50主线战令201100-201199
	RET_BATTLEPASS_DUNGEON_ACT_NOT_EXIST = 201100; // 主线战令活动不存在
	RET_BATTLEPASS_DUNGEON_MISSION_NOT_EXIST = 201101; // 主线战令任务不存在
	RET_BATTLEPASS_DUNGEON_MISSION_NOT_COMPLETE = 201102; // 主线战令任务未完成
	RET_BATTLEPASS_DUNGEON_MISSION_NO_AWARD_CAN_GET = 201103; // 主线战令没有未领取的任务奖励
	RET_BATTLEPASS_DUNGEON_SERVER_INFO_NOT_EXIST = 201104; // 主线战令全服奖励不存在
	RET_BATTLEPASS_DUNGEON_SERVER_BUY_COUNT_NOT_ENOUGH = 201105; // 主线战令服务器购买人数不足
	RET_BATTLEPASS_DUNGEON_SERVER_AWARD_HAS_GOT = 201106; // 主线战令全服奖励已领取
	RET_BATTLEPASS_DUNGEON_SERVER_NO_AWARD_CAN_GET = 201107; // 主线战令没有未领取的全服奖励

    //6.4.50-镇魂街联动（大富翁）201200-201219
    RET_CHESS_LIANDONG_NOT_OPEN                     = 201200; //活动未开启
    RET_CHESS_LIANDONG_GROUP_NOT_EXISTS             = 201201; //分组不存在
    RET_CHESS_LIANDONG_LOCATION_WRONG               = 201202; //位置错误
    RET_CHESS_LIANDONG_DICE_RANDOM_FAILED           = 201203; //随机点数失败
    RET_CHESS_LIANDONG_DICE_APPOINT_WRONG           = 201204; //指定点数错误
    RET_CHESS_LIANDONG_EVENT_NOT_MATCH              = 201205; //位置事件不匹配
    RET_CHESS_LIANDONG_QUESTION_ID_NOT_EXISTS       = 201206; //问题ID不存在
    RET_CHESS_LIANDONG_QUESTION_CONFIG_NOT_EXISTS   = 201207; //问题配置不存在
    RET_CHESS_LIANDONG_QUESTION_AWARD_ERROR         = 201208; //问题给的奖励失败
    RET_CHESS_LIANDONG_QUESTION_NOT_ANSWER          = 201209; //问题没有回答
    RET_CHESS_LIANDONG_TASK_CONFIG_NOT_EXISTS       = 201210; //任务配置不存在
    RET_CHESS_LIANDONG_TASK_NOT_COMPLETED           = 201211; //任务未完成
    RET_CHESS_LIANDONG_TASK_AWARD_HAS_GET           = 201212; //任务奖励已领取
    RET_CHESS_LIANDONG_TASK_TIMEOUT                 = 201213; //任务已过期
    //end

    //6.5.0-神兵谱201220-201249
    RET_SACREDWP_BOOK_CONFIG_NOT_EXISTS             = 201220; //神兵谱配置不存在
    RET_SACREDWP_BOOK_INDEX_ERROR                   = 201221; //神兵谱操作位置不正确
    RET_SACREDWP_BOOK_NOT_FOUND                     = 201222; //神兵谱没找到
    RET_SACREDWP_BOOK_ID_IS_SAME                    = 201223; //当前神器ID与操作位置上的神器ID相同
    RET_SACREDWP_BOOK_CANNOT_ACTIVED                = 201224; //不能用于激活
    RET_SACREDWP_BOOK_QUALITY_ERROR                 = 201225; //神兵品质不正确
    RET_SACREDWP_BOOK_FRAGMENT_ERROR                = 201226; //洗练碎片异常
    RET_SACREDWP_BOOK_FULL_ATTRS                    = 201227; //洗炼属性已满
    RET_SACREDWP_BOOK_NOT_FULL_ATTRS                = 201228; //洗炼属性未满
    RET_SACREDWP_BOOK_FRAGMENT_NOT_EXISTS           = 201229; //洗练碎片不存在
    RET_SACREDWP_BOOK_FRAGMENT_ZERO_SIZE            = 201230; //洗练碎片数量为零
    RET_SACREDWP_BOOK_FRAGMENT_TYPE_ERROR           = 201231; //洗练碎片类型错误
    RET_SACREDWP_BOOK_FRAGMENT_CONFIG_NOT_EXISTS    = 201232; //洗练碎片配置不存在
    RET_SACREDWP_BOOK_FRAGMENT_QUALITY_ERROR        = 201233; //洗练碎片品质不正确
    RET_SACREDWP_BOOK_REBIRTH_AWARDS_EMPTY          = 201234; //没有可返还的资源
    RET_SACREDWP_BOOK_ALREADY_MAX_STAR              = 201235; //神兵谱已经是最大星级
    RET_SACREDWP_BOOK_ACTIVED_STAR_NOT_ENOUGH       = 201236; //神兵谱当前激活星级不足
    //end
	//6.5.0-定制礼包201250-201259
	RET_CUSTOMPACK_ACTIVITY_NO_OPEN                 = 201250;//活动没开启 
	RET_CUSTOMPACAK_ACTIVITY_DURING_AWARDTIME       = 201251;//领奖时间阶段
	RET_CUSTOMPACK_CONFIG_ERROR                     = 201252;//配置数据错误
	RET_CUSTOMPACK_HAS_RECHARGED                    = 201253;//礼包已充值
	RET_CUSTOMPACK_REQUEST_ERROR                    = 201254;//请求错误
	RET_CUSTOMPACK_CANNOT_OBTAIN                    = 201255;//礼包不可领取
	
    RET_BANUSER_REASON_REFUND                       = 201260; //退款导致的封号

    //6.5.0-应用宝分享201270-201279
	RET_SHARE_TYPE_ERROR                            = 201270;//分享类型错误
	RET_SHARE_NOT_COMPLETE_TASK                     = 201271;//未达到分享条件

    //6.5.0-鎏金神兵201280-201289
    RET_GOLD_SOUL_TRAIN_ATTR_MAX                    = 201280; //金色魂炼属性已满
    RET_SACREDWP_INHERIT_QUENCHING_IS_EXISTS        = 201281; //熔铸时，被继承的神兵存在淬炼进度
    RET_SACREDWP_SOUL_TRAIN_ASKILL_ATTR_MAX         = 201282; //炼技（属性孔）已达最大
    RET_SACREDWP_SOUL_TRAIN_ASKILL_SKILL_MAX        = 201283; //炼技（技能孔）已达最大值

	//6.5.0-将军弈养成201290-201299
	RET_SRPG_KNIGHT_NOT_EXIST                       = 201290;//武将不存在
	RET_SRPG_KNIGHT_LEVEL_NOT_EXIST                 = 201291;//武将升级后信息不存在
	RET_SRPG_KNIGHT_REACH_MAX_LEVEL                 = 201292;//武将已达到最高等级
	RET_SRPG_KNIGHT_LEVEL_UP_TYPE_ERROR             = 201293;//武将升级类型不存在（0 预览 1 升级）
	RET_SRPG_KNIGHT_NOT_HAVE_THIS_ARMS              = 201294;//武将无法使用此种兵种
	RET_SRPG_KNIGHT_ASSOCIATION_INFO_NOT_EXIST      = 201295;//武将关系表不存在
	RET_SRPG_FORMATION_INDEX_EXCEED_LIMIT           = 201296;//队列数超过限制
	RET_SRPG_FORMATION_STATION_LENGTH_EXCEED_LIMIT  = 201297;//队列中的阵位超过9个
	
	//6.5.0-将军弈PVE201300-201309
	RET_SRPGPVE_MGR_NOT_EXIST                       = 201300;//将军弈PVE活动不存在
	RET_SRPGPVE_STAGE_INFO_NOT_EXIST                = 201301;//将军弈当前关卡信息不存在
	RET_SRPGPVE_PROCESS_ERROR                       = 201302;//进行的非将军弈当前进度关卡
	RET_SRPGPVE_NEXT_STAGE_INFO_NOT_EXIST           = 201303;//将军弈下一关卡信息不存在
	RET_SRPGPVE_MONSTER_INFO_NOT_EXIST              = 201304;//将军弈怪物信息不存在
	RET_SRPGPVE_BATTLE_ERROR                        = 201305;//将军弈进行战斗失败
	RET_SRPGPVE_DROP_AWARDS_ERROR                   = 201306;//将军弈战斗掉落信息错误
	//end
////////////////////////////////////////////////////////////////////////////////

///////////////////////////300000 -- 390000 SS2RS///////////////////////////////


////////////////////////////////////////////////////////////////////////////////

///////////////////////////400000 -- 490000 Cross SS2CS/////////////////////////
	RET_ALLIANCE_SPIRIT_REWARD_ERROR = 400000;//鏖战英灵联盟分奖失败

  //5.5.0 英雄远征
  RET_AREA_BATTLE_NOT_EXISTS     = 400003;//远征活动未开启
  RET_AREA_BATTLE_TEAM_NOT_EXISTS = 400004; // 队伍不存在
  RET_AREA_BATTLE_CAN_NOT_CREATE_TEAM = 400005; //不能创建队伍
  RET_AREA_BATTLE_CREATE_TEAM_FAILED  = 400006; //创建队伍失败
  RET_AREA_BATTLE_NOT_TEAM_LEADER     = 400007;// 不是队长
  RET_AREA_BATTLE_ENTER_TEAM_FAILED   = 400008;//加入队伍失败
  RET_AREA_BATTLE_TEAM_READY_FAILED   = 400009;//队伍准备失败
  RET_AREA_BATTLE_GAME_NOT_EXISTS     = 400010;//game 不存在 
  RET_AREA_BATTLE_STATE_ERROR         = 400011;//赛事阶段错误
  RET_AREA_BATTLE_GET_REWARD_ERROR    = 400012;//领取奖励失败
  RET_AREA_BATTLE_CAN_NOT_BE_INVITED  = 400013;//不能被邀请

  //6.0.0-天下瑞兽
  RET_WORLD_WAR_SPRING_MONSTER_AWARD_DROP_ERROR = 400030; //奖励掉落错误
	RET_WORLD_WAR_SPRING_MONSTER_CLOSE = 400031; //天下瑞兽活动未开始

  //6.0.0-烽火夺天下
  RET_LOU_LAN_ENTER_MAP_TIME_LIMIT 		= 400050; //活动开始两周后，不能再参加了
  RET_LOU_LAN_ENTER_MAP_ALLIANCE_LIMIT	= 400051; //活动开始新建的联盟不能再参加了
  RET_LOU_LAN_NON_ENTER_MAP 			= 400052; //尚未进入地图
  RET_LOU_LAN_LEADER_OFFLINE_TIME_NOT_REACH = 400053; //势力王的离线时间未到
  RET_LOU_LAN_PERMISSION_DENIED 		= 400054; //没有权限操作
  RET_LOU_LAN_GET_MAP_CELL_FAIL     = 400055; //获取地图数据失败
  RET_LOU_LAN_GET_GROUP_INFO_FAIL   = 400056;//获取势力信息失败
  RET_LOU_LAN_MAP_IS_END            = 400057; //地图活动已经结束
  RET_LOU_LAN_FINAL_REWARDS_IS_GOT  = 400058; //最终奖励已经领取
  RET_LOU_LAN_MIGRATE_POS_IS_SET    = 400059; //集结点已经设置过了
  RET_LOU_LAN_POS_IS_NIL            = 400060; //目标点不可用
  RET_LOU_LAN_GROUP_HAVE_WAR_CITY   = 400061; //已经有宣战城市
  RET_LOU_LAN_CITY_CAN_NOT_BE_WAR   = 400062; //目标不能被宣战
  RET_LOU_LAN_USER_IS_IN_CITY       = 400063; //已经在城里了
  RET_LOU_LAN_CITY_IS_IN_WAR        = 400064; //城池正在战斗
  RET_LOU_LAN_STRENGTH_NOT_ENOUGH   = 400065; //体力不足
  RET_LOU_LAN_NOT_OPEN = 400066; //烽火天下活动未开启
  RET_LOU_LAN_CROSS_SERVER_ERROR = 400067; //烽火天下跨服异常
  RET_LOU_LAN_STATE_ERROR = 400068; //烽火天下活动异常
  RET_LOU_LAN_HP_NOT_ENOUH          = 400069; //官邸生命值不够 
  RET_LOU_LAN_NOT_UNSET_MINISTER_TIME = 400070; //罢免丞相时间过了
  RET_LOU_LAN_MAX_ROB_CART_TIMES    = 400071; //夺镖次数最大限制
  RET_LOU_LAN_ROB_TARGET_GROUP_SAME = 400072; //夺镖目标势力相同
  RET_LOU_LAN_CART_NOT_EXISTS       = 400073; //镖车不存在
  RET_LOU_LAN_CART_ROB_MAX_TIMES    = 400074; //目标镖车已经被劫最大次数
  RET_LOU_LAN_HAVE_ROB_THIS_CART    = 400075; //已经截过这个镖车
  RET_LOU_LAN_CART_IS_TO_END        = 400076; //镖车已经要结束了
  RET_LOU_LAN_HELP_BACK_TIMES_MAX   = 400077; //帮助夺回次数最大
  RET_LOU_LAN_CART_IS_EXISTS        = 400078; //镖车已经存在或为领奖
  RET_LOU_LAN_ROB_NOT_EXISTS        = 400079; //抢夺不存在 
  RET_LOU_LAN_ROB_USER_TO_FAST      = 400080; //抢夺玩家太频繁
  RET_LOU_LAN_NOT_IN_ESCORT_TIME    = 400081; //未到运镖时间
  RET_LOU_LAN_ESCORT_TIMES_TO_MAX   = 400082; //运镖次数最大
  RET_LOU_LAN_GOODS_ID_NOT_EXISTS   = 400083; //需要刷新商品信息
  RET_LOU_LAN_GOODS_RAND_TIMES_MAX  = 400084; //属性商品次数最大
  RET_LOU_LAN_TARGET_COND_NOT_FIT   = 400085; //对方不满足条件

  //6.1.0
  RET_PET_FORMATION_STAR_LIMIT = 400100;  //累计星数不够
  //兵符赋能强化 
  RET_RUNESTONE_ENHANCE_NOT_SELECT_TYPE = 400200;//未选择赋能分支
  RET_RUNESTONE_ENHANCE_NOT_ACTIVATE_SPIRITY_HOLE = 400201;//强化灵力槽未激活：
  RET_RUNESTONE_ENHANCE_NOT_ENHANCE_FUNCTION      = 400202;//兵符不具备赋能
  RET_RUNESTONE_ENHANCE_UPGRADE_SPIRITYHOLE            = 400203;//赋能强化灵力槽超出范围
  RET_RUNESTONE_ENHANCE_UPGRADE_SPIRITYHOLE_ACTIVATED  = 400204;//赋能强化灵力槽已经激活
  RET_RUNESTONE_ENHANCE_SELECT_TYPE                    = 400205;//选择赋能分支错误

  //6.2.0
	RET_EQUIPMENT_SPIRIT_BAG_FULL = 400300;	//器灵背包满
	RET_EQUIPMENT_SPIRIT_EQUIP = 400301; //器灵已被装备
	RET_EQUIPMENT_SPIRIT_NO_FIND = 400302; //器灵不存在
	RET_EQUIPMENT_SPIRIT_SKILL_REPEAT = 400303; //器灵技能重复
	RET_EQUIPMENT_SPIRIT_INVALID_SKILL = 400304; //无效技能，没有或不能用的技能
	RET_EQUIPMENT_SPIRIT_USED = 400305; //器灵已经被用了
	RET_EQUIPMENT_SPIRIT_TYPE_ERR = 400306; //类型错误
  //南征北战
  RET_WAR_FARE_MAX_RESET_TIMES = 400401; //最大重置次数
  RET_WAR_FARE_ACT_NOT_OPEN    = 400402;//活动未开启
  //6.3.0-超级幸运星 start
    RET_SUPERLUCKLY_ACT_CLOSE = 4004100; //活动为开启 
    RET_SUPERLUCKLY_LOTTERY_TYPE = 4004101;//抽奖类型错误
    RET_SUPERLUCKLY_NO_APPOINT_PET = 4004102; //为指定战宠
    RET_SUPERLUCKLY_APPOINT_PET_WRONG = 4004103; //指定战宠不可指定
    RET_SUPERLUCKLY_CONFIG_NO_EXIST = 4004104; //配置数据不存在
    RET_SUPERLUCKLY_EXCHANGE_COIN_TIMEOUT = 4004105;//兑换代币时间已过
    RET_SUPERLUCKLY_EXCHANGE_TIMES_OUT = 4004106;//兑换进度超过限制
    RET_SUPERLUCKLY_PROGRESS_NOT_ENOUGH = 4004107;//抽奖进度不足
 //end
 //6.3.0-主线守关人 start 
    RET_MAIN_ROAD_HAS_PASSED            = 4004120 ; //章节均打通
    RET_MAIN_ROAD_CINFIG_DATA_NO_EXIST  = 4004121 ;//配置数据不存在
	//6.4.0-主角新养成
	RET_MAINROLE_CONFIG_NO_EXIST        =4004200;//配置数据不存在
	RET_MAINROLE_CHAPTER_NO_REACHED     =4004201;//主线副本章节未达到
	RET_MAINROLE_HAS_COMPLETE_TRANSFERJOB = 4004202;//玩家已经完成职业
	RET_MAINROLE_NO_SELECT_JOB            = 4004203;//玩家没有选择职业id 
	RET_MAINROLE_HAS_PERFECT_FINISH_TRIAL = 4004204;//玩家已经完成副本试炼
	RET_MAINROLE_CAN_NOT_COMPLETE_JOB     = 4004205;//玩家条件不足不能完成职业
	RET_MAINROLE_HAS_NO_COMPLETE_TRANSFERJOB  =4004206;//玩家没有完成职业
	RET_MAINROLE_JOB_UP_LEVEL             = 4004207;//职业升级数据错误[规定为1]
	RET_MAINROLE_BOOK_NO_UNLOCK             = 4004208;//玩家书籍没有(拥有)
	RET_MAINROLE_BOOK_UP_LEVEL            = 4004209;//书籍升级数据错误[规定为1]
	RET_MAINROLE_PREBOOK_LEVEL_NOT_ENOUGH = 4004210;//书籍的前置书籍等级不够
	RET_MAINROLE_HAS_ONWED_BOOK           = 4004211;//书籍合成玩家已经拥有该书籍
	RET_MAINROLE_JOBUP_LEVEL_NOT_ENOUGH   = 4004212;//玩家职业升级等级不足
	RET_MAINROLE_JOBUP_GIGHTVALUE_NOT_ENOUGH = 4004213;//玩家职业升级战力不足
	RET_MAINROLE_JOBUP_TOTAL_BOOKSLVL_NOT_ENOUGH = 4004214;//玩家职业升级书籍研习总等级不足
	RET_MAINROLE_CLINET_DATA_GROUPID_INVALID             = 4004215;//前端group_id数据不合法
	RET_MAINROLE_RESELECT_JOBID_SAME          = 4004216; //玩家重新选择职业id相同
	RET_MAINROLE_TRANSFERJOB_MAX_LEVEL        =4004217;//玩家职业等级满级
	RET_MAINROLE_TRANSFERJOB_BOOK_MAX_LEVEL   =4004218;//修行书籍已经满级
  //end
////////////////////////////////////////////////////////////////////////////////



}

enum ID {
  //网关中的协议
  ID_C2S_KeepAlive = 10000; //心跳包
  ID_S2C_KeepAlive = 10001; 
  ID_C2S_Login = 10002; //登录
  ID_S2C_Login = 10003;
  ID_C2S_Create = 10004; //创角
  ID_S2C_Create = 10005;
  ID_C2S_Offline = 10009; //下线
  ID_C2S_GetServerTime = 10011; //获取服务器时间
  ID_S2C_GetServerTime = 10012;

  ID_C2S_Flush = 10006;
  ID_S2C_Flush = 10007;
  ID_S2C_GetUser = 10008;
  ID_S2C_GetKnight = 10010;
  ID_C2S_TestBattle = 10013;
  ID_S2C_TestBattle = 10014;
  ID_S2C_SendBattleReport = 10015;
  ID_S2C_FightKnight = 10016;
  ID_C2S_ChangeFormation = 10017;
  ID_S2C_ChangeFormation = 10018;
  ID_C2S_ChangeTeamKnight = 10019;
  ID_S2C_ChangeTeamKnight = 10020;
  ID_C2S_AddTeamKnight = 10021;
  ID_S2C_AddTeamKnight = 10022;
  ID_S2C_GetItem = 10023;
  ID_S2C_GetFragment = 10024;
  ID_C2S_Shopping = 10025;
  ID_S2C_Shopping = 10026;
  ID_C2S_UseItem = 10027;
  ID_S2C_UseItem = 10028;
  ID_S2C_GetEquipment = 10029;
  ID_C2S_EnterShop = 10030;
  ID_S2C_EnterShop = 10031;
  ID_S2C_OpObject = 10032;
  ID_C2S_Sell = 10033;
  ID_S2C_Sell = 10034;
  ID_C2S_FragmentCompound = 10035;
  ID_S2C_FragmentCompound = 10036;
  ID_C2S_MysticalShopInfo = 10037;
  ID_S2C_MysticalShopInfo = 10038;
  ID_C2S_MysticalShopRefresh = 10039;
  ID_S2C_MysticalShopRefresh = 10040;
  ID_S2C_GetTreasureFragment = 10041;
  ID_S2C_GetTreasure = 10042;
  ID_S2C_FightResource = 10043;
  ID_C2S_AddFightEquipment = 10044;
  ID_S2C_AddFightEquipment = 10045;
  ID_C2S_ClearFightEquipment = 10046;
  ID_S2C_ClearFightEquipment = 10047;
  ID_C2S_AddFightTreasure = 10048;
  ID_S2C_AddFightTreasure = 10049;
  ID_C2S_ClearFightTreasure = 10050;
  ID_S2C_ClearFightTreasure = 10051;
  ID_C2S_GiftCode = 10052;
  ID_S2C_GiftCode = 10053;
  ID_S2C_RollNotice = 10054; //跑马灯公告
  ID_S2C_HOF_Points = 10055;
  ID_S2C_GetAwakenItem = 10056;
  ID_C2S_AwakenShopInfo = 10057;
  ID_S2C_AwakenShopInfo = 10058;
  ID_C2S_AwakenShopRefresh = 10059;
  ID_S2C_AwakenShopRefresh = 10060;
  ID_C2S_GetTencentReward = 10061; //获取腾讯应用宝礼包
  ID_C2S_ChangeTitle = 10062; //装备称号
  ID_S2C_ChangeTitle = 10063;
  ID_C2S_UpdateFightValue = 10064; //更新玩家战斗力数据(重算战斗力)
  ID_C2S_FragmentSale = 10065;
  ID_S2C_FragmentSale = 10066;
  ID_C2S_ItemCompose = 10067;
  ID_S2C_ItemCompose = 10068;
  ID_C2S_ChangeName = 10069;
  ID_S2C_ChangeName = 10070;
  ID_C2S_GetKnightProperty = 10071;	//武将属性
  ID_S2C_GetKnightProperty = 10072;	//武将属性
  ID_C2S_GetCrystalShopInfo = 10073;	//获取水晶商店信息请求
  ID_S2C_GetCrystalShopInfo = 10074;	//获取水晶商店信息返回
  ID_C2S_GetQuestionnaireTime = 10075;    //获取问卷信息请求
  ID_S2C_GetQuestionnaireTime = 10076;    //获取问卷信息返回
  ID_C2S_GetUserVersion = 10077;//你懂得
  ID_S2C_GetUserVersion = 10078;
  ID_C2S_GetRedHint = 10079;	//登陆数据(只登陆拉一次，中途有数据变动比如影响红点的放到GetRedHintSec)
  ID_S2C_GetRedHint = 10080;
  ID_C2S_GetCrystalWeekShopInfo = 10081;	//获取水晶周重置商店信息请求
  ID_S2C_GetCrystalWeekShopInfo = 10082;	//获取水晶周重置商店信息返回

	//红点协议整合(切换到主界面都会拉取，只需要登陆拉一次的放到GetRedHint)
	ID_C2S_GetRedHintSec = 10083;
	ID_S2C_GetRedHintSec = 10084;

	//阿里游戏中心(特权通知)
	ID_S2C_NotifyAliMsg = 10085;

  //通用积分资源
  ID_S2C_GetResource = 10086;

  //对武将使用物品
  ID_C2S_KnightUseItem = 10087;
  ID_S2C_KnightUseItem = 10088;

  //符文/符文书
  ID_S2C_GetRune = 10089;
  ID_S2C_GetRuneBook = 10090;
   
  //5.4.50 随机商店一键刷新购买
  ID_C2S_AutoShopRefresh = 10091; //随机商店一键刷新
  ID_S2C_AutoShopRefresh = 10092;

	//6.3.50 购买背包位置
	ID_C2S_BuyBagSize = 10093;
	ID_S2C_BuyBagSize = 10094;


  //聊天
  ID_C2S_ChatRequest = 10100;
  ID_S2C_ChatRequest = 10101;
  ID_S2C_Chat = 10102;
  ID_S2C_Notify = 10103;
  ID_C2S_GetCreate = 10104;
  ID_S2C_GetCreate = 10105;
  ID_C2S_UploadVoiceMailToken = 10106;
  ID_S2C_UploadVoiceMailToken = 10107;
  ID_C2S_DownloadVoiceMailToken = 10108;
  ID_S2C_DownloadVoiceMailToken = 10109;
  ID_C2S_UploadTopCorpMsgBoardVoiceMail = 10110;
  ID_S2C_UploadTopCorpMsgBoardVoiceMail = 10111;
  ID_C2S_DownloadTopCorpMsgBoardVoiceMail = 10112;
  ID_S2C_DownloadTopCorpMsgBoardVoiceMail = 10113;
  ID_C2S_SetChatShield = 10114;
  ID_S2C_SetChatShield = 10115;

  //好友
  ID_C2S_GetFriendList = 10200;
  ID_S2C_GetFriendList = 10201;
  ID_C2S_GetFriendReqList = 10202;
  ID_S2C_GetFriendReqList = 10203;
  ID_C2S_RequestAddFriend = 10204;
  ID_S2C_RequestAddFriend  = 10205;
  ID_C2S_RequestDeleteFriend = 10206;
  ID_S2C_RequestDeleteFriend = 10207;
  ID_C2S_ConfirmAddFriend = 10208;
  ID_S2C_ConfirmAddFriend = 10209;
  ID_C2S_FriendPresent = 10210;
  ID_S2C_FriendPresent = 10211;
  ID_C2S_GetFriendPresent = 10212;
  ID_S2C_GetFriendPresent = 10213;
  ID_C2S_GetPlayerInfo = 10214;
  ID_S2C_GetPlayerInfo = 10215;
  ID_S2C_AddFriendRespond = 10216;
  ID_C2S_ChooseFriend = 10217;
  ID_S2C_ChooseFriend = 10218;
  ID_C2S_GetFriendsInfo = 10219;
  ID_S2C_GetFriendsInfo = 10220;
  ID_C2S_KillFriend = 10221;
  ID_S2C_KillFriend = 10222;
  ID_S2C_DelFriend = 10223;

  ID_C2S_GetCrossFriendList = 10224;    //获取跨服好友列表
  ID_S2C_GetCrossFriendList = 10225;
  ID_C2S_ReqAddCrossFriend = 10226;     //请求添加跨服好友
  ID_S2C_ReqAddCrossFriend = 10227;
  ID_C2S_AcceptCrossFriend = 10228;     //通过跨服好友请求
  ID_S2C_AcceptCrossFriend = 10229;
  ID_S2C_RepAddCrossFriend = 10230;     //通知加好友成功
  ID_C2S_DeleteCrossFriend = 10231;     //请求删除跨服好友
  ID_S2C_DeleteCrossFriend = 10232;
  ID_C2S_RecommendCrossFriend = 10233;  //推荐跨服好友
  ID_S2C_RecommendCrossFriend = 10234;
  ID_C2S_ReqBanCrossFriend = 10235;     //拉黑跨服玩家
  ID_S2C_ReqBanCrossFriend = 10236;
  ID_C2S_ReqCrossPlayerInfo = 10237;    //请求跨服玩家信息
  ID_S2C_ReqCrossPlayerInfo = 10238;

  //主线副本
  ID_C2S_GetChapterList = 10300;
  ID_S2C_GetChapterList = 10301;
  //ID_C2S_GetStageList = 10302;
  //ID_S2C_GetStageList = 10303;
  ID_C2S_GetChapterRank = 10304;
  ID_S2C_GetChapterRank = 10305;
  ID_S2C_AddStage = 10306;
  ID_C2S_ExecuteStage  = 10307;
  ID_S2C_ExecuteStage  = 10308;
  ID_C2S_FastExecuteStage  = 10309;
  ID_S2C_FastExecuteStage  = 10310;
  ID_C2S_ChapterAchvRwdInfo  = 10311;//副本星数奖励信息
  ID_S2C_ChapterAchvRwdInfo  = 10312;
  ID_C2S_FinishChapterAchvRwd  = 10313;//获取星星成就奖励
  ID_S2C_FinishChapterAchvRwd  = 10314;
  ID_C2S_FinishChapterBoxRwd  = 10315;//获取箱子奖励
  ID_S2C_FinishChapterBoxRwd  = 10316;
  ID_C2S_ResetDungeonExecution = 10317;//重置副本次数
  ID_S2C_ResetDungeonExecution = 10318;
  ID_C2S_ResetDungeonFastTimeCd = 10319;//重置秒杀时间
  ID_S2C_ResetDungeonFastTimeCd = 10320;
  ID_S2C_ExecuteMultiStage = 10321;//副本战斗多战报协议
  ID_C2S_ExecuteMultiStage = 10322;
  ID_S2C_FirstEnterChapter = 10323;//第一次进入设置TAG
  ID_C2S_FirstEnterChapter = 10324;
  ID_C2S_FastExecuteStageOneKey = 10325;
  ID_S2C_FastExecuteStageOneKey = 10326;
  ID_C2S_ResetStageOneKey = 10327;
  ID_S2C_ResetStageOneKey = 10328;
	ID_C2S_OneKeysChapterBoxReward = 10329; //一键领取所有箱子
	ID_S2C_OneKeysChapterBoxReward = 10330;
	ID_C2S_OneKeysHardBoxReward = 10331; //一键领取所有箱子 精英副本
	ID_S2C_OneKeysHardBoxReward = 10332;

  //竞技场
  ID_C2S_GetArenaInfo = 10400;//获取竞技场信息
  ID_S2C_GetArenaInfo = 10401;
  ID_C2S_ChallengeArena = 10402;//挑战竞技场
  ID_S2C_ChallengeArena = 10403;
  ID_C2S_GetArenaTopInfo = 10404;//获取竞技场排行榜
  ID_S2C_GetArenaTopInfo = 10405;
  ID_C2S_GetArenaUserInfo = 10406;//获取竞技场排行榜
  ID_S2C_GetArenaUserInfo = 10407;
  ID_C2S_FastChallengeArena = 10408;//快速挑战竞技场
  ID_S2C_FastChallengeArena = 10409;

  //闯关
  ID_C2S_TowerInfo = 10500;
  ID_S2C_TowerInfo = 10501;
  ID_C2S_TowerChallenge = 10502;
  ID_S2C_TowerChallenge = 10503;
  ID_C2S_TowerStartCleanup = 10504;
  ID_S2C_TowerStartCleanup = 10505;
  ID_C2S_TowerStopCleanup = 10506;
  ID_S2C_TowerStopCleanup = 10507;
  ID_C2S_TowerReset = 10508;
  ID_S2C_TowerReset = 10509;
  ID_C2S_TowerGetBuff = 10510;
  ID_S2C_TowerGetBuff = 10511;
  ID_C2S_TowerRfBuff = 10512;
  ID_S2C_TowerRfBuff = 10513;
  ID_C2S_TowerRequestReward = 10514;
  ID_S2C_TowerRequestReward = 10515;
  ID_C2S_TowerRankingList = 10516;
  ID_S2C_TowerRankingList = 10517;
  ID_C2S_TowerChallengeGuide = 10518;
  ID_S2C_TowerChallengeGuide = 10519;

  //邮件
  ID_S2C_GetSimpleMail = 10600;
  ID_S2C_AddSimpleMail = 10601;
  ID_S2C_GetNewMailCount = 10602;
  ID_C2S_GetMail = 10603;
  ID_S2C_GetMail = 10604;//普通邮件
  ID_S2C_GetGiftMailCount = 10605;
  ID_C2S_GetGiftMail = 10606;
  ID_S2C_GetGiftMail = 10607;
  ID_C2S_ProcessGiftMail = 10608;
  ID_S2C_ProcessGiftMail = 10609;
  ID_C2S_TestMail= 10610;
  ID_C2S_Mail= 10611;
  ID_S2C_Mail= 10612;
  ID_C2S_GetSpecialGiftMail = 10613;
  ID_S2C_GetSpecialGiftMail = 10614;
  ID_C2S_ProcessGiftMailOneKey = 10615;
  ID_S2C_ProcessGiftMailOneKey = 10616;
	ID_C2S_RechargeErrorMail = 10617;		//充值异常
  ID_C2S_SetIgnoreStrangerMail = 10618;
  ID_S2C_SetIgnoreStrangerMail = 10619;
  ID_C2S_GetIgnoreStrangerMail = 10620;
  ID_S2C_GetIgnoreStrangerMail = 10621;

  //抽卡
  ID_C2S_RecruitInfo = 10700;
  ID_S2C_RecruitInfo = 10701;
  ID_C2S_RecruitLp = 10702;
  ID_S2C_RecruitLp = 10703;
  ID_C2S_RecruitLpTen = 10704;
  ID_S2C_RecruitLpTen = 10705;
  ID_C2S_RecruitJp = 10706;
  ID_S2C_RecruitJp = 10707;
  ID_C2S_RecruitJpTen = 10708;
  ID_S2C_RecruitJpTen = 10709;
  ID_C2S_RecruitJpTw = 10710;
  ID_S2C_RecruitJpTw = 10711;
  ID_C2S_RecruitZy = 10712;
  ID_S2C_RecruitZy = 10713;

  //技能树
  ID_C2S_GetSkillTree = 10800;
  ID_S2C_GetSkillTree = 10801;
  ID_C2S_LearnSkill = 10802;//学习和升级都用这条协议
  ID_S2C_LearnSkill = 10803;
  ID_C2S_ResetSkill= 10804;
  ID_S2C_ResetSkill = 10805;
  ID_C2S_PlaceSkill= 10806;
  ID_S2C_PlaceSkill = 10807;

  //剧情副本
  ID_C2S_GetStoryList = 10900;
  ID_S2C_GetStoryList = 10901;
  ID_C2S_ExecuteBarrier = 10902;
  ID_S2C_ExecuteBarrier = 10903;
  ID_C2S_FastExecuteBarrier = 10904;
  ID_S2C_FastExecuteBarrier = 10905;
  ID_C2S_SanguozhiAwardInfo = 10906;
  ID_S2C_SanguozhiAwardInfo = 10907;
  ID_C2S_FinishSanguozhiAward = 10908;
  ID_S2C_FinishSanguozhiAward = 10909;
  ID_C2S_ResetStoryFastTimeCd = 10910;//重置秒杀时间
  ID_S2C_ResetStoryFastTimeCd = 10911;
  ID_S2C_AddStoryDungeon = 10912;//新增剧情副本
  ID_C2S_SetStoryTag = 10913;
  ID_S2C_SetStoryTag = 10914;
  ID_C2S_GetBarrierAward = 10915;
  ID_S2C_GetBarrierAward = 10916;

  // 武将养成
  ID_C2S_UpgradeKnight = 11000;//武将强化
  ID_S2C_UpgradeKnight = 11001;
  ID_C2S_AdvancedKnight = 11002;//武将升阶
  ID_S2C_AdvancedKnight = 11003;
  ID_C2S_TrainingKnight = 11004;//武将历练
  ID_S2C_TrainingKnight = 11005;
  ID_C2S_SaveTrainingKnight = 11006;//保存武将历练
  ID_S2C_SaveTrainingKnight = 11007;
  ID_C2S_GiveupTrainingKnight = 11008;//放弃武将历练
  ID_S2C_GiveupTrainingKnight = 11009;
  ID_C2S_RecycleKnight = 11010;//武将回收
  ID_S2C_RecycleKnight = 11011;
  ID_C2S_UpgradeKnightHalo = 11012;//升级武将光环
  ID_S2C_UpgradeKnightHalo = 11013;

  ID_C2S_GetKnightAttr = 11014;//获取武将一级属性(仅供开发测试使用)
  ID_S2C_GetKnightAttr = 11015;
  ID_C2S_KnightTransform = 11016;//武将八卦镜
  ID_S2C_KnightTransform = 11017;
  ID_C2S_KnightOrangeToRed = 11018; // 武将橙色升红色
  ID_S2C_KnightOrangeToRed = 11019;
  ID_C2S_MainRoleTransexual = 11020;//主角变性
  ID_S2C_MainRoleTransexual = 11021;
  ID_C2S_KnightGolden = 11022; // 武将升金
  ID_S2C_KnightGolden = 11023;
  ID_C2S_KnightOriginStar = 11024; // 天金将升星
  ID_S2C_KnightOriginStar = 11025;
  ID_C2S_KnightOriginSwallow = 11026; // 天金将吞噬
  ID_S2C_KnightOriginSwallow = 11027;
  ID_C2S_KnightOriginSwallowUpgrade = 11028; // 天金将吞噬升级
  ID_S2C_KnightOriginSwallowUpgrade = 11029;
	ID_C2S_KnightSoulUpgrade = 11030;	//武将魂引
	ID_S2C_KnightSoulUpgrade = 11031;
	ID_C2S_CheckKnightTask = 11032;	//检查武将转职里的限制要求，将其提取出来作为一个通用的武将养成限制
	ID_S2C_CheckKnightTask = 11033;

  //练武阁
  //ID_C2S_UnlockMartial = 11100; //解锁武学
  //ID_S2C_UnlockMartial = 11101;
  ID_C2S_UpgradeMartial = 11102; //升级武学
  ID_S2C_UpgradeMartial = 11103;
  //ID_C2S_UnlockMartialTalent = 11104; //解锁天赋
  //ID_S2C_UnlockMartialTalent = 11105;
  ID_C2S_UpgradeMartialTalent = 11106; //升级天赋
  ID_S2C_UpgradeMartialTalent = 11107;
  ID_C2S_ResetMartialTalent = 11108; //重置天赋
  ID_S2C_ResetMartialTalent = 11109;
  ID_S2C_FlushMartialInfo = 11110; //Flush协议统一返回

  //武将换肤
  ID_C2S_ChangeKnightSkin = 11150; //武将换肤
  ID_S2C_ChangeKnightSkin = 11151;
  ID_S2C_FlushKnightSkinInfo = 11153;
  ID_C2S_RenewSkin = 11154;// 延时
  ID_S2C_RenewSkin = 11155;
  ID_C2S_ChangeKnightVoice = 11156;// 音频校验
  ID_S2C_ChangeKnightVoice = 11157;
  ID_C2S_ActiveSkinByItem = 11158;//使用皮肤体验卡激活
  ID_S2C_ActiveSkinByItem = 11159;

  //吃鸡H5相关接口
  ID_C2S_GetH5BindAuthCode = 11200; //吃鸡H5绑定验证码
  ID_S2C_GetH5BindAuthCode = 11201;

  //购买助手
  ID_C2S_BuyHelperInfo = 11300; //购买助手
  ID_S2C_BuyHelperInfo = 11301; //兼顾update
  ID_C2S_AddBuyHelper = 11302; //设置购买助手
  ID_S2C_AddBuyHelper = 11303;
  ID_C2S_DeleteBuyHelper = 11304; //删除购买助手设置
  ID_S2C_DeleteBuyHelper = 11305;
  ID_C2S_RunBuyHelper = 11306; //执行购买助手
  ID_S2C_RunBuyHelper = 11307;
  ID_C2S_ChangeBuyHelperIndex = 11308; //交换位置
  ID_S2C_ChangeBuyHelperIndex = 11309;

  //装备养成
  ID_C2S_UpgradeEquipment = 12000;//强化装备
  ID_S2C_UpgradeEquipment = 12001;
  ID_C2S_RefiningEquipment = 12002;//精炼装备
  ID_S2C_RefiningEquipment = 12003;
  ID_C2S_RecycleEquipment = 12004;//分解装备
  ID_S2C_RecycleEquipment = 12005;
  ID_C2S_RebornEquipment = 12006;//装备重生
  ID_S2C_RebornEquipment = 12007;
  ID_C2S_UpStarEquipment = 12008; //升星装备
  ID_S2C_UpStarEquipment = 12009;
  ID_C2S_FastRefineEquipment = 12010; //一键神练
  ID_S2C_FastRefineEquipment = 12011;
  ID_C2S_UpgradeEquipmentOneKey = 12012;//强化装备一键
  ID_S2C_UpgradeEquipmentOneKey = 12013;
  ID_C2S_EquipmentGolden = 12014;//装备升金
  ID_S2C_EquipmentGolden = 12015;//装备升金
  ID_C2S_UpStarDarkGoldEquipment = 12016; //暗金装备升星
  ID_S2C_UpStarDarkGoldEquipment = 12017; //
  ID_C2S_TransformEquipment = 12018;
  ID_S2C_TransformEquipment = 12019;
  ID_C2S_EquipmentSoulUpgrade = 12020;	//铸魂
  ID_S2C_EquipmentSoulUpgrade = 12021;
  ID_C2S_EquipmentSpiritualize = 12022;	//灵化
  ID_S2C_EquipmentSpiritualize = 12023;
  ID_C2S_EquipmentSetSpirit = 12024;	//设置器灵
  ID_S2C_EquipmentSetSpirit = 12025;


  //图鉴
  ID_C2S_GetHandbookInfo = 12100;
  ID_S2C_GetHandbookInfo = 12101;

  //叛军
  ID_S2C_GetRebel = 12200;
  ID_C2S_EnterRebelUI = 12201;
  ID_S2C_EnterRebelUI = 12202;
  ID_C2S_AttackRebel = 12203;
  ID_S2C_AttackRebel = 12204;
  ID_C2S_PublicRebel = 12205;
  ID_S2C_PublicRebel = 12206;
  ID_C2S_RebelRank = 12207;
  ID_S2C_RebelRank = 12208;
  ID_C2S_MyRebelRank = 12209;
  ID_S2C_MyRebelRank = 12210;
  ID_C2S_RefreshRebel = 12211;
  ID_S2C_RefreshRebel = 12212;
  ID_C2S_GetExploitAward = 12215;
  ID_S2C_GetExploitAward = 12216;
  ID_C2S_GetExploitAwardType = 12217;
  ID_S2C_GetExploitAwardType = 12218;
  ID_C2S_RefreshRebelShow = 12221;
  ID_S2C_RefreshRebelShow = 12222;
  ID_C2S_GetExploitAwardOneKey = 12223;
  ID_S2C_GetExploitAwardOneKey = 12224;
  ID_C2S_GetRebelOneKeyOptions = 12225;
  ID_S2C_GetRebelOneKeyOptions = 12226;
  ID_C2S_SetRebelOneKeyOptions = 12227;
  ID_S2C_SetRebelOneKeyOptions = 12228;

  //宝物系统
  ID_C2S_GetTreasureFragmentRobList = 12300;//获取宝物碎片抢夺列表
  ID_S2C_GetTreasureFragmentRobList = 12301;
  ID_C2S_RobTreasureFragment = 12302;//抢夺宝物碎片
  ID_S2C_RobTreasureFragment = 12303;
  ID_C2S_UpgradeTreasure = 12304;//强化宝物
  ID_S2C_UpgradeTreasure = 12305;
  ID_C2S_RefiningTreasure = 12306;//精炼宝物
  ID_S2C_RefiningTreasure = 12307;
  ID_C2S_ComposeTreasure = 12308;//合成宝物
  ID_S2C_ComposeTreasure = 12309;
  ID_C2S_TreasureFragmentForbidBattle = 12310;//使用免战牌
  ID_S2C_TreasureFragmentForbidBattle = 12311;
  ID_C2S_RecycleTreasure = 12312;//宝物重生
  ID_S2C_RecycleTreasure = 12313;
  ID_C2S_FastRobTreasureFragment = 12314;//5次夺宝
  ID_S2C_FastRobTreasureFragment = 12315;
  ID_C2S_TreasureSmelt = 12316;     //宝物熔炼
  ID_S2C_TreasureSmelt = 12317;
  ID_C2S_TreasureForge = 12318;     //宝物铸造
  ID_S2C_TreasureForge = 12319;
  ID_C2S_OneKeyRobTreasureFragment = 12320;	//一键夺宝
  ID_S2C_OneKeyRobTreasureFragment = 12321;
  ID_C2S_TreasureGolden = 12322; //升金
  ID_S2C_TreasureGolden = 12323;
  ID_C2S_TreasureTransform = 12324;
  ID_S2C_TreasureTransform = 12325;
  ID_C2S_UpgradeTreasureStar = 12326; //宝物升星
  ID_S2C_UpgradeTreasureStar = 12327;
  ID_C2S_PackageTreasure = 12328; //宝物打包
  ID_S2C_PackageTreasure = 12329;
	ID_C2S_TreasureSourceTrace = 12330;
	ID_S2C_TreasureSourceTrace = 12331;
	ID_C2S_TreasureSourceTraceReset = 12332;
	ID_S2C_TreasureSourceTraceReset = 12333;

  //新手引导
  ID_C2S_GetGuideId = 12400;
  ID_S2C_GetGuideId = 12401;
  ID_C2S_SaveGuideId = 12402;
  ID_S2C_SaveGuideId = 12403;

  //VIP副本
  ID_C2S_GetVip = 12500;
  ID_S2C_GetVip = 12501;
  ID_C2S_ExecuteVipDungeon = 12502;
  ID_S2C_ExecuteVipDungeon = 12503;
  ID_C2S_ResetVipDungeonCount = 12504;
  ID_S2C_ResetVipDungeonCount = 12505;

  // 喝酒
  ID_C2S_LiquorInfo = 12600;
  ID_S2C_LiquorInfo = 12601;
  ID_C2S_Drink = 12602;
  ID_S2C_Drink = 12603;

  //icon点击统计
  ID_C2S_IconClick = 12620;
  ID_S2C_IconClick = 12621;

  //充值相关
  ID_C2S_GetRecharge = 12700;
  ID_S2C_GetRecharge = 12701;
  ID_C2S_UseMonthCard = 12702;
  ID_S2C_UseMonthCard = 12703;
  ID_S2C_RechargeSuccess = 12704;
  ID_C2S_GetRechargeBonus = 12705;
  ID_S2C_GetRechargeBonus= 12706;
  ID_C2S_GetMonthCardTimesReward = 12707;//4.8.0 获取月卡次数奖励
  ID_S2C_GetMonthCardTimesReward = 12708;
  ID_C2S_GetRechargeTimes     = 12709;
  ID_S2C_GetRechargeTimes     = 12710;

  // 关公
  ID_C2S_MrGuanInfo = 12800;
  ID_S2C_MrGuanInfo = 12801;
  ID_C2S_Worship = 12802;
  ID_S2C_Worship = 12803;

  // 登陆奖励
  ID_C2S_LoginRewardInfo = 12900;
  ID_S2C_LoginRewardInfo = 12901;
  ID_C2S_LoginReward = 12902;
  ID_S2C_LoginReward = 12903;

  //每日任务
  ID_C2S_GetDailyMission = 13000;
  ID_S2C_GetDailyMission = 13001;
  ID_C2S_FinishDailyMission = 13002;
  ID_S2C_FinishDailyMission = 13003;
  ID_C2S_GetDailyMissionAward = 13004;
  ID_S2C_GetDailyMissionAward = 13005;
  ID_C2S_ResetDailyMission = 13006;
  ID_S2C_ResetDailyMission = 13007;
  ID_S2C_FlushDailyMission = 13008;
  ID_C2S_DailyMissionGameHelper = 13009;
  ID_S2C_DailyMissionGameHelper = 13010;

  // 无双
  ID_C2S_WushInfo = 13100;
  ID_S2C_WushInfo = 13101;
  ID_C2S_WushGetBuff = 13102;
  ID_S2C_WushGetBuff = 13103;
  ID_C2S_WushChallenge = 13104;
  ID_S2C_WushChallenge = 13105;
  ID_C2S_WushReset = 13106;
  ID_S2C_WushReset = 13107;
  ID_C2S_WushRankingList = 13108;
  ID_S2C_WushRankingList = 13109;
  ID_C2S_WushApplyBuff = 13110;
  ID_S2C_WushApplyBuff = 13111;
  ID_C2S_WushBuy = 13112;
  ID_S2C_WushBuy = 13113;
  ID_C2S_WushChallengePlus = 13114;
  ID_S2C_WushChallengePlus = 13115;

  //真三国无双  5.6.0
  ID_C2S_Wush2Info = 13130;    //获取信息
  ID_S2C_Wush2Info = 13131;  
  ID_C2S_Wush2Challenge = 13132;   //挑战
  ID_S2C_Wush2Challenge = 13133;
  ID_C2S_Wush2Reset = 13134;       //重置
  ID_S2C_Wush2Reset = 13135;
  ID_C2S_Wush2RankingList = 13136;  //排行，没有就先留着
  ID_S2C_Wush2RankingList = 13137;
  ID_C2S_Wush2ChallengePlus = 13138;  //一键挑战 
  ID_S2C_Wush2ChallengePlus = 13139;
  ID_C2S_Wush2Buy = 13140;   //次数购买
  ID_S2C_Wush2Buy = 13141;

  // 目标系统
  ID_C2S_TargetInfo = 13200;
  ID_S2C_TargetInfo = 13201;
  ID_C2S_TargetGetReward = 13202;
  ID_S2C_TargetGetReward = 13203;

  //MAIN GROUTH
  ID_C2S_GetMainGrouthInfo = 13301;
  ID_S2C_GetMainGrouthInfo = 13302;
  ID_C2S_UseMainGrouthInfo = 13303;
  ID_S2C_UseMainGrouthInfo = 13304;

  //名人堂
  ID_C2S_HOF_UIInfo = 13400;
  ID_S2C_HOF_UIInfo = 13401;
  ID_C2S_HOF_Confirm = 13402;
  ID_S2C_HOF_Confirm = 13403;
  ID_C2S_HOF_Sign = 13404;
  ID_S2C_HOF_Sign = 13405;
  ID_C2S_HOF_RankInfo = 13406;
  ID_S2C_HOF_RankInfo = 13407;

  //开服基金
  ID_C2S_GetFundInfo = 13500; //获取全服基金购买信息
  ID_S2C_GetFundInfo = 13501;
  ID_C2S_GetUserFund = 13502; //获取个人基金信息
  ID_S2C_GetUserFund = 13503;
  ID_C2S_BuyFund = 13504; //购买基金
  ID_S2C_BuyFund = 13505;
  ID_C2S_GetFundAward = 13506; //领取基金奖励
  ID_S2C_GetFundAward = 13507;
  ID_C2S_GetFundWeal = 13508; //领取福利奖励
  ID_S2C_GetFundWeal = 13509;

  // 城池挂机
  ID_C2S_CityInfo = 13600;
  ID_S2C_CityInfo = 13601;
  ID_C2S_CityAttack = 13602;
  ID_S2C_CityAttack = 13603;
  ID_C2S_CityPatrol = 13604;
  ID_S2C_CityPatrol = 13605;
  ID_C2S_CityReward = 13606;
  ID_S2C_CityReward = 13607;
  ID_C2S_CityAssist = 13608;
  ID_S2C_CityAssist = 13609;
  ID_C2S_CityCheck = 13610;
  ID_S2C_CityCheck = 13611;
  ID_S2C_CityAssisted = 13612;
  ID_C2S_CityOneKeyReward = 13613;
  ID_S2C_CityOneKeyReward = 13614;
  ID_C2S_CityOneKeyPatrol = 13615;
  ID_S2C_CityOneKeyPatrol = 13616;
  ID_C2S_CityOneKeyPatrolSet = 13617;
  ID_S2C_CityOneKeyPatrolSet = 13618;
  ID_C2S_CityTechUp = 13619;
  ID_S2C_CityTechUp = 13620;

  //可配置活动
  ID_C2S_GetCustomActivityInfo = 13700; //获取可配置活动信息
  ID_S2C_GetCustomActivityInfo = 13701;
  ID_S2C_UpdateCustomActivity = 13702; //更新可配置活动
  ID_S2C_UpdateCustomActivityQuest = 13703; //更新可配置活动任务
  ID_C2S_GetCustomActivityAward = 13704; //领取可配置活动奖励
  ID_S2C_GetCustomActivityAward = 13705;
  ID_S2C_UpdateCustomSeriesActivity = 13706; //更新系列活动
  ID_C2S_GetCustomSeriesActivity = 13707; //获取系列活动
  ID_S2C_GetCustomSeriesActivity = 13708;
  ID_C2S_GetWeekCustomActivityInfo = 13709; //获取周常活动信息
  ID_S2C_GetWeekCustomActivityInfo = 13710;
  ID_C2S_GetWeekCustomActivityAward = 13711; //领取周常活动奖励
  ID_S2C_GetWeekCustomActivityAward = 13712;
  ID_S2C_WeekUpdateCustomActivity = 13713; //更新周常新文件内容活动

  //节日活动
  ID_C2S_GetHolidayEventInfo = 13800;
  ID_S2C_GetHolidayEventInfo = 13801;
  ID_C2S_GetHolidayEventAward = 13802;
  ID_S2C_GetHolidayEventAward = 13803;

  //觉醒相关功能
  ID_C2S_ComposeAwakenItem = 13900; //道具合成
  ID_S2C_ComposeAwakenItem = 13901;
  ID_C2S_PutonAwakenItem = 13902; //装备觉醒道具
  ID_S2C_PutonAwakenItem = 13903;
  ID_C2S_AwakenKnight = 13904; //武将觉醒
  ID_S2C_AwakenKnight = 13905;
  ID_C2S_FastComposeAwakenItem = 13906; //一键道具合成
  ID_S2C_FastComposeAwakenItem = 13907;
  ID_C2S_AutoAwakenKnight = 13908; //武将一键觉醒
  ID_S2C_AutoAwakenKnight = 13909;

  //开服七天活动
  ID_C2S_GetDaysActivityInfo = 14000;
  ID_S2C_GetDaysActivityInfo = 14001;
  ID_C2S_FinishDaysActivity = 14002;
  ID_S2C_FinishDaysActivity = 14003;
  ID_C2S_GetDaysActivitySell = 14004;
  ID_S2C_GetDaysActivitySell = 14005;
  ID_C2S_PurchaseActivitySell = 14006;
  ID_S2C_PurchaseActivitySell = 14007;
  ID_S2C_FlushDaysActivity = 14008;
  ID_C2S_GetSevenDaysDailySales = 14009;
  ID_S2C_GetSevenDaysDailySales = 14010;
  ID_C2S_BuySevenDaysDailySale = 14011;
  ID_S2C_BuySevenDaysDailySale = 14012;

  ID_C2S_UpgradeDress = 14100;
  ID_S2C_UpgradeDress = 14101;
  ID_S2C_GetDress = 14156;
  ID_C2S_AddFightDress = 14157;
  ID_S2C_AddFightDress = 14158;
  ID_C2S_ClearFightDress = 14159;
  ID_S2C_ClearFightDress = 14160;
  ID_C2S_RecycleDress = 14161;
  ID_S2C_RecycleDress = 14162;
  ID_C2S_UpgradeDressOneKey = 14163;
  ID_S2C_UpgradeDressOneKey = 14164;
  ID_C2S_FairyDress = 14165;
  ID_S2C_FairyDress = 14166;

	//微信分享
  ID_C2S_Share = 14200;
  ID_S2C_Share = 14201;
  ID_C2S_GetShareState = 14202;
  ID_S2C_GetShareState = 14203;
  ID_C2S_GetPhoneBindNotice = 14204;
  ID_S2C_GetPhoneBindNotice = 14205;

  //封测充值返还
  ID_C2S_GetRechargeBack = 14300;//查看是否有返还信息
  ID_S2C_GetRechargeBack = 14301;
  ID_C2S_RechargeBackGold = 14302;//领取返还元宝
  ID_S2C_RechargeBackGold = 14303;

  //军团 16000 - 17000 为军团 勿用
  //默认获取
  ID_C2S_GetCorpList = 16000;//获取军团列表
  ID_S2C_GetCorpList = 16001;
  ID_C2S_GetJoinCorpList = 16002;//获取玩家申请军团列表
  ID_S2C_GetJoinCorpList = 16003;
  ID_C2S_GetCorpDetail = 16004;//获取自身帮会信息 刷新自身帮会信息都通过这条
  ID_S2C_GetCorpDetail = 16005;
  ID_C2S_GetCorpMember = 16006;//获取军团成员信息
  ID_S2C_GetCorpMember= 16007;
  ID_C2S_GetCorpHistory= 16008;//获取军团动态
  ID_S2C_GetCorpHistory= 16009;
  ID_S2C_NotifyCorpDismiss = 16010;//军团解散消息
  //军团权利行为
  //以下为所有人的权利
  ID_C2S_CreateCorp = 16100;//创建帮会
  ID_S2C_CreateCorp = 16101;
  ID_C2S_RequestJoinCorp = 16102;//请求加入帮会
  ID_S2C_RequestJoinCorp = 16103;
  ID_C2S_DeleteJoinCorp = 16104;//删除加入帮会请求
  ID_S2C_DeleteJoinCorp = 16105;
  ID_C2S_QuitCorp = 16106;//退出帮会
  ID_S2C_QuitCorp = 16107;
  ID_C2S_SearchCorp = 16108;//查找帮会
  ID_S2C_SearchCorp = 16109;
  ID_C2S_ExchangeLeader = 16110;//弹劾军团长
  ID_S2C_ExchangeLeader = 16111;
  //以下为部分人的权利（军团长 副军团长）
  ID_C2S_ConfirmJoinCorp = 16200;//确认加入帮会
  ID_S2C_ConfirmJoinCorp = 16201;
  ID_C2S_ModifyCorp = 16202;//修改军团信息（内部公告，宣言，标识）
  ID_S2C_ModifyCorp = 16203;
  ID_C2S_DismissCorpMember = 16204;//踢人
  ID_S2C_DismissCorpMember = 16205;
  ID_C2S_GetCorpJoin= 16206;//查看军团申请
  ID_S2C_GetCorpJoin= 16207;
  ID_S2C_MyCorpChangedByCorpLeader = 16208;
  //军团长Only
  ID_C2S_DismissCorp = 16300;//解散帮会
  ID_S2C_DismissCorp = 16301;
  ID_C2S_CorpStaff = 16302;//任命
  ID_S2C_CorpStaff = 16303;
  ID_C2S_SetCorpChapterId = 16304;//设置军团副本ID
  ID_S2C_SetCorpChapterId = 16305;//设置军团副本ID
	//军团演武台皮肤
	ID_C2S_CorpSkinInfo = 16320;	//演武台皮肤信息
	ID_S2C_CorpSkinInfo = 16321;
	ID_C2S_CorpSkinSelect = 16322;	//演武台选择
	ID_S2C_CorpSkinSelect = 16323;
  //军团祭天
  ID_C2S_GetCorpWorship = 16400;//祭天信息
  ID_S2C_GetCorpWorship = 16401;
  ID_C2S_CorpContribute = 16402;//祭天
  ID_S2C_CorpContribute = 16403;
  ID_C2S_GetCorpContributeAward = 16404;//祭祀领奖
  ID_S2C_GetCorpContributeAward = 16405;
  //军团商店 (特殊)
  ID_C2S_GetCorpSpecialShop = 16500;//获取特殊军团商店信息
  ID_S2C_GetCorpSpecialShop = 16501;
  ID_C2S_CorpSpecialShopping = 16502;//特殊军团商店购买
  ID_S2C_CorpSpecialShopping = 16503;
  //军团副本
  ID_C2S_GetCorpChapter= 16600;//获取军团副本信息
  ID_S2C_GetCorpChapter = 16601;
  ID_C2S_GetCorpDungeonInfo= 16602;//获取军团副本信息
  ID_S2C_GetCorpDungeonInfo = 16603;
  ID_C2S_ExecuteCorpDungeon = 16604;//获取军团副本信息
  ID_S2C_ExecuteCorpDungeon = 16605;
  ID_S2C_FlushCorpDungeon =16606;//有信息刷新 通知
  ID_C2S_GetDungeonAwardList = 16607;//获取军团副本砸蛋信息
  ID_S2C_GetDungeonAwardList = 16608;//
  ID_C2S_GetDungeonAward = 16609;//砸蛋
  ID_S2C_GetDungeonAward = 16610;
  ID_C2S_GetDungeonCorpRank = 16611;//军团排行
  ID_S2C_GetDungeonCorpRank = 16612;
  ID_C2S_GetDungeonCorpMemberRank = 16613;//军团个人排行
  ID_S2C_GetDungeonCorpMemberRank = 16614;
  ID_C2S_GetDungeonAwardCorpPoint = 16615;//获取军团副本通关后的帮贡奖励
  ID_S2C_GetDungeonAwardCorpPoint = 16616;//
  ID_S2C_FlushDungeonAward = 16617;
  ID_C2S_ResetDungeonCount = 16618;//购买副本挑战次数
  ID_S2C_ResetDungeonCount = 16619;//购买副本挑战次数
  ID_C2S_GetCorpChapterRank = 16620;//军团副本总排行
  ID_S2C_GetCorpChapterRank = 16621;
  //跨服群英战
  ID_C2S_GetCorpCrossBattleInfo = 16700;//获取群英战信息
  ID_S2C_GetCorpCrossBattleInfo = 16701;//获取群英战信息
  ID_C2S_ApplyCorpCrossBattle = 16702;//报名//军团长 副军团长才有权限
  ID_S2C_ApplyCorpCrossBattle = 16703;//
  ID_C2S_QuitCorpCrossBattle = 16704;//退出报名
  ID_S2C_QuitCorpCrossBattle = 16705;
  ID_C2S_GetCorpCrossBattleList = 16706;//获取报名列表
  ID_S2C_GetCorpCrossBattleList = 16707;
  ID_C2S_GetCrossBattleEncourage = 16708;//鼓舞信息
  ID_S2C_GetCrossBattleEncourage = 16709;
  ID_C2S_CrossBattleEncourage = 16710;//鼓舞
  ID_S2C_CrossBattleEncourage = 16711;
  ID_C2S_GetCrossBattleField = 16712;//赛区信息
  ID_S2C_GetCrossBattleField = 16713;
  ID_C2S_GetCrossBattleEnemyCorp = 16714;//对方军团信息
  ID_S2C_GetCrossBattleEnemyCorp = 16715;
  ID_C2S_CrossBattleChallengeEnemy= 16718;//挑战
  ID_S2C_CrossBattleChallengeEnemy = 16719;
  ID_C2S_ResetCrossBattleChallengeCD= 16720;//重置挑战CD
  ID_S2C_ResetCrossBattleChallengeCD= 16721;
  ID_C2S_SetCrossBattleFireOn = 16722;//设置集火
  ID_S2C_SetCrossBattleFireOn = 16723;
  ID_C2S_CrossBattleMemberRank = 16724;//军团成员战绩
  ID_S2C_CrossBattleMemberRank = 16725;
  //ID_C2S_CrossBattleFieldReport = 16726;//查看战况
  //ID_S2C_CrossBattleFieldReport = 16727;
  ID_S2C_BroadCastState = 16728;//广播状态
  ID_C2S_GetCorpCrossBattleTime = 16729;//获取时间
  ID_S2C_GetCorpCrossBattleTime = 16730;//获取时间
  ID_S2C_FlushCorpCrossBattleList = 16731;//刷新
  ID_S2C_FlushCorpCrossBattleField  = 16732;//刷新通知分配成功
  ID_S2C_FlushCorpEncourage = 16733;//鼓舞了发消息
  ID_S2C_FlushCorpBattleResult = 16734;//军团战斗发消息
  ID_S2C_FlushFireOn = 16735;//军团集火
  ID_S2C_FlushBattleMemberInfo = 16736;//军团玩家信息
  //军团副本(新版)
  ID_C2S_GetNewCorpChapter= 16800;//获取军团副本信息
  ID_S2C_GetNewCorpChapter = 16801;
  ID_C2S_GetNewCorpDungeonInfo= 16802;//获取军团副本信息
  ID_S2C_GetNewCorpDungeonInfo = 16803;
  ID_C2S_ExecuteNewCorpDungeon = 16804;//获取军团副本信息
  ID_S2C_ExecuteNewCorpDungeon = 16805;
  ID_S2C_FlushNewCorpDungeon =16806;//有信息刷新 通知
  ID_C2S_GetNewDungeonAwardList = 16807;//获取军团副本砸蛋列表
  ID_S2C_GetNewDungeonAwardList = 16808;//
  ID_C2S_GetNewDungeonAward = 16809;//砸蛋
  ID_S2C_GetNewDungeonAward = 16810;
  ID_C2S_GetNewDungeonCorpMemberRank = 16811;//军团个人排行
  ID_S2C_GetNewDungeonCorpMemberRank = 16812;
  ID_S2C_FlushNewDungeonAward = 16813;
  ID_C2S_ResetNewDungeonCount = 16814;//购买副本挑战次数
  ID_S2C_ResetNewDungeonCount = 16815;//购买副本挑战次数
  ID_C2S_GetNewChapterAward = 16816;//获取章节奖励
  ID_S2C_GetNewChapterAward = 16817;//
  ID_C2S_GetNewDungeonAwardHint = 16818;//获取军团副本砸蛋领奖相关
  ID_S2C_GetNewDungeonAwardHint = 16819;//
  ID_C2S_GetNewCorpChapterRank = 16820;//军团副本总排行
  ID_S2C_GetNewCorpChapterRank = 16821;
  ID_C2S_SetNewCorpRollbackChapter = 16822; //设置回退军团副本
  ID_S2C_SetNewCorpRollbackChapter = 16823;
  ID_C2S_GetCorpDungeonOption = 16824; //军团副本设置
  ID_S2C_GetCorpDungeonOption = 16825;
  ID_C2S_SetCorpDungeonOption = 16826; //军团副本设置
  ID_S2C_SetCorpDungeonOption = 16827;

  ID_C2S_GetCorpTechInfo = 16900; //获取军团科技信息
  ID_S2C_GetCorpTechInfo = 16901;
  ID_C2S_DevelopCorpTech = 16902; //研发军团科技
  ID_S2C_DevelopCorpTech = 16903;
  ID_C2S_LearnCorpTech = 16904; // 学习军团科技
  ID_S2C_LearnCorpTech = 16905;
  ID_C2S_CorpUpLevel = 16906; // 军团手动升级
  ID_S2C_CorpUpLevel = 16907;
  ID_S2C_DevelopCorpTechBroadcast = 16908; //军团科技等级变化时广播
  ID_S2C_CorpUpLevelBroadcast = 16909; //军团升级广播

  //精英副本
  ID_C2S_Hard_GetChapterList = 14400;
  ID_S2C_Hard_GetChapterList = 14401;
  ID_C2S_Hard_GetChapterRank = 14402;
  ID_S2C_Hard_GetChapterRank = 14403;
  ID_S2C_Hard_AddStage = 14404;
  ID_C2S_Hard_ExecuteStage  = 14405;
  ID_S2C_Hard_ExecuteStage  = 14406;
  ID_C2S_Hard_FastExecuteStage  = 14407;
  ID_S2C_Hard_FastExecuteStage  = 14408;
  ID_C2S_Hard_FinishChapterBoxRwd  = 14409;//获取箱子奖励
  ID_S2C_Hard_FinishChapterBoxRwd  = 14410;
  ID_C2S_Hard_ResetDungeonExecution = 14411;//重置副本次数
  ID_S2C_Hard_ResetDungeonExecution = 14412;
  ID_S2C_Hard_ExecuteMultiStage = 14413;//副本战斗多战报协议
  ID_C2S_Hard_ExecuteMultiStage = 14414;
  ID_S2C_Hard_FirstEnterChapter = 14415;//第一次进入设置TAG
  ID_C2S_Hard_FirstEnterChapter = 14416;
  ID_S2C_Hard_GetChapterRoit = 14417;//获取精英副本暴动列表
  ID_C2S_Hard_GetChapterRoit = 14418;
  ID_S2C_Hard_FinishChapterRoit = 14419;//解决副本暴动
  ID_C2S_Hard_FinishChapterRoit = 14420;
  ID_C2S_Hard_FastExecuteStageOneKey = 14421;
  ID_S2C_Hard_FastExecuteStageOneKey = 14422;
  ID_C2S_ResetHardStageOneKey = 14423;
  ID_S2C_ResetHardStageOneKey = 14424;

  // 赌博
  ID_C2S_WheelInfo = 14500;
  ID_S2C_WheelInfo = 14501;
  ID_C2S_PlayWheel = 14502;
  ID_S2C_PlayWheel = 14503;
  ID_C2S_WheelReward = 14504;
  ID_S2C_WheelReward = 14505;
  ID_C2S_WheelRankingList = 14506;
  ID_S2C_WheelRankingList = 14507;

  ID_C2S_GoldWheelInfo = 14520;
  ID_S2C_GoldWheelInfo = 14521;
  ID_C2S_PlayGoldWheel = 14522;
  ID_S2C_PlayGoldWheel = 14523;
  ID_C2S_GoldWheelReward = 14524;
  ID_S2C_GoldWheelReward = 14525;
  ID_C2S_GoldWheelRankingList = 14526;
  ID_S2C_GoldWheelRankingList = 14527;
  ID_C2S_GoldWheelProcessReward = 14528;//领取轮盘积分进度奖
  ID_S2C_GoldWheelProcessReward = 14529;
  
	// vip周礼包
  ID_C2S_VipDiscountInfo = 14600;
  ID_S2C_VipDiscountInfo = 14601;
  ID_C2S_BuyVipDiscount = 14602;
  ID_S2C_BuyVipDiscount = 14603;

  //单人跨服战
  ID_C2S_GetCrossBattleInfo = 14700;//获取跨服战信息
  ID_S2C_GetCrossBattleInfo = 14701;
  ID_C2S_GetCrossBattleTime = 14702;//获取跨服战时间
  ID_S2C_GetCrossBattleTime = 14703;
  //ID_C2S_GetCrossBattleGroup = 14704;//获取跨服战国家信息 //不用了
  //ID_S2C_GetCrossBattleGroup = 14705;
  ID_C2S_SelectCrossBattleGroup = 14706;//选择跨服战国家
  ID_S2C_SelectCrossBattleGroup = 14707;
  ID_C2S_EnterScoreBattle = 14708;//进入积分赛界面
  ID_S2C_EnterScoreBattle = 14709;
  ID_C2S_GetCrossBattleEnemy = 14710; //获取积分赛对手信息
  ID_S2C_GetCrossBattleEnemy = 14711;
  ID_C2S_ChallengeCrossBattleEnemy = 14712;//挑战对手
  ID_S2C_ChallengeCrossBattleEnemy = 14713;
  ID_C2S_GetWinsAwardInfo = 14714;//获取连胜信息
  ID_S2C_GetWinsAwardInfo= 14715;
  ID_C2S_FinishWinsAward = 14716;//获取连胜奖励
  ID_S2C_FinishWinsAward= 14717;
  ID_C2S_GetCrossBattleRank = 14718;//获取跨服战排名
  ID_S2C_GetCrossBattleRank = 14719;
  ID_C2S_CrossCountReset = 14720;//购买相关刷新次数
  ID_S2C_CrossCountReset = 14721;
  ID_S2C_FlushCrossContestScore = 14722;//跨服刷新积分
  ID_S2C_FlushCrossContestRank = 14723;//跨服刷新排名
  //争霸赛
  ID_C2S_GetCrossArenaInfo = 14724;//争霸赛信息
  ID_S2C_GetCrossArenaInfo = 14725;
  ID_C2S_GetCrossArenaInvitation = 14726;//邀请函信息
  ID_S2C_GetCrossArenaInvitation = 14727;
  ID_C2S_GetCrossArenaBetsInfo = 14728;//押注信息
  ID_S2C_GetCrossArenaBetsInfo = 14729;
  ID_C2S_GetCrossArenaBetsList = 14730;//押注列表
  ID_S2C_GetCrossArenaBetsList = 14731;
  ID_C2S_CrossArenaPlayBets = 14732;//押注玩家
  ID_S2C_CrossArenaPlayBets = 14733;
  ID_C2S_GetCrossArenaRankTop = 14734;//前十
  ID_S2C_GetCrossArenaRankTop = 14735;
  ID_C2S_GetCrossArenaRankUser = 14736;//自己周围的玩家信息
  ID_S2C_GetCrossArenaRankUser = 14737;
  ID_C2S_CrossArenaRankChallenge = 14738;//挑战
  ID_S2C_CrossArenaRankChallenge = 14739;//
  ID_C2S_CrossArenaCountReset = 14740;//购买相关刷新次数
  ID_S2C_CrossArenaCountReset = 14741;
  ID_C2S_GetCrossArenaBetsAward = 14742;//获取押注奖励
  ID_S2C_GetCrossArenaBetsAward = 14743;
  ID_C2S_CrossArenaServerAwardInfo = 14744;//获取全服奖励信息
  ID_S2C_CrossArenaServerAwardInfo = 14745;
  ID_C2S_FinishCrossArenaServerAward = 14746;//完成全服奖励
  ID_S2C_FinishCrossArenaServerAward = 14747;
  ID_C2S_FinishCrossArenaBetsAward = 14748;//完成押注奖励
  ID_S2C_FinishCrossArenaBetsAward = 14749;
  ID_C2S_CrossArenaAddBets = 14750;//押注
  ID_S2C_CrossArenaAddBets = 14751;
  ID_C2S_GetCrossUserDetail = 14752;//获取跨服玩家信息
  ID_S2C_GetCrossUserDetail = 14753;

	//大富翁活动
  ID_C2S_RichInfo = 14800;
  ID_S2C_RichInfo = 14801;
  ID_C2S_RichMove = 14804;
  ID_S2C_RichMove = 14805;
  ID_C2S_RichBuy = 14806;
  ID_S2C_RichBuy = 14807;
  ID_C2S_RichReward = 14808;
  ID_S2C_RichReward = 14809;
  ID_C2S_RichRankingList = 14810;
  ID_S2C_RichRankingList = 14811;

  //限时副本
  ID_C2S_GetTimeDungeonList = 14900; //取限时副本活动列表
  ID_S2C_GetTimeDungeonList = 14901;
  ID_S2C_FlushTimeDungeonList = 14902; //推送限时副本活动列表
  ID_C2S_GetTimeDungeonInfo = 14903; //取限时副本活动信息
  ID_S2C_GetTimeDungeonInfo = 14904;
  ID_C2S_AddTimeDungeonBuff = 14905; //鼓舞
  ID_S2C_AddTimeDungeonBuff = 14906;
  ID_C2S_AttackTimeDungeon = 14907; //挑战
  ID_S2C_AttackTimeDungeon = 14908;

  //动态代码ID
  ID_C2S_GetCodeId = 15000;
  ID_S2C_GetCodeId = 15001;
  ID_C2S_GetCode = 15002;
  ID_S2C_GetCode= 15003;
  ID_C2S_SetCDLevel = 15004;
  ID_S2C_SetCDLevel= 15005;

	//叛军BOSS
	ID_C2S_EnterRebelBossUI = 15101;
	ID_S2C_EnterRebelBossUI = 15102;
	//ID_C2S_RebelBossEncourage = 15103;
	//ID_S2C_RebleBossEncourage = 15104;
	ID_C2S_SelectAttackRebelBossGroup = 15105;
	ID_S2C_SelectAttackRebelBossGroup = 15106;
	ID_C2S_ChallengeRebelBoss = 15107;
	ID_S2C_ChallengeRebelBoss = 15108;
	ID_C2S_RebelBossRank = 15109;
	ID_S2C_RebelBossRank = 15110;
	ID_C2S_RebelBossAwardInfo = 15111;
	ID_S2C_RebelBossAwardInfo = 15112;
	ID_C2S_RebelBossAward = 15113;
	ID_S2C_RebelBossAward = 15114;
	ID_C2S_RefreshRebelBoss = 15115;
	ID_S2C_RefreshRebelBoss = 15116;
	ID_C2S_PurchaseAttackCount = 15117;
	ID_S2C_PurchaseAttackCount = 15118;
	ID_C2S_GetRebelBossReport = 15119;
	ID_S2C_GetRebelBossReport = 15120;
	ID_C2S_RebelBossCorpAwardInfo = 15121;
	ID_S2C_RebelBossCorpAwardInfo = 15122;
	ID_C2S_FlushBossACountTime = 15123;
	ID_S2C_FlushBossACountTime = 15124;
  ID_C2S_GetRebelBossCrossUserRank = 15125;
  ID_S2C_GetRebelBossCrossUserRank = 15126;
  ID_C2S_GetRebelBossCrossCorpRank = 15127;
  ID_S2C_GetRebelBossCrossCorpRank = 15128;
	ID_C2S_RebelBossOneKeyAward = 15129;
	ID_S2C_RebelBossOneKeyAward = 15130;
  ID_C2S_ChallengeRebelBossLocal = 15131;
  ID_S2C_ChallengeRebelBossLocal = 15132;

	//叛军boss扩展
	ID_C2S_RebelBossCrossInfo = 15150;
	ID_S2C_RebelBossCrossInfo = 15151;
	ID_C2S_RebelBossCrossChallenge = 15152;
	ID_S2C_RebelBossCrossChallenge = 15153;
	ID_C2S_RebelBossCrossListen = 15154;
	ID_S2C_RebelBossCrossListen = 15155;
	ID_C2S_RebelBossCrossReport = 15156;
	ID_S2C_RebelBossCrossReport = 15157;
	ID_S2C_RebelBossCrossHarm = 15158;
	ID_S2C_RebelBossCrossChallengeCount = 15159;
	ID_C2S_RebelBossCrossBattleTest = 15160;	//战斗测试
	ID_S2C_RebelBossCrossBattleTest = 15161;

	ID_C2S_GetBlackcardWarning = 15200; //黑卡警告
	ID_S2C_GetBlackcardWarning = 15201; //黑卡警告

	//laxin
	ID_C2S_GetSpreadId = 15300;
	ID_S2C_GetSpreadId = 15301;
	 //invited req register
	ID_C2S_RegisterId = 15302;
	ID_S2C_RegisterId = 15303;

	//laxin 老玩家领奖
	ID_C2S_InvitorGetRewardInfo = 15304;
	ID_S2C_InvitorGetRewardInfo = 15305;
	ID_C2S_InvitorDrawLvlReward = 15306;
	ID_S2C_InvitorDrawLvlReward = 15307;
	ID_C2S_InvitorDrawScoreReward = 15308;
	ID_S2C_InvitorDrawScoreReward = 15309;
	//laxin  新玩家领奖
	ID_C2S_InvitedDrawReward = 15310;
	ID_S2C_InvitedDrawReward = 15311;
	ID_C2S_InvitedGetDrawReward = 15312;
	ID_S2C_InvitedGetDrawReward = 15313;

	ID_C2S_QueryRegisterRelation = 15314;
	ID_S2C_QueryRegisterRelation = 15315;
    //新玩家得到老玩家name
	ID_C2S_GetInvitorName = 15316;
	ID_S2C_GetInvitorName = 15317;

  //5.7.0--三国纪要
  ID_C2S_GetUserSummarys = 15350; //三国纪要信息
  ID_S2C_GetUserSummarys = 15351; 
  ID_C2S_CompUserSummary = 15352; //领取奖励
  ID_S2C_CompUserSummary = 15353;
  ID_S2C_UserSummaryNtf  = 15354;//三国纪要任务信息通知

  //限时优惠
  ID_C2S_ShopTimeInfo = 15400;			//获取主界面信息
  ID_S2C_ShopTimeInfo = 15401;
  ID_C2S_ShopTimeRewardInfo = 15402;    //获取全服福利信息
  ID_S2C_ShopTimeRewardInfo = 15403;
  ID_C2S_ShopTimeGetReward = 15404;		//领取全服福利
  ID_S2C_ShopTimeGetReward = 15405;
  ID_S2C_ShopTimePurchase = 15406;		//购买成功返回信息
  ID_C2S_ShopTimeStartTime = 15407;		//请求开服时间
  ID_S2C_ShopTimeStartTime = 15408;

  // vip日礼包
  ID_C2S_VipDailyInfo = 15500;
  ID_S2C_VipDailyInfo = 15501;
  ID_C2S_BuyVipDaily = 15502;
  ID_S2C_BuyVipDaily = 15503;

  //抢粮草
  ID_C2S_GetUserRice = 15600; //获取玩家粮草信息
  ID_S2C_GetUserRice = 15601;
  ID_S2C_UpdateUserRice = 15602; //更新客服端玩家粮草信息(包括对手信息)
  ID_C2S_FlushRiceRivals = 15603; //刷新对手
  ID_S2C_FlushRiceRivals = 15604;
  ID_C2S_RobRice = 15605; //抢粮
  ID_S2C_RobRice = 15606;
  ID_S2C_ChangeUserRice = 15607; //更新客户端玩家粮草数据
  ID_C2S_GetRiceEnemyInfo = 15608; //获取仇人列表
  ID_S2C_GetRiceEnemyInfo = 15609;
  ID_C2S_RevengeRiceEnemy = 15610; //复仇
  ID_S2C_RevengeRiceEnemy = 15611;
  ID_C2S_GetRiceAchievement = 15612; //获得成就
  ID_S2C_GetRiceAchievement = 15613;
  ID_C2S_GetRiceRankList = 15614; //获取排行榜
  ID_S2C_GetRiceRankList = 15615;
  ID_C2S_GetRiceRankAward = 15616; //获取排行奖励
  ID_S2C_GetRiceRankAward = 15617;
  ID_C2S_BuyRiceToken = 15618; //获取排行奖励
  ID_S2C_BuyRiceToken = 15619;
  ID_S2C_FlushRiceRank = 15620; //推送粮草排名
  // GM 后台推送消息
  ID_C2S_PushSingleInfo = 15621;
  ID_S2C_PushSingleInfo = 15622;
  ID_C2S_GmChangeName   = 15623;  //后台改名,只修改跨服

  //月基金
  ID_C2S_GetMonthFundBaseInfo = 15700;
  ID_S2C_GetMonthFundBaseInfo = 15701;
  ID_C2S_GetMonthFundAwardInfo = 15702;
  ID_S2C_GetMonthFundAwardInfo = 15703;
  ID_C2S_GetMonthFundAward = 15704;
  ID_S2C_GetMonthFundAward = 15705;

  // 限时抽卡
  ID_C2S_ThemeDropZY			= 15750;
  ID_S2C_ThemeDropZY			= 15751;
  ID_C2S_ThemeDropAstrology		= 15752;
  ID_S2C_ThemeDropAstrology		= 15753;
  ID_C2S_ThemeDropExtract		= 15754;
  ID_S2C_ThemeDropExtract		= 15755;

  // 新日常副本
  ID_C2S_DungeonDailyInfo		= 15776;
  ID_S2C_DungeonDailyInfo		= 15777;
  ID_C2S_DungeonDailyChallenge  = 15778;
  ID_S2C_DungeonDailyChallenge  = 15779;

  //SpeXialScore(for tw)
  ID_C2S_GetSpeXialScoreInfo = 15800; //获取积分信息
  ID_S2C_GetSpeXialScoreInfo = 15801;
  ID_C2S_GetSpeXialScoreRank = 15802; //获取积分排名信息
  ID_S2C_GetSpeXialScoreRank = 15803;
  ID_C2S_GetSpeXialScoreAward = 15804; //获取积分成就奖励
  ID_S2C_GetSpeXialScoreAward = 15805;
  //社交账号绑定奖励(for sm)
  ID_C2S_GetAccountBindingInfo = 15810; //获取账号绑定信息
  ID_S2C_GetAccountBindingInfo = 15811;
  ID_C2S_GetAccountBindingAward = 15812; //获得绑定奖励
  ID_S2C_GetAccountBindingAward = 15813;

	//无双博士
  ID_C2S_WushBossInfo = 15900;
  ID_S2C_WushBossInfo = 15901;
  ID_C2S_WushBossChallenge = 15902;
  ID_S2C_WushBossChallenge = 15903;
  ID_C2S_WushBossBuy = 15904;
  ID_S2C_WushBossBuy = 15905;

  //限时团购
  ID_C2S_GetGroupBuyConfig	= 17000;		//获取配置
  ID_S2C_GetGroupBuyConfig	= 17001;
  ID_C2S_GetGroupBuyMainInfo	= 17002;		//主界面
  ID_S2C_GetGroupBuyMainInfo	= 17003;
  ID_C2S_GetGroupBuyRanking	= 17004;		//排行榜
  ID_S2C_GetGroupBuyRanking	= 17005;
  ID_C2S_GetGroupBuyTaskAwardInfo = 17006;	//任务奖励
  ID_S2C_GetGroupBuyTaskAwardInfo = 17007;
  ID_C2S_GetGroupBuyTaskAward	= 17008;	//领取奖励
  ID_S2C_GetGroupBuyTaskAward	= 17009;
  ID_C2S_GetGroupBuyEndInfo		= 17010;	//结束界面
  ID_S2C_GetGroupBuyEndInfo		= 17011;
  ID_C2S_GetGroupBuyRankAward	= 17012;	//排行奖励
  ID_S2C_GetGroupBuyRankAward	= 17013;
  ID_C2S_GroupBuyPurchaseGoods	= 17014;	//购买商品
  ID_S2C_GroupBuyPurchaseGoods	= 17015;
  ID_C2S_GetGroupBuyTimeInfo	= 17016;	//活动时间配置
  ID_S2C_GetGroupBuyTimeInfo	= 17017;

  //新手光环
  ID_C2S_RookieInfo = 17100;
  ID_S2C_RookieInfo = 17101;
  ID_C2S_GetRookieReward = 17102;
  ID_S2C_GetRookieReward = 17103;

  // 人物头像框设置
  ID_C2S_SetPictureFrame = 17150;
  ID_S2C_SetPictureFrame = 17151;
	// 聊天泡泡设置
	ID_C2S_SetChatBubble = 17152;
	ID_S2C_SetChatBubble = 17153;

  //活动入口时间配置
  ID_C2S_GetActivityTimeInfo = 17160;
  ID_S2C_GetActivityTimeInfo = 17161;

  //百战沙场
  ID_C2S_GetBattleFieldInfo = 17200;
  ID_S2C_GetBattleFieldInfo = 17201;
  ID_C2S_BattleFieldDetail = 17202;
  ID_S2C_BattleFieldDetail = 17203;
  ID_C2S_ChallengeBattleField = 17204;
  ID_S2C_ChallengeBattleField = 17205;
  ID_C2S_BattleFieldAwardInfo = 17206;
  ID_S2C_BattleFieldAwardInfo = 17207;
  ID_C2S_GetBattleFieldAward = 17208;
  ID_S2C_GetBattleFieldAward = 17209;
  ID_C2S_BattleFieldShopInfo = 17210;
  ID_S2C_BattleFieldShopInfo = 17211;
  ID_C2S_BattleFieldShopRefresh = 17212;
  ID_S2C_BattleFieldShopRefresh = 17213;
  ID_C2S_GetBattleFieldRank = 17214;
  ID_S2C_GetBattleFieldRank = 17215;

  // 奇门八卦活动
  ID_C2S_TrigramInfo = 17300;
  ID_S2C_TrigramInfo = 17301;
  ID_C2S_TrigramPlay = 17302;
  ID_S2C_TrigramPlay = 17303;
  ID_C2S_TrigramPlayAll = 17304;
  ID_S2C_TrigramPlayAll = 17305;
  ID_C2S_TrigramRefresh = 17306;
  ID_S2C_TrigramRefresh = 17307;
  ID_C2S_TrigramReward = 17308;
  ID_S2C_TrigramReward = 17309;

  ID_C2S_GetTrigramRank = 17310;
  ID_S2C_GetTrigramRank = 17311;

  ID_C2S_TrigramScoreBox = 17312;
  ID_S2C_TrigramScoreBox = 17313;

  // 长假活动 中秋国庆
  ID_C2S_GetSpecialHolidayActivity = 17400;
  ID_S2C_GetSpecialHolidayActivity = 17401;
  ID_S2C_UpdateSpecialHolidayActivity = 17402;
  ID_C2S_GetSpecialHolidayActivityReward = 17403;
  ID_S2C_GetSpecialHolidayActivityReward = 17404;
  ID_C2S_GetSpecialHolidaySales = 17405;
  ID_S2C_GetSpecialHolidaySales = 17406;
  ID_C2S_BuySpecialHolidaySale = 17407;
  ID_S2C_BuySpecialHolidaySale = 17408;

  ID_C2S_GetSpecialHolidayGodInfo = 17409;
  ID_S2C_GetSpecialHolidayGodInfo = 17410;
  ID_C2S_ConstructSpecialHolidayGod = 17411;
  ID_S2C_ConstructSpecialHolidayGod = 17412;
  ID_C2S_GetSpecialHolidayGodAward = 17413;
  ID_S2C_GetSpecialHolidayGodAward = 17414;
  ID_S2C_PushSpecialHolidayGodInfo = 17415;
  ID_C2S_GetAllSpeciallHolidayGodAward = 17416;
  ID_S2C_GetAllSpeciallHolidayGodAward = 17417;
  ID_S2C_PushConstructGodRecords = 17418;
  ID_C2S_PullSpecialHolidayGodInfo = 17419;
  ID_C2S_GetExcelSpecialHolidayInfo = 17420;
  ID_S2C_GetExcelSpecialHolidayInfo = 17421;
  ID_C2S_GetExcelSpecialHolidaySale = 17422;
  ID_S2C_GetExcelSpecialHolidaySale = 17423;
 
  //6.3.0-少年节新铸神像
  ID_C2S_ConstructJuvenileGod = 17432;	//铸造
  ID_S2C_ConstructJuvenileGod = 17433;
  ID_C2S_GetJuvenileGodAward = 17434;	//领奖
  ID_S2C_GetJuvenileGodAward = 17435;


  //三国庆典
  ID_C2S_CelebrationInfo = 17450;
  ID_S2C_CelebrationInfo = 17451;
  ID_C2S_CelebrationRechargeUserData = 17452;
  ID_S2C_CelebrationRechargeUserData = 17453;
  ID_C2S_CelebrationShopUserData = 17454;
  ID_S2C_CelebrationShopUserData = 17455;
  ID_C2S_CelebrationTaskUserData = 17456;
  ID_S2C_CelebrationTaskUserData = 17457;
  ID_C2S_CelebrationCheckReward = 17458;
  ID_S2C_CelebrationCheckReward = 17459;
  ID_C2S_CelebrationBuyGoods = 17460;
  ID_S2C_CelebrationBuyGoods = 17461;
	ID_C2S_CelebrationCheckAreaReward = 17462;
	ID_S2C_CelebrationCheckAreaReward = 17463;

  // vip周商店
  ID_C2S_VipWeekShopInfo = 17500;
  ID_S2C_VipWeekShopInfo = 17501;
  ID_C2S_VipWeekShopBuy = 17502;
  ID_S2C_VipWeekShopBuy = 17503;

  //资料片副本
  ID_C2S_GetExpansiveDungeonChapterList = 17600;
  ID_S2C_GetExpansiveDungeonChapterList = 17601;
  ID_C2S_ExcuteExpansiveDungeonStage = 17602;
  ID_S2C_ExcuteExpansiveDungeonStage = 17603;
  ID_C2S_GetExpansiveDungeonChapterReward = 17604;
  ID_S2C_GetExpansiveDungeonChapterReward = 17605;
  ID_C2S_FirstEnterExpansiveDungeonChapter = 17606;
  ID_S2C_FirstEnterExpansiveDungeonChapter = 17607;
  ID_S2C_AddExpansiveDungeonNewStage = 17608;
  ID_C2S_PurchaseExpansiveDungeonShopItem = 17609;
  ID_S2C_PurchaseExpansiveDungeonShopItem = 17610;


  //宠物 18000 - 18099 为宠物
  ID_S2C_GetPet = 18000;
  ID_C2S_PetUpLvl = 18001;
  ID_S2C_PetUpLvl = 18002;
  ID_C2S_PetUpStar = 18003;
  ID_S2C_PetUpStar = 18004;
  ID_C2S_PetUpAddition = 18005;    //宠物神练
  ID_S2C_PetUpAddition = 18006;
  ID_C2S_ChangeFightPet = 18007;    //宠物上阵
  ID_S2C_ChangeFightPet = 18008;
  ID_C2S_RecyclePet = 18009;		//回收宠物（分解和重生）
  ID_S2C_RecyclePet = 18010;
  ID_C2S_PetFightValue = 18011;
  ID_S2C_PetFightValue = 18012;
  ID_C2S_GetPetProtect = 18013;
  ID_S2C_GetPetProtect = 18014;
  ID_C2S_SetPetProtect = 18015;
  ID_S2C_SetPetProtect = 18016;
  ID_C2S_PetSwallow = 18017; //金宠吞噬
  ID_S2C_PetSwallow = 18018;
  ID_C2S_PetFormation = 18019; //暗金宠玄阵
  ID_S2C_PetFormation = 18020;
  ID_C2S_PetFormationUpdate = 18021; //暗金宠玄阵升级
  ID_S2C_PetFormationUpdate = 18022;
  ID_C2S_PetFormationUpdateOneKey = 18023; //暗金宠玄阵一键升级
  ID_S2C_PetFormationUpdateOneKey = 18024;
  ID_C2S_DGPetFormation = 18025; //彩金宠暗金玄阵
  ID_S2C_DGPetFormation = 18026;
  ID_C2S_DGPetUpFormation = 18027;// 彩金的暗金玄阵升阶
  ID_S2C_DGPetUpFormation = 18028;
  ID_C2S_DGPetUpFormationOneKey = 18029;// 彩金的暗金玄阵一键
  ID_S2C_DGPetUpFormationOneKey = 18030;
	//6.0.0鎏金宠相关
  ID_C2S_CGPetFormation	= 18031;	//鎏金宠彩金玄阵
  ID_S2C_CGPetFormation	= 18032;
  ID_C2S_CGPetUpFormation = 18033;	// 鎏金宠彩金阵升级
  ID_S2C_CGPetUpFormation = 18034;
  ID_C2S_CGPetUpFormationOneKey = 18035;	// 鎏金宠彩金玄阵一键
  ID_S2C_CGPetUpFormationOneKey = 18036;
  ID_C2S_CGPetSummoningSkill	= 18037;	// 宠护佑技能调整
  ID_S2C_CGPetSummoningSkill	= 18038;

  //跨服夺帅
  ID_C2S_GetCrossPvpSchedule = 19000;	// 拉取所有配置信息
  ID_S2C_GetCrossPvpSchedule = 19001;
  ID_C2S_GetCrossPvpBaseInfo = 19002;	// 拉取基本信息，round 和state主控
  ID_S2C_GetCrossPvpBaseInfo = 19003;
  ID_C2S_GetCrossPvpScheduleInfo = 19004; //每个战场信息（等级 人数...）
  ID_S2C_GetCrossPvpScheduleInfo = 19005;
  ID_C2S_ApplyCrossPvp = 19006;			//跨服夺帅报名
  ID_S2C_ApplyCrossPvp = 19007;
  //ID_C2S_GetAtcAndDefCrossPvp = 19008;  //鼓舞信息
  //ID_S2C_GetAtcAndDefCrossPvp = 19009;
  ID_C2S_ApplyAtcAndDefCrossPvp = 19010;//鼓舞
  ID_S2C_ApplyAtcAndDefCrossPvp = 19011;
  ID_C2S_GetCrossPvpRole = 19012;	//获取角色信息 (感觉没什么用啊)
  ID_S2C_GetCrossPvpRole = 19013;
  ID_C2S_GetCrossPvpArena = 19015;		//获取跨服战坑位信息
  ID_S2C_GetCrossPvpArena = 19016;
  ID_C2S_GetCrossPvpRank = 19017;		//获取排行榜
  ID_S2C_GetCrossPvpRank = 19018;
  ID_C2S_CrossPvpBattle = 19019;		//攻打坑位
  ID_S2C_CrossPvpBattle = 19020;
  ID_S2C_FlushCrossPvpArena = 19021;	//推送坑位变化信息同房间玩家
  ID_S2C_FlushCrossPvpSpecific = 19022;	//推送坑位变化信息给坑位上原玩家
  ID_S2C_FlushCrossPvpScore = 19023;	//推送积分变化
  ID_C2S_GetCrossPvpDetail = 19024;		//玩家战斗信息
  ID_S2C_GetCrossPvpDetail = 19025;
  ID_C2S_CrossPvpGetAward = 19026;		//领取排行奖励
  ID_S2C_CrossPvpGetAward = 19027;
  ID_C2S_CrossWaitInit = 19028;			//获取等待界面信息
  ID_S2C_CrossWaitInit = 19029;
  ID_C2S_CrossWaitRank = 19030;			//获取上一轮的排行榜
  ID_S2C_CrossWaitRank = 19031;
  ID_C2S_CrossWaitFlower = 19032;		//送鲜花扔鸡蛋
  ID_S2C_CrossWaitFlower = 19033;
  ID_C2S_CrossWaitFlowerRank = 19034;	//鲜花鸡蛋榜
  ID_S2C_CrossWaitFlowerRank = 19035;
  ID_C2S_CrossWaitFlowerAward = 19036;	//投注奖励
  ID_S2C_CrossWaitFlowerAward = 19037;
  ID_C2S_CrossWaitInitFlowerInfo = 19038; //一轮过后鲜花鸡蛋信息
  ID_S2C_CrossWaitInitFlowerInfo = 19039;
  ID_C2S_GetCrossPvpOb= 19040;//获取OB信息
  ID_S2C_GetCrossPvpOb = 19041;

  //弹幕系统
  ID_C2S_GetBulletScreenInfo = 20000;	//拉取弹幕信息
  ID_S2C_GetBulletScreenInfo = 20001;
  ID_C2S_SendBulletScreenInfo = 20002;	//发送弹幕
  ID_S2C_SendBulletScreenInfo = 20003;	//发送弹幕
  ID_S2C_FlushBulletScreen = 20004;

  // 组队pvp 激战虎牢关
  ID_C2S_TeamPVPStatus = 21000; // 组队pvp, 查询状态
  ID_S2C_TeamPVPStatus = 21001; // 组队pvp，状态推送
  ID_C2S_TeamPVPCreateTeam = 21002; // 组队pvp，创建队伍
  ID_S2C_TeamPVPCreateTeam = 21003;
  ID_C2S_TeamPVPJoinTeam = 21004; // 组队pvp，加入队伍
  ID_S2C_TeamPVPJoinTeam = 21005;
  ID_C2S_TeamPVPLeave = 21008; //退出组队，及组队匹配
  ID_S2C_TeamPVPLeave = 21009;
  ID_C2S_TeamPVPChangePosition = 21010; // 队长换位置
  ID_S2C_TeamPVPChangePosition = 21011;
  ID_C2S_TeamPVPKickTeamMember = 21012; // 队长踢人
  ID_S2C_TeamPVPKickTeamMember = 21013;
  ID_C2S_TeamPVPSetTeamOnlyInvited = 21014; // 队长设置房间是否开放
  ID_S2C_TeamPVPSetTeamOnlyInvited = 21015;
  ID_C2S_TeamPVPInvite = 21016; // 邀请
  ID_S2C_TeamPVPInvite = 21017;
  ID_S2C_TeamPVPBeInvited = 21018; // 被邀请
  ID_C2S_TeamPVPInvitedJoinTeam = 21019; // 持邀请卡 加入队伍
  ID_S2C_TeamPVPInvitedJoinTeam = 21020;
  ID_S2C_TeamPVPInviteCanceled = 21021;
  ID_C2S_TeamPVPInviteNPC = 21022; //一键邀请
  ID_S2C_TeamPVPInviteNPC = 21023;
  ID_C2S_TeamPVPAgreeBattle = 21024; // 组员准备好出战
  ID_S2C_TeamPVPAgreeBattle = 21025;
  ID_C2S_TeamPVPMatchOtherTeam = 21026; //队长 出战，组队完成，匹配其他队伍
  ID_S2C_TeamPVPMatchOtherTeam = 21027;
  ID_C2S_TeamPVPStopMatch = 21028; // 队长取消 匹配其他队伍
  ID_S2C_TeamPVPStopMatch = 21029;
  ID_S2C_TeamPVPBattleResult = 21030; //战斗结果
  ID_C2S_TeamPVPHistoryBattleReport = 21031; // 获取历史战报
  ID_S2C_TeamPVPHistoryBattleReport = 21032;
  ID_S2C_TeamPVPHistoryBattleReportEnd = 21033;
  ID_C2S_TeamPVPBattleTeamChange = 21034; //通知服务器布阵变化
  ID_S2C_TeamPVPBattleTeamChange = 21035;

  ID_S2C_TeamPVPCrossServerLost = 21040; // 跨服服务器挂了

  ID_C2S_TeamPVPGetRank = 21041; // 组队pvp排行版
  ID_S2C_TeamPVPGetRank = 21042;
  ID_C2S_TeamPVPGetUserInfo = 21043; // 组队pvp玩家荣誉积分等信息
  ID_S2C_TeamPVPGetUserInfo = 21044;
  ID_C2S_TeamPVPBuyAwardCnt = 21045; // 组队pvp，买奖励次数
  ID_S2C_TeamPVPBuyAwardCnt = 21046;
  ID_C2S_TeamPVPAcceptInvite = 21047; // 组队pvp，是否接受邀请
  ID_S2C_TeamPVPAcceptInvite = 21048;
  ID_C2S_TeamPVPPopChat = 21049; // 组队pvp，气泡聊天
  ID_S2C_TeamPVPPopChat = 21050;

  ID_C2S_TeamPVPTeamList = 21051; //队伍情报列表
  ID_S2C_TeamPVPTeamList = 21052;
  ID_C2S_TeamPVPApplyTeam = 21053; //申请加入队伍
  ID_S2C_TeamPVPApplyTeam = 21054;
  ID_C2S_TeamPVPCancelApply = 21055; // 取消申请
  ID_S2C_TeamPVPCancelApply = 21056;
  ID_C2S_TeamPVPApplyList = 21057; //申请信息
  ID_S2C_TeamPVPApplyList = 21058;
  ID_C2S_TeamPVPApproveApply = 21059; //接受申请
  ID_S2C_TeamPVPApproveApply = 21060;
  ID_C2S_TeamPVPRejectApply = 21061; //拒绝申请
  ID_S2C_TeamPVPRejectApply = 21062;
  ID_S2C_TeamPVPNewApplyer = 21063;

  ID_C2S_TeamPVPSkipBattle = 21064;
  ID_S2C_TeamPVPSkipBattle = 21065;

  //商店标签,方便玩家购买合成所需材料
  ID_C2S_GetShopTag = 21100;
  ID_S2C_GetShopTag = 21101;
  ID_C2S_AddShopTag = 21102;
  ID_S2C_AddShopTag = 21103;
  ID_C2S_DelShopTag = 21104;
  ID_S2C_DelShopTag = 21105;

  //老玩家回归
  ID_C2S_GetOlderPlayerInfo = 21200;
  ID_S2C_GetOlderPlayerInfo = 21201;
  ID_C2S_GetOlderPlayerVipAward = 21202;
  ID_S2C_GetOlderPlayerVipAward = 21203;
  ID_C2S_GetOlderPlayerLevelAward = 21204;
  ID_S2C_GetOlderPlayerLevelAward = 21205;
  ID_C2S_GetOlderPlayerVipExp = 21206;
  ID_S2C_GetOlderPlayerVipExp = 21207;

  //本服老玩家回归
  ID_C2S_GetLocalVeteranInfo = 21250;				//老玩家信息
  ID_S2C_GetLocalVeteranInfo = 21251;
  ID_C2S_LocalVeteranWealFree = 21252;			//福利返还免费领取
  ID_S2C_LocalVeteranWealFree = 21253;
  ID_C2S_LocalVeteranWealBuy = 21254;				//福利返还元宝购买
  ID_S2C_LocalVeteranWealBuy = 21255;
  ID_C2S_LocalVeteranHeroFree = 21256;			//英雄归来免费领取
  ID_S2C_LocalVeteranHeroFree = 21257;
  ID_C2S_LocalVeteranHeroBuy = 21258;				//英雄归来元宝购买
  ID_S2C_LocalVeteranHeroBuy = 21259;
  ID_C2S_LocalVeteranHeroRecharge = 21260;	//英雄归来充值奖励
  ID_S2C_LocalVeteranHeroRecharge = 21261;
  ID_C2S_GetLocalVeteranActionAward = 21262; //三周年任务奖励
  ID_S2C_GetLocalVeteranActionAward = 21263;
  ID_C2S_LocalVeteranExtraBuy = 21264; //三周年活动贩售
  ID_S2C_LocalVeteranExtraBuy = 21265;

  //新服老玩家回归
  ID_C2S_GetNewSerVeteranInfo = 21270;			//新服老玩家信息
  ID_S2C_GetNewSerVeteranInfo = 21271;
  ID_C2S_GetNewSerVeteranVipAward = 21272;	//Vip经验领取
  ID_S2C_GetNewSerVeteranVipAward = 21273;
  ID_C2S_GetNewSerVeteranFreeGold = 21274;	//领取免费元宝
  ID_S2C_GetNewSerVeteranFreeGold = 21275;
  ID_C2S_GetNewSerVeteranGiftBag = 21276;		//优惠礼包
  ID_S2C_GetNewSerVeteranGiftBag = 21277;

  ID_C2S_LocalVeteranExtraGetDirects = 21278;   //请求获得直冲商品列表(用于过了12点之后客户端主动请求一次)
  ID_S2C_LocalVeteranExtraGetDirects = 21279;
  ID_S2C_LocalVeteranExtraDirectChargeSuc = 21280; //直冲完成后服务器推送信息
  ID_C2S_LocalVeteranExtraDirectReward = 21281; //请求领取直冲奖励
  ID_S2C_LocalVeteranExtraDirectReward = 21282;

  // 充值翻牌
  ID_C2S_RCardInfo = 21300;
  ID_S2C_RCardInfo = 21301;
  ID_C2S_PlayRCard = 21302;
  ID_S2C_PlayRCard = 21303;
  ID_C2S_ResetRCard = 21304;
  ID_S2C_ResetRCard = 21305;
  ID_C2S_RCardBuy = 21306;
  ID_S2C_RCardBuy = 21307;

  ID_C2S_SetClothSwitch = 21311;
  ID_S2C_SetClothSwitch = 21312;

  ID_C2S_GetDays7CompInfo = 21316;
  ID_S2C_GetDays7CompInfo = 21317;
  ID_C2S_GetDays7CompAward = 21318;
  ID_S2C_GetDays7CompAward = 21319;

  ID_C2S_GetClothBook = 21330;
  ID_S2C_GetClothBook = 21331;
  ID_C2S_ChangeCloth = 21332;
  ID_S2C_ChangeCloth = 21333;
  ID_C2S_RenewCloth = 21334; //变装延期
  ID_S2C_RenewCloth = 21335;
  ID_S2C_UpClothBook = 21336; //更新变装图鉴

  ID_C2S_GetKsoul = 21400;//获取将灵信息
  ID_S2C_GetKsoul = 21401;
  ID_C2S_RecycleKsoul = 21402;//回收将灵
  ID_S2C_RecycleKsoul = 21403;
  ID_C2S_ActiveKsoulGroup = 21404;//激活阵图
  ID_S2C_ActiveKsoulGroup = 21405;
  ID_C2S_ActiveKsoulTarget = 21406;//激活成就
  ID_S2C_ActiveKsoulTarget = 21407;
  ID_C2S_SummonKsoul = 21408;//点将
  ID_S2C_SummonKsoul = 21409;
  ID_C2S_SummonKsoulExchange = 21410;//点将奇遇
  ID_S2C_SummonKsoulExchange  = 21411;
  ID_C2S_GetCommonRank =21412;//通用排行榜
  ID_S2C_GetCommonRank =21413;
  ID_C2S_ResetKsoulGroup = 21414;//重置阵图
  ID_S2C_ResetKsoulGroup = 21415;
  ID_C2S_KsoulGold = 21416;//金色将灵
  ID_S2C_KsoulGold = 21417;
	ID_C2S_ActiveKsoulFame = 21420;
	ID_S2C_ActiveKsoulFame = 21421;
	ID_C2S_UpgradeKsoulFame = 21422;
	ID_S2C_UpgradeKsoulFame = 21423;
	ID_C2S_ResetKsoulFame = 21424;
	ID_S2C_ResetKsoulFame = 21425;
	ID_C2S_OneKeyActiveKsoulFame = 21426;
	ID_S2C_OneKeyActiveKsoulFame = 21427;
	ID_C2S_OneKeyUpgradeKsoulFame = 21428;
	ID_S2C_OneKeyUpgradeKsoulFame = 21429;
  ID_C2S_AutoActiveKsoulGroup = 21430;
  ID_S2C_AutoActiveKsoulGroup = 21431;
  ID_C2S_AutoResetKsoulGroup = 21432;
  ID_S2C_AutoResetKsoulGroup = 21433;
  ID_C2S_AutoUpgradeKsoulGroup = 21434;
  ID_S2C_AutoUpgradeKsoulGroup = 21435;

  ID_C2S_OneKeyKsoulFame = 21436; 
  ID_S2C_OneKeyKsoulFame = 21437;
  ID_C2S_OneKeyResetKsoulFame = 21438;
  ID_S2C_OneKeyResetKsoulFame = 21439;

  ID_C2S_KsoulShopInfo = 21450;
  ID_S2C_KsoulShopInfo = 21451;
  ID_C2S_KsoulShopBuy = 21452;
  ID_S2C_KsoulShopBuy = 21453;
  ID_C2S_KsoulShopRefresh = 21454;
  ID_S2C_KsoulShopRefresh = 21455;
  ID_C2S_KsoulDungeonInfo = 21456;
  ID_S2C_KsoulDungeonInfo = 21457;
  ID_C2S_KsoulDungeonRefresh = 21458;
  ID_S2C_KsoulDungeonRefresh = 21459;
  ID_C2S_KsoulDungeonChallenge = 21460;
  ID_S2C_KsoulDungeonChallenge = 21461;
  ID_C2S_KsoulSetFightBase = 21462;
  ID_S2C_KsoulSetFightBase = 21463;
  ID_C2S_KsoulShopManualRefresh = 21464;
  ID_S2C_KsoulShopManualRefresh = 21465;


  //新马服FB分享协议
  ID_C2S_ShareFriendAwardInfo = 21470;
  ID_S2C_ShareFriendAwardInfo = 21471;
  ID_C2S_ShareFriendGetAward = 21472;
  ID_S2C_ShareFriendGetAward = 21473;

  // 招财
  ID_C2S_FortuneInfo	= 21480;
  ID_S2C_FortuneInfo	= 21481;
  ID_C2S_FortuneBuySilver = 21482;
  ID_S2C_FortuneBuySilver = 21483;
  ID_C2S_FortuneGetBox	= 21484;
  ID_S2C_FortuneGetBox	= 21485;

  ID_C2S_GetSecondWeek = 21500;
  ID_S2C_GetSecondWeek = 21501;
  ID_C2S_SecondWeekAward = 21502;
  ID_S2C_SecondWeekAward = 21503;
  ID_C2S_SecondWeekBuy = 21504;
  ID_S2C_SecondWeekBuy = 21505;

  ID_C2S_CorpMsgBoardContent = 21550;
  ID_S2C_CorpMsgBoardContent = 21551;
  ID_C2S_CorpMsgBoardWrite	 = 21552;
  ID_S2C_CorpMsgBoardWrite	 = 21553;
  ID_C2S_CorpMsgBoardTop	 = 21554;
  ID_S2C_CorpMsgBoardTop = 21555;
  ID_C2S_CorpMsgBoardNewNum = 21556;
  ID_S2C_CorpMsgBoardNewNum = 21557;
  ID_S2C_CorpMsgBoardBroadCast  = 21558;
  ID_C2S_CorpMsgBoardReadProcess = 21559;
  ID_S2C_CorpMsgBoardReadProcess = 21560;
  ID_C2S_CorpMsgBoardDel = 21561;
  ID_S2C_CorpMsgBoardDel = 21562;

  ID_C2S_GetRedEnvRobList = 21600;
  ID_S2C_GetRedEnvRobList = 21601;			//抢红包列表
  ID_C2S_GetRedEnvRankInfo = 21602;
  ID_S2C_GetRedEnvRankInfo = 21603;			//财神榜和手气榜
  ID_C2S_GetRedEnvAchievementInfo = 21604;
  ID_S2C_GetRedEnvAchievementInfo = 21605;	//红包成就
  ID_C2S_RobTheRedEnvelope = 21606;
  ID_S2C_RobTheRedEnvelope = 21607;			//抢红包
  ID_C2S_UseTheRedEnvelope = 21608;
  ID_S2C_UseTheRedEnvelope = 21609;			//发红包
  ID_C2S_GetRedEnvRobRecord = 21610;
  ID_S2C_GetRedEnvRobRecord = 21611;		//领取记录
  ID_C2S_GetRedEnvAchievement = 21612;
  ID_S2C_GetRedEnvAchievement = 21613;	    //领取成就奖励
  ID_S2C_PushRedEnvelope = 21614;			//推送红包信息

  ID_C2S_LegionWarInfo = 21700;//获取信息
  ID_S2C_LegionWarInfo = 21701;
  ID_C2S_LegionWarTime = 21702;//时间信息
  ID_S2C_LegionWarTime = 21703;
  ID_C2S_LegionWarApply = 21704;//报名
  ID_S2C_LegionWarApply = 21705;
  ID_C2S_LegionWarSetDefend = 21706;//布阵
  ID_S2C_LegionWarSetDefend = 21707;
  ID_C2S_LegionWarGetDefend = 21708;//获取布阵信息
  ID_S2C_LegionWarGetDefend = 21709;
  ID_C2S_LegionWarEnemyInfo = 21710;//获取敌方信息
  ID_S2C_LegionWarEnemyInfo = 21711;
  ID_C2S_LegionWarEnemyDetail = 21712;//获取敌方详情
  ID_S2C_LegionWarEnemyDetail = 21713;
  ID_C2S_LegionWarChallengeEnemy= 21714;//挑战敌人
  ID_S2C_LegionWarChallengeEnemy = 21715;
  ID_S2C_LegionWarFlushEnemy = 21716;//刷新跨服数据过来
  ID_C2S_LegionWarGetAward =21717;//领奖
  ID_S2C_LegionWarGetAward =21718;//领奖
  ID_C2S_LegionWarCountReset = 21719;//购买相关刷新次数
  ID_S2C_LegionWarCountReset = 21720;
  ID_C2S_LegionWarSetFireOn= 21721;//设置集火
  ID_S2C_LegionWarSetFireOn= 21722;
  ID_C2S_LegionWarSelfInfo = 21723;//获取防守信息
  ID_S2C_LegionWarSelfInfo = 21724;
  ID_C2S_LegionWarWaitInfo = 21725;//获取战斗结束信息
  ID_S2C_LegionWarWaitInfo = 21726;
  ID_C2S_LegionWarMemberInfo = 21727;//获取军团成员信息
  ID_S2C_LegionWarMemberInfo = 21728;
  ID_C2S_LegionWarGetUserRank = 21729;//玩家排行榜 游戏服走通用
  ID_S2C_LegionWarGetUserRank =21730;
  ID_C2S_LegionWarGetCorpRank = 21731;//军团排行榜
  ID_S2C_LegionWarGetCorpRank =21732;

  ID_C2S_GetLuckyBag = 21800;//获取福袋信息
  ID_S2C_GetLuckyBag = 21801;
  ID_C2S_LuckyBagAward = 21802;//获取福袋奖励
  ID_S2C_LuckyBagAward = 21803;
  ID_C2S_GetLuckyBagUser = 21804;//获取福袋玩家列表
  ID_S2C_GetLuckyBagUser = 21805;
  ID_S2C_FlushLuckyBagUser = 21806;

  ID_C2S_GetNewYearCardAward = 21807;	//领取新年贺卡奖励
  ID_S2C_GetNewYearCardAward = 21808;

  ID_C2S_GetWingBag = 22000;//获得神翼背包
  ID_S2C_GetWingBag = 22001;//获得神翼背包
  ID_C2S_ChangeWing = 22002;//装备神翼
  ID_S2C_ChangeWing = 22003;//装备神翼
  ID_C2S_RebirthWing = 22004;//重铸神翼
  ID_S2C_RebirthWing = 22005;//重铸神翼
  ID_C2S_UpLvlWing = 22006;//重铸神翼
  ID_S2C_UpLvlWing = 22007;//重铸神翼
  ID_C2S_GemSetWing = 22008;//镶嵌宝石神翼
  ID_S2C_GemSetWing = 22009;//镶嵌宝石神翼
  ID_C2S_GemUnsetWing = 22010;//卸载宝石神翼
  ID_S2C_GemUnsetWing = 22011;//卸载宝石神翼
  ID_C2S_GetWingProtect = 22012;//神翼护佑信息
  ID_S2C_GetWingProtect = 22013;//神翼护佑信息
  ID_C2S_SetWingProtect = 22014;//设置神翼护佑
  ID_S2C_SetWingProtect = 22015;//设置神翼护佑
  ID_C2S_DelWingProtect = 22016;//卸下神翼护佑
  ID_S2C_DelWingProtect = 22017;//卸下神翼护佑
	ID_C2S_UpStarWing = 22018;	//神翼升星
	ID_S2C_UpStarWing = 22019;
	ID_C2S_WingMoultUpgrade = 22020;//神翼脱羽
	ID_S2C_WingMoultUpgrade = 22021;

  ID_C2S_GetGemList = 22100; //获取宝石背包
  ID_S2C_GetGemList = 22101; //获取宝石背包
  ID_C2S_ComposeGem = 22102; //合成宝石
  ID_S2C_ComposeGem = 22103; //合成宝石
  ID_C2S_TransformGem = 22104; //转换宝石
  ID_S2C_TransformGem = 22105; //转换宝石
  ID_C2S_OneKeyComposeGem = 22106; //一键合成宝石
  ID_S2C_OneKeyComposeGem = 22107; //一键合成宝石
  ID_C2S_ShortCutComposeGem = 22108; //快捷合成宝石
  ID_S2C_ShortCutComposeGem = 22109; //快捷合成宝石
  ID_C2S_FuseGem = 22110; //融合宝石
  ID_S2C_FuseGem = 22111; //融合宝石
  ID_C2S_BatchTransformGems = 22112; //批量转换宝石
  ID_S2C_BatchTransformGems = 22113; //批量转换宝石

  ID_C2S_JewelerInfo = 22200; // 查
  ID_S2C_JewelerInfo = 22201;
  ID_C2S_JewelerMove = 22202; // 移
  ID_S2C_JewelerMove = 22203;
  ID_C2S_JewelerClear = 22204; // 清
  ID_S2C_JewelerClear = 22205;
  ID_C2S_JewelerBuy = 22206; // 买
  ID_S2C_JewelerBuy = 22207;
  ID_C2S_JewelerRanking = 22208; // 排行榜
  ID_S2C_JewelerRanking = 22209;
  ID_C2S_JewelerAward = 22210; // 领
  ID_S2C_JewelerAward = 22211;
  ID_C2S_JewelerAutoMove = 22212; //宝石迷阵助手移动
  ID_S2C_JewelerAutoMove = 22213;
  ID_C2S_JewelerResetMap = 22214; //宝石迷阵助手重置地图
  ID_S2C_JewelerResetMap = 22215;

  // 北伐
  ID_C2S_GVEDungeonTeamStatus = 22300; // 北伐, 查询状态
  ID_S2C_GVEDungeonTeamStatus = 22301; // 北伐，状态推送
  ID_C2S_GVEDungeonCreateTeam = 22302; // 北伐，创建队伍
  ID_S2C_GVEDungeonCreateTeam = 22303;
  ID_C2S_GVEDungeonJoinTeam = 22304; // 北伐，加入队伍
  ID_S2C_GVEDungeonJoinTeam = 22305;
  ID_C2S_GVEDungeonLeave = 22308; //退出组队，及组队匹配
  ID_S2C_GVEDungeonLeave = 22309;
  ID_C2S_GVEDungeonChangePosition = 22310; // 队长换位置
  ID_S2C_GVEDungeonChangePosition = 22311;
  ID_C2S_GVEDungeonKickTeamMember = 22312; // 队长踢人
  ID_S2C_GVEDungeonKickTeamMember = 22313;
  ID_C2S_GVEDungeonSetTeamOnlyInvited = 22314; // 队长设置房间是否开放
  ID_S2C_GVEDungeonSetTeamOnlyInvited = 22315;
  ID_C2S_GVEDungeonInvite = 22316; // 邀请
  ID_S2C_GVEDungeonInvite = 22317;
  ID_S2C_GVEDungeonBeInvited = 22318; // 被邀请
  ID_C2S_GVEDungeonInvitedJoinTeam = 22319; // 持邀请卡 加入队伍
  ID_S2C_GVEDungeonInvitedJoinTeam = 22320;
  ID_S2C_GVEDungeonInviteCanceled = 22321;
  ID_C2S_GVEDungeonInviteNPC = 22322; //一键邀请
  ID_S2C_GVEDungeonInviteNPC = 22323;
  ID_C2S_GVEDungeonAgreeBattle = 22324; // 组员准备好出战
  ID_S2C_GVEDungeonAgreeBattle = 22325;
  ID_C2S_GVEDungeonExecute = 22326; //队长 出战
  ID_S2C_GVEDungeonExecute = 22327;
  ID_S2C_GVEDungeonBattleResult = 22330; //战斗结果
  ID_C2S_GVEDungeonBattleTeamChange = 22334; //通知服务器布阵变化
  ID_S2C_GVEDungeonBattleTeamChange = 22335;
  ID_S2C_GVEDungeonInviteNPCFail = 22336; // 邀请NPC失败提示

  ID_S2C_GVEDungeonCrossServerLost = 22340; // 跨服服务器挂了

  ID_C2S_GVEDungeonGetRank = 22341; // 北伐排行版
  ID_S2C_GVEDungeonGetRank = 22342;
  ID_C2S_GVEDungeonGetUserInfo = 22343; // 北伐玩家荣誉积分等信息
  ID_S2C_GVEDungeonGetUserInfo = 22344;
  ID_C2S_GVEDungeonBuyAwardCnt = 22345; // 北伐，买奖励次数
  ID_S2C_GVEDungeonBuyAwardCnt = 22346;
  ID_C2S_GVEDungeonAcceptInvite = 22347; // 北伐，是否接受邀请
  ID_S2C_GVEDungeonAcceptInvite = 22348;
  ID_C2S_GVEDungeonPopChat = 22349; // 北伐，气泡聊天
  ID_S2C_GVEDungeonPopChat = 22350;
  ID_C2S_GVEDungeonRefreshMap = 22351; // 北伐，刷新地图
  ID_S2C_GVEDungeonRefreshMap = 22352;

  ID_C2S_GVEDungeonListenChapterTeams = 22360; // 北伐，监听某章节队伍列表
  ID_S2C_GVEDungeonListenChapterTeams = 22361;
  ID_S2C_GVEDungeonChapterTeam = 22362; // 北伐，队伍信息，推送
  ID_C2S_GVEDungeonStopListenChapterTeams = 22363; // 北伐，停止监听
  ID_S2C_GVEDungeonStopListenChapterTeams = 22364;
  ID_C2S_GVEDungeonJoinLocalTeam = 22365; // 北伐，加入本服队伍
  ID_S2C_GVEDungeonJoinLocalTeam = 22366;

  ID_C2S_GVEDungeonSkipBattle = 22367;
  ID_S2C_GVEDungeonSkipBattle = 22368;
  ID_C2S_GVEDungeonOneKey = 22369;
  ID_S2C_GVEDungeonOneKey = 22370;

  // 皇陵探宝活动
  ID_C2S_TombsInfo = 22400;
  ID_S2C_TombsInfo = 22401;
  ID_C2S_TombsExplore = 22402;
  ID_S2C_TombsExplore = 22403;
  ID_C2S_TombsShopRefresh = 22404;
  ID_S2C_TombsShopRefresh = 22405;
  ID_C2S_TombsShopBuy = 22406;
  ID_S2C_TombsShopBuy = 22407;
  ID_C2S_TombsChestOpen = 22408;
  ID_S2C_TombsChestOpen = 22409;
  ID_C2S_TombsFight = 22410;
  ID_S2C_TombsFight = 22411;
  ID_C2S_TombsAnswer = 22412;
  ID_S2C_TombsAnswer = 22413;
  ID_C2S_TombsRank = 22414;
  ID_S2C_TombsRank = 22415;
  ID_C2S_TombsRankReward = 22416;
  ID_S2C_TombsRankReward = 22417;
  ID_C2S_TombsScoreReward = 22418;
  ID_S2C_TombsScoreReward = 22419;
  ID_C2S_TombsGetRechargeReward = 22420;
  ID_S2C_TombsGetRechargeReward = 22421;
  ID_C2S_TombsDelEvent = 22422;
  ID_S2C_TombsDelEvent = 22423;
  ID_S2C_TombsRecharge = 22424;

  //交易所
  ID_C2S_SuperMarketInfo = 22500;//交易所详情//买信息
  ID_S2C_SuperMarketInfo = 22501;
  ID_C2S_SuperMarketDetail = 22502;//交易所物品详情
  ID_S2C_SuperMarketDetail = 22503;
  ID_C2S_SuperMarketPurchase = 22504;//购买
  ID_S2C_SuperMarketPurchase = 22505;
  ID_C2S_SuperMarketUserInfo = 22506;//玩家交易所信息//卖信息
  ID_S2C_SuperMarketUserInfo = 22507;
  ID_C2S_SuperMarketSell = 22508;//出售
  ID_S2C_SuperMarketSell = 22509;
  ID_C2S_SuperMarketGetBack = 22510;//下架或者回收
  ID_S2C_SuperMarketGetBack = 22511;
  ID_C2S_SuperMarketGetPay = 22512;//卖出了收钱
  ID_S2C_SuperMarketGetPay = 22513;
  ID_C2S_SuperMarketLockInfo = 22514;
  ID_S2C_SuperMarketLockInfo = 22515;
  ID_C2S_SuperMarketReleaseLock = 22516;
  ID_S2C_SuperMarketReleaseLock = 22517;
  ID_C2S_SuperMarketResetLock = 22518;
  ID_S2C_SuperMarketResetLock = 22519;
  ID_C2S_SuperMarketLog = 22520;
  ID_S2C_SuperMarketLog = 22521;

  ID_C2S_GetSacredwpBag = 22600; //获取神器背包
  ID_S2C_GetSacredwpBag = 22601; //获取神器背包
  ID_C2S_EquipSacredwp = 22602;  //装备神器
  ID_S2C_EquipSacredwp = 22603;  //装备神器
  ID_C2S_UpgradeSacredwp = 22604; //神兵升阶
  ID_S2C_UpgradeSacredwp = 22605; //神兵升阶
  ID_C2S_BaptizeSacredwpAttrs = 22606; //神兵洗炼
  ID_S2C_BaptizeSacredwpAttrs = 22607; //神兵洗炼
  ID_C2S_ReplaceSacredwpAttrs = 22608; //神兵洗炼替换
  ID_S2C_ReplaceSacredwpAttrs = 22609; //神兵洗炼替换
  ID_C2S_LockSacredwpAttrs = 22610;	//神兵洗炼锁定
  ID_S2C_LockSacredwpAttrs = 22611;	//神兵洗炼锁定
  ID_C2S_RebirthSacredwp = 22612;	//神兵重生
  ID_S2C_RebirthSacredwp = 22613;	//神兵重生
  ID_C2S_GetSacredwpRank = 22614;	//神兵排行榜
  ID_S2C_GetSacredwpRank = 22615;	//神兵排行榜
  ID_C2S_SoulTrainSacredwpAttr = 22616;	//神兵魂炼
  ID_S2C_SoulTrainSacredwpAttr = 22617;	//神兵魂炼
  ID_C2S_ConfirmSacredwpAttr = 22618;	//确认神兵魂炼
  ID_S2C_ConfirmSacredwpAttr = 22619;	//确认神兵魂炼
  ID_C2S_SacredwpDailyBaptizeInfo = 22620;	//神兵每日洗炼信息
  ID_S2C_SacredwpDailyBaptizeInfo = 22621;	//神兵每日洗炼信息
  ID_C2S_SacredwpDailyBaptizeAward = 22622;	//神兵每日洗炼奖励
  ID_S2C_SacredwpDailyBaptizeAward = 22623;	//神兵每日洗炼奖励
  ID_C2S_SacredwpTransform = 22624;	//神兵八卦镜
  ID_S2C_SacredwpTransform = 22625;	//神兵八卦镜
  ID_C2S_SacredwpSoulTrainLostInfo = 22626;	//神兵魂炼遗漏
  ID_S2C_SacredwpSoulTrainLostInfo = 22627;	//神兵魂炼遗漏
  ID_C2S_SacredwpExpandCurrentAttr = 22628; //神兵开孔
  ID_S2C_SacredwpExpandCurrentAttr = 22629; //神兵开孔
  //暗金神兵
  ID_C2S_UpdateSacredwpStar = 22630; //神兵升星
  ID_S2C_UpdateSacredwpStar = 22631;
  ID_C2S_SacredwpInherit = 22632; //神兵继承
  ID_S2C_SacredwpInherit = 22633;
  ID_C2S_WashSacredwpAskill = 22634; //神兵练技洗练
  ID_S2C_WashSacredwpAskill = 22635;
  ID_C2S_ReplaceSacredwpAskill = 22636; //神兵练技替换
  ID_S2C_ReplaceSacredwpAskill = 22637;
  ID_C2S_SoulTrainSacredwpAskill = 22638; //神兵练技魂练
  ID_S2C_SoulTrainSacredwpAskill = 22639;
  ID_C2S_ConfirmSacredwpAskill = 22640; //确认神兵练技魂练
  ID_S2C_ConfirmSacredwpAskill = 22641;
  ID_C2S_SacredwpAskillLostInfo = 22642; //神兵练技预览数据
  ID_S2C_SacredwpAskillLostInfo = 22643;
  ID_C2S_SacredwpInheritPreview = 22644; //神兵继承预览
  ID_S2C_SacredwpInheritPreview = 22645;
  ID_C2S_SacredwpQuenching = 22646; //彩金神兵-淬炼
  ID_S2C_SacredwpQuenching = 22647;
  ID_C2S_SeniorSoulTrainSacredwpAskill = 22648; //神兵练技高级魂练
  ID_S2C_SeniorSoulTrainSacredwpAskill = 22649;

  ID_C2S_GetWeekFundConfigInfo = 22650;//获取周基金时间配置
  ID_S2C_GetWeekFundConfigInfo = 22651;//获取周基金时间配置
  ID_C2S_GetWeekFundBaseInfo = 22652;//周基金详情
  ID_S2C_GetWeekFundBaseInfo = 22653;//周基金详情
  ID_C2S_AcquireWeekFundAward = 22654;//领取周基金奖励
  ID_S2C_AcquireWeekFundAward = 22655;//领取周基金奖励

	// 天天返利活动
  ID_C2S_DailyRechargeInfo = 22700;
  ID_S2C_DailyRechargeInfo = 22701;
  ID_S2C_DailyRechargeNotice = 22702;
  ID_C2S_DailyRechargeReward = 22703;
  ID_S2C_DailyRechargeReward = 22704;

  // 等级礼包活动
  ID_C2S_LevelGiftInfo = 22800;
  ID_S2C_LevelGiftInfo = 22801;
  ID_C2S_LevelGiftBuy = 22802;
  ID_S2C_LevelGiftBuy = 22803;
  ID_C2S_LevelGiftRechargeAward = 22804;
  ID_S2C_LevelGiftRechargeAward = 22805;
  ID_C2S_LevelGiftDirectAward = 22806; //领取直冲奖励
  ID_S2C_LevelGiftDirectAward = 22807;

  //王者争霸服务器技能
  ID_C2S_FFKSkillInfo = 22900;
  ID_S2C_FFKSkillInfo = 22901;
  ID_C2S_UpdateFFKSkillInfo = 22902;
  ID_S2C_UpdateFFKSkillInfo = 22903;

  ID_C2S_FFKUserInfo = 22910;
  ID_S2C_FFKUserInfo = 22911;
  ID_C2S_FFKGetRank = 22912;
  ID_S2C_FFKGetRank = 22913;
  ID_C2S_FFKGetTaskAward = 22914;
  ID_S2C_FFKGetTaskAward = 22915;
  ID_C2S_FFKGetPeakBriefs = 22916;
  ID_S2C_FFKGetPeakBriefs = 22917;
  ID_C2S_FFKPeak = 22918;
  ID_S2C_FFKPeak = 22919;

  //王者争霸
  ID_C2S_FFKStatus = 22920;
  ID_S2C_FFKStatus = 22921;
  ID_C2S_FFKMatch = 22922;
  ID_S2C_FFKMatch = 22923;
  ID_C2S_FFKLeave = 22924;
  ID_S2C_FFKLeave = 22925;
  ID_S2C_FFKBattle = 22926;

  ID_C2S_FFKHonorHall = 22930;
  ID_S2C_FFKHonorHall = 22931;

  ID_C2S_FFKUserLog = 22932;
  ID_S2C_FFKUserLog = 22933;

  ID_C2S_FFKLastBattleVideo = 22934;
  ID_S2C_FFKLastBattleVideo = 22935;
  ID_C2S_FFKLastBattleVideoBriefs = 22936;
  ID_S2C_FFKLastBattleVideoBriefs = 22937;

  //应用宝五一活动
  ID_C2S_GetLabourDayInfo = 23000;
  ID_S2C_GetLabourDayInfo = 23001;
  ID_C2S_GetLabourDayAward = 23002;
  ID_S2C_GetLabourDayAward = 23003;
  ID_C2S_GetLabourDayBoxAward = 23004;
  ID_S2C_GetLabourDayBoxAward = 23005;

  //应用宝充值活动
  ID_C2S_GetYyb521ActivityInfo = 23010;
  ID_S2C_GetYyb521ActivityInfo = 23011;
  ID_C2S_GetYyb521ActivityAward = 23012;
  ID_S2C_GetYyb521ActivityAward = 23013;

  //战马
  ID_C2S_GetHorseBag = 23100; //获取战马背包
  ID_S2C_GetHorseBag = 23101;
  ID_C2S_EquipHorse = 23102; //武将穿战马
  ID_S2C_EquipHorse = 23103;
  ID_C2S_FeedHorse = 23104; //喂养
  ID_S2C_FeedHorse = 23105;
  ID_C2S_HorseUpStar = 23106; //升星
  ID_S2C_HorseUpStar = 23107;
  ID_C2S_HorseCompose = 23108; //获取图鉴
  ID_S2C_HorseCompose = 23109;
  ID_C2S_HorseComposeUp = 23110; //升级图鉴
  ID_S2C_HorseComposeUp = 23111;
  ID_C2S_GetHorseInfo = 23112; //马魂，好感成就，相马已使用免费次数
  ID_S2C_GetHorseInfo = 23113;
  ID_C2S_ActiveHorseTarget = 23114; //激活好感成就
  ID_S2C_ActiveHorseTarget = 23115;
  ID_C2S_HorseConjure = 23116; //相马
  ID_S2C_HorseConjure = 23117;
  ID_C2S_HorseReborn = 23118;
  ID_S2C_HorseReborn = 23119;
  ID_C2S_HorseSetProtector = 23120; //金马义从
  ID_S2C_HorseSetProtector = 23121;
  ID_C2S_HorseUnsetProtector = 23122; //金马义从，卸下
  ID_S2C_HorseUnsetProtector = 23123;
  ID_C2S_ActiveHorseTargetOneKey = 23124; //激活好感成就, 一键
  ID_S2C_ActiveHorseTargetOneKey = 23125;
  ID_C2S_HorseSetProtectorDG = 23126; //暗金马协战
  ID_S2C_HorseSetProtectorDG = 23127;

  //群雄逐鹿
  ID_C2S_CaptureInfo = 24000;//状态
  ID_S2C_CaptureInfo = 24001;
  ID_C2S_CaptureAwardInfo = 24002;//奖励状态
  ID_S2C_CaptureAwardInfo = 24003;
  ID_C2S_CaptureGetAward = 24004;//获取奖励
  ID_S2C_CaptureGetAward = 24005;
  ID_C2S_CaptureRank = 24006;//排行榜//弃用 用通用排行榜
  ID_S2C_CaptureRank = 24007;
  ID_C2S_CaptureTeamInvite = 24008;//邀请好友
  ID_S2C_CaptureTeamInvite = 24009;
  ID_S2C_CaptureTeamInvited = 24010;//被邀请推送
  ID_C2S_CaptureTeamJoin = 24011;//加入TEAM
  ID_S2C_CaptureTeamJoin = 24012;
  ID_C2S_CaptureTeamKick = 24013;//剔除
  ID_S2C_CaptureTeamKick = 24014;
  ID_C2S_CaptureTeamInfo = 24015;//状态
  ID_S2C_CaptureTeamInfo = 24016;
  ID_C2S_CaptureTime = 24017;//时间
  ID_S2C_CaptureTime = 24018;
	ID_C2S_CreateCaptureTeam = 24019;	//开房间
	ID_S2C_CreateCaptureTeam = 24020;
	ID_C2S_OpenCaptureTeam = 24021;	//开放房间
	ID_S2C_OpenCaptureTeam = 24022;
	ID_C2S_JoinCaptureTeam = 24023;		//加入房间
	ID_S2C_JoinCaptureTeam = 24024;

  ID_C2S_CaptureMatch = 24050;//开始匹配
  ID_S2C_CaptureMatch = 24051;
  ID_C2S_CaptureStopMatch = 24052;//开始匹配
  ID_S2C_CaptureStopMatch = 24053;
  ID_C2S_CaptureGameInfo = 24054;//游戏信息
  ID_S2C_CaptureGameInfo = 24055;
  ID_C2S_CaptureGameRank = 24056;//游戏信息//弃用
  ID_S2C_CaptureGameRank = 24057;
  ID_C2S_CaptureGameTips = 24058;//游戏信息
  ID_S2C_CaptureGameTips = 24059;
  ID_C2S_CaptureGameMap = 24060;//游戏信息//弃用
  ID_S2C_CaptureGameMap = 24061;
  ID_S2C_CaptureGamePositionFlush = 24062;
  ID_C2S_CaptureGameMove = 24063;//玩家移动
  ID_S2C_CaptureGameMove = 24064;
  ID_C2S_CaptureGameItemUse = 24065;//使用道具
  ID_S2C_CaptureGameItemUse = 24066;
  ID_S2C_CaptureGameResult = 24067;
  ID_S2C_CaptureGameMapFlush = 24068;
	ID_S2C_CaptureGameResetTeamer = 24069;	//重置队友
	ID_C2S_CaptureGameResetTeamer = 24070;

  ID_C2S_GetDays7DrawTaskInfo = 24500; //开服抽将
  ID_S2C_GetDays7DrawTaskInfo = 24501;
  ID_C2S_GetDays7DrawTaskAward = 24502;
  ID_S2C_GetDays7DrawTaskAward = 24503;

	// 暑假活动
  ID_C2S_SummerSignInfo = 24600;	// 查信息
  ID_S2C_SummerSignInfo = 24601;
  ID_C2S_GetSummerSign = 24602;	// 领奖
  ID_S2C_GetSummerSign = 24603;

  ID_C2S_CorpActiveInfo = 24700; //军团活跃的信息
  ID_S2C_CorpActiveInfo = 24701;
  ID_C2S_FinishCorpActiveMission = 24702; //完成任务
  ID_S2C_FinishCorpActiveMission = 24703;
  ID_C2S_OpenCorpActiveBox = 24704; // 打开箱子
  ID_S2C_OpenCorpActiveBox = 24705;
  ID_C2S_CorpActiveLottery = 24706; // 抽奖
  ID_S2C_CorpActiveLottery = 24707;
  ID_C2S_CorpActiveLotteryLog = 24708; // 抽奖记录
  ID_S2C_CorpActiveLotteryLog = 24709;

  ID_C2S_AuctionInfo = 24800; //交易所信息
  ID_S2C_AuctionInfo = 24801;
  ID_C2S_AuctionUserInfo = 24802; //交易所User信息
  ID_S2C_AuctionUserInfo = 24803;
  ID_C2S_AuctionPurchase = 24804; //交易所购买
  ID_S2C_AuctionPurchase = 24805;
  ID_C2S_AuctionLog = 24806; //交易所日志信息
  ID_S2C_AuctionLog = 24807;
  ID_S2C_FlushAuctionItem = 24808;//推送交易所信息
  ID_S2C_FlushAuctionBonus= 24809;//推送交易所分红

  ID_C2S_CorpRiceMyInfo = 24900;
  ID_S2C_CorpRiceMyInfo = 24901;
  ID_C2S_CorpRiceRefreshCorps = 24902;
  ID_S2C_CorpRiceRefreshCorps = 24903;
  ID_C2S_CorpRiceGetCorpMembers = 24904;
  ID_S2C_CorpRiceGetCorpMembers = 24905;
  ID_C2S_CorpRiceRob = 24906;
  ID_S2C_CorpRiceRob = 24907;
  ID_C2S_CorpRiceGetEnemy = 24908;
  ID_S2C_CorpRiceGetEnemy = 24909;
  ID_C2S_CorpRiceShareEnemy = 24910;
  ID_S2C_CorpRiceShareEnemy = 24911;
  ID_C2S_CorpRiceRevenge = 24912;
  ID_S2C_CorpRiceRevenge = 24913;
  ID_C2S_CorpRiceGetUserRanks = 24914;
  ID_S2C_CorpRiceGetUserRanks = 24915;
  ID_C2S_CorpRiceGetCorpRanks = 24916;
  ID_S2C_CorpRiceGetCorpRanks = 24917;
  ID_C2S_CorpRiceFinishAchieve = 24918;
  ID_S2C_CorpRiceFinishAchieve = 24919;
  ID_C2S_CorpRiceBuyAttackCnt = 24920;
  ID_S2C_CorpRiceBuyAttackCnt = 24921;
  ID_C2S_CorpRiceBuyRevengeCnt = 24922;
  ID_S2C_CorpRiceBuyRevengeCnt = 24923;
  ID_C2S_CorpRiceSetAnnounce = 24924;
  ID_S2C_CorpRiceSetAnnounce = 24925;
  ID_C2S_CorpRiceMarkEnemyCorp = 24926;
  ID_S2C_CorpRiceMarkEnemyCorp = 24927;
  ID_C2S_CorpRiceBuyAssistCnt = 24928;
  ID_S2C_CorpRiceBuyAssistCnt = 24929;
  ID_C2S_CorpRiceGetAttackCnt = 24930;
  ID_S2C_CorpRiceGetAttackCnt = 24931;
  ID_C2S_CorpRiceGetAchieve = 24932;
  ID_S2C_CorpRiceGetAchieve = 24933;

  ID_C2S_GetNewHolidayTimeXmlInfo = 25000;       //获取time_xml信息
  ID_S2C_GetNewHolidayTimeXmlInfo = 25001;
  ID_C2S_GetNewHolidayActionXmlInfo = 25002;     //获取action_xml信息
  ID_S2C_GetNewHolidayActionXmlInfo = 25003;
  ID_C2S_GetNewHolidayExchangeXmlInfo = 25004;  //获取exchange_xml信息
  ID_S2C_GetNewHolidayExchangeXmlInfo = 25005;
  ID_C2S_GetNewHolidayMainInfo = 25006;         //获取主界面信息
  ID_S2C_GetNewHolidayMainInfo = 25007;
  ID_C2S_NewHolidayLuckyDraw = 25008;           //抽奖
  ID_S2C_NewHolidayLuckyDraw = 25009;
  ID_C2S_NewHolidayLotteryNotice = 25010;       //抽奖公告
  ID_S2C_NewHolidayLotteryNotice = 25011;
  ID_C2S_NewHolidayActionInfo = 25012;          //全民福利信息
  ID_S2C_NewHolidayActionInfo = 25013;
  ID_C2S_NewHolidayDailySignIn = 25014;         //全民福利签到
  ID_S2C_NewHolidayDailySignIn = 25015;
  ID_C2S_NewHolidayActionAward = 25016;         //全民福利奖励
  ID_S2C_NewHolidayActionAward = 25017;
  ID_C2S_NewHolidayLotteryBackInfo = 25018;     //累抽界面信息
  ID_S2C_NewHolidayLotteryBackInfo = 25019;
  ID_C2S_NewHolidayLotteryBackAward = 25020;    //领取累抽奖励
  ID_S2C_NewHolidayLotteryBackAward = 25021;
  ID_C2S_NewHolidayFriendsFlowerInfo = 25022;   //好友鲜花界面
  ID_S2C_NewHolidayFriendsFlowerInfo = 25023;
  ID_C2S_NewHolidayDonateFlowers = 25024;       //赠送好友鲜花
  ID_S2C_NewHolidayDonateFlowers = 25025;
  ID_C2S_NewHolidayExchangeInfo = 25026;        //兑换界面信息
  ID_S2C_NewHolidayExchangeInfo = 25027;
  ID_C2S_NewHolidayExchangeGood = 25028;        //兑换商品
  ID_S2C_NewHolidayExchangeGood = 25029;
  ID_C2S_OneKeyLotteryBackAward = 25030;        //一键领取领取累抽奖励
  ID_S2C_OneKeyLotteryBackAward = 25031;

  ID_C2S_GetHomeInfo = 25100;//家园信息
  ID_S2C_GetHomeInfo = 25101;
  ID_C2S_GetHomeUserInfo = 25102;//家园详情
  ID_S2C_GetHomeUserInfo = 25103;
  ID_C2S_GetHomeTask = 25104;//家园任务
  ID_S2C_GetHomeTask = 25105;
  ID_C2S_FinishHomeTask= 25106;//完成家园任务
  ID_S2C_FinishHomeTask= 25107;
  ID_C2S_RefreshHomeTask= 25108;//刷新家园随机任务
  ID_S2C_RefreshHomeTask= 25109;
  ID_C2S_SetHomeInfo = 25110;//设置家园（气泡等）
  ID_S2C_SetHomeInfo = 25111;
  ID_C2S_GetHomeSkillTree = 25112;//技能树
  ID_S2C_GetHomeSkillTree = 25113;
  ID_C2S_SetHomeSkillTree = 25114;//设置技能树
  ID_S2C_SetHomeSkillTree = 25115;
  ID_C2S_ResetHomeSkillTree = 25116;//重置技能树
  ID_S2C_ResetHomeSkillTree = 25117;
  ID_C2S_GetHomeOfficeAward = 25118;//获取军衔奖励
  ID_S2C_GetHomeOfficeAward = 25119;
  ID_C2S_GetHomeCorpRank = 25120;//获取军团排行
  ID_S2C_GetHomeCorpRank = 25121;
  ID_C2S_GetHomeProProduct = 25122;//这个貌似不需要
  ID_S2C_GetHomeProProduct = 25123;
  ID_C2S_UpgradeHomePro = 25124;
  ID_S2C_UpgradeHomePro = 25125;
  ID_C2S_GetHomeProPlatform = 25126;
  ID_S2C_GetHomeProPlatform = 25127;
  ID_C2S_SetHomeProPlatform = 25128;
  ID_S2C_SetHomeProPlatform = 25129;
  ID_C2S_CollectHomeProProduct = 25130;
  ID_S2C_CollectHomeProProduct = 25131;
  ID_C2S_GetHomeProDinner = 25132;
  ID_S2C_GetHomeProDinner = 25133;
  ID_C2S_HoldHomeProDinner = 25134;
  ID_S2C_HoldHomeProDinner = 25135;
  ID_C2S_PublicHomeProDinner = 25136;
  ID_S2C_PublicHomeProDinner = 25137;
  ID_C2S_GetPublicHomeDinner = 25138;
  ID_S2C_GetPublicHomeDinner = 25139;
  ID_C2S_GetHomeDinnerLog = 25140;
  ID_S2C_GetHomeDinnerLog = 25141;
  ID_C2S_GetHomeDinnerAward = 25142;
  ID_S2C_GetHomeDinnerAward = 25143;
  ID_C2S_GetCrossHomeInfo = 25144;
  ID_S2C_GetCrossHomeInfo = 25145;
  ID_C2S_GetCrossHomeDinner = 25146;
  ID_S2C_GetCrossHomeDinner = 25147;
  ID_C2S_JoinCrossHomeDinner = 25148;
  ID_S2C_JoinCrossHomeDinner = 25149;
  ID_C2S_GetHomeDinnerInvite = 25150;
  ID_S2C_GetHomeDinnerInvite = 25151;
  ID_C2S_InviteHomeDinner = 25152;
  ID_S2C_InviteHomeDinner = 25153;
  ID_C2S_PurchaseHomeTaskCount = 25154;
  ID_S2C_PurchaseHomeTaskCount = 25155;
  ID_C2S_InviteHomeDinnerOnline = 25156;
  ID_S2C_InviteHomeDinnerOnline = 25157;
  ID_C2S_GetHomeTech = 25158;//学院科技
  ID_S2C_GetHomeTech = 25159;
  ID_C2S_SetHomeTech = 25160;
  ID_S2C_SetHomeTech = 25161;
  ID_C2S_GetHomeSalary = 25162;
  ID_S2C_GetHomeSalary = 25163;
  ID_C2S_BuyHomeDefense = 25164;
  ID_S2C_BuyHomeDefense = 25165;
  ID_S2C_UpdateTechValue = 25166;
  ID_C2S_FlushHomeShop = 25167;
  ID_S2C_FlushHomeShop = 25168;
  ID_C2S_ActiveHomeSkin = 25169;
  ID_S2C_ActiveHomeSkin = 25170;
  ID_C2S_ChangeHomeSkin = 25171;
  ID_S2C_ChangeHomeSkin = 25172;
  ID_S2C_UpdateHomeSkin = 25173; //更新皮肤信息

  ID_C2S_GetNightMareDungeonInfo = 25200; //获取噩梦副本信息，包括 已通关关卡，总星数，已领取宝箱，已领取星数奖励等，已购买次数，已挑战次数等
  ID_S2C_GetNightMareDungeonInfo = 25201;
  ID_C2S_ChallengeNightMareDungeon = 25202; //挑战关卡
  ID_S2C_ChallengeNightMareDungeon = 25203;
  ID_C2S_BuyNightMareDungeonCnt = 25204; //购买次数
  ID_S2C_BuyNightMareDungeonCnt = 25205;
  ID_C2S_OpenNightMareChapterBox = 25206; //领取金银铜宝箱奖励
  ID_S2C_OpenNightMareChapterBox = 25207;
  ID_C2S_GetNightMareStarAward = 25208; //领取 星数奖励
  ID_S2C_GetNightMareStarAward = 25209;
  ID_C2S_GetNightMareDungeonVideo = 25212; //获取某关卡录像
  ID_S2C_GetNightMareDungeonVideo = 25213;
  ID_C2S_NightMareDungeonIsOpen = 25214; //获取关卡是否开放
  ID_S2C_NightMareDungeonIsOpen = 25215;

  ID_C2S_GetCorpCaveMainInfo = 25300;
  ID_S2C_GetCorpCaveMainInfo = 25301;
  ID_C2S_GetCorpCaveDetail = 25302;
  ID_S2C_GetCorpCaveDetail = 25303;
  ID_C2S_CorpCaveDoAttack = 25304;
  ID_S2C_CorpCaveDoAttack = 25305;
  ID_C2S_CorpCaveMakeAWish = 25306;
  ID_S2C_CorpCaveMakeAWish = 25307;
  ID_C2S_GetCorpCaveWishBox = 25308;
  ID_S2C_GetCorpCaveWishBox = 25309;
  ID_C2S_GetCorpCaveTroveAward = 25310;
  ID_S2C_GetCorpCaveTroveAward = 25311;
  ID_C2S_GetCorpCaveBoxAward = 25312;
  ID_S2C_GetCorpCaveBoxAward = 25313;
  ID_C2S_GetCorpCaveDailyAward = 25314;
  ID_S2C_GetCorpCaveDailyAward = 25315;
  ID_C2S_CorpCavePurchaseAttack = 25316;
  ID_S2C_CorpCavePurchaseAttack = 25317;
  ID_S2C_PushCorpCaveChapterInfo = 25318;
  ID_C2S_GetCorpCaveCorpRank = 25319;
  ID_S2C_GetCorpCaveCorpRank = 25320;
  ID_S2C_PushCorpCaveKillInfo = 25321;
  ID_C2S_GetCorpCaveMemberRank = 25322;
  ID_S2C_GetCorpCaveMemberRank = 25323;
  ID_C2S_GetCorpCaveAllAward = 25324;       // 领取军团迷窟当前层数所有奖励（许愿奖励除外）
  ID_S2C_GetCorpCaveAllAward = 25325;

  ID_C2S_GetCityDefenseMainInfo = 25400;  //获取主要信息
  ID_S2C_GetCityDefenseMainInfo = 25401;
  ID_C2S_GetCityDefensePageInfo = 25402;  //获取页签信息
  ID_S2C_GetCityDefensePageInfo = 25403;
  ID_C2S_GetCityDefenseTownInfo = 25404;  //获取城池信息
  ID_S2C_GetCityDefenseTownInfo = 25405;
  ID_C2S_GetCityDefenseCorpTown = 25406;  //军团占领城池
  ID_S2C_GetCityDefenseCorpTown = 25407;
  ID_C2S_GetCityDefenseNullTown = 25408;  //获取空闲城池
  ID_S2C_GetCityDefenseNullTown = 25409;
  ID_C2S_GetCityDefenseUserInfo = 25410;  //获取占领录
  ID_S2C_GetCityDefenseUserInfo = 25411;
  ID_C2S_CityDefenseOccupyARoom = 25412;  //占领一个仓库
  ID_S2C_CityDefenseOccupyARoom = 25413;
  ID_C2S_CityDefenseGainRoomAwd = 25414;  //收获占领奖励
  ID_S2C_CityDefenseGainRoomAwd = 25415;
  ID_C2S_CityDefenseGiveUpARoom = 25416;  //放弃一个仓库
  ID_S2C_CityDefenseGiveUpARoom = 25417;
  ID_C2S_CityDefenseExtendARoom = 25418;  //延长一个仓库
  ID_S2C_CityDefenseExtendARoom = 25419;
  ID_C2S_CityDefenseFastGainAwd = 25420;  //快速收获奖励
  ID_S2C_CityDefenseFastGainAwd = 25421;
  ID_C2S_CityDefenseDeclaration = 25422;  //设置个人宣言
  ID_S2C_CityDefenseDeclaration = 25423;
  ID_C2S_CityDefenseFindAnEnemy = 25424;  //查找一个敌人
  ID_S2C_CityDefenseFindAnEnemy = 25425;
  ID_S2C_CityDefensePushTheTown = 25426;  //推送城池变化
  ID_C2S_RequestCityDefenseRank = 25427;  //请求排行榜
  ID_S2C_RequestCityDefenseRank = 25428;
  ID_C2S_RequestCityDefenseGain = 25429;
  ID_S2C_RequestCityDefenseGain = 25430;
  ID_S2C_CityDefenseDefeatInfo  = 25431;  //防守失败推送

  ID_C2S_SpecialQuestionnaire = 25480;  //特殊问卷调查
  ID_S2C_SpecialQuestionnaire = 25481;  //特殊问卷调查

  ID_C2S_CityWarUserInfo = 25500;//问鼎中原
  ID_S2C_CityWarUserInfo = 25501;
  ID_C2S_CityWarInfo = 25502;//单个战区城市信息
  ID_S2C_CityWarInfo = 25503;
  ID_C2S_CityWarSingleInfo = 25504;//单个城市
  ID_S2C_CityWarSingleInfo = 25505;
  ID_C2S_CityWarSingleRankInfo = 25506;//单个城市军团排行
  ID_S2C_CityWarSingleRankInfo = 25507;
  ID_C2S_CityWarCorpRankInfo = 25508;//总战区城市军团排行
  ID_S2C_CityWarCorpRankInfo = 25509;
  ID_C2S_CityWarUserRankInfo = 25510;//总战区城市玩家排行
  ID_S2C_CityWarUserRankInfo = 25511;
  ID_C2S_CityWarGetAward = 25512;//领取个人次数奖励
  ID_S2C_CityWarGetAward = 25513;
  ID_C2S_CityWarAttackInfo = 25514;//个人悬赏榜文
  ID_S2C_CityWarAttackInfo = 25515;
  ID_C2S_CityWarAttackRefresh = 25516;//个人悬赏榜文刷新
  ID_S2C_CityWarAttackRefresh = 25517;
  ID_C2S_CityWarAttackAward = 25518;//个人悬赏榜文奖励
  ID_S2C_CityWarAttackAward = 25519;
  ID_C2S_CityWarChallengeCity = 25520;//挑战
  ID_S2C_CityWarChallengeCity = 25521;
  ID_C2S_CityWarAttackPurchase = 25522;//个人悬赏购买奖励次数
  ID_S2C_CityWarAttackPurchase = 25523;
  ID_C2S_CityWarTimeInfo = 25524;//个人悬赏购买奖励次数
  ID_S2C_CityWarTimeInfo = 25525;
  ID_C2S_CityWarSetFireOn = 25526;//设置集火
  ID_S2C_CityWarSetFireOn = 25527;
  ID_S2C_CityWarFlushFireOn = 25528;
  ID_C2S_CityWarUserLog = 25529;//玩家日志
  ID_S2C_CityWarUserLog= 25530;
  ID_S2C_CityWarFlushUserInfo = 25531;//同步玩家位置协议
  ID_S2C_CityWarFlushMap = 25532;//同步地图信息
  ID_S2C_CityWarFlushUser= 25533;//同步移动和房间内
  ID_S2C_CityWarFlushScore = 25534;//同步城里积分
  ID_C2S_GetCityWarShopInfo = 25535;//获取商城购买次数
  ID_S2C_GetCityWarShopInfo = 25536;//获取商城购买次数
  ID_S2C_BroadcastOp = 25537;
  ID_C2S_BroadcastOp = 25538;

  ID_C2S_UserFreezeGoldInfo = 25590;
  ID_S2C_UserFreezeGoldInfo = 25591;
  ID_C2S_GetUserFreezeGold = 25592;
  ID_S2C_GetUserFreezeGold = 25593;

  ID_C2S_GetGroupDungeonInfo = 25600;
  ID_S2C_GetGroupDungeonInfo = 25601;
  ID_C2S_ChallengeGroupDungeonSingle = 25602;
  ID_S2C_ChallengeGroupDungeonSingle = 25603;
  ID_C2S_BuyGroupDungeonCnt = 25604; //购买次数
  ID_S2C_BuyGroupDungeonCnt = 25605;

  ID_C2S_GroupDungeonTeamStatus = 25620; // 北伐, 查询状态
  ID_S2C_GroupDungeonTeamStatus = 25621; // 北伐，状态推送
  ID_C2S_GroupDungeonCreateTeam = 25622; // 北伐，创建队伍
  ID_S2C_GroupDungeonCreateTeam = 25623;
  ID_C2S_GroupDungeonJoinTeam = 25624; // 北伐，加入队伍
  ID_S2C_GroupDungeonJoinTeam = 25625;
  ID_C2S_GroupDungeonLeave = 25628; //退出组队，及组队匹配
  ID_S2C_GroupDungeonLeave = 25629;
  ID_C2S_GroupDungeonKickTeamMember = 25632; // 队长踢人
  ID_S2C_GroupDungeonKickTeamMember = 25633;
  ID_C2S_GroupDungeonSetTeamOnlyInvited = 25634; // 队长设置房间是否开放
  ID_S2C_GroupDungeonSetTeamOnlyInvited = 25635;
  ID_C2S_GroupDungeonInvite = 25636; // 邀请
  ID_S2C_GroupDungeonInvite = 25637;
  ID_S2C_GroupDungeonBeInvited = 25638; // 被邀请
  ID_C2S_GroupDungeonInvitedJoinTeam = 25639; // 持邀请卡 加入队伍
  ID_S2C_GroupDungeonInvitedJoinTeam = 25640;
  ID_S2C_GroupDungeonInviteCanceled = 25641;
  ID_C2S_GroupDungeonSelectKnight = 25642;
  ID_S2C_GroupDungeonSelectKnight = 25643;
  ID_C2S_GroupDungeonAgreeBattle = 25644; // 组员准备好出战
  ID_S2C_GroupDungeonAgreeBattle = 25645;
  ID_C2S_GroupDungeonExecute = 25646; //队长 出战
  ID_S2C_GroupDungeonExecute = 25647;
  ID_S2C_GroupDungeonBattleResult = 25650; //战斗结果

  ID_S2C_GroupDungeonCrossServerLost = 25651; // 跨服服务器挂了

  ID_C2S_GroupDungeonSelectPet = 25652;
  ID_S2C_GroupDungeonSelectPet = 25653;

  ID_C2S_GroupDungeonGetRank = 25661; // 组队pvp排行版
  ID_S2C_GroupDungeonGetRank = 25662;
  ID_C2S_ChallengeOneKeyGroupDungeonSingle = 25663;//游戏助手-征战九州一键
  ID_S2C_ChallengeOneKeyGroupDungeonSingle = 25664;

  ID_C2S_GetRunestoneBag  = 25700;      //获取所有兵符
  ID_S2C_GetRunestoneBag  = 25701;
  ID_C2S_EquipRunestone = 25702;        //装备一个兵符
  ID_S2C_EquipRunestone = 25703;
  ID_C2S_GetWarSoulBag = 25704;         //获取所有战魂
  ID_S2C_GetWarSoulBag = 25705;
  ID_C2S_EquipOneWarSoul = 25706;       //装备一个战魂
  ID_S2C_EquipOneWarSoul = 25707;
  ID_C2S_CompoundOneWarSoul = 25708;    //合成一个战魂
  ID_S2C_CompoundOneWarSoul = 25709;
  ID_C2S_CompoundAllWarSoul = 25710;    //一键合成战魂
  ID_S2C_CompoundAllWarSoul = 25711;
  ID_C2S_CompoundInlaidWarSoul = 25712; //镶嵌战魂合成
  ID_S2C_CompoundInlaidWarSoul = 25713;
  ID_C2S_GetRunestoneCompose = 25714;   //获取兵符图鉴
  ID_S2C_GetRunestoneCompose = 25715;
  ID_C2S_GetWarSoulCompose = 25716;     //获取战魂图鉴
  ID_S2C_GetWarSoulCompose = 25717;
  ID_C2S_ResolveTheWarSoul = 25718;     //战魂分解
  ID_S2C_ResolveTheWarSoul = 25719;
  ID_C2S_GetRunestoneShop = 25720;      //获取战魂商店
  ID_S2C_GetRunestoneShop = 25721;
  ID_C2S_ShoppingRunestoneShop = 25722; //战魂商店购买
  ID_S2C_ShoppingRunestoneShop = 25723;
  ID_C2S_RefreshRunestoneShop = 25724;  //刷新战魂商店
  ID_S2C_RefreshRunestoneShop = 25725;
  ID_C2S_RunestoneSetProtector = 25726; //金兵符护佑
  ID_S2C_RunestoneSetProtector = 25727;
  ID_C2S_RunestoneUnSetProtector = 25728; //金兵符护佑
  ID_S2C_RunestoneUnSetProtector = 25729;
  ID_C2S_RunestoneDGOpProtector	= 25730; //暗金兵符护佑
  ID_S2C_RunestoneDGOpProtector	= 25731;

	// 刷新商店
  ID_C2S_GetFlushShopInfo = 26000; //获取刷新商店信息
  ID_S2C_GetFlushShopInfo = 26001;
  ID_C2S_FlsuhShopBuy = 26002; //刷新商店购买
  ID_S2C_FlsuhShopBuy = 26003;
  ID_C2S_FlushShopGoods = 26004; //刷新商店商品
  ID_S2C_FlushShopGoods = 26005;

  //名将(英灵)
  ID_C2S_SetSecondFamousFormation = 26098;
  ID_S2C_SetSecondFamousFormation = 26099;
  ID_C2S_GetFamous    = 26100;
  ID_S2C_GetFamous    = 26101;
  ID_C2S_FamousStarUp = 26102;
  ID_S2C_FamousStarUp = 26103;
  ID_C2S_FamousFormation = 26104;
  ID_S2C_FamousFormation = 26105;
  ID_C2S_FamousLevelUp = 26106;
  ID_S2C_FamousLevelUp = 26107;
  ID_C2S_FamousRebirthLook = 26108;
  ID_S2C_FamousRebirthLook = 26109;
  ID_C2S_FamousRebirth = 26110;
  ID_S2C_FamousRebirth = 26111;
  ID_C2S_GetFamousFormation = 26112;
  ID_S2C_GetFamousFormation = 26113;
  ID_C2S_GetFamousComposeGro = 26114;
  ID_S2C_GetFamousComposeGro = 26115;
  ID_S2C_AddFamousComposeGro = 26116;
  ID_C2S_GetFamousProperty = 26117;
  ID_S2C_GetFamousProperty = 26118;
	ID_C2S_FamousTeachUpgrade = 26119;
	ID_S2C_FamousTeachUpgrade = 26120;
	ID_C2S_FamousReset = 26121;
	ID_S2C_FamousReset = 26122;

  //日常大地图
  ID_C2S_WorldWarEnterMap = 26200;
  ID_S2C_WorldWarEnterMap = 26201;
  ID_C2S_WorldWarMoveMap = 26202;
  ID_S2C_WorldWarMoveMap = 26203;
  ID_S2C_WorldWarCellChange = 26204;
  ID_C2S_WorldWarMapListen = 26205;
  ID_S2C_WorldWarMapListen = 26206;
  ID_C2S_WorldWarMapQuit = 26207;
  ID_S2C_WorldWarMapQuit = 26208;
  ID_C2S_WorldWarMigrateUser = 26209;
  ID_S2C_WorldWarMigrateUser = 26210;
  ID_C2S_WorldWarMigrateCorp = 26211;
  ID_S2C_WorldWarMigrateCorp = 26212;
  ID_C2S_WorldWarAttackMonster = 26213;
  ID_S2C_WorldWarAttackMonster = 26214;
  ID_C2S_WorldWarSummonMonster = 26215;
  ID_S2C_WorldWarSummonMonster = 26216;
  ID_C2S_WorldWarAttackSummonMonster = 26217;
  ID_S2C_WorldWarAttackSummonMonster = 26218;
  ID_C2S_WorldWarMyInfo = 26219;
  ID_S2C_WorldWarMyInfo = 26220;
  ID_C2S_WorldWarSelectCorpBossGroup = 26221;
  ID_S2C_WorldWarSelectCorpBossGroup = 26222;
  ID_C2S_WorldWarAttackCorpBoss = 26223;
  ID_S2C_WorldWarAttackCorpBoss = 26224;
  ID_C2S_WorldWarGetCorpBoss = 26225;
  ID_S2C_WorldWarGetCorpBoss = 26226;
  ID_C2S_WorldWarGetCorpBossLocalUserRank = 26227;
  ID_S2C_WorldWarGetCorpBossLocalUserRank = 26228;
  ID_C2S_WorldWarGetCorpBossAreaUserRank = 26229;
  ID_S2C_WorldWarGetCorpBossAreaUserRank = 26230;
  ID_C2S_WorldWarGetCorpBossCorpRank = 26231;
  ID_S2C_WorldWarGetCorpBossCorpRank = 26232;
  ID_C2S_WorldWarBuyMigratePoint = 26233;
  ID_S2C_WorldWarBuyMigratePoint = 26234;
  ID_C2S_WorldWarBuyCampaignPoint = 26235;
  ID_S2C_WorldWarBuyCampaignPoint = 26236;
  ID_C2S_WorldWarBuyAttackSummonMonsterCnt = 26237;
  ID_S2C_WorldWarBuyAttackSummonMonsterCnt = 26238;
  ID_C2S_WorldWarReceiveDailyAward = 26239;
  ID_S2C_WorldWarReceiveDailyAward = 26240;
  ID_C2S_WorldWarAreaList = 26241;
  ID_S2C_WorldWarAreaList = 26242;
  ID_C2S_WorldWarGetOtherMap = 26243;
  ID_S2C_WorldWarGetOtherMap = 26244;
  ID_C2S_WorldWarMigrateArsenal = 26245;
  ID_S2C_WorldWarMigrateArsenal = 26246;
	ID_C2S_WorldWarAttackSpringMonster = 26247;
	ID_S2C_WorldWarAttackSpringMonster = 26248;

  //好友度
  ID_C2S_SendFriendGifts = 26250;  //赠送礼物
  ID_S2C_SendFriendGifts = 26251;
  ID_C2S_GetFriendGifts = 26252;  //领取礼物
  ID_S2C_GetFriendGifts = 26253;

  //积分兑礼
  ID_C2S_GetScoreExchargeTimeXmlInfo = 26260;
  ID_S2C_GetScoreExchargeTimeXmlInfo = 26261;
  ID_C2S_GetScoreExchargeActionXmlInfo = 26262;
  ID_S2C_GetScoreExchargeActionXmlInfo = 26263;
  ID_C2S_GetScoreExchargeItemXmlInfo = 26264;
  ID_S2C_GetScoreExchargeItemXmlInfo = 26265;
  ID_C2S_ScoreExchargeActionInfo = 26266;
  ID_S2C_ScoreExchargeActionInfo = 26267;
  ID_C2S_GetScoreExchargeActionScore = 26268; //领取积分
  ID_S2C_GetScoreExchargeActionScore = 26269;
  ID_C2S_ScoreExchargeItemInfo = 26270;
  ID_S2C_ScoreExchargeItemInfo = 26271;
  ID_C2S_ScoreExchargeItemGood = 26272; //兑换道具
  ID_S2C_ScoreExchargeItemGood = 26273;

  ID_C2S_SetRealNameAndIdentityId = 26290; //实名认证
  ID_S2C_SetRealNameAndIdentityId = 26291;
	ID_C2S_IdentityAuthentication = 26292;	//实名认证信息
	ID_S2C_IdentityAuthentication = 26293;

  ID_C2S_GetSkyTestInfo = 26300;
  ID_S2C_GetSkyTestInfo = 26301;
  ID_C2S_SkyTestEnter   = 26302;      //进入试炼
  ID_S2C_SkyTestEnter   = 26303;
  ID_C2S_SkyTestEnterNextFloor = 26304; //进入新的一层
  ID_S2C_SkyTestEnterNextFloor = 26305;
  ID_C2S_SkyTestEnterEntry = 26306; //获取指路人信息
  ID_S2C_SkyTestEnterEntry = 26307;
  ID_C2S_SkyTestDoEvent = 26308;  //处理事件
  ID_S2C_SkyTestDoEvent = 26309;
  ID_C2S_SkyTestUseItem = 26310;  //使用道具
  ID_S2C_SkyTestUseItem = 26311;
  ID_C2S_SkyTestBuyTimes= 26312;  //购买次数
  ID_S2C_SkyTestBuyTimes= 26313;
  ID_S2C_SkyTestUpdateBuff = 26314;
  ID_C2S_SkyTestBuyShop= 26315;  //商店购买
  ID_S2C_SkyTestBuyShop= 26316;
  ID_C2S_SkyTestGetFloorAward = 26317;
  ID_S2C_SkyTestGetFloorAward = 26318;
  ID_C2S_SkyTestAskHelp = 26319;
  ID_S2C_SkyTestAskHelp = 26320;
  ID_C2S_SkyTestHelpUser = 26321;
  ID_S2C_SkyTestHelpUser = 26322;
  ID_S2C_SkyTestHelpRet  = 26323;
  ID_C2S_SkyTestGetAskList = 26324;
  ID_S2C_SkyTestGetAskList = 26325;
  ID_S2C_SkyTestItemUpdate = 26326;
  ID_S2C_SkyTestHelpUpdate = 26327;
  ID_C2S_SkyTestOneKeyHelper = 26328; //6.3.50通天试炼一键助手
  ID_S2C_SkyTestOneKeyHelper = 26329;

  ID_C2S_GetStarGiftInfo = 26350;   //明星送礼信息
  ID_S2C_GetStarGiftInfo = 26351;
  ID_C2S_GiveALikeToStar = 26352;   //给明星点赞
  ID_S2C_GiveALikeToStar = 26353;
  ID_C2S_GetStarPieceAward = 26354; //获取翻牌奖励
  ID_S2C_GetStarPieceAward = 26355;
  ID_C2S_PushStarLikeInfo = 26356;  //推送点赞信息
  ID_S2C_PushStarLikeInfo = 26357;

	//传奇系统(武将培养)
	ID_C2S_GetLegendTreeInfo = 26360;	//获取界面信息
	ID_S2C_GetLegendTreeInfo = 26361;
	ID_C2S_UpLegendTreeNode = 26362;	//升级节点
	ID_S2C_UpLegendTreeNode = 26363;
	ID_C2S_ResetLegendTree = 26364;		//重置
	ID_S2C_ResetLegendTree = 26365;
	ID_C2S_GetLegendTreeNodes = 26366;	//获取对应路径节点信息
	ID_S2C_GetLegendTreeNodes = 26367;

  ID_C2S_WorldWarCreateFarmLand = 26400;
  ID_S2C_WorldWarCreateFarmLand = 26401;
  ID_C2S_WorldWarEraseFarmLand = 26402;
  ID_S2C_WorldWarEraseFarmLand = 26403;
  ID_C2S_WorldWarHarvestFarmLand = 26404;
  ID_S2C_WorldWarHarvestFarmLand = 26405;
  ID_C2S_WorldWarRobFarmLand = 26406;
  ID_S2C_WorldWarRobFarmLand = 26407;
  ID_C2S_WorldWarRobLog = 26408;
  ID_S2C_WorldWarRobLog = 26409;
  ID_C2S_WorldWarBuyTiredPoint = 26410;
  ID_S2C_WorldWarBuyTiredPoint = 26411;
  ID_C2S_WorldWarRobUser = 26412;
  ID_S2C_WorldWarRobUser = 26413;
  ID_C2S_WorldWarBuyRobFarmCnt = 26414;
  ID_S2C_WorldWarBuyRobFarmCnt = 26415;
  ID_C2S_WorldWarAutoProtect = 26416;
  ID_S2C_WorldWarAutoProtect = 26417;
  ID_S2C_WorldWarUpdateDefense = 26418;
  ID_C2S_WorldWarGetPoints = 26419;
  ID_S2C_WorldWarGetPoints = 26420;

	//老模块红点协议整合优化(新功能红点不要加到以下协议，加到GetRedHintRelate中)
	ID_C2S_GetOldRedHint = 26421;
	ID_S2C_GetOldRedHint = 26422;
	ID_C2S_GetOldRedHintSec = 26423;
	ID_S2C_GetOldRedHintSec = 26424;
	ID_C2S_GetOldRedHintRelate = 26425;
	ID_S2C_GetOldRedHintRelate = 26426;
	ID_C2S_GetOldRedHintRelateSec = 26427;
	ID_S2C_GetOldRedHintRelateSec = 26428;

	//七星坛(3.9.5)
	ID_C2S_GetDipperInfo = 26430;	//获取界面信息
	ID_S2C_GetDipperInfo = 26431;
	ID_C2S_GetDipperLogInfo = 26432;	//获取祭祀日志
	ID_S2C_GetDipperLogInfo = 26433;
	ID_C2S_GetDipperAward = 26434;	//领取七星坛等级奖励
	ID_S2C_GetDipperAward = 26435;
	ID_C2S_DipperSacrifice = 26436;	//祭祀
	ID_S2C_DipperSacrifice = 26437;
	ID_C2S_GetDipperTasks = 26438;	//筑造任务
	ID_S2C_GetDipperTasks = 26449;
	ID_C2S_BuyDipperTask = 26450;		//任务追回(购买)
	ID_S2C_BuyDipperTask = 26451;
	ID_C2S_GetDipperTaskAwards = 26452;	//领取任务奖励
	ID_S2C_GetDipperTaskAwards = 26453;

  //日常大地图，城池扩展(4.0.0)
  ID_C2S_WorldWarGetCity = 26500; //日常大地图，看城池
  ID_S2C_WorldWarGetCity = 26501;
  ID_S2C_WorldWarCityCellChange = 26502;
  ID_C2S_WorldWarListenCity = 26503;
  ID_S2C_WorldWarListenCity = 26504;
  ID_C2S_WorldWarQuitCity = 26505;
  ID_S2C_WorldWarQuitCity = 26506;
  ID_C2S_WorldWarMigrateToCity = 26507;
  ID_S2C_WorldWarMigrateToCity = 26508;
  ID_C2S_WorldWarOccupyCityBuilding = 26509;
  ID_S2C_WorldWarOccupyCityBuilding = 26510;
  ID_C2S_WorldWarAttackCityBuilding = 26511;
  ID_S2C_WorldWarAttackCityBuilding = 26512;
  ID_C2S_WorldWarCityGetUserRank = 26513;
  ID_S2C_WorldWarCityGetUserRank = 26514;
  ID_C2S_WorldWarCityGetAllianceRank = 26515;
  ID_S2C_WorldWarCityGetAllianceRank = 26516;
  ID_C2S_WorldWarCityRepairDefense = 26517;
  ID_S2C_WorldWarCityRepairDefense = 26518;
  ID_C2S_WorldWarCityMyInfo = 26519;
  ID_S2C_WorldWarCityMyInfo = 26520;
  ID_C2S_WorldWarCityScore = 26521;
  ID_S2C_WorldWarCityScore = 26522;
  ID_C2S_WorldWarCityBriefUserRank = 26523;
  ID_S2C_WorldWarCityBriefUserRank = 26524;
  ID_C2S_WorldWarGetCityTitles = 26525;
  ID_S2C_WorldWarGetCityTitles = 26526;
  ID_C2S_WorldWarSetCityTitle = 26527;
  ID_S2C_WorldWarSetCityTitle = 26528;
  ID_C2S_WorldWarCityWinAlliances = 26529;
  ID_S2C_WorldWarCityWinAlliances = 26530;
  ID_C2S_WorldWarGetCityAnnounce = 26531;
  ID_S2C_WorldWarGetCityAnnounce = 26532;
  ID_C2S_WorldWarSetCityAnnounce = 26533;
  ID_S2C_WorldWarSetCityAnnounce = 26534;
  ID_C2S_WorldWarCityTime = 26535;
  ID_S2C_WorldWarCityTime = 26536;
  ID_C2S_WorldWarCityOtherUserScore = 26537;
  ID_S2C_WorldWarCityOtherUserScore = 26538;
  ID_S2C_WorldWarCityBuildingOwner = 26539;
  ID_C2S_WorldWarCityUseItem = 26540;
  ID_S2C_WorldWarCityUseItem = 26541;

	//军团联盟(4.0.0)
	ID_C2S_GetCorpAllianceInfo = 26550;	//获取军团信息
	ID_S2C_GetCorpAllianceInfo = 26551;
	ID_C2S_CreateCorpAlliance = 26552;	//创建
	ID_S2C_CreateCorpAlliance = 26553;
	ID_C2S_GetCorpAllianceList = 26554;	//联盟列表
	ID_S2C_GetCorpAllianceList = 26555;
	ID_C2S_GetCorpAllianceJoinApplied = 26556;	//获取玩家已申请列表
	ID_S2C_GetCorpAllianceJoinApplied = 26557;
	ID_C2S_ReqJoinCorpAlliance = 26558;	//申请加入
	ID_S2C_ReqJoinCorpAlliance = 26559;
	ID_C2S_GetCorpAllianceJoinApply = 26560;	//获取联盟申请列表-联盟长
	ID_S2C_GetCorpAllianceJoinApply = 26561;
	ID_C2S_ResJoinCorpAlliance = 26562;	//审核申请
	ID_S2C_ResJoinCorpAlliance = 26563;
	ID_C2S_CorpAllianceAppoint = 26564;	//任命/罢免(联盟长，副联盟长，成员)
	ID_S2C_CorpAllianceAppoint = 26565;
	ID_C2S_CorpAllianceKick = 26566;	//踢出联盟
	ID_S2C_CorpAllianceKick = 26567;
	ID_C2S_CorpAllianceDimiss = 26568;	//解散
	ID_S2C_CorpAllianceDimiss = 26569;
	ID_C2S_OpCorpAllianceMsg = 26570;	//修改联盟信息
	ID_S2C_OpCorpAllianceMsg = 26571;
	ID_C2S_CorpAllianceImpeach = 26572;	//弹劾
	ID_S2C_CorpAllianceImpeach = 26573;
	ID_C2S_GetCorpAllianceCorpMembers = 26574;	//获取军团成员
	ID_S2C_GetCorpAllianceCorpMembers = 26575;
	ID_C2S_CorpAllianceQuit = 26576;	//退出
	ID_S2C_CorpAllianceQuit = 26577;
	ID_C2S_SearchCorpAlliance = 26578;	//搜索
	ID_S2C_SearchCorpAlliance = 26579;
	ID_C2S_GetCorpAllianceNews = 26580;	//获取联盟动态
	ID_S2C_GetCorpAllianceNews = 26581;

	//军团联盟-留言板
	ID_C2S_GetCorpAllianceMsgBoard = 26583;	//获取信息
	ID_S2C_GetCorpAllianceMsgBoard = 26584;
	ID_C2S_CorpAllianceMsgBoardOp = 26585;	//留言板操作
	ID_S2C_CorpAllianceMsgBoardOp = 26586;
	ID_S2C_CorpAllianceMsgBoardOpBroadCast = 26587;

	//军团联盟-任务
	ID_C2S_ReqCorpAllianceTaskInfo = 26590;	//获取任务信息
	ID_S2C_ReqCorpAllianceTaskInfo = 26591;
	ID_C2S_GetCorpAllianceTaskExpAward = 26592;	//领取里程碑奖励
	ID_S2C_GetCorpAllianceTaskExpAward = 26593;
	ID_C2S_GetCorpAllianceTaskAward = 26594;		//领取任务奖励
	ID_S2C_GetCorpAllianceTaskAward = 26595;
	ID_C2S_RefreshCorpAllianceTask = 26596;	//刷新任务
	ID_S2C_RefreshCorpAllianceTask = 26597;

	//军团联盟-军备所
	ID_C2S_ReqCorpAllianceSkillInfo = 26600;	//获取信息
	ID_S2C_ReqCorpAllianceSkillInfo = 26601;
	ID_C2S_UpCorpAllianceSkill = 26602;	//研究
	ID_S2C_UpCorpAllianceSkill = 26603;

  ID_C2S_GetRoadInfo = 26610;
  ID_S2C_GetRoadInfo = 26611;
  ID_C2S_PlayRoadGame= 26612;
  ID_S2C_PlayRoadGame = 26613;
  ID_C2S_PurchaseRoadCount = 26614;
  ID_S2C_PurchaseRoadCount = 26615;
  ID_C2S_RoadGameMove = 26616;//现阶段只有同步记录 正常应该走具体逻辑
  ID_S2C_RoadGameMove = 26617;
  ID_C2S_RoadGameProcessMonster = 26618;//玩家处理怪物逻辑
  ID_S2C_RoadGameProcessMonster = 26619;
  ID_C2S_RoadGameUseItem = 26620;//使用
  ID_S2C_RoadGameUseItem = 26621;
  ID_C2S_RoadGameComposeItem = 26622;//合成
  ID_S2C_RoadGameComposeItem = 26623;
  ID_S2C_RoadGamePositionFlush = 26624;//位置信息刷新
  ID_C2S_RoadGameInfo = 26625;//获取地图信息
  ID_S2C_RoadGameInfo = 26626;
  ID_C2S_PurchaseRoadRevive = 26627;//购买复活
  ID_S2C_PurchaseRoadRevive = 26628;
  ID_C2S_RoadGameMonsterAttack = 26629;//怪物互相战斗逻辑
  ID_S2C_RoadGameMonsterAttack = 26630;
  ID_C2S_RoadStarAward = 26631;
  ID_S2C_RoadStarAward = 26632;
  ID_C2S_RoadFinishStage = 26633;//扫荡
  ID_S2C_RoadFinishStage = 26634;
  ID_C2S_RoadGameGiveUp = 26635;//放弃关卡
  ID_S2C_RoadGameGiveUp = 26636;
  ID_C2S_RoadGameItemProcess = 26637;//道具作用
  ID_S2C_RoadGameItemProcess = 26638;
  ID_C2S_RoadGameDetailInfo = 26639;//GAME详情
  ID_S2C_RoadGameDetailInfo = 26640;
  ID_C2S_RoadAskItem = 26641;//要道具
  ID_S2C_RoadAskItem = 26642;
  ID_C2S_RoadGiveItem = 26643;//给道具
  ID_S2C_RoadGiveItem = 26644;
  ID_C2S_RoadItemAskInfo = 26645;//道具请求信息
  ID_S2C_RoadItemAskInfo = 26646;
  ID_S2C_RoadPointFlush = 26647;
  ID_C2S_RoadGetHandbook = 26648;
  ID_S2C_RoadGetHandbook = 26649;

  ID_C2S_WorldWarAttackCorpAltar = 26650;
  ID_S2C_WorldWarAttackCorpAltar = 26651;
  ID_C2S_WorldWarBuyCorpAltarDefense = 26652;
  ID_S2C_WorldWarBuyCorpAltarDefense = 26653;
  ID_C2S_WorldWarSetAllianceGuard = 26654;
  ID_S2C_WorldWarSetAllianceGuard = 26655;
  ID_C2S_WorldWarAttackArsenal = 26656;
  ID_S2C_WorldWarAttackArsenal = 26657;
  ID_C2S_WorldWarGetCorpGuard = 26658;
  ID_S2C_WorldWarGetCorpGuard = 26659;
  ID_C2S_WorldWarGetAllianceGuard = 26660;
  ID_S2C_WorldWarGetAllianceGuard = 26661;
  ID_C2S_WorldWarAttackBrokenArsenal = 26662;
  ID_S2C_WorldWarAttackBrokenArsenal = 26663;
  ID_C2S_WorldWarRobArsenal = 26664;
  ID_S2C_WorldWarRobArsenal = 26665;
  ID_C2S_WorldWarCityItemBag = 26666;
  ID_S2C_WorldWarCityItemBag = 26667;
  ID_S2C_WorldWarCityItemBuff = 26669;
  ID_S2C_WorldWarCityItemEffect = 26670;

  //战斗平衡测试
  ID_C2S_ExecuteBattleBalanceTest = 26700;
  ID_S2C_ExecuteBattleBalanceTest = 26701;

	//王者殿堂(4.1.70)
	ID_C2S_GetKingPalaceInfo = 26710;	//主信息
	ID_S2C_GetKingPalaceInfo = 26711;
	ID_C2S_BetonKingPalace = 26712;		//押注
	ID_S2C_BetonKingPalace = 26713;
	ID_C2S_GetKingPalaceReward = 26714;	//领取奖励
	ID_S2C_GetKingPalaceReward = 26715;

  //直冲活动
  ID_C2S_GetIndieRechargeInfo = 26800; //获得活动信息
  ID_S2C_GetIndieRechargeInfo = 26801;
  ID_S2C_UpdateIndieRechargeInfo = 26802; //更新任务信息
  ID_S2C_UpdateUserIndieRechargeTask = 26803; //更新玩家任务数据
  ID_C2S_GetIndieRechargeAward = 26804; //领奖接口
  ID_S2C_GetIndieRechargeAward = 26805;

  // 新每日签到
  ID_C2S_NewDailySignInfo = 26900;   // 拉取当月签到的数据
  ID_S2C_NewDailySignInfo = 26901;   //
  ID_C2S_NewDailySign = 26902;   // 新每日签到签到
  ID_S2C_NewDailySign = 26903;   //

  // 绑定手机号
  ID_C2S_SetPhoneNum = 27000; // 绑定
  ID_S2C_SetPhoneNum = 27001;

	//阵法养成
	ID_C2S_GetAncientInfo = 28000;  //获取阵法当前培养信息
	ID_S2C_GetAncientInfo = 28001;
	ID_C2S_UpdateAncient  = 28002;  //阵法升级
	ID_S2C_UpdateAncient  = 28003;
	ID_C2S_UnlockAncient  = 28004;  //阵法解锁
	ID_S2C_UnlockAncient  = 28005;
	ID_C2S_ChangeAncientFlag = 28006;  //阵法旗子移动
	ID_S2C_ChangeAncientFlag = 28007;
	ID_C2S_ResetAncient = 28008;	//阵法重置
	ID_S2C_ResetAncient = 28009;
  ID_C2S_UpdateAncientStar = 28010;   //魂阵升星
  ID_S2C_UpdateAncientStar = 28011;
  ID_C2S_UpdateAncientFlag = 28012;   //阵旗升级
  ID_S2C_UpdateAncientFlag = 28013;
  ID_C2S_ResetAncientConsume = 28014; //获得重置材料
  ID_S2C_ResetAncientConsume = 28015;

  // 吃鸡
  ID_C2S_ChickenMatch = 28500; //开始匹配
  ID_S2C_ChickenMatch = 28501;
  ID_C2S_ChickenStopMatch = 28502; //停止匹配
  ID_S2C_ChickenStopMatch = 28503;
  ID_C2S_ChickenInfo = 28504; //信息
  ID_S2C_ChickenInfo = 28505;
  ID_C2S_ChickenTouch = 28506; //点击
  ID_S2C_ChickenTouch = 28507;
  ID_C2S_ChickenCheckBox = 28508; //查看所在地图格的箱子
  ID_S2C_ChickenCheckBox = 28509;
  ID_C2S_ChickenPickUp = 28510; //拾取物品
  ID_S2C_ChickenPickUp = 28511;
  ID_C2S_ChickenDiscard = 28512; //丢弃物品
  ID_S2C_ChickenDiscard = 28513;
  ID_C2S_ChickenUseItem = 28514; //使用道具
  ID_S2C_ChickenUseItem = 28515;
  ID_C2S_ChickenSwitchWeapon = 28516; //切换武器
  ID_S2C_ChickenSwitchWeapon = 28517;
  ID_C2S_ChickenReload = 28518; //上膛
  ID_S2C_ChickenReload = 28519;
  ID_C2S_ChickenMatchStatus = 28520; //匹配状态
  ID_S2C_ChickenMatchStatus = 28521;

  ID_S2C_ChickenNotifyMove = 28522; //广播: 移动
  ID_S2C_ChickenNotifyDamage = 28523; //广播: 扣血
  ID_S2C_ChickenNotifyHeal = 28524; //广播: 回血
  ID_S2C_ChickenNotifyDie = 28525; //广播: 死亡
  ID_S2C_ChickenNotifyArrowAppear = 28526; //广播: 飞行箭出现
  ID_S2C_ChickenNotifyArrowDisappear = 28527; //广播: 飞行箭消失
  ID_S2C_ChickenNotifyToxin = 28528; //广播: 增加毒圈
  ID_S2C_ChickenNotifyItemAppear = 28529; //广播: 地图出现道具
  ID_S2C_ChickenNotifyItemDisappear = 28530; //广播: 地图道具消失
  ID_S2C_ChickenNotifyArmorPoint = 28531; //广播: 护甲值改变
  ID_S2C_ChickenGameOver = 28532; //游戏结束，玩家结算
  ID_C2S_ChickenTime = 28533; //活动时间
  ID_S2C_ChickenTime = 28534;
  ID_C2S_ChickenStartUseItem = 28535; //开始使用道具
  ID_S2C_ChickenStartUseItem = 28536;
  ID_C2S_ChickenUseHorse = 28537; //使用战马
  ID_S2C_ChickenUseHorse = 28538;

	//吃鸡组队模式(4.5.0)
	ID_C2S_ChickenUseBagItem = 28539;//队伍广播：使用背包道具 比如战鹰
	ID_S2C_ChickenUseBagItem = 28540;
	ID_C2S_ChickenInvite = 28541;//发起组队邀请
	ID_S2C_ChickenInvite = 28542;
	ID_S2C_ChickenInvited = 28543;//接收到邀请消息
	ID_C2S_ChickenResInvited = 28544;//响应邀请
	ID_S2C_ChickenResInvited = 28545;
	ID_C2S_ChickenKick = 28546;	//踢人或者离队
	ID_S2C_ChickenKick = 28547;
	ID_C2S_ChickenCreateTeam = 28548;//主动创建队伍
	ID_S2C_ChickenCreateTeam = 28559;
	ID_C2S_ChickenOpenTeam = 28550;	//设置队伍开放
	ID_S2C_ChickenOpenTeam = 28551;
	ID_C2S_ChickenJoinTeam = 28552;	//加入队伍
	ID_S2C_ChickenJoinTeam = 28553;
	ID_C2S_ChickenTeamInfo = 28554;	//组队信息
	ID_S2C_ChickenTeamInfo = 28555;
	ID_C2S_ChickenRescue = 28556;	//救援队友
	ID_S2C_ChickenRescue = 28557; //队伍：通知救援

	//骁勇榜
  ID_C2S_BraveListInfo = 28600;       //拉取制霸骁勇榜活动信息
  ID_S2C_BraveListInfo = 28601;
  ID_C2S_BraveListRoomInfo = 28602;   //拉取房间信息
  ID_S2C_BraveListRoomInfo = 28603;
  ID_C2S_BraveListChallenge = 28604;  //骁勇榜 挑战对手
  ID_S2C_BraveListChallenge = 28605;
  ID_C2S_BraveListVideo = 28606;  //骁勇榜 直升录像获取
  ID_S2C_BraveListVideo = 28607;
  ID_C2S_BraveListVideoList = 28608;	//直升录像列表，列出有哪些录像可看，不带具体录像
  ID_S2C_BraveListVideoList = 28609;
  ID_C2S_BraveListChallengeAllList = 28610; //直升挑战开始，获取直升对手列表
  ID_S2C_BraveListChallengeAllList = 28611;
  ID_C2S_BraveListChallengeAllOver = 28612; //直升挑战结束
  ID_S2C_BraveListChallengeAllOver = 28613;
  ID_C2S_BraveListChallengeAll = 28614;   //直升挑战
  ID_S2C_BraveListChallengeAll = 28615;
  ID_C2S_BraveListLevelChange = 28616;   //段位变化
  ID_S2C_BraveListLevelChange = 28617;
  ID_C2S_GetBraveListRank = 28618; //获取骁勇榜排行榜
  ID_S2C_GetBraveListRank = 28619;
  ID_C2S_BraveListRefuseRoomInfo = 28620;	//停止接收房间信息的推送
  ID_S2C_BraveListRefuseRoomInfo = 28621;
  ID_C2S_BraveListChangeRoom = 28622; //更换房间
  ID_S2C_BraveListChangeRoom = 28623;


  ID_C2S_GetFormationSwitch = 28680;
  ID_S2C_GetFormationSwitch = 28681;
  ID_C2S_SaveFormationSwitch = 28682;
  ID_S2C_SaveFormationSwitch = 28683;
  ID_C2S_SwitchFormation = 28684;
  ID_S2C_SwitchFormation = 28685;

  //天下营寨抢boss(4.3.0)
  ID_C2S_WorldWarGetCamp = 28700; //日常大地图，看城池
  ID_S2C_WorldWarGetCamp = 28701;
  ID_S2C_WorldWarCampCellChange = 28702;
  ID_C2S_WorldWarListenCamp = 28703;
  ID_S2C_WorldWarListenCamp = 28704;
  ID_C2S_WorldWarQuitCamp = 28705;
  ID_S2C_WorldWarQuitCamp = 28706;
  ID_C2S_WorldWarMigrateToCamp = 28707;
  ID_S2C_WorldWarMigrateToCamp = 28708;
  ID_C2S_WorldWarAttackCampMonster = 28709;
  ID_S2C_WorldWarAttackCampMonster = 28710;
  ID_C2S_WorldWarAttackCampUser = 28711;
  ID_S2C_WorldWarAttackCampUser = 28712;
  ID_S2C_WorldWarCampInfoChange = 28713;
  ID_C2S_WorldWarCampList = 28714;
  ID_S2C_WorldWarCampList = 28715;
  ID_C2S_WorldWarCampNotice = 28716;
  ID_S2C_WorldWarCampNotice = 28717;
  ID_C2S_WorldWarCampMyInfo = 28718;
  ID_S2C_WorldWarCampMyInfo = 28719;
  ID_C2S_WorldWarCampBuyAwardCnt = 28720;
  ID_S2C_WorldWarCampBuyAwardCnt = 28721;
  ID_S2C_WorldWarCampMonsterKilled = 28722;
  ID_C2S_WorldWarCampReviveWinner = 28723;
  ID_S2C_WorldWarCampReviveWinner = 28724;
  ID_S2C_WorldWarCampWinnerKicked = 28725;
  ID_C2S_WorldWarCampFollowRevive = 28726; //关注某异族，复活时收到推送消息
  ID_S2C_WorldWarCampFollowRevive = 28727;
  ID_C2S_WorldWarCampBuyEvil = 28728; //异族购买善恶值
  ID_S2C_WorldWarCampBuyEvil = 28729;
  ID_C2S_WorldWarCampGetProtectedAward = 28730; //异族领取保护奖励
  ID_S2C_WorldWarCampGetProtectedAward = 28731;
  ID_S2C_WorldWarCampUserKickedTimes   = 28732; //异族通知被击飞次数

  ID_C2S_WorldWarQueryUserPos = 28740; //日常大地图，查询玩家位置
  ID_S2C_WorldWarQueryUserPos = 28741;
  ID_C2S_QueryCorpAllianceInfo = 28742; //根据联盟id查联盟信息
  ID_S2C_QueryCorpAllianceInfo = 28743;

  //军团联盟-外交留言板
  ID_C2S_GetCorpAllianceForeignMsgBoard = 28744; //获取信息
  ID_S2C_GetCorpAllianceForeignMsgBoard = 28745;
  ID_C2S_CorpAllianceForeignMsgBoardOp = 28746;
  ID_S2C_CorpAllianceForeignMsgBoardOp = 28747;
  ID_S2C_CorpAllianceForeignMsgBoardOpBroadCast = 28748;

	//配置表下发 4.4.0
	ID_C2S_CheckFileChange = 28780;
	ID_S2C_CheckFileChange = 28781;
	ID_C2S_UpdateFilesData = 28782;
	ID_S2C_UpdateFilesData = 28783;
	ID_S2C_ServerFileChanged = 28784;

	//副将系统
	ID_C2S_GetViceFormationInfo = 28790;
	ID_S2C_GetViceFormationInfo = 28791;
	ID_C2S_SetViceFormationPos = 28792;
	ID_S2C_SetViceFormationPos = 28793;

	//传奇之路扩展
	ID_C2S_GetRoadExInfo = 28800;
	ID_S2C_GetRoadExInfo = 28801;
	ID_C2S_RoadExSelectLevel = 28802;
	ID_S2C_RoadExSelectLevel = 28803;
	ID_C2S_RoadExCheckAward = 28804;
	ID_S2C_RoadExCheckAward = 28805;
	ID_C2S_RoadExBuyCount = 28806;
	ID_S2C_RoadExBuyCount = 28807;
	ID_C2S_RoadExRush = 28808;
	ID_S2C_RoadExRush = 28809;
	ID_C2S_RoadExChallenge = 28810;
	ID_S2C_RoadExChallenge = 28811;
	ID_C2S_RoadExResetStage = 28812;
	ID_S2C_RoadExResetStage = 28813;

	//传奇之路 活动副本 4.5.0
	ID_C2S_GetRoadActInfo = 28830;	//获取活动副本信息
	ID_S2C_GetRoadActInfo = 28831;
	ID_C2S_RoadActSelectStory = 28832;	//选择章节
	ID_S2C_RoadActSelectStory = 28833;
	ID_C2S_RoadActKnightJoin = 28834;	//选择武将加入队伍
	ID_S2C_RoadActKnightJoin = 28835;

	//传奇之路联动副本-镇魂街 4.7.50
	ID_C2S_GetRoadLDInfo = 28840;
	ID_S2C_GetRoadLDInfo = 28841;

	//传奇之路-传记 4.9.0
	ID_C2S_RoadBiInfo = 28850;
	ID_S2C_RoadBiInfo = 28851;
	ID_C2S_RoadBiPerfectAward = 28852;
	ID_S2C_RoadBiPerfectAward = 28853;
	ID_C2S_RoadBiSelectAward = 28854;
	ID_S2C_RoadBiSelectAward = 28855;
	ID_C2S_RoadBiMiniInfo = 28856;
	ID_S2C_RoadBiMiniInfo = 28857;
	ID_S2C_RoadTimedEvent = 28858;	//通知发生定时事件


  //天下扩展组队以及营帐挑战
  ID_C2S_WorldWarTeamStatus = 28900;
  ID_S2C_WorldWarTeamStatus = 28901;
  ID_C2S_WorldWarTeamCreate = 28902;
  ID_S2C_WorldWarTeamCreate = 28903;
  ID_C2S_WorldWarTeamList = 28904;
  ID_S2C_WorldWarTeamList = 28905;
  ID_C2S_WorldWarTeamJoin = 28906;
  ID_S2C_WorldWarTeamJoin = 28907;
  ID_C2S_WorldWarTeamInvite = 28908;
  ID_S2C_WorldWarTeamInvite = 28909;
  ID_S2C_WorldWarTeamInvited = 28910;
  ID_C2S_WorldWarTeamInviteAll = 28911;
  ID_S2C_WorldWarTeamInviteAll = 28912;
  ID_C2S_WorldWarTeamKick = 28913;
  ID_S2C_WorldWarTeamKick = 28914;
  ID_C2S_WorldWarTeamLeave = 28915;
  ID_S2C_WorldWarTeamLeave = 28916;
  ID_C2S_WorldWarTeamChangeFormation = 28917;
  ID_S2C_WorldWarTeamChangeFormation = 28918;
  ID_C2S_WorldWarTeamChangePos = 28919;
  ID_S2C_WorldWarTeamChangePos = 28920;

  ID_C2S_WorldWarTeamAttackTent = 28921;//组队挑战营帐
  ID_S2C_WorldWarTeamAttackTent = 28922;

  ID_C2S_WorldWarTeamChangeTarget = 28923;//更改队伍目标
  ID_S2C_WorldWarTeamChangeTarget = 28924;

  ID_C2S_LoadFormationInfo      = 28925; //获取阵型信息
  ID_S2C_LoadFormationInfo      = 28926;
  ID_C2S_UpgradgeFormation      = 28927; //升级阵型
  ID_S2C_UpgradgeFormation      = 28928;
  
  ID_C2S_WorldWarTeamLog = 28930;
  ID_S2C_WorldWarTeamLog = 28931;

  ID_C2S_WorldWarTeamBossAwardForGameHelper = 28932; //异兽副本领取奖励-游戏助手
  ID_S2C_WorldWarTeamBossAwardForGameHelper = 28933; //异兽副本领取奖励-游戏助手

  ID_C2S_UpgrageRune = 29000; //符文升级/突破
  ID_S2C_UpgrageRune = 29001;
  ID_C2S_RecycleRune = 29002; //符文分解
  ID_S2C_RecycleRune = 29003;
  ID_C2S_UnlockRuneBook = 29004; //符文书解锁
  ID_S2C_UnlockRuneBook = 29005;
  ID_C2S_EquipRune = 29006; //装备符文
  ID_S2C_EquipRune = 29007;
  ID_C2S_RebornRune = 29008; //符文重生
  ID_S2C_RebornRune = 29009;

//4.5.0-新功能引导
	ID_C2S_GuideTaskInfo = 29050;				//获取引导成就任务数据
	ID_S2C_GuideTaskInfo = 29051;
	ID_C2S_GuideCheckTask = 29052;			//提交任务
	ID_S2C_GuideCheckTask = 29053;
	ID_C2S_TalkOverBroadInfo = 29054;		//获取留言板数据
	ID_S2C_TalkOverBroadInfo = 29055;
	ID_C2S_TalkOverBroadAdd = 29056;		//发言
	ID_S2C_TalkOverBroadAdd = 29057;
	ID_C2S_TalkOverBroadDel = 29058;		//删除
	ID_S2C_TalkOverBroadDel = 29059;
	ID_C2S_TalkOverBroadUp = 29060;			//赞
	ID_S2C_TalkOverBroadUp = 29061;
	ID_C2S_GuideRedHint = 29062;		//红点
	ID_S2C_GuideRedHint = 29063;

  //4.6.50-世界杯竞猜
  ID_C2S_GetWorldCupInfo = 29100; //世界杯竞猜配置信息
  ID_S2C_GetWorldCupInfo = 29101;
  ID_C2S_WorldCupChampionGuess = 29102; //冠军竞猜
  ID_S2C_WorldCupChampionGuess = 29103;
  ID_C2S_WorldCupGameGuess = 29104; //单场竞猜
  ID_S2C_WorldCupGameGuess = 29105;
  ID_C2S_WorldCupGameAward = 29106; //单场竞猜奖励
  ID_S2C_WorldCupGameAward = 29107;
  ID_C2S_WorldCupGuessMerit = 29108; //竞猜成就
  ID_S2C_WorldCupGuessMerit = 29109;

  //4.6.0-天下boss及集结组队
  ID_C2S_WorldWarTeamReport     = 29832;   //天下试炼队伍战报
  ID_S2C_WorldWarTeamReport     = 29833;
  ID_C2S_WorldWarTeamUserReport = 29834;   //天下试炼玩家个人日报
  ID_S2C_WorldWarTeamUserReport = 29835;
  ID_S2C_WorldWarTeamMove       = 29836;   //天下试炼队伍移动通知
  ID_C2S_WorldWarTeamReady      = 29837;   //队员准备，如果时队长准备，则通知开始副本
  ID_S2C_WorldWarTeamReady      = 29838;
  ID_S2C_WorldWarTeamBossStart  = 29839;   // 副本开始
  ID_S2C_WorldWarTeamBossEnd    = 29840;   // 副本结束
  ID_C2S_WorldWarTeamAttactBoss = 29841;   // 玩家攻击boss
  ID_S2C_WorldWarTeamAttactBoss = 29842;
  ID_C2S_WorldWarTeamBossUserMove = 29843; // 玩家移动
  ID_S2C_WorldWarTeamBossUserMove = 29844;
  ID_S2C_WorldWarTeamBossAct    = 29845;  //boss信息下发通知
  ID_C2S_WorldWarTeamBossInfo   = 29846;  //获取boss信息
  ID_S2C_WorldWarTeamBossInfo   = 29847;
  ID_S2C_WorldWarTeamBossCellChange = 29848;
  ID_C2S_WorldWarTeamSetLestenState = 29849; //设置监听状态
  ID_S2C_WorldWarTeamSetLestenState = 29850;

	ID_S2C_SendBattleReportBytes = 29851; //战报分段

  //4.6.5-天下boss优化
  ID_C2S_WorldWarTeamSetState  = 29852;
  ID_S2C_WorldWarTeamSetState  = 29853;

  //4.7.0
  ID_C2S_WorldWarTeamBossGetUserRank = 29854;
  ID_S2C_WorldWarTeamBossGetUserRank = 29855;

	//4.7.0-修罗道场
	ID_C2S_GetShuraFieldInfo = 29860;	//获取界面信息
	ID_S2C_GetShuraFieldInfo = 29861;
	ID_C2S_ShuraFieldChallenge = 29862; //挑战
	ID_S2C_ShuraFieldChallenge = 29863;
	ID_C2S_ShuraFieldRefresh = 29864; //刷新
	ID_S2C_ShuraFieldRefresh = 29865;
	ID_C2S_GetShuraFieldTaskAward = 29866; //领取活跃奖励
	ID_S2C_GetShuraFieldTaskAward = 29867;
  ID_C2S_BetOnShuraFieldPK = 29868; //竞猜精英对决
	ID_S2C_BetOnShuraFieldPK = 29869;
	ID_C2S_ViewShuraFieldPKReport = 29870; //回看昨日对决信息
	ID_S2C_ViewShuraFieldPKReport = 29871;
	ID_C2S_GetShuraFieldLog = 29872;	//日志记录
	ID_S2C_GetShuraFieldLog = 29873;
	ID_C2S_GetShuraFieldLevelAward = 29874;	//领取段位奖励
	ID_S2C_GetShuraFieldLevelAward = 29875;
	ID_C2S_GetShuraFieldBriefInfo = 29876;	//获取简要信息 开启，血量
	ID_S2C_GetShuraFieldBriefInfo = 29877;

	//4.7.50-联动拼图
	ID_C2S_JigsawInfo = 29900;	//获取信息
	ID_S2C_JigsawInfo = 29901;
	ID_C2S_JigsawOp = 29902;		//拼图激活、领奖
	ID_S2C_JigsawOp = 29903;
	ID_C2S_JigsawShare = 29904;	//领取分享奖励
	ID_S2C_JigsawShare = 29905;

	//4.8.0-无上秘境
	ID_C2S_MysteryInfo = 29920;	//获取信息
	ID_S2C_MysteryInfo = 29921;
	ID_C2S_MysteryChallenge = 29922; //挑战
	ID_S2C_MysteryChallenge = 29923;
	ID_C2S_MysteryReward = 29924;	//进度奖励
	ID_S2C_MysteryReward = 29925;
	ID_C2S_MysteryMonsterInfo = 29926; //查看怪物信息
	ID_S2C_MysteryMonsterInfo = 29927;
	ID_C2S_MysteryPurchaseCount = 29928; //购买次数
	ID_S2C_MysteryPurchaseCount = 29929;
	ID_C2S_MysteryChapterMonsterInfo = 29930;//获取章节内关卡显示
	ID_S2C_MysteryChapterMonsterInfo = 29931;
	ID_C2S_MysteryShopInfo = 29932;	//获取商店已购买次数
	ID_S2C_MysteryShopInfo = 29933;
	ID_S2C_MysteryCoinInfo = 29934;	//推送代币变化
	ID_C2S_MysteryChallengeFast = 29935; //快速挑战
	ID_S2C_MysteryChallengeFast = 29936;
	ID_C2S_MysteryRewardOneKey = 29937;	//一键进度奖励
	ID_S2C_MysteryRewardOneKey = 29938;


	//天下一键  游戏助手
	ID_C2S_WorldWarAttackMonsterOneKey = 30001;
	ID_S2C_WorldWarAttackMonsterOneKey = 30002;
	ID_C2S_WorldWarAttackSummonMonsterOneKey = 30003;
	ID_S2C_WorldWarAttackSummonMonsterOneKey = 30004;
	//彩金图鉴
	ID_C2S_GetMGKnightHandbookInfo = 30005;
	ID_S2C_GetMGKnightHandbookInfo = 30006;
	ID_C2S_UpgradeMGKnightHandbook = 30007;	//升级
	ID_S2C_UpgradeMGKnightHandbook = 30008;
	ID_C2S_EquipMGKnightHandbook = 30009;	//装备
	ID_S2C_EquipMGKnightHandbook = 30010;
	ID_S2C_UpdateKnightHandbook = 30011;	//更新
    //xcb新赤壁
    ID_C2S_GetAncientPvpSchedule = 31000;	// 拉取所有配置信息
    ID_S2C_GetAncientPvpSchedule = 31001;
    ID_C2S_GetAncientPvpBaseInfo = 31002;	// 拉取基本信息，round 和state主控
    ID_S2C_GetAncientPvpBaseInfo = 31003;
    ID_C2S_GetAncientPvpScheduleInfo = 31004; //每个战场信息（等级 人数...）
    ID_S2C_GetAncientPvpScheduleInfo = 31005;
    ID_C2S_ApplyAncientPvp = 31006;			//跨服夺帅报名
    ID_S2C_ApplyAncientPvp = 31007;
    ID_C2S_ApplyAtcAndDefAncientPvp = 31010;//鼓舞
    ID_S2C_ApplyAtcAndDefAncientPvp = 31011;
    ID_C2S_AncientMove = 31012;//房间内移动
    ID_S2C_AncientMove = 31013;//房间内移动
    ID_C2S_GetAncientPvpRoomInfo = 31015;		//获取跨服战房间信息
    ID_S2C_GetAncientPvpRoomInfo = 31016;
    ID_S2C_AncientBroadRoomChange = 31017;		//广播房间内变化
    ID_C2S_AncientPvpBattle = 31019;		//攻打坑位
    ID_S2C_AncientPvpBattle = 31020;
    ID_C2S_GetAncientPvpRank = 31021;		//获取房间排行榜
    ID_S2C_GetAncientPvpRank = 31022;
    ID_C2S_AncientWaitRank = 31030;			//回顾阶段获取当前轮的排行榜
    ID_S2C_AncientWaitRank = 31031;
    ID_C2S_AncientWaitFlower = 31032;		//送鲜花扔鸡蛋
    ID_S2C_AncientWaitFlower = 31033;
    ID_C2S_ReplayAncientPvpRole = 31034;	//战斗后的回顾
    ID_S2C_ReplayAncientPvpRole = 31035;	//战斗后的回顾
    ID_C2S_AncientWaitInitFlowerInfo = 31038; //一轮过后鲜花鸡蛋信息
    ID_S2C_AncientWaitInitFlowerInfo = 31039;
    ID_C2S_GetAncientPvpOb= 31040;//获取OB信息
    ID_S2C_GetAncientPvpOb = 31041;
    ID_C2S_AncientWaitFlowerRank = 31042;	//鲜花鸡蛋榜
    ID_S2C_AncientWaitFlowerRank = 31043;
    ID_C2S_AncientFlowerEggBetRank = 31044;
    ID_S2C_AncientFlowerEggBetRank = 31045;
    ID_C2S_AncientPvpObRoom = 31046;//进入和离开房间 0表示离开房间, >0表示进入房间
    ID_S2C_AncientPvpObRoom = 31047;
    ID_C2S_AncientPvpGetAward = 31048;		//领取排行奖励
    ID_S2C_AncientPvpGetAward = 31049;
    ID_S2C_AncientPvpNotifyBattle = 31050;
    ID_C2S_AncientPvpPlay = 31051;  //进入\离开在新赤壁界面
    ID_S2C_AncientPvpPlay = 31052;
    ID_S2C_AncientPvpBroadState = 31053;
    /////////以上是新赤壁目前实现的协议///////////////////////////
    ID_C2S_SurfaceShopping = 31100;//外观商店购买
    ID_S2C_SurfaceShopping = 31101;
    ID_C2S_SurfaceShopEquip = 31102;//商店中正在体验的皮肤
    ID_S2C_SurfaceShopEquip = 31103;
    ID_S2C_FlushSurfaceRMBInfo = 31105;//直充成功发奖信息


  //军师
  ID_C2S_GetMilitarist    = 31120;        //获取军师数据
  ID_S2C_GetMilitarist    = 31121;
  ID_C2S_GetMilitaristComposeGro = 31122; //获取军师已激活图鉴组数据
  ID_S2C_GetMilitaristComposeGro = 31123;

  ID_S2C_MilitaristBookScore = 31124;     //服务器主动推送图鉴评分信息（军师升星，军师重生，军师转生都会推送）

  //军师养成
  ID_C2S_MilitaristStarUp = 31125;        //请求军师升星
  ID_S2C_MilitaristStarUp = 31126;
  ID_C2S_MilitaristTrans = 31127;         //请求军师转生
  ID_S2C_MilitaristTrans = 31128;
  ID_C2S_MilitaristRebirth = 31129;       //请求军师重生
  ID_S2C_MilitaristRebirth = 31130;

  //军师图鉴养成
  ID_C2S_MilitaristBookStar = 31131;      //请求军师图鉴升星
  ID_S2C_MilitaristBookStar = 31132;
  ID_C2S_MilitaristBookLevelUp = 31133;   //请求军师图鉴升阶
  ID_S2C_MilitaristBookLevelUp = 31134;
  ID_C2S_MilitaristBookRebirth = 31135;   //请求军师图鉴升阶
  ID_S2C_MilitaristBookRebirth = 31136;

  ID_C2S_GetCommonFormation = 31137;  //请求军师阵型
  ID_S2C_GetCommonFormation = 31138;
  ID_C2S_SetCommonFormation = 31139;  //请求设置军师阵型
  ID_S2C_SetCommonFormation = 31140;

  ID_C2S_MilitaristUp = 31141; //请求军师升级
  ID_S2C_MilitaristUp = 31142; //返回军师升级
  ID_C2S_MilitaristMatrixUpgrade = 31143; //军师阵法
  ID_S2C_MilitaristMatrixUpgrade = 31144; 
  
  //少三之路
  ID_C2S_AnniversaryMove = 31150; //攀登
  ID_S2C_AnniversaryMove = 31151;
  ID_C2S_AnniversaryAward = 31152; //领取据点奖励
  ID_S2C_AnniversaryAward = 31153;
  ID_C2S_AnniversaryJigsaw = 31154; //激活拼图
  ID_S2C_AnniversaryJigsaw = 31155;
  ID_C2S_AnniversaryJigsawAwards = 31156; //领取拼图奖励
  ID_S2C_AnniversaryJigsawAwards = 31157;
  ID_C2S_AnniversaryData = 31158; //玩家活动数据
  ID_S2C_AnniversaryData = 31159;
  ID_C2S_AnniversaryInfo = 31160; //活动基本信息
  ID_S2C_AnniversaryInfo = 31161;
  ID_S2C_AnniversaryScoreChange = 31162;//推送前端积分变化

	//联盟驻地
	ID_C2S_AllianceFarmInfo = 31200;	//联盟农场信息
	ID_S2C_AllianceFarmInfo = 31201;
	ID_C2S_AllianceFarmSeedAdd = 31202; //投放种子
	ID_S2C_AllianceFarmSeedAdd = 31203;
	ID_C2S_AllianceFarmGather = 31204;	//收获
	ID_S2C_AllianceFarmGather = 31205;
	ID_C2S_AllianceFarmLog = 31206;	//查看日志
	ID_S2C_AllianceFarmLog = 31207;
	ID_C2S_AllianceFarmDaily = 31208;	//完成每日任务
	ID_S2C_AllianceFarmDaily = 31209;
	ID_C2S_AllianceFarmHelp = 31210;	//帮助他人除虫
	ID_S2C_AllianceFarmHelp = 31211;
	ID_C2S_AllianceFarmDetailInfo = 31212; //农田详情
	ID_S2C_AllianceFarmDetailInfo = 31213;
	ID_C2S_AllianceFarmSelfInfo = 31214;	//自己农田相关信息
	ID_S2C_AllianceFarmSelfInfo = 31215;
	ID_C2S_AllianceFarmStopPlant = 31216; //停止种田
	ID_S2C_AllianceFarmStopPlant = 31217;
	ID_C2S_AllianceFarmSpreadLog = 31218;	//查看施肥日志
	ID_S2C_AllianceFarmSpreadLog = 31219;

  //5.2.0 神机阁扩展-神器屋
	ID_C2S_FlushArtifactInfo = 31230; //养成信息
	ID_S2C_FlushArtifactInfo = 31231; 
	ID_C2S_ArtifactCompose = 31232;//养成
	ID_S2C_ArtifactCompose = 31233;
	ID_C2S_ArtifactEquip = 31234;//装备神器
	ID_S2C_ArtifactEquip = 31235; 
	ID_C2S_FlushArtifactDonateInfo = 31236;//联盟成员请求列表
	ID_S2C_FlushArtifactDonateInfo = 31237; 
	ID_C2S_ArtifactDonateRequest = 31238; //发起捐赠请求
	ID_S2C_ArtifactDonateRequest = 31239; 
	ID_C2S_ArtifactDonateGive = 31240; //赠与
	ID_S2C_ArtifactDonateGive = 31241; 
	ID_S2C_GetSimpleItem = 31242;	//全部简单道具推送

  ID_S2C_NotifyKnightInfo = 31300; //武将信息更新
  ID_S2C_NotifyAntiIndulData = 31301; //通知玩家防沉迷数据
  ID_S2C_NotifyAntiIndulState = 31302;//通知玩家进入防沉迷状态倒计时
  ID_C2S_EquipQuench = 31303; //请求淬火
  ID_S2C_EquipQuench = 31304; //淬火返回结果
  ID_C2S_EquipInherit = 31305; //装备继承
  ID_S2C_EquipInherit = 31306; //装备继承返回结果
  ID_S2C_NotifyDelayKick = 31307; //通知客户端将要被踢
  ID_S2C_TouristTimeOut = 31308; //游客模式到期

	//5.1.0 联盟合战
	ID_C2S_AllianceBattleInfo = 31310; //获取信息
	ID_S2C_AllianceBattleInfo = 31311;
	ID_C2S_AllianceBattleChallenge = 31312;	//挑战关卡
	ID_S2C_AllianceBattleChallenge = 31313;
	ID_C2S_AllianceBattleChapterInfo = 31314; //获取章节信息
	ID_S2C_AllianceBattleChapterInfo = 31315;
	ID_C2S_AllianceBattleGetAimAward = 31316; //领取目标奖励
	ID_S2C_AllianceBattleGetAimAward = 31317;
	ID_C2S_AllianceBattleGetAllianceReward = 31318; //领取联盟合战进度奖励
	ID_S2C_AllianceBattleGetAllianceReward = 31319;
	ID_C2S_AllianceBattleRankInfo = 31320; //战绩信息
	ID_S2C_AllianceBattleRankInfo = 31321;
	ID_C2S_AllianceBattleHelpList = 31322; //拉取助战列表
	ID_S2C_AllianceBattleHelpList = 31323;
	ID_C2S_AllianceBattleUpdate = 31324; //定时请求更新
	ID_S2C_AllianceBattleUpdate = 31325;
	ID_C2S_AllianceBattleOnekey = 31326; //6.3.50-时间简化
	ID_S2C_AllianceBattleOnekey = 31327;

  //5.2.0 天下宠物扩展
  ID_C2S_WorldWarSearchSummonMonster = 31328;
  ID_S2C_WorldWarSearchSummonMonster = 31329;
  ID_C2S_WorldWarCancleSummonMonster = 31330;
  ID_S2C_WorldWarCancleSummonMonster = 31331;
  ID_C2S_WorldWarGetSummonMonster = 31332;
  ID_S2C_WorldWarGetSummonMonster = 31333;

  //5.2.0 军师图鉴一键升星升阶
  ID_C2S_MilitaristBookStarLevelUp = 31334;
  ID_S2C_MilitaristBookStarLevelUp = 31335;

	//5.3.0 寻龙摸金
	ID_C2S_RogueInfo = 31350;
	ID_S2C_RogueInfo = 31351;
	ID_C2S_RogueGameCreate = 31352;	//创建队伍
	ID_S2C_RogueGameCreate = 31353;
	ID_C2S_RogueGameInvite = 31354;	//邀请
	ID_S2C_RogueGameInvite = 31355;
	ID_C2S_RogueGameJoin = 31356;	//加入队伍
	ID_S2C_RogueGameJoin = 31357;
	ID_C2S_RogueGameStart  = 31358; //下墓
	ID_S2C_RogueGameStart  = 31359;
	ID_C2S_RogueGameAction = 31360;		//游戏内行动
	ID_S2C_RogueGameAction = 31361;
	ID_S2C_RogueGameInfo  = 31362;		//推送房间整体信息
	ID_S2C_RogueGameUpdate = 31363;		//推送游戏内变更
	ID_S2C_RogueGameInTurn = 31364; 	//玩家换手
	ID_S2C_RogueGameInviteNotify = 31365; //通知被邀请者
	ID_C2S_RogueGameInviteNotify = 31366; //拉取
	ID_C2S_RogueGameLeave = 31369;  //离开游戏
	ID_S2C_RogueGameLeave	= 31370;
	ID_C2S_RogueGameKick = 31371; //组队房间中，踢人
	ID_S2C_RogueGameKick = 31372; //这条消息会发给房间内双方，根据sid，uid判断是不是自己被踢了
	ID_C2S_RogueGameBuy = 31374;	//商店购买
	ID_S2C_RogueGameBuy = 31375;
	ID_C2S_RogueGameAddAI = 31376;	//添加ai 
	ID_S2C_RogueGameAddAI = 31377;
	ID_C2S_RogueGameReconnection = 31378; //断线重连
	ID_S2C_RogueGameReconnection = 31379;
	ID_C2S_RogueGameSelectFloor = 31380; //选层
	ID_S2C_RogueGameSelectFloor = 31381;
	ID_S2C_RogueGamePoint = 31382;	//指示
	ID_C2S_RogueGamePoint = 31383;	


  ID_S2C_SyncFarmPos = 31373; //同步农田位置

	//5.3.0 军师副将系统
	ID_C2S_GetMilitaristViceFormationInfo = 31400;
	ID_S2C_GetMilitaristViceFormationInfo = 31401;
	ID_C2S_SetMilitaristViceFormationPos = 31402;
	ID_S2C_SetMilitaristViceFormationPos = 31403;
	
	//5.3.0 藏经阁系统
	ID_C2S_GetBookLibraryInfo 	= 31500;	//获取信息
	ID_S2C_GetBookLibraryInfo 	= 31501;
	ID_C2S_ReadBook 			= 31502;	//研读
	ID_S2C_ReadBook 			= 31503;
	ID_C2S_ReadBookSpeedUp 		= 31504;	//加速
	ID_S2C_ReadBookSpeedUp 		= 31505;
	ID_C2S_ReadBookTimeQuery 	= 31506;	//研读时间查询（进入研读界面时由客户端主动发起）
	ID_S2C_ReadBookTimeQuery 	= 31507;
	ID_C2S_ReadBookTimeAward 	= 31508;	//领取研读顿悟奖励
	ID_S2C_ReadBookTimeAward 	= 31509;
	
	//5.4.0 鏖战英灵
	ID_C2S_WorldWarSpiritGetInfo 		= 31600;	//获取信息
	ID_S2C_WorldWarSpiritGetInfo 		= 31601;
	ID_C2S_WorldWarSpiritSelectGroup	= 31602;	//选择阵营
	ID_S2C_WorldWarSpiritSelectGroup 	= 31603;
	ID_C2S_WorldWarSpiritChallenge 		= 31604;	//挑战boss
	ID_S2C_WorldWarSpiritChallenge 		= 31605;
	ID_C2S_WorldWarSpiritGetAwardInfo 	= 31606;	//获取伤害奖励信息
	ID_S2C_WorldWarSpiritGetAwardInfo 	= 31607;
	ID_C2S_WorldWarSpiritAward 			= 31608;	//领取伤害奖励
	ID_S2C_WorldWarSpiritAward 			= 31609;
	ID_C2S_WorldWarSpiritBuyCount 		= 31610;	//购买挑战次数
	ID_S2C_WorldWarSpiritBuyCount 		= 31611;
	

	ID_C2S_CorpAllianceSpiritAwardInfo	= 31620; 	//联盟奖励分配信息
	ID_S2C_CorpAllianceSpiritAwardInfo 	= 31621;		
	ID_C2S_CorpAllianceSpiritAward 		= 31622;	//联盟奖励分配
	ID_S2C_CorpAllianceSpiritAward 		= 31623;
	ID_C2S_CorpSpiritAwardInfo 			= 31624;	//军团奖励分配信息
	ID_S2C_CorpSpiritAwardInfo 			= 31625;
	ID_C2S_CorpSpiritAward 				= 31626;	//军团奖励分配
	ID_S2C_CorpSpiritAward 				= 31627;
	ID_C2S_CorpSpiritMemberList 		= 31628;	//军团可分配成员列表
	ID_S2C_CorpSpiritMemberList 		= 31629;

	ID_C2S_CalmanBlessingSet = 31700; //战斗测试用，设置属性
	ID_S2C_CalmanBlessingSet = 31701;
	ID_C2S_CalmanBlessingReset = 31702;//战斗测试用，重置
	ID_S2C_CalmanBlessingReset = 31703;

    ID_C2S_TestDataType = 31750; //测试协议数据类型
    ID_S2C_TestDataType = 31751; //

	ID_C2S_TestSrpgBattle = 31760;
	ID_S2C_TestSrpgBattle = 31761;
	ID_S2C_SendSrpgBattleReportBytes = 31762;
	
//!!!!!!!!!!!!!!!!!!!!!!!!消息号定义新规则-新加都加到下面!!!!!!!!!!!!!!!!!!!!!!!!!!!!
////////////////////////////200000 -- 290000 C2S////////////////////////////////
//远征   200000-------200100    start
  ID_C2S_AreaBattleTeamCreate       = 200000;     //创建队伍
  ID_S2C_AreaBattleTeamCreate       = 200001;

  ID_C2S_AreaBattleTeamInvite       = 200002;     //邀请成员
  ID_S2C_AreaBattleTeamInvite       = 200003;

  ID_C2S_AreaBattleTeamKick         = 200004;     //踢出成员
  ID_S2C_AreaBattleTeamKick         = 200005;

  ID_C2S_AreaBattleTeamEnter        = 200006;     //加入队伍
  ID_S2C_AreaBattleTeamEnter        = 200007;

  ID_C2S_AreaBattleTeamApply        = 200008;     //队伍报名
  ID_S2C_AreaBattleTeamApply        = 200009;

  ID_C2S_AreaBattleTeamChangePos    = 200010;     //队伍调整位置
  ID_S2C_AreaBattleTeamChangePos    = 200011;

  ID_C2S_AreaBattleTeamReady        = 200012;     //成员准备-》进入房间，带battleuser，准备战斗
  ID_S2C_AreaBattleTeamReady        = 200013;


  ID_C2S_AreaBattleInfo             = 200014;     //活动详细信息
  ID_S2C_AreaBattleInfo             = 200015;

  ID_C2S_AreaBattleGameInfo         = 200016;      //一个战斗的信息
  ID_S2C_AreaBattleGameInfo         = 200017;

  ID_C2S_AreaBattleGameList         = 200018;      //队伍战斗列表
  ID_S2C_AreaBattleGameList         = 200019;

  ID_C2S_AreaBattleSendBrave        = 200020;      //鼓舞精彩
  ID_S2C_AreaBattleSendBrave        = 200021;

  ID_S2C_AreaBattleInfoNtf          = 200022;      //活动信息变化通知
  ID_S2C_AreaBattleGameInfoNtf      = 200023;      //战斗信息变化通知
  ID_S2C_AreaBattleAreaGameBattleNtf = 200024;     //成员战斗结果通知
  ID_S2C_AreaBattleAreaGameResultNtf = 200025;     //战斗结果通知
  ID_S2C_AreaBattleTeamInviteNtf     = 200026;     //邀请通知
  ID_S2C_AreaBattleTeamKickNtf       = 200027;     //踢出玩家通知
  ID_S2C_AreaBattleTeamInfoNtf       = 200028;     //队伍信息变化通知

  ID_C2S_AreaBattleTeamInfo          = 200029;
  ID_S2C_AreaBattleTeamInfo          = 200030;     //队伍信息

  ID_C2S_AreaBattleGetRewards          = 200031;
  ID_S2C_AreaBattleGetRewards          = 200032;     //获取奖励

  ID_C2S_AreaBattleUseSkill             = 200035;  //使用技能
  ID_S2C_AreaBattleUseSkill             = 200034;

  //ID_S2C_AreaBattleBraveAwardsNtf       = 200035;  //押注鼓舞，奖励下方

  ID_C2S_AreapveLoadMonsterPrepareInfo = 200050;  //加载战备副本信息
  ID_S2C_AreapveLoadMonsterPrepareInfo = 200051;  
  ID_C2S_AreapveLoadMonsterInfo        = 200052;  //加载战区守护兽相关信息
  ID_S2C_AreapveLoadMonsterInfo        = 200053;
  ID_C2S_AreapveCreateGame             = 200054;  //开始一次对局
  ID_S2C_AreapveCreateGame             = 200055;
  ID_C2S_AreapveChangeFormation        = 200056;  //变阵
  ID_S2C_AreapveChangeFormation        = 200057;
  ID_C2S_AreapveSelectSkill            = 200058;  //选择技能
  ID_S2C_AreapveSelectSkill            = 200059;
  ID_C2S_AreapveAttack                 = 200060;  //锁定阵型开始战斗
  ID_S2C_AreapveAttack                 = 200061;
  ID_C2S_AreapveGetMonsterLevelAward   = 200062;  //领取守护兽升级奖励
  ID_S2C_AreapveGetMonsterLevelAward   = 200063;   
  ID_C2S_AreapveCancelGame             = 200064;  //放弃游戏
  ID_S2C_AreapveCancelGame             = 200065;
//远征   200000-------200100    end

//真三国无双 200101-------200150
 // ID_C2S_RealDeadBattleLoadInfo        = 200101;  //加载真三国无双数据
 // ID_S2C_RealDeadBattleLoadInfo        = 200102;
 // ID_C2S_RealDeadBattleRankChallenge   = 200103;  //真三国无双定级挑战
 // ID_S2C_RealDeadBattleRankChallenge   = 200104;
 // ID_C2S_RealDeadBattleChallenge       = 200105;  //真三国无双挑战
 // ID_S2C_RealDeadBattleChallenge       = 200106;
 // ID_C2S_RealDeadBattleChallengeAuto   = 200107;  //真三国无双三星扫荡
 // ID_S2C_RealDeadBattleChallengeAuto   = 200108;
 // ID_C2S_RealDeadBattleReset           = 200109;  //真三国无双重置
 // ID_S2C_RealDeadBattleReset           = 200110;
 // ID_C2S_RealDeadBattleEliteInfo       = 200111;  //真三国无双精英数据
 // ID_S2C_RealDeadBattleEliteInfo       = 200112;
 // ID_C2S_RealDeadBattleEliteChallenge  = 200113;  //真三国无双精英挑战
 // ID_S2C_RealDeadBattleEliteChallenge  = 200114;
//真三国无双 200101-------200150    end

//限时道具 200151--------200170
	ID_C2S_UseTimeItem			= 200151;	//使用定时道具
	ID_S2C_UseTimeItem			= 200152;	
	ID_S2C_GetTimeItem			= 200153;	//获取定时道具
	ID_S2C_UpdateUserModuleFlags = 200154;	//更新user flag 暂时放这里


//v3通用榜 
	ID_C2S_GetV3CRank = 200171;
	ID_S2C_GetV3CRank = 200172;
/////////////////////////////

//换包奖励 200201-------200250
	ID_C2S_GetUpdateReward			= 200201; //获取换包奖励
	ID_S2C_GetUpdateReward			= 200202;

//新表情包 200251 -------200260
	ID_C2S_UserEmoji = 200251;
	ID_S2C_UserEmoji = 200252;

//通行证 200261--------200280
  ID_C2S_BattlePassInfo = 200261; // 获取通行证信息
  ID_S2C_BattlePassInfo = 200262;
  ID_C2S_BattlePassGetAward = 200263; // 通行证领奖
  ID_S2C_BattlePassGetAward = 200264;
  ID_S2C_BattlePassBuyPass = 200265; // 购买通行证
  ID_S2C_BattlePassBuyExp = 200266; // 购买通行证经验
  ID_S2C_BattlePassNtf    = 200267; //升级通知
  ID_C2S_BattlePassGetLevelAward = 200268; // 通行证领等级奖
  ID_S2C_BattlePassGetLevelAward = 200269;


//客户端获配置表格 200281--------200290
  ID_C2S_GetExcelData = 200281; // 获取配置表格
  ID_S2C_GetExcelData = 200282;

//210000------211000  ----楼兰烽火 begin
  ID_C2S_LouLanEnterMap         = 210000;      //进入楼兰
  ID_S2C_LouLanEnterMap         = 210001;
  ID_C2S_LouLanAttackUser       = 210002;      //攻打人
  ID_S2C_LouLanAttackUser       = 210003;
  ID_C2S_LouLanAttackMonster    = 210004;      //攻打怪物
  ID_S2C_LouLanAttackMonster    = 210005;
  ID_C2S_LouLanAttackCity       = 210006;      //攻打城池
  ID_S2C_LouLanAttackCity       = 210007;
  ID_C2S_LouLanMigrate          = 210008;      //迁移
  ID_S2C_LouLanMigrate          = 210009;

  ID_C2S_LouLanWarCity          = 210010;      //城池宣战
  ID_S2C_LouLanWarCity          = 210011;

  ID_C2S_LouLanReturnCity       = 210012;      //回城
  ID_S2C_LouLanReturnCity       = 210013;

  ID_S2C_LouLanCellChangeNtf    = 210014;      //cell变化通知
  ID_S2C_LouLanWarCityNtf       = 210015;      //城池被宣战通知
  ID_S2C_LouLanCityChangeNtf    = 210016;      //城池变化通知
  ID_S2C_LouLanAwardsNtf        = 210017;      //发奖通知

  ID_C2S_LouLanMapMove          = 210018;      //拉取地图窗口
  ID_S2C_LouLanMapMove          = 210019;

  ID_C2S_LouLanMapListen        = 210020;      //监听地图
  ID_S2C_LouLanMapListen        = 210021;

  ID_C2S_LouLanSetMigratePos    = 210022;      //设置集结点
  ID_S2C_LouLanSetMigratePos    = 210023;

  ID_C2S_LouLanGetRewards       = 210024;      //获取最终奖励
  ID_S2C_LouLanGetRewards       = 210025;

  ID_C2S_LouLanMapQuit 			= 210026;	   //离开地图
  ID_S2C_LouLanMapQuit 			= 210027;
  
  //丝绸之路 6.5.0 start
  ID_C2S_LouLanEscortCartList = 210028; //镖车信息
  ID_S2C_LouLanEscortCartList = 210029;

  ID_C2S_LouLanRobCart = 210030;  //抢夺镖车
  ID_S2C_LouLanRobCart = 210031;

  ID_C2S_LouLanGetEscortCart = 210032;  //开始运镖
  ID_S2C_LouLanGetEscortCart = 210033;

  ID_C2S_LouLanRequestBackCart = 210034;  //请求夺回镖车
  ID_S2C_LouLanRequestBackCart = 210035;

  ID_C2S_LouLanHelpBackCart = 210036;  //帮助夺回镖车
  ID_S2C_LouLanHelpBackCart = 210037;

  ID_S2C_LouLanCartInfoNtf = 210038;   //镖车信息变更广播
  ID_S2C_LouLanRequestBackCartNtf = 210039; //请求夺回镖车通知
  ID_S2C_LouLanHelpBackCartNtf = 210040; //帮助夺回镖车通知

  ID_C2S_LouLanRandEscortCart  = 210041; //随机镖车
  ID_S2C_LouLanRandEscortCart  = 210042; //随机镖车
  //丝绸之路 6.5.0 end


  ID_C2S_LouLanBaseInfo         = 210120;      //基础信息
  ID_S2C_LouLanBaseInfo         = 210121;
  ID_C2S_LouLanGroupInfo        = 210122;      //阵营信息
  ID_S2C_LouLanGroupInfo        = 210123;
  ID_C2S_LouLanGroupJob         = 210124;      //阵营官职(取消)
  ID_S2C_LouLanGroupJob         = 210125;
  ID_C2S_LouLanGroupCandidate   = 210126;      //阵营官职候选人列表(取消)
  ID_S2C_LouLanGroupCandidate   = 210127;
  ID_C2S_LouLanSetJobMinister   = 210128;      //设置丞相
  ID_S2C_LouLanSetJobMinister   = 210129;
  ID_C2S_LouLanSetJobLeader     = 210130;      //设置王
  ID_S2C_LouLanSetJobLeader     = 210131;
  ID_C2S_LouLanImpeachLeader    = 210132;      //弹劾王
  ID_S2C_LouLanImpeachLeader    = 210133;
  ID_C2S_LouLanGroupLeaderCandidate = 210134; // 阵营初始王候选人列表
  ID_S2C_LouLanGroupLeaderCandidate = 210135;
  ID_S2C_LouLanGroupJobChange = 210136; //通知客户端职位变化

  ID_C2S_LouLanGetTechInfos		= 210150;	//获取科技信息
  ID_S2C_LouLanGetTechInfos		= 210151;
  ID_C2S_LouLanUplevelTech		= 210152;	//升级科技
  ID_S2C_LouLanUplevelTech		= 210153;
  ID_C2S_LouLanResetTech		= 210154;	//重置科技
  ID_S2C_LouLanResetTech		= 210155;
  ID_C2S_LouLanGetItemInfos		= 210156;	//获取道具信息
  ID_S2C_LouLanGetItemInfos		= 210157;
  ID_S2C_LouLanAddItem			= 210158;	//获得道具
  ID_C2S_LouLanBuyItem			= 210159;	//购买道具
  ID_S2C_LouLanBuyItem			= 210160;
  ID_C2S_LouLanUseItem			= 210161;	//使用道具
  ID_S2C_LouLanUseItem			= 210162;
  ID_C2S_LouLanBuyRes			= 210163;	//购买资源
  ID_S2C_LouLanBuyRes			= 210164;

  ID_C2S_LouLanGroupMsgBoardGet = 210180;	//势力留言板-获取信息
  ID_S2C_LouLanGroupMsgBoardGet = 210181;
  ID_C2S_LouLanGroupMsgBoardOp 	= 210182;	//势力留言板-操作
  ID_S2C_LouLanGroupMsgBoardOp 	= 210183;
  ID_S2C_LouLanGroupMsgBoardOpBroadCast = 210184;//势力留言板-广播

//210000------211000  ----楼兰烽火 end

//春节祝福语211001------211050
  ID_C2S_GetSpringWordsInfo		= 211001;	//获取春节祝福语的领取记录
  ID_S2C_GetSpringWordsInfo		= 211002;
  ID_C2S_GetSpringWordsAwards	= 211003;	//领取春节祝福语奖励
  ID_S2C_GetSpringWordsAwards	= 211004;
	ID_S2C_SpringFirecrackerShow = 211005; //春节祝福爆竹

//汉室秘宝-----211051-211100
  ID_C2S_RateTreasureGetInfo		= 211051; //汉室秘宝信息
  ID_S2C_RateTreasureGetInfo		= 211052;   
  ID_C2S_RateTreasureDraw			= 211053; //抽奖
  ID_S2C_RateTreasureDraw			= 211054;
  ID_C2S_RateTreasureDrawAll		= 211055; //抽取全部
  ID_S2C_RateTreasureDrawAll		= 211056;
  ID_C2S_RateTreasureResetGifts		= 211057; //重置奖池
  ID_S2C_RateTreasureResetGifts   	= 211058;
  ID_C2S_RateTreasureSelectGift 	= 211059; //选择奖池奖励
  ID_S2C_RateTreasureSelectGift 	= 211060;
  ID_C2S_UpgradeRunestoneEnhance    = 212001;//兵符赋能强化
  ID_S2C_UpgradeRunestoneEnhance    = 212002;
  ID_C2S_SelectRunestoneEnhance     = 212003;//兵符赋能分支选择
  ID_S2C_SelectRunestoneEnhance     = 212004;
  ID_C2S_ResetRunestoneEnhance      = 212005;//兵符赋能重置
  ID_S2C_ResetRunestoneEnhance      = 212006;
  ID_C2S_OneKeyInstallRunestoneWarSoul = 212007;//兵符一键装备战魂
  ID_S2C_OneKeyInstallRunestoneWarSoul = 212008;
  ID_C2S_OneKeyUninstallRunestoneWarSoul = 212009;//兵符一键卸载所有孔位战魂
  ID_S2C_OneKeyUninstallRunestoneWarSoul = 212010;
  ID_C2S_PreviewRunestoneEnhance         = 212030;//赋能预览
  ID_S2C_PreviewRunestoneEnhance         = 212031; 


  //213000 ---- 213100 南征北战  start
  ID_C2S_WarFareInfo              = 213000;     //副本信息
  ID_S2C_WarFareInfo              = 213001;

  ID_C2S_GetChapterAwards         = 213002;     //领取章节奖励
  ID_S2C_GetChapterAwards         = 213003;

  ID_C2S_SelectChapterRoad        = 213004;     //章节选路
  ID_S2C_SelectChapterRoad        = 213005;

  ID_C2S_WarFareChapterInfo       = 213006;     //获取章节的关卡信息
  ID_S2C_WarFareChapterInfo       = 213007;

  ID_C2S_StepNext                 = 213008;     //下一步，触发事件,
  ID_S2C_StepNext                 = 213009;

  ID_C2S_GetUserListPos             = 213010;     //拉取玩家位置列表
  ID_S2C_GetUserListPos             = 213011;

  ID_C2S_SupportMessage           = 213012;     //点赞留言
  ID_S2C_SupportMessage           = 213013;

  ID_C2S_ResetChapterRoad         = 213014;     //重置章节选路
  ID_S2C_ResetChapterRoad         = 213015;

  ID_S2C_WarFareAwardsNtf         = 2132016;     //结算奖励通知
  ID_S2C_WriteMessageNtf          = 2132017;     //留言通知
  ID_S2C_SupportMessageNtf        = 2132018;     //点赞通知

  //TEst msg
  ID_C2S_StartBattle              = 213019;     //开启一场战斗
  ID_S2C_StartBattle              = 213020;
  //TEST msg end

  ID_C2S_WarFareBuyResetTimes    = 213040 ;  //购买重置次数
  ID_S2C_WarFareBuyResetTimes    = 213041 ;

  //213000 ---- 213100 南征北战  end

  //213101 ---- 213200 backthisservice3 start
  ID_C2S_OldPlayerInfo              = 213101;    //老玩家信息
  ID_S2C_OldPlayerInfo              = 213102;

  ID_C2S_OldPlayerCompleteTask      = 213103;     //完成任务
  ID_S2C_OldPlayerCompleteTask      = 213104;

  ID_C2S_OldPlayerBuyItem           = 213105;        //购买物品
  ID_S2C_OldPlayerBuyItem           = 213106;

  ID_C2S_OldPlayerSelectBox         = 213107;     //选择心愿礼盒
  ID_S2C_OldPlayerSelectBox         = 213108;

  ID_C2S_OldPlayerGetGift           = 213109;     //获取见面礼
  ID_S2C_OldPlayerGetGift           = 213110;

  ID_S2C_OldPlayerTaskNtf           = 213119;     //任务状态通知
  ID_S2C_OldPlayerDataNtf           = 213120;     //老玩家数据通知
  //213101 ---- 213200 backthisservice3 end
////////////////////////////////////////////////////////////////////////////////

//6.2.0-鎏金装备-器灵 211101-211150 
 ID_C2S_FlushEquipmentSpirit = 211101; //获取全部器灵信息
 ID_S2C_FlushEquipmentSpirit = 211102;
 ID_C2S_FlushEquipmentSpiritBooks = 211103; //获取全部器灵书信息
 ID_S2C_FlushEquipmentSpiritBooks = 211104;
 ID_C2S_CreateEquipmentSpirit = 211105; //鉴定
 ID_S2C_CreateEquipmentSpirit = 211106;
 ID_C2S_MergeEquipmentSpirit = 211107; //融合
 ID_S2C_MergeEquipmentSpirit = 211108;
 ID_C2S_EquipmentSpiritLearnSkill = 211109; //融合
 ID_S2C_EquipmentSpiritLearnSkill = 211110;
 
// 6.2. 50-推送礼包 214001 ---- 214005 
 ID_C2S_GetPropellingInfo = 214001; // 拉取推送礼包信息
 ID_S2C_GetPropellingInfo = 214002; 
 ID_S2C_FlushPropellingInfo = 214003; // 刷新推送信息
 ID_C2S_GetPropellingRechargeAward = 214004; //领取直冲奖励
 ID_S2C_GetPropellingRechargeAward = 214005;
 //6.3.0-超级幸运星 
  ID_C2S_LucklyLottery            = 214100;//超级幸运星抽奖
  ID_S2C_LucklyLottery            = 214101;
  ID_C2S_LucklyLotteryAppointPet  = 214102;//超级幸运抽奖指定战宠
  ID_S2C_LucklyLotteryAppointPet  =214103;
  ID_C2S_LucklyLotteryUserData    = 214104;//获取玩家超级幸运数据
  ID_S2C_LucklyLotteryUserData    =214105;
  ID_C2S_LucklyLotteryExchangeCoin =214106;//兑换代币
  ID_S2C_LucklyLotteryExchangeCoin =214107;
  ID_C2S_LucklyLotteryProgressAward =214108;//领取抽奖进度奖励
  ID_S2C_LucklyLotteryProgressAward =214109;
  ID_C2S_LucklyLotteryLogs          =214110;//获超级幸运日志数据 
  ID_S2C_LucklyLotteryLogs          =214111;
  ID_C2S_LucklyLotteryActiviteData  = 214112;//获取超级幸运星活动数据
  ID_S2C_LucklyLotteryActiviteData  = 214113;
 //6.3.0-主线守关人    
  ID_C2S_MainRoadDefender          =214114;//章节主线守关人 
  ID_S2C_MainRoadDefender          =214115;
  
 //6.3.0-定制欢庆-九州巡礼    214201 ---- 214212
  ID_C2S_GetCustomFestivalActivity = 214201; //获取定制欢庆信息
  ID_S2C_GetCustomFestivalActivity = 214202;
  ID_C2S_GetCustomFestivalActivityReward = 214203; //获取欢庆活动奖励
  ID_S2C_GetCustomFestivalActivityReward = 214204;
  ID_C2S_GetCustomFestivalSales = 214205; //获取欢庆兑换商店信息
  ID_S2C_GetCustomFestivalSales = 214206;
  ID_C2S_BuyCustomFestivalSale = 214207; //购买欢庆商品
  ID_S2C_BuyCustomFestivalSale = 214208;
  ID_C2S_GetExcelCustomFestivalInfo = 214209; //获取客户端欢庆信息
  ID_S2C_GetExcelCustomFestivalInfo = 214210;
  ID_C2S_GetExcelCustomFestivalSale = 214211; //获取客户端欢庆兑换商店
  ID_S2C_GetExcelCustomFestivalSale = 214212;
 //6.3.0-H5预抽卡 214301 ---- 214307
  ID_C2S_BindLotteryCode = 214301; //绑定激活码
  ID_S2C_BindLotteryCode = 214302; 
  ID_C2S_GetPreLotteryInfo = 214303; //客户端获取预抽奖礼包情况
  ID_S2C_GetPreLotteryInfo = 214304;
  ID_C2S_GetPreLotteryAward = 214305; //客户端领取预抽奖奖励
  ID_S2C_GetPreLotteryAward = 214306;
  ID_S2C_BindLotteryCodeResult = 214307; //绑定激活码回调结果

  //6.3.0-登录贺卡 214500 ---- 214599
  ID_C2S_GetGreetingCardInfo     = 214500;    //获取信息
  ID_S2C_GetGreetingCardInfo     = 214501;
  ID_C2S_AwardGreetingCard       = 214502;    //领奖
  ID_S2C_AwardGreetingCard       = 214503; 
  //6.4.0-主角新养成
  ID_C2S_MainRoleTransferJobSelect = 214520;//选择职业
  ID_S2C_MainRoleTransferJobSelect = 214521;
  ID_C2S_MainRoleTransferJobGiveUp = 214524;//主角放弃试炼
  ID_S2C_MainRoleTransferJobGiveUp = 214525;
  ID_C2S_MainRoleTransferJobComplete = 214526;//确认选择职业
  ID_S2C_MainRoleTransferJobComplete = 214527;
  ID_C2S_MainRoleTransferJobUpgrade  = 214528;//职业升级
  ID_S2C_MainRoleTransferJobUpgrade = 214529;
  ID_C2S_MainRoleTransferBookUpgrade = 214530;//书籍升级
  ID_S2C_MainRoleTransferBookUpgrade = 214531;
  ID_C2S_MainRoleTransferJobReselect = 214532;//重新选择职业 
  ID_S2C_MainRoleTransferJobReselect = 214533;
  ID_C2S_MainRoleTransferJobCompose = 214534;//书籍合成
  ID_S2C_MainRoleTransferJobCompose = 214535;
  

  //6.3.0-通用活动信息214600 --- 214650
  ID_C2S_Activity = 214600;
  ID_S2C_Activity = 214601;

  //6.4.0 新版月基金 214700-214799
  ID_C2S_GetDirectMonthFundInfo = 214700;
  ID_S2C_GetDirectMonthFundInfo = 214701;
  ID_C2S_GetDirectMonthFundReward = 214702;
  ID_S2C_GetDirectMonthFundReward = 214703;
  ID_S2C_BuyDirectMonthFund = 214704;

  // 6.4.50-镇魂街联动（大富翁） 214800 --- 214819
  ID_C2S_GetChessInfo = 214800;
  ID_S2C_GetChessInfo = 214801;
  ID_C2S_ChessDice = 214802;
  ID_S2C_ChessDice = 214803;
  ID_C2S_GetChessDailyMission = 214804;
  ID_S2C_GetChessDailyMission = 214805;
  ID_C2S_GetChessDailyMissionAward = 214806;
  ID_S2C_GetChessDailyMissionAward = 214807;
  ID_S2C_ChessEventPlay = 214808;
  ID_S2C_ChessEventEnd = 214809;
  ID_S2C_ChessEventMove = 214810;
  ID_S2C_ChessEventQuestion = 214811;
  ID_C2S_ChessEventAnswer = 214812;
  ID_S2C_ChessEventAnswer = 214813;

  //6.4.50 主线战令 214900-214999
  ID_C2S_GetBattlePassDungeonInfo = 214900; // 获取主线战令活动信息
  ID_S2C_GetBattlePassDungeonInfo = 214901;
  ID_C2S_GetBattlePassDungeonAward = 214902; // 领取战令任务奖励
  ID_S2C_GetBattlePassDungeonAward = 214903;
  ID_C2S_GetBattlePassDungeonServerAward = 214904; // 领取全服人数奖励
  ID_S2C_GetBattlePassDungeonServerAward = 214905;
  ID_S2C_BuyBattlePassPaySuccess = 214906; // 购买至尊版成功主动推送
  //6.4.50-首充累登录 
  ID_C2S_GetNewFirstRechargeDayAward = 214930;//领取登录奖励
  ID_S2C_GetNewFirstRechargeDayAward = 214931;

  //6.5.0-鎏金神兵 214950-214969
  ID_C2S_GetSacredwpBooks = 214950;
  ID_S2C_GetSacredwpBooks = 214951;
  ID_C2S_SetSacredwpBook = 214952;
  ID_S2C_SetSacredwpBook = 214953;
  ID_C2S_BaptizeSacredwpBook = 214954;
  ID_S2C_BaptizeSacredwpBook = 214955;
  ID_C2S_UpStarSacredwpBook = 214956;
  ID_S2C_UpStarSacredwpBook = 214957;
  ID_C2S_RebirthSacredwpBook = 214958;
  ID_S2C_RebirthSacredwpBook = 214959;
  //6.5.0-定制礼包TODO
  ID_C2S_SelectCustomPack            = 214970;//选择礼包奖池
  ID_S2C_SelectCustomPack            = 214971;
  ID_C2S_ObtainCustomPackAward       = 214972;//领取奖励 
  ID_S2C_ObtainCustomPackAward       = 214973; 
  ID_C2S_ObtainUserCustomPackData    = 214974;//获取定制礼包数据 
  ID_S2C_ObtainUserCustomPackData    = 214975;
  //6.5.0-将军弈 
  // 养成 215000-215019
  ID_C2S_SrpgGetInfo                 = 215000;//拉取将军弈养成信息
  ID_S2C_SrpgGetInfo                 = 215001;
  ID_C2S_SrpgKnightLevelUp           = 215002;//将领升级
  ID_S2C_SrpgKnightLevelUp           = 215003;
  ID_C2S_SrpgKnightSaveArms          = 215004;//将领保存兵种
  ID_S2C_SrpgKnightSaveArms          = 215005;
  ID_C2S_SrpgSaveFormation           = 215006;//保存队列信息
  ID_S2C_SrpgSaveFormation           = 215007;
  ID_C2S_SrpgGetKnightAttr           = 215008;//拉取将领属性
  ID_S2C_SrpgGetKnightAttr           = 215009;
  // pve玩法215020-215039
  ID_C2S_SrpgGetPveInfo              = 215020;//拉取PVE信息
  ID_S2C_SrpgGetPveInfo              = 215021;
  ID_C2S_SrpgGetPveStageRecordInfo   = 215022;//拉取关卡信息
  ID_S2C_SrpgGetPveStageRecordInfo   = 215023;
  ID_C2S_SrpgSavePveFormation        = 215024;//存储PVE队伍阵容
  ID_S2C_SrpgSavePveFormation        = 215025;
  ID_C2S_SrpgPveBattle               = 215026;//进行PVE战斗
  ID_S2C_SrpgPveBattle               = 215027;
  ID_C2S_SrpgGetPveUserList          = 215028;//拉取玩家列表的进度
  ID_S2C_SrpgGetPveUserList          = 215029;
  //6.5.0-退款相关
  ID_S2C_UpdateUserRefundInfo   = 215100; //退款限制信息更新
////////////////////////////////////////////////////////////////////////////////
}


//心跳 10s
message C2S_KeepAlive {
}

message S2C_KeepAlive {
}

//登陆
message C2S_Login {
  required string token = 1;
  required uint64 sid = 2;
  required string channel_id = 3;
  required string device_id = 4;	//json结构（包含设备号，SDK透传参数，客户端整包版本号）
  optional uint32 version = 5;		//客户端游戏版本号
}

message S2C_Login {
  required uint32 ret = 1;
  optional uint32 uid = 2;
  optional uint32 sid = 3; //gateway client id
  optional string yzuid = 4;
  optional string platform_uid = 5;
  optional uint32 version = 6;
  repeated uint64 merge_sids = 7;
  optional string login_reason=8;
}

//创建角色
message C2S_Create {
  required string name = 1;
  required uint32 type = 2;
}

message S2C_Create {
  required uint32 ret = 1;
  optional uint32 uid = 2;
  optional uint32 sid = 3;
}

message C2S_Offline {
}

message C2S_GetServerTime {
}

message S2C_GetServerTime {
  required uint32 time = 1;
  required uint32 zone = 2;
}



//刷新玩家信息
message C2S_Flush {
  required bool user = 1;
  required bool knight = 2;
  required bool item = 3;
  required bool fragment = 4;
  required bool mail = 5;
  required bool gift_mail = 6;
  required bool equipment = 7;
  required bool treasure_fragment = 8;
  required bool treasure = 9;
  required bool fight_resource = 10;
  required bool fight_knight = 11;
  optional bool vip = 12;
  optional bool recharge = 13;
  optional bool chapter = 14;
  optional bool main_grouth = 15;
  optional bool hof_points = 16;
  optional bool dress = 17;
  optional bool awaken_item = 18;
  optional bool pet = 19;
  optional bool ksoul = 20;
  optional bool sm_lock = 21;//交易锁
  optional bool famous = 22; //英灵
  optional bool resource = 23; //积分资源
  optional bool rune = 24; //符文
  optional bool rune_book = 25; //符文书
  optional bool gem = 26; //宝石
  optional bool sacredwp = 27; //神兵
  optional bool horse = 28; //战马
  optional bool runestone = 29; //兵符
  optional bool martial = 30; //武阁
  optional bool biography = 31; //列传
  optional bool home_skin = 32; //官邸换肤图鉴
  optional bool wing = 33; //翅膀
  optional bool simple_item = 34; //简单道具
  optional bool time_item = 35; //限时道具  
  optional bool equipment_spirit = 36; //器灵
  optional bool sacredwp_book = 37; //神兵谱
}

message S2C_Flush {
  required uint32 ret = 1;
  required bool user = 2;
  required bool knight = 3;
  required bool item = 4;
  required bool fragment = 5;
  required bool mail = 6;
  required bool gift_mail = 7;
  required bool equipment = 8;
  required bool treasure_fragment = 9;
  required bool treasure = 10;
  required bool fight_resource = 11;
  required bool fight_knight = 12;
  optional bool vip =13;
  optional bool recharge = 14;
  optional bool chapter = 15;
  optional bool main_grouth = 16;
  optional bool hof_points = 17;
  optional bool dress = 18;
  optional bool awaken_item = 19;
  optional bool pet = 20;
  optional bool ksoul = 21;
  optional bool sm_lock = 22;
  optional bool famous = 23; //英灵
  optional bool resource = 24; //积分资源
  optional bool rune = 25; //符文
  optional bool rune_book = 26; //符文书
  optional bool gem = 27; //宝石
  optional bool sacredwp = 28; //神兵
  optional bool horse = 29; //战马
  optional bool runestone = 30; //兵符
  optional bool martial = 31; //武阁
  optional bool biography = 32; //列传
  optional bool home_skin = 33;
  optional bool wing = 34; //翅膀
  optional bool time_item = 35; //限时道具
  optional bool equipment_spirit = 36; //器灵
  optional bool sacredwp_book = 37; //神兵谱
}

//玩家基础信息
message S2C_GetUser {
  required User user = 1;
}

message S2C_GetKnight {
  repeated Knight knights = 1;
}

message S2C_GetPet {
  repeated Pet pets = 1;
  optional uint32 fight_pet = 2;
}
message S2C_GetEquipment {
  repeated Equipment equipments = 1;
}

message S2C_GetDress {
  repeated Dress dresses = 1;
  optional uint32 dress_id = 2;
}

message S2C_GetTreasure {
  repeated Treasure treasures = 1;
}

message S2C_GetItem {
  repeated Item items = 1;
}

message S2C_GetAwakenItem {
  repeated AwakenItem awaken_items = 1;
}

message S2C_GetFragment {
  repeated Fragment fragments = 1;
}

message S2C_GetTreasureFragment {
  repeated TreasureFragment treasure_fragments = 1;
}

message S2C_HOF_Points {
  required uint32 points = 1;
}

message FightEquipment {
  required uint32 slot_1 = 1;
  required uint32 slot_2 = 2;
  required uint32 slot_3 = 3;
  required uint32 slot_4 = 4;
}

message FightTreasure {
  required uint32 slot_1 = 1;
  required uint32 slot_2 = 2;
}

message S2C_FightResource {
  repeated FightEquipment fight_equipments = 1;
  repeated FightTreasure fight_treasures = 2;
}

message C2S_AddFightEquipment {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 id = 4; //装备ID
}

message S2C_AddFightEquipment {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 id = 4; //装备ID
  required uint32 ret = 5;
  optional uint32 old_id = 6; //之前的装备ID
}

message C2S_ClearFightEquipment {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
}

message S2C_ClearFightEquipment {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 ret = 4;
  optional uint32 old_id = 5;
}

message C2S_AddFightDress {
  required uint32 id = 1; //装备ID
}

message S2C_AddFightDress {
  required uint32 ret = 1;
  required uint32 id = 2; //装备ID
  optional uint32 old_id = 3; //之前的装备ID
}

message C2S_ClearFightDress {
}

message S2C_ClearFightDress {
  required uint32 ret = 1;
  optional uint32 old_id = 2; //之前的装备ID
}
message C2S_AddFightTreasure {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 id = 4; //宝物ID
}

message S2C_AddFightTreasure {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 id = 4; //宝物ID
  required uint32 ret = 5;
  optional uint32 old_id = 6; //之前的宝物ID
}

message C2S_ClearFightTreasure {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
}

message S2C_ClearFightTreasure {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 ret = 4;
  optional uint32 old_id = 5;
}


message C2S_RecycleTreasure {
  required uint32 treasure_id = 1;
  optional uint32 type = 2; // 0:重生 1:重生预览
}

message S2C_RecycleTreasure {
  required uint32 ret = 1;
  repeated Award item = 2; // 返还物品
  optional uint32 type = 3; // 0:重生 1:重生预览
}

message SharePos {
  optional uint32 city_id = 1;
  optional Pos pos = 2;
}

// 聊天分享
message ChatShare {
  required uint32 share_id = 1;
  optional string share_str = 2;
}

// 聊天
// 发送聊天消息请求
message C2S_ChatRequest {
  required uint32 channel = 1;
  required string content = 2;
  optional string reciver = 3;
  optional uint32 ts=4;
  optional string md5=5;
  optional string voicemail_id = 6; //非0表示语音聊天
  optional uint32 voicemail_length = 7; //时长
  optional uint64 tar_sid = 8;
	optional string battle_stat = 9;	//战斗结果数据分享 4.4.50
  optional ChatShare chat_share = 10; //聊天分享
	repeated KeyValueT emoji = 11; //表情
}

// 返回聊天消息结果
message S2C_ChatRequest {
  required uint32 ret = 1;
}

// 收到聊天消息
message S2C_Chat {
  required uint32 channel = 1;
  required string sender = 2;
  required uint32 senderId = 3;
  required uint32 kid = 4;     // 头像 knight的baseId
  required string content = 5;
  required uint32 vip = 6;
  required uint32 dress_id = 7;
  optional uint32 title_id = 8;
	optional uint32 level = 9; //发送聊天消息玩家的等级
  optional uint32 fid	= 10; // 头像框ID
  optional uint64 sender_sid = 11;
  optional uint64 team_id = 12;
  optional uint32 clid = 13;
  optional uint32 cltm = 14;
  optional bool   clop = 15;
  optional string voicemail_id = 16; //非0表示语音聊天
  optional uint32 voicemail_length = 17; //时长
  optional string sender_cname = 18; //发送者军团名
	optional uint32 bubble_id = 19;	//泡泡id
	optional string battle_stat = 20;	//战斗结果数据分享 4.4.50
  optional ChatShare chat_share = 21; //聊天分享
	repeated KeyValueT emoji = 22; //表情
  optional uint32 off_day = 23; //离线天数
}

message C2S_UploadVoiceMailToken {
}

message S2C_UploadVoiceMailToken {
  required uint32 ret = 1;
  optional string voicemail_id = 2;
  optional string url = 3;
}

message C2S_DownloadVoiceMailToken {
  required string voicemail_id = 1;
}

message S2C_DownloadVoiceMailToken {
  required uint32 ret = 1;
  required string voicemail_id = 2;
  optional string url = 3;
}

message C2S_UploadTopCorpMsgBoardVoiceMail {
  required string voicemail_id = 1;
  required bytes voicemail = 3;
}

message S2C_UploadTopCorpMsgBoardVoiceMail {
  required uint32 ret = 1;
}

message C2S_DownloadTopCorpMsgBoardVoiceMail {
  required string voicemail_id = 1;
}

message S2C_DownloadTopCorpMsgBoardVoiceMail {
  required uint32 ret = 1;
  required string voicemail_id = 2;
  optional bytes voicemail = 3;
}

message C2S_SetChatShield {
  required uint32 type = 1; //1跨服聊天
  required uint32 shield = 2;
}

message S2C_SetChatShield {
  required uint32 ret = 1;
  required uint32 type = 2;
  required uint32 shield = 3;
}

// 收到公告消息(走马灯)
message S2C_Notify {
  required uint32 template_id = 1;  // 模板id
  required string name = 2;  // 用户名 (策划确认不会在同一条走马灯出现两个玩家名)
  required uint32 base_id = 3;  // 主角base_id
  repeated uint32 template_args = 4;  // 模板参数
  optional string sname = 5; //服务器名

//模板参数:
//1: [1-战将\2-战将十连抽\3-神将\4-神将十连抽][武将base_id列表...]
//2: [无]
//3: [武将base_id]
//4: [层数]
//5: [副本星数]
//6: [无]
//7: [type value size]
}

// 好友
message Friend {
  required uint32 id = 1;
  required string name = 2; // 角色名字
  required uint32 level = 3; // 角色等级
  required uint64 fighting_capacity = 4; // 战斗力
  required uint32 vip = 5;
  required uint32 online = 6;  // 0：在线  其它：下线时间unix时间戳
  optional bool present = 7; // 是否可赠送礼物
  optional bool getpresent = 8; // 是否可领取礼物
  optional uint32 friend_count = 9; // 好友数量
  optional uint32 mainrole = 10; // 主角base_id
  optional uint32 dress_id = 11; // 时装
  optional string guild_name = 12; // 军团名
  optional uint32 title_id = 13; //称号ID
  optional uint32 fid	= 14;	// 头像框ID
  optional uint32 team_pvp_title = 15; // 组队pvp称号
  optional uint32 clid			= 16; // 换装用
  optional uint32 cltm			= 17;
  optional bool	  clop			= 18;
  optional uint32 wid			= 19;
  optional uint32 gve_title = 20; // 北伐称号
  optional uint32 home_exp = 21;//家园经验
  optional uint32 home_level =22;//家园等级
  optional uint32 week_act = 23;//周活跃
  optional uint32 corp_pos = 24;//军团职位
  repeated uint32 available_group_dungeon = 25;
  optional uint64 sid = 26; //服务器id
  optional uint32 home_boom = 27;//繁荣度
  optional string sname = 28; //服务器名
  optional uint32 total_favor = 29; //总好友度
  optional uint32 day_favor = 30;//今日好友度
  optional bool fsnd_gift = 31; // 是否已赠送礼物(好友度相关)
  optional bool frcv_gift = 32; // 是否可领取礼物(好友度相关)
  optional uint32 extend_level = 33;//额外等级
  optional uint32 unlock_tent_level = 34; //营帐怪物解锁等级
  optional uint32 team_boss_times = 35;
	optional uint32 rogue = 36;
  optional uint32 super_server = 37; //5.7.0-热血服标记
  optional uint32 off_day = 38;  //6.3.0-老玩家回归
  optional uint32 job_id = 39;//6.4.0-主角新养成职业id 
  optional uint32 job_level = 40;//6.4.0-主角新养成职业level
}

// 请求好友列表
message C2S_GetFriendList {
}

message S2C_GetFriendList {
  repeated Friend friend = 1;
  repeated Friend black_list = 2;
}

// 请求未确认好友列表
message C2S_GetFriendReqList {
}

message S2C_GetFriendReqList {
  repeated Friend friend = 1;
}

// 添加好友
message C2S_RequestAddFriend {
  required string name = 1; // 好友名
  required uint32 friend_type = 2; // 类型：1好友 2黑名单
}

message S2C_RequestAddFriend  {
  required uint32 ret = 1;
  required string name = 2;
  required uint32 friend_type = 3; // 类型：1好友 2黑名单
  optional Friend friend = 4;
}

// 请求删除好友
message C2S_RequestDeleteFriend {
  required uint32 id = 1;
  required uint32 friend_type = 2; // 类型：1好友 2黑名单
}

message S2C_RequestDeleteFriend {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 friend_type = 3; // 类型：1好友 2黑名单
}

// 确认好友邀请
message C2S_ConfirmAddFriend {
  required uint32 id = 1;
  required bool accept = 2;  // true为同意邀请，false为拒绝
}

message S2C_ConfirmAddFriend {
  required uint32 ret = 1;
  optional Friend friend = 2;
  optional bool accept = 3;  // true为同意邀请，false为拒绝
  required uint32 id = 4;
}

// 好友赠送
message C2S_FriendPresent {
  required uint32 id = 1;
}

message FriendPresent {
  required uint32 id = 1;
  required bool present = 2;
  required bool getpresent = 3;
}

message S2C_FriendPresent {
  required uint32 ret = 1;
  required uint32 id = 2;//保留
  repeated FriendPresent fp = 3;
}

// 领取好友赠送
message C2S_GetFriendPresent {
  required uint32 id = 1;  // 为0则一键领取
}

message S2C_GetFriendPresent {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  optional bool present = 3;
  optional bool getpresent = 4;
  optional uint32 get_present_times = 5;
}

// 玩家信息
message C2S_GetPlayerInfo {
  optional uint32 id = 1;
  optional string name = 2;
}

message S2C_GetPlayerInfo {
  required uint32 ret = 1;
  optional Friend friend = 2;
}

// 对方响应添加好友
message S2C_AddFriendRespond {
  required Friend friend = 1;
}

message C2S_ChooseFriend {
}

message S2C_ChooseFriend {
  repeated Friend friends = 1;
}


// 已领取好友礼物次数
message C2S_GetFriendsInfo {
}

message S2C_GetFriendsInfo {
  required uint32 getPresentCount = 1;	//精力次数
  required bool newFriend = 2;
	required uint32 favorGiftCount = 3; 	//送礼次数
}

message C2S_KillFriend {
  required uint32 targetId = 1;
  optional uint64 targetSid = 2;
  optional bool skip_battle = 3; //是否跳过战报
}

message S2C_KillFriend {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;	//4.6.50废弃
  optional uint64 report_id = 3;
  optional bool skip_battle = 4; //是否跳过战报
  optional bool win = 5; //胜负结果
}

message S2C_DelFriend {
  required uint32 id = 1;
}

message C2S_GetCrossFriendList {
  required uint32 type = 1; //1:好友列表 2:黑名单 3:申请列表
}

message S2C_GetCrossFriendList {
  required uint32 ret = 1;
  required uint32 type = 2;
  repeated Friend user = 3;
}

message C2S_ReqAddCrossFriend {
  required uint64 sid = 1;
  required string name = 2;
  optional string server_name = 3;
}

message S2C_ReqAddCrossFriend {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required string name = 3;
  optional Friend friend = 4;
}

message C2S_AcceptCrossFriend {
  required uint64 sid = 1;
  required uint32 uid = 2;
  required bool accept = 3;
}

message S2C_AcceptCrossFriend {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  required bool accept = 4;
  optional Friend friend = 5;
}

message S2C_RepAddCrossFriend {
  required Friend friend = 1;
}

message C2S_DeleteCrossFriend {
  required uint64 sid = 1;
  required uint32 uid = 2;
}

message S2C_DeleteCrossFriend {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  optional Friend friend = 4;
}

message C2S_RecommendCrossFriend {
}

message S2C_RecommendCrossFriend {
  required uint32 ret = 1;
  repeated Friend friend = 2;
}

message C2S_ReqBanCrossFriend  {
  required uint64 sid = 1;
  required uint32 uid = 2;
  required bool add = 3;
}

message S2C_ReqBanCrossFriend {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  required bool add = 4;
}

message C2S_ReqCrossPlayerInfo {
  required uint64 sid = 1;
  required uint32 uid = 2;
}

message S2C_ReqCrossPlayerInfo {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  optional Friend info = 4;
}

//战斗单位
message BattleUnit {
  required uint32 id = 1;
  required uint64 hp = 2;
  required uint32 position = 3;
  optional uint32 anger = 4;//怒气 上限为12
  optional uint32 dress_id = 5;//服装ID
  optional uint32 awaken = 6;//觉醒
  optional uint64 max_hp = 7;
  optional uint32 pet_halo_type = 8;
  optional uint32 pet_halo_value = 9;
  optional uint32 clid	= 10;
  optional uint32 cltm  = 11;
  optional bool   clop  = 12;
  optional uint32 sacredwp = 14; //神兵
  optional uint32 horse = 15; //战马
  optional uint32 golden_level = 16; // 金将阶数0~18
  optional uint32 runestone = 17;//兵符
  repeated BattleBuffVictim init_buff = 18;//初始buff
  optional uint32 protector_runestone = 19;//护佑兵符 //4.0.0
  optional uint32 deity = 20; //神意值 //4.0.0
  optional uint32 og_star_level = 21; //天金将星级 //4.0.0
  repeated BattleBuffVictim pet_buff = 22;//4.1.0
	optional uint64 harm_stat = 32;	//伤害统计 4.4.50
  optional uint32 dg_horse_protector = 33;//协战金马，4.5.5
	optional uint32 soul_level = 34; //魂引等级 4.6.0
  optional uint32 dg_protector_runestone = 35; //暗金兵符， 4.6.70
	optional uint32 group = 36;	//所属阵营	4.7.0
  optional uint32 skin = 37;//武将皮肤
  optional uint32 skin_st =38;//武将皮肤过期时间
	repeated KeyValue64 harm_stat_detail = 39; //伤害统计详细 5.4.50
	optional bool has_soul = 40; //是否有阵灵技能 5.7.50
	optional uint32 qilin = 41; //龙魂值 6.1.0
	optional uint64 permanent_shield = 42; //新护盾
	optional Wing wing = 43; //6.2.0-神翼换羽需要
	repeated BattleEffect init_effect = 44; //6.4.50-初始效果
}

//互换：怒气，血量等
message InterchangeVictim {
	required uint32 position = 1;
	required uint32 identity = 2;
	required uint32 value_tp = 3;	//value类型，0-怒气 1-血量 2-神意 3-生命盾 4-龙魂 5-冰甲,常驻盾 6:吸血回生命盾，7：吸血回生命,8：锁血
	required bool is_add = 4; //value增减
	required uint64 value = 5;
}

//战斗技能受害者
message BattleSkillVictim {
  required uint32 position = 1;
  optional uint64 change_hp = 2;
  required bool   state = 3;//false死
  required uint32 identity = 4; //表示敌我方阵营
  optional bool is_crit = 5; //是否暴击
  optional bool is_dodge = 6; //是否闪避
  repeated uint32 clear_buff = 7; //技能清除的buff
  repeated Award awards = 8;//死亡掉落
  optional uint32 anger = 9;//怒气
  optional bool is_double = 10; // 双倍伤害
  optional uint64 recover = 11; // 目标触发回血数量
  optional uint64 hitback = 12; // 触发反弹伤害
  optional bool is_pierce = 13; // 无视防御
  optional bool resurge = 14; // 准备复活
  optional uint64 life_drain = 15; // 吸血量
  optional bool inst_death = 16; // 秒杀
  optional uint64 water_shield = 17; // 水盾回复 3.1.0
  optional bool poshi = 18; // 破事 3.3.0
  optional bool gangyi = 19; // 刚毅 3.3.0
  optional bool gufa = 20; // 固法 3.3.0
  optional bool xuezhan = 21; // 血战 3.3.0
  optional uint64 fire_shield = 22; // 火盾反弹伤害 3.5.0
  repeated uint32 buff_remove = 23; // 受到攻击造成的buff移除 3.5.0
  optional bool is_pr_harm_add = 24; //破防时伤害增加
  optional bool is_pr_harm_dec = 25; //被破防时伤害减免
  optional uint64 element_change_hp = 26; //元素伤害
  optional bool killed = 27; //已经杀死
  optional bool is_add_hp = 28; //加血标记
  optional bool is_add_anger = 29; //加怒标记
  optional uint64 condition_hp = 30; //攻击方有概率回血
  optional uint32 own_anger_add = 31; //我方怒气增加  //4.3.0废弃，统一换用id=43字段
  optional uint32 enemy_anger_dec = 32; //敌方怒气减少
  optional uint64 fury_shield = 33; //极火之盾 4.0.0
  optional uint64 spirit_guard = 34; //灵魔护阵恢复生命 4.0.0
  optional uint64 life_shield = 35; //生命之盾抵挡伤害 4.1.0
  repeated BattleBuffVictim add_buff = 36; //技能增加buff 4.1.50(斗转星移专用)
  optional bool shift_dec_buff = 37; //斗转星移 4.1.50(斗转星移专用)
  optional uint64 life_shield_harm = 38; //生命之盾反伤 4.1.70
  optional uint32 deity = 40; //神意值 4.2.0
	optional bool is_add_deity = 41; //加神意标记 4.2.0
	repeated BuffCounteract counteract = 42; //抵消 4.3.0
	repeated InterchangeVictim interchange = 43; //互换怒气等 4.3.0
  optional uint64 shield_cure = 44; //生命之盾自身回复 4.4.50
	repeated BattleBuff dot_buffs = 45;	//dotabuf更新 4.5.0
  repeated BattleBuff state_buffs = 46;	//StateBuff更新 4.6.0
  optional uint64 life_shield_harm2 = 47; //生命之盾反伤 4.6.0(同38一样处理,后端区分用)
  optional bool is_parry = 48; //是否格挡
  optional uint64 morale = 49;     //5.0.0-当前士气
  optional uint64 diff_morale = 50; //5.0.0-变化的士气
  optional uint64 init_morale = 51; //5.0.0-总士气值
  optional bool   is_add_morale = 52; //5.0.0-是否增减
  optional bool is_parry_resist = 53; //5.0.50-是否贯穿格挡
  optional bool is_treasure_dec_harm = 54; //5.4.0-彩金宝物减伤
  optional uint64 super_cure = 55;  //5.4.0-彩金宝物回血，回盾学
  optional bool is_treasure_steal = 56; //5.4.0-彩金宝物是否触发偷取
	optional bool is_buff_time_change = 57; //5.5.0-buff回合变动 配合dot_buffs state_buffs 使用，初次添加因为buff 278
	optional bool is_shadow_split = 58; //5.5.50-死亡武将的影分身术
	optional uint64 permanent_shield = 59; //6.1.0-冰甲变化值
	optional bool is_add_pshield = 60; //6.1.0-冰甲值增加
	optional uint32 qilin = 61;//6.1.0-龙魂值变动
	optional bool is_add_qilin = 62;//6.1.0-龙魂值增加
}

//dot buff波及伤害
message DotBuffVictim {
	required uint32 identity = 1; //表示敌我方阵营(1,2)
	required uint32 position = 2;
	optional uint64 result = 3; //如果是dot_buff 扣加血 这个会有值
  optional uint64 life_shield = 4; //生命之盾抵挡buff伤害
	optional bool is_crit = 5; //是否暴击
	repeated uint32 buff_remove = 6;	//受到攻击造成的buff移除 4.3.50
	optional uint32 result_type = 7;//result类型：0-默认根据外层buff的id来判断加减血 1/2-加减血 3/4-加减怒气 5/6-加减神意	7/8-加减龙魂 9/10-加减冰甲  11/12 加减阵灵
  optional uint64 shield_cure = 8; //生命之盾自身回复 4.4.50
	optional uint32 result_cause = 9;	//result原因：比如扣血的原因，反弹，爆焰导致 目前只用于伤害(未设置不做特别提示) 1-爆焰 2-反弹 4.6.0
}

//战斗buff
message BattleBuff {
  required uint32 id = 1;
  required uint32 count = 2; //buff剩余次数
  optional uint64 result = 3; //如果是dot_buff 扣加血 这个会有值
  optional uint64 life_shield = 4; //生命之盾抵挡buff伤害 4.1.0
	optional bool is_crit = 5; //是否暴击 4.2.0
	repeated DotBuffVictim victims = 6; //临近单位受到伤害 4.3.0 //扩展为一个buff起多个效果：扣血，扣怒气，扣神意等 4.4.50
	optional uint64 shield_cure = 7; //生命之盾自身回复 4.4.50
	optional uint32 round = 8;	//更新回合 用来非回合更新导致的buff回合次数变更(和count等值, 主要给前端区分用的) 4.6.0
}

//buff抵消
message BuffCounteract {
	required uint32 counteract_id = 1; //抵消的buff id
	optional bool is_add_hp = 2; //是否加血 true-增加 false-减少
	optional uint64 change_hp = 3;	//改变血量
	optional bool is_add_anger = 4; //是否加血 true-增加 false-减少
	optional uint32 change_anger = 5;	//改变怒气
  optional bool is_add_shield = 6;   //5.0.50
  optional uint64 shield_cure = 7;  //改变护盾量 5.0.50
  optional bool is_buff_remove = 8; //5.0.50 是否抵消的buff被删除
}

//战斗buff受害者
message BattleBuffVictim {
  required uint32 position = 1;
  required uint32 buff_id = 2;//buff 配置表ID
  required uint32 identity = 3; //表示敌我方阵营
  required uint32 id = 4; //buff id
  optional uint32 remove_id = 5; //需要删除的buff id //前后端未使用过，后面使用remove_ids表示要删除的buff id
  optional bool is_resist = 6;//BUFF是否生效 这个是后加的 客户端先判断这个字段+identity+position 再决定是否做BUFF逻辑处理
  optional uint32 src_pos = 7;//我方发起人
  optional uint32 tar_pos = 8;//敌方被吸人
  optional uint64 steal_value = 9;//吸取属性值
  optional uint64 init_value = 10;//初始值 4.1.0
  optional uint32 round = 11; //buff剩余回合 4.3.0
	optional BuffCounteract counteract = 12; //抵消 4.3.0
	optional uint32 replace_id = 13;	//替换id,用来处理唯一性buff的更新 4.5.0
	repeated DotBuffVictim victims = 14; //扣血，扣怒气，扣神意等 4.6.0
	optional bool add_after_atk = 15; //给前端用，部分buff延迟到攻击后刷新 5.6.0
}

//其他人被移除buff
message BattleRemoveBuff {
  required uint32 position = 1;
  required uint32 identity = 2; //表示敌我方阵营
	repeated uint32 remove_ids = 3; //被移除的buff
}

//buff变动
message BuffInterchangeVictim {
  required uint32 identity = 1;
  required uint32 position = 2;
	required uint32 id = 3;
	optional uint32 floor = 4;
}

message BattleEffect {
	required uint32 id = 1;
	required uint32 effect_id = 2; //配置表ID
	optional uint32 times = 3;  //剩余回合数，也可能是层数
}

message BattleEffectInterchange {
	required uint32 identity = 1;
	required uint32 position = 2;
	required uint32 host_type = 3; //宿主类型 0，队伍 ，1 武将，2 怪，3 宠，4 名将，5 军师
	repeated BattleEffect add = 4; //增加效果
	repeated BattleEffect rem = 5; //移除效果
	repeated BattleEffect chg = 6; //变动效果
}

message SyncBattltHp {
	required uint32 position = 1;
	required uint64 hp = 2; //血
	required uint64 permanent_shield = 3; //冰甲
	required uint64 life_shield = 4; //生命盾
}

//每次BattleAttack后同步血量
message SyncBattltAttackHp {
	repeated SyncBattltHp own = 1;
	repeated SyncBattltHp enemy = 2;
}

//单次攻击
message BattleAttack {
  required uint32 identity = 1;
  required uint32 position = 2;
  repeated BattleBuff buffs = 3;	//DotBuff更新
  required bool state = 4;
  optional uint32 skill_id = 5;
  repeated BattleSkillVictim skill_victims = 6;
  repeated BattleBuffVictim buff_victims = 7;	//添加Buff
  repeated BattleSkillVictim anger_victims = 8;
  repeated Award awards = 9;
  optional uint32 anger = 10;
  repeated BattleBuff state_buffs = 11;	//StateBuff更新
  repeated BattleSkillVictim cbuff_victims = 12;
  repeated uint32 unite_index = 13;
  optional bool death_hitback = 14; // 反伤而死
  optional bool resurge = 15; // 准备复活
  optional bool raw_atk = 16; // false: 坐骑技能
  optional bool death_fire_shield = 17; //火盾反伤而死
  optional bool famous = 18; //名将上阵
  optional uint64 extra_harm = 19; //释放技能消耗怒气产生额外伤害
  optional bool death_fury_shield = 20; //极火之盾反伤而死
  optional uint32 deity = 21; //神意值
  repeated uint32 buff_remove = 22;//移除的buffid 4.1.0
  optional uint64 life_shield_extra_harm = 23; //生命之盾抵消extra_harm的伤害 4.1.0
  optional uint64 life_shield_hitback = 24; //生命之盾抵消hitback的伤害 4.1.0
  optional uint64 life_shield_fire_shield = 25; //生命之盾抵消fire_shield的伤害 4.1.0
  optional uint64 life_shield_fury_shield = 26; //生命之盾抵消fury_shield的伤害 4.1.0
  optional bool no_anger_skill = 27; //无怒气技能 4.1.50
  optional bool death_life_shield = 29; //生命之盾反伤而死 4.1.70
  optional uint64 life_shield_life_shield = 30; //生命之盾抵消life_shield的伤害 4.1.70
  repeated BattleSkillVictim deity_victims = 31; //神意值 4.2.0
  optional uint64 shield_cure = 32; //生命之盾自身回复 4.4.50
  optional uint64 harm_shield_resist = 33; //伤害盾抵御的伤害(比如青龙庇护) 4.5.0
  optional string attack_list = 34; //一次攻击的攻击序列  4.7.50
  repeated uint32 buff_show_list  = 35;// 需要漂子展示的buff id 4.9.0
  repeated BattleSkillVictim morale_victims = 36; //5.0.0-军师士气
  repeated BattleSkillVictim buff_morale_victims = 37; //5.0.0-军师士气 buff造成的总的士气值变动
  optional bool resist_ctrl = 38; //5.6.50 免疫控制
  optional uint32 soul = 39; //阵灵值 5.7.50
  repeated InterchangeVictim interchange = 40; //与BattleSkillVictim中的类似，更灵活的实现盾血怒神意等的变化 5.7.70
  optional ProtectPetSkill protect_pet_skill = 41; //宠物召唤技能
  optional uint32 qilin = 42; //龙魂值 6.1.0
  optional uint64 permanent_shield = 43; //常驻盾抵消的伤害 6.1.0
  repeated BattleRemoveBuff other_remove_buffs = 44; //其他一些被移除buff的 6.1.0
  repeated BattleSkillVictim qilin_victims = 45; //神意值 6.1.0
  optional bool eskill_no_atk =46; //装备技能被禁止 6.1.0 之前装备技能不能被禁止释放，所以前端需要一个标记提示
  repeated BuffInterchangeVictim buff_inferchange_victim = 47; //为了做buff层数变动添加的，以后可能会有其他的  6.2.0
  repeated BattleEffectInterchange effect_interchange = 48; //效果变更 6.4.50
  optional SyncBattltAttackHp sync_battle_hp = 49; //同步血量，调试前后端血量不一致的问题 6.4.60
}

//敌我双方标示
enum BATTLE_INDENTITY {
  OWN = 1;
  ENEMY = 2;
}

message BattleTeam {
  repeated BattleUnit units = 1;
  optional uint32 pet = 2;
  repeated BattleUnit famous = 3;
	optional uint64 pet_harm_stat = 4;	//宠物伤害统计 4.4.50
  repeated BattleUnit milits = 5; //军师
	repeated KeyValue64 pet_harm_stat_detail = 6; //宠物伤害统计详细 5.4.50
	optional uint32 unreal_pet = 7; //替主角放修行技能的虚拟宠物
	optional uint32 role_transfer_id = 8; //主角修行类型
	optional uint32 role_transfer_lv = 9; //主角修行等级
	repeated BattleEffect effects = 10; //初始队伍效果
}

message ProtectPetSkill {
	optional uint32 pos = 1;
	optional uint32 pet_id = 2;
	optional uint32 skill_id = 3;
}

message BattleStateBuffVictim {
  required uint32 position = 1;
  repeated BattleBuff bbs = 2;
  required uint32 identity = 3; //表示敌我方阵营
}

//回合类型
enum BATTLE_ROUND_TYPE {
  BRT_NORMAL = 1;
  BRT_PET = 2;
  BRT_MILI = 3;  //军师
}

message AngerFireAttack {
  required uint32 identity = 1;
  optional uint32 skill_id = 2;
  repeated BattleBuffVictim buff_victims = 3; //添加Buff
  optional uint32 fire = 4;
  repeated BattleSkillVictim cbuff_victims = 5;
  optional uint32 fire_recover = 6; //回复的怒气值
}

message BattleMiliSoul {
  required uint32 identity = 1;
  required uint32 position = 2;
	required uint32 soul = 3;
}

//一回合战斗
message BattleAttackRound {
  repeated BattleStateBuffVictim buff_victim = 1;//这个其实现在没有了 作废了
  repeated BattleAttack attacks = 2;
  required uint32 type = 3;
  repeated BattleBuffVictim round_buff = 4; //每回合开始前加的buff 4.2.0
  repeated AngerFireAttack  fire_attacks = 5;//怒焰技能效果  4.9.10
	repeated BattleMiliSoul milis = 6; //每回合初始军师阵灵值 5.7.50
	repeated BattleEffectInterchange effect_interchange = 7; //回合效果生效，只在宠物回合（既回合结束时） 6.4.50 
	optional uint32 tba_round = 8; //回合，查战报用
}

//一场战斗
message BattleAttackBout {
  required uint32 own_team = 1; //0 第一队
  required uint32 enemy_team = 2;
  repeated BattleAttackRound rounds = 3;
	optional uint32 first = 4; //先手
	optional BattleAttack transfer_attacks = 5; //修行技能
	optional uint32 transfer = 6; //修行更高的一方
	optional bool is_win = 7;
}

enum BATTLE_TYPE {
  U2U = 1; //玩家与玩家PK
  U2M = 2; //玩家与怪物PK
  M2M = 3; //怪物与怪物PK
  M2U = 4; //怪物与玩家PK
}

message BattleBriefUser {
  optional string name = 1;
  optional uint32 dress = 2;
  optional uint32 base_id = 3;
  optional uint64 fv = 4;
  optional uint64 hp = 5;
  optional uint32 uid = 6;
  optional uint64 sid = 7;
}

message BattleBriefReport {
  required uint32 tp = 1;
  required bool is_win = 2;
  optional BattleBriefUser own = 3;
  optional BattleBriefUser enemy = 4;
  repeated uint64 hp_list = 5;
  repeated uint64 e_hp_list = 6;
}

message BattleReport {
  required uint32 tp = 1;
  repeated BattleTeam own_teams = 2;
  repeated BattleTeam enemy_teams = 3;
  repeated BattleAttackBout bouts = 4;
  required bool is_win = 5;
  optional string own_name = 6;
  optional string enemy_name = 7;
  required BattleResult result = 8;
  optional uint32 own_fight_base = 9;
  optional uint32 enemy_fight_base = 10;
  optional uint64 own_fight_value = 11; // 战斗力
  optional uint64 enemy_fight_value = 12; // 战斗力
  optional uint64 unique_id = 13; //战报唯一id
  optional uint32 max_section = 14; //战报分段数量
  optional uint32 cur_section = 15; //当前分段编号
	optional BattleResultStat result_stat = 16;	//战斗数据统计 4.4.50
	optional uint32 tp2 = 17; //分组对抗战斗的附带类型，为以后扩展显示用 6.5.0
}

//以后结果相关的都放在这
message BattleResult {
  optional BattleTeam left_own_teams = 1;
  optional BattleTeam left_enemy_teams = 2;
}

message BattleResultStat {
	optional string own_name = 1;
  optional string enemy_name = 2;
	optional uint64 own_harm_stat = 3;
	optional uint64 enemy_harm_stat = 4;
	optional BattleTeam own_teams_stat = 5;
	optional BattleTeam enemy_teams_stat = 6;
  required bool is_win = 7;
}

message C2S_TestBattle {
}

message S2C_TestBattle {
  required uint32 ret = 1;
  optional BattleReport info = 2;
}

message S2C_SendBattleReport {
  required BattleReport report = 1;
}

message CalmanBlessingInfo {
	required uint32 slot = 1; //位置
	repeated KeyValue64 property = 2;  //属性
	repeated KeyValueT eskill = 3;   //技能
	repeated KeyValueT ps_command_buff = 4; //
}

message C2S_CalmanBlessingSet {
	repeated CalmanBlessingInfo info = 1;
}

message S2C_CalmanBlessingSet {
	required uint32 ret = 1;
	repeated CalmanBlessingInfo info = 2;
}

message C2S_CalmanBlessingReset {
}

message S2C_CalmanBlessingReset {
	required uint32 ret = 1;
	repeated CalmanBlessingInfo info = 2;
}

//测试协议
message C2S_TestDataType {
}

message S2C_TestDataType {
    required uint32 ret             = 1;
    optional bool bool_value        = 2; //bool 布尔类型
    optional double double_value    = 3; //double 64位浮点数
    optional float float_value      = 4; //float 32为浮点数
    optional int32 int32_value      = 5; //int32 32位整数
    optional uint32 uint32_value    = 6; //uin32 32位
    optional int64 int64_value      = 7; //int64 64位整数
    optional uint64 uint64_value    = 8; //uint64 64位无符号整数
    optional fixed32 fixed32_value  = 9; //fixed32 32位
    optional fixed64 fixed64_value  = 10; //fixed64 64位
    optional string string_value    = 11; //string 字符串
}

message Chapter{
  required uint32 id = 1;
  required uint32 total_star = 2;
  required uint32 breward = 3;//3个箱子奖励领取情况
  required uint32 sreward = 4;
  required uint32 greward = 5;
  repeated Stage stages = 6;
  optional bool has_entered = 7;
}

message Stage {
  required uint32 id = 1;
  required uint32 star = 2;//星数
  required uint32 execute_count = 3;//剩余可完成次数
  required bool is_finished = 4;//是否完成
  optional uint32 reset_cost = 5;
  optional uint32 reset_count = 6;
}

message C2S_GetChapterList {

}

message S2C_GetChapterList {
  required uint32 ret = 1;
  optional uint32 total_star = 2;
  optional uint32 fast_execute_time = 3;
  optional uint32 fast_execute_cd = 4;
  //optional uint32 reset_cost = 5;
  repeated Chapter chapters = 6;
}

message ChapterRank {
  required uint32 rank = 1;
  required string name = 2;
  required uint32 star = 3;
  required uint32 user_id = 4;
	optional uint32 base_id = 5;
	optional uint32 level = 6;
	optional uint64 fv = 7;	//战力
	optional uint32 dress_id = 8;
	optional uint32 clid = 9;
	optional uint32 cltm = 10;
	optional bool   clop = 11;
	optional uint32 extend_level = 12;
	optional uint32 corp_id = 13;
	optional string corp_name = 14;
	optional uint64 sid = 15;
}

message C2S_GetChapterRank {

}

message S2C_GetChapterRank {
  required uint32 ret = 1;
  optional uint32 self_rank = 2;
  repeated ChapterRank ranks = 3;
}

message S2C_AddStage {
  required uint32 chpt_id = 1;
  required Stage stage = 2;
}

message C2S_ExecuteStage {
  required uint32 id  = 1;
}
//暂定
message S2C_ExecuteStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Stage stage = 3;
  optional uint32 type = 4;
  //optional BattleReport info = 5;
  repeated Award awards = 7;
  optional uint32 stage_money = 8;
  optional uint32 stage_exp = 9;
  optional uint32 stage_star = 10;
  optional uint32 rebel = 11;
  optional uint32 rebel_level = 12;
}

message S2C_ExecuteMultiStage {
  required uint32 ret = 1;
  required uint32 id = 2;//stage id
  optional BattleReport info = 3;	//4.6.50废弃
  required uint32 next_wave_id = 4;
  optional uint64 report_id = 5; //4.6.50
  optional uint32 stage_star = 6;
}

message C2S_ExecuteMultiStage {
  required uint32 id = 1;
  required uint32 wave_id = 2;
}

message C2S_FastExecuteStage {
  required uint32 id  = 1;
}
//暂定
message S2C_FastExecuteStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 fast_execute_time = 3;
  optional uint32 fast_execute_cd = 4;
  optional Stage stage = 5;
  repeated Award awards = 6;
  optional uint32 stage_money = 7;
  optional uint32 stage_exp = 8;
  optional uint32 stage_star = 9;
  optional uint32 rebel = 10;
  optional uint32 rebel_level = 11;
}
message C2S_ChapterAchvRwdInfo {

}

message S2C_ChapterAchvRwdInfo {
  required uint32 ret = 1;
  repeated uint32 finished_rwd = 2;
}

message C2S_FinishChapterAchvRwd {
  required uint32 rwd_id = 1;
}

message S2C_FinishChapterAchvRwd {
  required uint32 ret = 1;
  required uint32 rwd_id  = 2;
}

message C2S_ResetDungeonExecution {
  required uint32 stage_id = 1;
}

message S2C_ResetDungeonExecution {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  optional Stage stage = 3;//这个副本
  optional uint32 next_reset_cost = 4; //下次消耗元宝
}

message C2S_FinishChapterBoxRwd {
  required uint32 ch_id = 1;
  required uint32 box_type = 2;//1铜箱子 2银箱子 3金箱子
}

message S2C_FinishChapterBoxRwd {
  required uint32 ret = 1;
  required uint32 ch_id  = 2;
  required uint32 box_type = 3;
  //repeated Award awards = 4;
}

message ChapterBosPos {
	required uint32 chapter_id = 1;
	required uint32 box_id = 2;//星级箱子 1铜箱子 2银箱子 3金箱子; 场景箱子填id
}

message C2S_OneKeysChapterBoxReward {
	repeated ChapterBosPos star_box = 1;		//星级箱子
	repeated ChapterBosPos stage_box = 2; 	//关卡箱子
}

message S2C_OneKeysChapterBoxReward {
	required uint32 ret = 1;
	repeated Award awards = 2;
	repeated ChapterBosPos star_box = 3;		//星级箱子
	repeated ChapterBosPos stage_box = 4; 	//关卡箱子
}

message C2S_OneKeysHardBoxReward {
	repeated ChapterBosPos star_box = 1;		//星级箱子
	repeated ChapterBosPos stage_box = 2; 	//关卡箱子
}

message S2C_OneKeysHardBoxReward {
	required uint32 ret = 1;
	repeated Award awards = 2;
	repeated ChapterBosPos star_box = 3;		//星级箱子
	repeated ChapterBosPos stage_box = 4; 	//关卡箱子
}

message C2S_ResetDungeonFastTimeCd {

}

message S2C_ResetDungeonFastTimeCd {
  required uint32 ret = 1;
  optional uint32 fast_execute_time = 2;
  optional uint32 fast_execute_cd = 3;
}

message C2S_GetArenaInfo {

}

message S2C_GetArenaInfo {
  required uint32 ret = 1;
  optional uint32 user_id = 2;
  optional uint32 rank = 3;
  optional uint32 max_rank = 4;
  optional uint32 prestige = 5;
  repeated CrossUser to_challenge_list = 6;
}

message ArenaToChallengeUser {
  required uint32 user_id = 1;
  required uint32 rank = 2;
  required string name = 3;
  required uint32 level = 4;
  required uint32 base_id = 5;
  required uint64 fight_value = 6;
  optional uint32 dress_base = 7;
  optional uint32 pet_base_id = 8;
  optional uint32 clid	= 9;
  optional uint32 cltm = 10;
  optional bool   clop = 11;
  optional uint32 wid = 12;
  optional uint32 home_level = 13;
}

message C2S_GetArenaTopInfo {

}

message S2C_GetArenaTopInfo {
  required uint32 ret = 1;
  repeated CrossUser user_list = 2;
}

message C2S_GetArenaUserInfo {
  required uint32 user_id = 1;
}

message S2C_GetArenaUserInfo {
  required uint32 ret = 1;
  optional ArenaBattleUser user = 2;
}

message C2S_ChallengeArena {
  required uint32 rank = 1;
}

message S2C_ChallengeArena {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;	//4.6.50废弃
  repeated Award rewards = 3;
  optional ArenaBreakRecord break_record = 4;
  optional AwardList turnover_rewards = 5;
  optional CrossUser to_challenge_user = 6;
  optional uint32 golden_task_item = 7;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 8;     // 试炼武将id
  optional uint64 report_id = 9;
}

message C2S_FastChallengeArena {
  required uint32 rank = 1;
  required uint32 num = 2; //挑战次数
  required uint32 consume = 3; //1为自动消耗精力丹
}

message S2C_FastChallengeArena {
  required uint32 ret = 1;
  optional uint32 rank = 2;
  optional uint32 num = 3; //挑战次数
  optional uint32 consume = 4; //消耗精力丹数量
  optional uint32 complete_num = 5; //完成挑战次数
  repeated Award rewards = 6; //累计奖励
  optional uint32 golden_task_item = 7;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 8;     // 试炼武将id
  optional uint32 money = 9;
  optional uint32 exp = 10;
  optional uint32 prestige = 11;
}

message AwardList {
  repeated Award rewards = 1;
}

message ArenaBreakRecord {
  required uint32 old_rank = 1;
  required uint32 new_rank = 2;
  repeated Award break_rewards = 3;
}

message Award {
  required uint32 type = 1;
  required uint32 value = 2;
  required uint32 size = 3;
}

message C2S_UpgradeEquipment {
  required uint32 equipment_id = 1;
  required uint32 times = 2; //自动强化次数
}

message S2C_UpgradeEquipment {
  required uint32 ret = 1;
  optional uint32 times = 2; //强化次数
  optional uint32 crit_times = 3; //暴击次数
  optional uint32 break_reason = 4; //强化中断原因
  optional uint32 level = 5; //强化后等级
}

message C2S_UpgradeEquipmentOneKey {
  repeated uint32 equipment_id = 1;
  optional uint32 toLv = 2; //传0默认都都满级
}

message UpgradeEquipmentInfo {
  required uint32 id = 1;
  optional uint32 times = 2; //强化次数
  optional uint32 crit_times = 3; //暴击次数
  optional uint32 level = 4; //强化后等级
}

message S2C_UpgradeEquipmentOneKey {
  required uint32 ret = 1;
  repeated UpgradeEquipmentInfo equip = 2;
}


message C2S_UpgradeDress {
  required uint32 id = 1;
}

message S2C_UpgradeDress {
  required uint32 ret = 1;
}

message C2S_UpgradeDressOneKey {
  required uint32 id = 1;
  required uint32 to_level = 2;
}

message S2C_UpgradeDressOneKey {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 to_level = 3;
}

//时装附灵
message C2S_FairyDress {
  required uint32 id = 1;
}

message S2C_FairyDress {
  required uint32 ret = 1;
  required uint32 id= 2;
}

message C2S_RefiningEquipment {
  required uint32 equipment_id = 1;
  required uint32 item_id = 2;
  optional uint32 num = 3;
}

message S2C_RefiningEquipment {
  required uint32 ret = 1;
}

message S2C_FightKnight {
  repeated uint32 first_team = 1; //主界面UI显示 (包含knight id)
  repeated uint32 second_team = 2;
  repeated uint32 first_formation = 3; //主界面team中index
  repeated uint32 second_formation = 4;
  repeated uint32 third_team = 5;
}

//布阵(将新的阵营整体发送)
message C2S_ChangeFormation {
  required uint32 formation_id = 1; // 1，表示第一套阵; 2，表示第二套阵
  repeated uint32 indexs = 2;
}

message S2C_ChangeFormation {
  required uint32 ret = 1;
}

message C2S_ChangeTeamKnight {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 knight_id = 3;
}

message S2C_ChangeTeamKnight {
  required uint32 ret = 1;
  required uint32 team = 2;
  required uint32 pos = 3;
  required uint32 knight_id = 4;
  optional uint32 old_knight_id = 5;
}

message C2S_AddTeamKnight {
  required uint32 knight_id = 1;
}

message S2C_AddTeamKnight {
  required uint32 ret = 1;
  required uint32 knight_id = 2;
  optional uint32 pos = 3;
}

// 查询塔信息
message C2S_TowerInfo {
}

message S2C_TowerInfo {
  required uint32 ret = 1;
  required uint32 floor = 2;     // 当前所在层
  required uint32 reset_count = 3;     // 今日已重置次数
  required uint32 score = 4;     // 积分
  required uint32 next_challenge = 5;     // 下一个需要挑战的层数
  required uint32 free_refresh_count = 6;     // 已刷新buff多少次
  optional uint32 cleanup_time = 7;     // 扫荡结束时间
  optional bool doing_cleanup = 8;
  optional uint32 cleanup_floor = 9;  // 扫荡开始层
  required uint32 next_floor_ct = 10;  // 当前层的下一层已挑战次数
}

// 挑战下一层
message C2S_TowerChallenge {
  optional uint32 buff_id = 1;
}

message S2C_TowerChallenge {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  repeated Award award = 3;
}

// 开始扫荡
message C2S_TowerStartCleanup {
}

message S2C_TowerStartCleanup {
  required uint32 ret = 1;
  optional uint32 cleanup_time = 2;     // 扫荡结束时间
}

// 停止扫荡
message C2S_TowerStopCleanup {
}

message S2C_TowerStopCleanup {
  required uint32 ret = 1;
  required uint32 floor = 2;
}


// 重置
message C2S_TowerReset {
}

message S2C_TowerReset {
  required uint32 ret = 1;
}

// 查询buff
message C2S_TowerGetBuff {
  optional uint32 floor = 1;
}

message S2C_TowerGetBuff {
  repeated uint32 buff_id = 1;
}

// 刷新当前关buff
message C2S_TowerRfBuff {
}

message S2C_TowerRfBuff {
  required uint32 ret = 1;
  repeated uint32 buff_id = 2;
}

// 请求扫荡奖励
message C2S_TowerRequestReward {
}

message S2C_TowerRequestReward {
  required uint32 ret = 1;
}

// 扫塔排行榜
message TowerRanking {
  required string name = 1;
  required uint32 floor = 2;
}

message C2S_TowerRankingList {
}

message S2C_TowerRankingList {
  repeated TowerRanking ranking = 1;
}

// 攻略
message C2S_TowerChallengeGuide {
  required uint32 floor = 1;
}

message S2C_TowerChallengeGuide {
  required uint32 ret = 1;
  repeated BattleReport battle_report = 2;
}

message SimpleMail {
  required uint32 id = 1;
  optional uint32 mail_info_id = 2;
  optional bool is_stranger = 3; //是否陌生人邮件
}

message Mail {
  required uint32 id = 1;
  optional uint32 source_id = 2;
  repeated string key = 3;
  repeated string value = 4;
  optional uint32 mail_info_id = 5;
  optional uint32 time = 6;
  optional uint64 source_sid = 7;
  optional string title = 8; //邮件标题
}

message S2C_GetSimpleMail {
  repeated SimpleMail mail = 1;
}

message S2C_AddSimpleMail {
  repeated SimpleMail mail = 1;
}

message S2C_GetNewMailCount {
  required uint32 count = 1;
  optional uint32 recharge = 2;//是否有充值邮件
}

message C2S_GetMail {
  repeated uint32 id = 1;
}

message S2C_GetMail {
  required uint32 ret = 1;
  repeated Mail mail = 2;
}

message GiftMail {
  required uint32 id = 1;
  required Mail mail = 2;
  repeated Award awards = 3;
}

message S2C_GetGiftMailCount {
  required uint32 count = 1;
}

message C2S_GetGiftMail {
}

message S2C_GetGiftMail {
  required uint32 ret = 1;
  repeated GiftMail mail = 2;
}

message C2S_ProcessGiftMail {
  required uint32 id = 1;
}

message S2C_ProcessGiftMail {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_TestMail{
}

message C2S_Mail{
  required string content = 1;
  required uint32 uid = 2;
  optional uint64 sid = 3;
}

message S2C_Mail{
  required uint32 ret = 1;
}

message C2S_SetIgnoreStrangerMail {
  required bool ignore_stranger = 1;
}

message S2C_SetIgnoreStrangerMail {
  required uint32 ret = 1;
  optional bool ignore_stranger = 2;
  optional uint32 end_tm = 3;
}

message C2S_GetIgnoreStrangerMail {
}

message S2C_GetIgnoreStrangerMail {
  required uint32 ret = 1;
  optional bool ignore_stranger = 2;
  optional uint32 end_tm = 3;
}

// 查询招募信息
message C2S_RecruitInfo {
}

message S2C_RecruitInfo {
  required uint32 lp_free_count = 1;// 良品已使用免费次数-每日
  required uint32 lp_free_time = 2;// 良品免费时间
  required uint32 jp_free_time = 3;// 极品免费时间
  required uint32 jp_recruited_times = 4;// 极品已招募次数
  required uint32 zy_cycle = 5;// 0~7 魏蜀吴群(各2天)
  required uint32 zy_recruited_times = 6;// 今日已抽次数
  optional uint32 zy_start_time = 7; //阵营招募活动开始时间
  optional uint32 zy_end_time = 8;   //阵营招募活动结束时间
  optional uint32 zy_gold_buy_cnt = 9; //阵营币购买次数
}

// 良品招一次
message C2S_RecruitLp {
  required uint32 consume_type = 1;     // 0 免费 1 招募令 2 币
  optional bool game_help = 4;
}

message S2C_RecruitLp {
  required uint32 ret = 1;
  repeated Award  awards = 2; //招将奖励 
  required uint32 consume_type = 3;     // 0 免费 1 招募令 2 币
  optional bool game_help = 4;
}

// 良品招十次
message C2S_RecruitLpTen {
  required uint32 consume_type = 1;     // 1 招募令
}

message S2C_RecruitLpTen {
  required uint32 ret = 1;
  repeated Award  awards = 2; //招将奖励 
  required uint32 consume_type = 3;     // 1 招募令 
}

// 极品招一次
message C2S_RecruitJp {
  required uint32 consume_type = 1;     // 0 免费 1 招募令
}

message S2C_RecruitJp {
  required uint32 ret = 1;
  repeated Award  awards = 2; //招将奖励 
  required uint32 consume_type = 3;     // 0 免费 1 招募令 
}

// 极品招十次
message C2S_RecruitJpTen {
  required uint32 consume_type = 1;     // 1 招募令 2 币
}

message S2C_RecruitJpTen {
  required uint32 ret = 1;
  repeated Award  awards = 2; //招将奖励 
  required uint32 consume_type = 3;     // 1 招募令 
}

// 极品招二十次
message C2S_RecruitJpTw {
  required uint32 consume_type = 1;     // 1 招募令 2 币
}

message S2C_RecruitJpTw {
  required uint32 ret = 1;
  repeated uint32 knight_base_id = 2; 
  required uint32 consume_type = 3;     // 1 招募令 2 币
}

// 阵营抽将
message C2S_RecruitZy {
  optional uint32 zy = 1;//阵营
  optional uint32 cnt = 2; //抽取次数1 或者10 
}

message S2C_RecruitZy {
  required uint32 ret = 1;
  optional uint32 zy = 2;
  repeated Award  awards = 3; //招将奖励
  optional uint32 cnt = 4;
}

enum SHOPPING_TYPE {
  VIP = 1; //vip 商店
  SCORE = 2; //积分商店
  MYSTICAL = 3; //神秘商店
  AWAKEN = 4; //觉醒商店
  OUTLET = 5; //折扣商店
  GROUPBUY = 6; //限时折扣
  BATTLEFIELD = 7; //百战沙场
  KSOUL = 8; //灵玉商店
  RCARD = 9; //翻牌商店
  CRYSTAL = 10; //水晶商店
  CRYSTAL_WEEK = 11; //水晶周商店
  HOMEPRO = 12; //官邸商店
}

message C2S_Shopping {
  required uint32 mode = 1;
  required uint32 id = 2;
  required uint32 size = 3;
  optional uint32 index = 4;  // 第几个物品
}

message S2C_Shopping {
  required uint32 ret = 1;
  optional uint32 mode = 2;
  optional uint32 id = 3;
  optional uint32 size = 4;
  optional uint32 index = 5;
}

message C2S_KnightUseItem {
  required uint32 id = 1;
  optional uint32 index = 2;  // 1.可选道具用于选择位置 2.非可选道具没用
  optional uint32 num = 3;    // 1.使用道具数量
  optional uint32 knight = 4; // 道具使用的对象武将id
}
message S2C_KnightUseItem {
  required uint32 ret = 1;
  optional uint32 id = 2;
  repeated Award awards = 3;
  optional uint32 knight = 4; // 道具使用的对象武将id
}

message C2S_UseItem {
  required uint32 id = 1;
  optional uint32 index = 2; // 1.可选道具用于选择位置 2.非可选道具没用
  optional uint32 num = 3; // 1.使用道具数量
}

message S2C_UseItem {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 num = 3;
  repeated Award awards = 4;
}

message C2S_EnterShop {
  required uint32 mode = 1;
}

message S2C_EnterShop {
  required uint32 mode = 1;
  repeated uint32 id = 2;
  repeated uint32 num = 3;
}

message C2S_MysticalShopInfo {
}

message S2C_MysticalShopInfo {
  required uint32 refresh_count = 1; // 已刷新次数
  required uint32 free_refresh_count = 2; // 免费刷新次数
}

message C2S_MysticalShopRefresh {
  required uint32 type = 1; // 0 刷新令 1 金币
}

message S2C_MysticalShopRefresh {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  optional uint32 refresh_count = 3;
  optional uint32 free_refresh_count = 4;
}


message C2S_AwakenShopInfo {
}

message S2C_AwakenShopInfo {
  required uint32 refresh_count = 1; // 已刷新次数
  required uint32 free_refresh_count = 2; // 免费刷新次数
}

message C2S_AwakenShopRefresh {
  required uint32 type = 1; // 0 刷新令 1 金币
}

message S2C_AwakenShopRefresh {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  optional uint32 refresh_count = 3;
  optional uint32 free_refresh_count = 4;
}

message OpKnight {
  repeated Knight insert_knights = 1; //添加
  repeated Knight update_knights = 2; //更新
  repeated uint32 delete_knights = 3; //删除
}

message OpEquipment {
  repeated Equipment insert_equipments = 1; //添加
  repeated Equipment update_equipments = 2; //更新
  repeated uint32 delete_equipments = 3; //删除
}

message OpDress {
  repeated Dress insert_dresses = 1; //添加
  repeated Dress update_dresses = 2; //更新
  repeated uint32 delete_dresses = 3; //删除
}
message OpWing{
  repeated Wing insert_wings = 1; //添加
  repeated Wing update_wings = 2; //更新
  repeated uint32 delete_wings = 3; //删除
}

message OpPet {
  repeated Pet insert_pets = 1; //添加
  repeated Pet update_pets = 2; //更新
  repeated uint32 delete_pets = 3; //删除
}

message OpTreasure {
  repeated Treasure insert_treasures = 1; //添加
  repeated Treasure update_treasures = 2; //更新
  repeated uint32 delete_treasures = 3; //删除
}

message OpItem {
  repeated Item insert_items = 1; //添加
  repeated Item update_items = 2; //更新
  repeated uint32 delete_items = 3; //删除
}

message OpTimeItem {
	repeated TimeItem insert_items = 1; //添加
	repeated TimeItem update_items = 2; //更新
	repeated uint64 delete_items = 3; //删除Item insert_items = 1; //添加
}

message OpAwakenItem {
  repeated AwakenItem insert_items = 1; //添加
  repeated AwakenItem update_items = 2; //更新
  repeated uint32 delete_items = 3; //删除
}

message OpFragment {
  repeated Fragment insert_fragments = 1; //添加
  repeated Fragment update_fragments = 2; //更新
  repeated uint32 delete_fragments = 3; //删除
}

message OpTreasureFragment {
  repeated TreasureFragment insert_treasure_fragments = 1; //添加
  repeated TreasureFragment update_treasure_fragments = 2; //更新
  repeated uint32 delete_treasure_fragments = 3; //删除
}

message OpGem {
  repeated Gem insert_gems = 1; //添加
  repeated Gem update_gems = 2; //更新
  repeated uint32 delete_gems = 3; //删除
}

message OpSacredwp {
  repeated Sacredwp insert_sacredwps = 1; //添加
  repeated Sacredwp update_sacredwps = 2; //更新
  repeated uint32 delete_sacredwps = 3; //删除
}

message OpHorse {
  repeated Horse insert_horses = 1;
  repeated Horse update_horses = 2;
}

message OpRunestone {
  repeated Runestone insert_runestones = 1;
  repeated Runestone update_runestones = 2;
}

message OpWarSoul {
  repeated WarSoul insert_war_souls = 1; //添加
  repeated WarSoul update_war_souls = 2; //更新
  repeated uint32 delete_war_souls = 3; //删除
}
message OpFamous {
  repeated Famous insert_famous = 1; //添加
  repeated Famous update_famous = 2; //更新
}

message OpResource {
  repeated Resource insert_resources = 1; //添加
  repeated Resource update_resources = 2; //更新
  repeated uint32 delete_resources = 3; //删除
}

message OpRune {
  repeated Rune insert_runes = 1; //添加
  repeated Rune update_runes = 2; //更新
  repeated uint32 delete_runes = 3; //删除
}

message OpRuneBook {
  repeated RuneBook insert_rune_books = 1; //添加
  repeated RuneBook update_rune_books = 2; //更新
  //repeated uint32 delete_rune_book = 3; //删除
}

message MilitaristProperty {
  required uint32 id = 1;               //军师唯一id
  repeated uint64 base_property = 2;    //依次为: 攻击 生命 物防 法防
  optional uint64 fight_value = 3;      //uint64战力
}

//军师数据
message Militarist {
  required uint32 id = 1;            //服务器分配id
  required uint32 star_id = 2;       //星数
  optional uint32 lv = 3;			 //升级
  optional uint32 mlv = 4;			 //阵法升级
}

//军师图鉴数据

message MilitBookMaxScore {
  required uint32 id = 1;    //评分最大的军师id（服务器唯一id）
  required uint32 score = 2; //积分
}

message MilitaristBook {
  required uint32 id = 1;            //图鉴激活的id
  optional uint32 advance_id = 2;    //图鉴升阶id
  optional uint32 star = 3;          //图鉴等级
  repeated MilitBookMaxScore scores = 4; //最大评分军师列表
}

message OpMilitarist {
  repeated Militarist insert_militarist = 1; //添加
  repeated Militarist update_militarist = 2; //更新
  repeated uint32 delete_militarist = 3; //删除
}

message OpMilitaristBook {
  repeated MilitaristBook insert_milit_book= 1; //添加
  repeated MilitaristBook update_milit_book = 2; //更新
  repeated uint32 delete_milit_book = 3; //删除
}

message OpSimpleItem {
	repeated Award items = 1;
}

message S2C_OpObject {
  required uint32 user_id = 1;
  optional OpKnight knight = 2;
  optional OpEquipment equipment = 3;
  optional OpItem item = 4;
  optional OpFragment fragment = 5;
  optional OpTreasureFragment treasure_fragment = 6;
  optional OpTreasure treasure = 7;
  optional OpDress dress = 8;
  optional OpAwakenItem awaken_item = 9;
  optional OpPet pet = 10;
  optional OpKsoul ksoul = 11;
  optional OpWing wing = 12;
  optional OpGem gem = 13;
  optional OpSacredwp sacredwp = 14;
  optional OpHorse horse = 15;
  optional OpRunestone runestone = 16;
  optional OpWarSoul war_soul = 17;
  optional OpFamous famous = 18;
  optional OpResource resource = 19; //积分资源
  optional OpRune rune = 20; //符文
  optional OpRuneBook rune_book = 21; //符文书
  optional OpMilitarist militarist = 22; //军师
  optional OpMilitaristBook milit_book = 23; //军师图鉴
	optional OpSimpleItem simple_items = 24; //通用简单道具
	optional OpTimeItem time_item = 25; //限时道具
}

message Object {
  required uint32 mode = 1;
  required uint32 value = 2;
  required uint32 size = 3;
}

message C2S_Sell {
  repeated Object info = 1;
}

message S2C_Sell {
  required uint32 ret = 1;
}

message SkillTree {
  required uint32 id = 1;//skill_info_id 里的id
  //required uint32 slot = 2;//位置 1到MAX 0为不在技能槽上
  required uint32 level = 3;
}

message C2S_GetSkillTree {
}

message S2C_GetSkillTree {
  repeated SkillTree skill = 1;//所有已经学过的养成类技能
  optional SkillTree slot_skill = 2;//在槽位上的技能
}

message C2S_LearnSkill {
  required uint32 id = 1;//skill_tree中的id
}

message S2C_LearnSkill {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional HomeSkill skill = 3;
}

message C2S_ResetSkill {
  required uint32 id = 1;
}

message S2C_ResetSkill {
  required uint32 ret = 1;
  optional HomeSkill skill = 2;
  optional uint32 skill_point = 3;//返还的技能点
}

message C2S_PlaceSkill {
  optional uint32 id = 1;
}

message S2C_PlaceSkill {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message C2S_FragmentCompound {
  required uint32 id = 1;
  optional uint32 num = 2;
}

message S2C_FragmentCompound {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 num = 3;
}

message StoryDungeon {
  required uint32 id = 1;
  required uint32 execute_count = 2;//剩余可完成次数
  required uint32 barrier_id = 3;//记录当前进度BARRIER id
  required bool is_finished = 4;//是否完成
  optional bool is_entered = 5;//标记是否已经完过
  repeated uint32 played_barrier = 6;//今天过的剧情barrier id
  optional bool has_award = 7;//是否领奖过
}

message C2S_GetStoryList {
}

message S2C_GetStoryList {
  required uint32 ret = 1;
  //optional uint32 fast_execute_time = 2;
  //optional uint32 fast_execute_cd = 3;
  repeated StoryDungeon dungeons = 4;
  optional uint32 execute_count = 5;//剩余可完成次数
}

message C2S_ExecuteBarrier {
  required uint32 dungeon_id = 1;
  required uint32 barrier_id = 2;
  optional uint32 wave_id = 3;
}

message S2C_ExecuteBarrier {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  required uint32 barrier_id = 3;
  optional StoryDungeon dungeon = 4;
  repeated Award drop_awards = 5;
  repeated Award monster_awards = 6;
  optional uint32 barrier_money = 7;
  optional uint32 barrier_exp = 8;
  optional uint32 barrier_star = 9;
  optional BattleReport info = 10; //4.6.50废弃
  optional uint32 barrier_fb_gold = 11;//首次通关奖励的元宝
  optional uint32 execute_count = 12;//剩余可完成次数
  optional uint32 next_wave_id = 13;//下拨怪WAVE ID 0则无
	optional uint64 report_id = 14; //4.6.50
	optional bool is_win = 15; //4.6.50
}

message C2S_FastExecuteBarrier {
  required uint32 dungeon_id = 1;
  required uint32 barrier_id = 2;
}
//暂定
message S2C_FastExecuteBarrier {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  required uint32 barrier_id = 3;
  optional uint32 fast_execute_time = 4;
  optional uint32 fast_execute_cd = 5;
  optional StoryDungeon dungeon = 6;
  repeated Award drop_awards = 7;
  repeated Award monster_awards = 8;
  optional uint32 barrier_money = 9;
  optional uint32 barrier_exp = 10;
  optional uint32 barrier_star = 11;
  optional uint32 execute_count = 12;//剩余可完成次数
}

message C2S_SanguozhiAwardInfo{

}

message S2C_SanguozhiAwardInfo{
  required uint32 ret = 1;
  repeated uint32 finished_id = 2;
}

message C2S_FinishSanguozhiAward {
  required uint32 sgz_id = 1;
}

message S2C_FinishSanguozhiAward{
  required uint32 ret = 1;
  required uint32 sgz_id = 2;
  repeated Award awards = 3;
}

message C2S_ResetStoryFastTimeCd {

}

message S2C_ResetStoryFastTimeCd {
  required uint32 ret = 1;
  optional uint32 fast_execute_time = 2;
  optional uint32 fast_execute_cd = 3;
}

message S2C_AddStoryDungeon {
  optional StoryDungeon dungeon = 1;
}

message C2S_SetStoryTag {
  required uint32 dungeon_id = 1;
}

message S2C_SetStoryTag {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  optional StoryDungeon dungeon = 3;
}

message C2S_GetBarrierAward {
  required uint32 id = 1;
}

message S2C_GetBarrierAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional StoryDungeon dungeon = 3;
  repeated Award awards = 4;
}

message C2S_UpgradeKnight {
  required uint32 upgrade_id = 1;
  repeated uint32 knight_list = 2;
}

message S2C_UpgradeKnight {
  required uint32 ret = 1;
}

message C2S_AdvancedKnight {
  required uint32 advanced_id = 1;
  repeated uint32 knight_list = 2;
}

message S2C_AdvancedKnight {
  required uint32 ret = 1;
  required uint32 new_knight = 2;
}

message C2S_TrainingKnight {
  required uint32 knight_id = 1;
  required uint32 training_type = 2;
  required uint32 training_times = 3;
}

message S2C_TrainingKnight {
  required uint32 ret = 1;
}

message C2S_SaveTrainingKnight {
  required uint32 knight_id = 1;
}

message S2C_SaveTrainingKnight {
  required uint32 ret = 1;
}

message C2S_GiveupTrainingKnight {
  required uint32 knight_id = 1;
}

message S2C_GiveupTrainingKnight {
  required uint32 ret = 1;
}

message RecycleItem {
  required uint32 type = 1;
  required uint32 value = 2;
  required uint32 num = 3;
}

message C2S_RecycleKnight {
  repeated uint32 knight_id = 1;
  optional uint32 type = 2;  // 0:回收 1:重生 2:回收预览 3:重生预览
}

message S2C_RecycleKnight {
  required uint32 ret = 1;
  repeated uint32 knight_food = 2; // 返还材料卡
  repeated RecycleItem item = 3;  // 返还道具 定义此结构时还没有Award类型
  optional uint32 essence = 4;  // 精魄
  optional uint32 money = 5;  // 银两
  optional uint32 type = 6;  // 0:回收 1:重生
  optional uint32 soul = 7; // 神魂
  repeated Award award = 8; // 新增的都放在此
}

message KnightTrasform {
  required uint32 knight_id = 1;
  required uint32 advanced_code = 2;
}

message C2S_KnightTransform {
  repeated KnightTrasform trans = 1;
  optional uint32 tp = 2;
}

message S2C_KnightTransform {
  required uint32 ret = 1;
  repeated Knight knight = 2;
  optional uint32 tp = 3;
}

message C2S_KnightOrangeToRed{
	required uint32 kid = 1;
}

message S2C_KnightOrangeToRed{
	required uint32 ret = 1;
}

//武将魂引升级
message C2S_KnightSoulUpgrade {
	required uint32 kid = 1;
}

message S2C_KnightSoulUpgrade {
	required uint32 ret = 1;
	required uint32 kid = 2;
}

//检查武将养成前置限制条件
message C2S_CheckKnightTask {
	required uint32 kid = 1;
	repeated uint32 task_ids = 2;
}

message KnightTaskInfo {
	required uint32 task_id = 1;
	required uint32 cur_value = 2;
}

message S2C_CheckKnightTask {
	required uint32 ret = 1;
	required uint32 kid = 2;
	repeated KnightTaskInfo tasks = 3;
}

message C2S_UpgradeKnightHalo {
  required uint32 knight_id = 1;
  optional uint32 tp = 2;//0单次 1为10次
}

message S2C_UpgradeKnightHalo {
  required uint32 ret = 1;
  optional uint32 tp = 2;
}

message C2S_MainRoleTransexual {
  required uint32 advance_code = 1;
}

message S2C_MainRoleTransexual {
  required uint32 ret = 1;
}

// 武将升金
message C2S_KnightGolden {
  required uint32 knight_id = 1;
  required uint32 op = 2;     // 1：接受任务 2：取消任务 3：完成任务
}
message S2C_KnightGolden {
  required uint32 ret = 1;
  required uint32 knight_id = 2;
  required uint32 op = 3;     // 1：接受任务 2：取消任务 3：完成任务
}

message C2S_GetHandbookInfo {
    required uint32 hand_type = 1;   //0是武将,1是宠物, 2是翅膀 3是神器, 4是军师
}

message S2C_GetHandbookInfo {
  required uint32 ret = 1;
  required uint32 hand_type = 2;
  repeated uint32 ids = 3;
}

//叛军
message Rebel {
  required uint32 id = 1;
  required uint64 hp = 2;
  required uint64 max_hp = 3;
  required uint32 end = 4;
  required uint32 level = 5;
  required uint32 user_id = 6;
  required bool public = 7;
  required string name = 8;
  required uint32 last_att_index = 9;
}

message S2C_GetRebel {
  required Rebel rebel = 1;
}

message C2S_EnterRebelUI {
}

message S2C_EnterRebelUI {
  required uint32 exploit_rank = 1;
	required uint64 max_harm = 2;
  required uint32 max_harm_rank = 3;
	required uint64 exploit = 4;
}

message AttackRebelInfo {
  required string name = 1; //攻击者名称
  required uint64 harm = 2; //攻击伤害
  required uint32 id = 3; //叛军id
}

message C2S_RefreshRebelShow {
  repeated uint32 rebel_ids = 1;
  repeated uint32 last_att_indexs = 2;
}

message S2C_RefreshRebelShow {
  repeated Rebel rebels = 1;
  repeated AttackRebelInfo infos = 2;
  repeated uint32 rebel_ids = 4;
}

enum ATTACK_REBEL {
  NORMAL = 1;
  SPECIAL = 2;
}

message C2S_AttackRebel {
  required uint32 user_id = 1;
  required uint32 mode = 2;
}

message S2C_AttackRebel {
  required uint32 ret = 1;
  optional BattleReport report = 2; //4.6.50废弃
  optional uint32 exploit = 3;
  optional uint64 harm = 4;
  optional bool public = 5;
  optional bool new_record = 6;
  optional uint32 mode = 7;
  optional Award award = 8;
  optional uint32 golden_task_item = 9;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 10;     // 试炼武将id
	optional uint64 report_id = 11; //4.6.50
}

message C2S_PublicRebel {
}

message S2C_PublicRebel {
  required uint32 ret = 1;
}

message C2S_RebelRank {
}

message RebelRank {
  required uint32 id = 1;
  required uint32 level = 2;
  required uint64 value = 3;
  required uint64 attack_value = 4;
  required uint32 rank = 5;
  required string name = 6;
  required uint32 user_id = 7;
  required uint32 dress_id = 8;
  optional uint32 clid = 9;
  optional uint32 cltm = 10;
  optional bool	  clop = 11;
  optional uint32 extend_level = 12;
	optional uint32 corp_id = 13;
	optional string corp_name = 14;
	optional uint64 sid = 15;
}

message S2C_RebelRank {
  required uint32 ret = 1;
  repeated RebelRank exploit_rank = 2;
  repeated RebelRank max_harm_rank = 3;
  optional uint32 my_exploit_rank = 4;
  optional uint32 my_max_harm_rank = 5;
}

enum REBEL_RANK_TYPE {
  EXPLOIT = 1;
  MAX_HARM = 2;
}

message C2S_MyRebelRank {
  required uint32 mode = 1;
}

message S2C_MyRebelRank {
  required uint32 ret = 1;
  required uint32 mode = 2;
  repeated RebelRank rank = 3;
}

message C2S_RefreshRebel {
}

message S2C_RefreshRebel {
  required uint32 ret = 1;
  repeated Rebel rebels = 2;
}

message C2S_GetExploitAwardType {
}

message S2C_GetExploitAwardType {
  required uint32 mode = 1;
  repeated uint32 awards = 2;
}

message C2S_GetExploitAward {
  required uint32 id = 1;
}

message S2C_GetExploitAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Award award = 3;
}

message C2S_GetExploitAwardOneKey {
}

message S2C_GetExploitAwardOneKey {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  repeated Award awards = 3;
}

message RebelOneKeyOptions {
  required uint32 auto_cost_vit = 1;				//1自动消耗体力丹
  required uint32 auto_kill_rebel = 2;			//1自动击杀叛军
  required uint32 low_attack = 3;						//普通叛军 0普通攻击 1全力一击
  required uint32 mid_attack = 4;						//精英叛军 0普通攻击 1全力一击
  required uint32 high_attack = 5;					//无双叛军 0普通攻击 1全力一击
  required uint32 share_friends = 6;	      //1 分享 0 不分享
  required uint32 auto_cost_battle_key = 7; //1 自动消耗征讨令 0 不消耗
  optional uint32 set_times = 8;						//设置次数
  optional uint32 auto_sell_white_knights = 9; //自动出售白色武将
}

message C2S_GetRebelOneKeyOptions {
}

message S2C_GetRebelOneKeyOptions {
  required uint32 ret = 1;
  required RebelOneKeyOptions options = 2;
}

message C2S_SetRebelOneKeyOptions {
 required RebelOneKeyOptions options = 1;
}

message S2C_SetRebelOneKeyOptions {
  required uint32 ret = 1;
}

message C2S_GetTreasureFragmentRobList {
  required uint32 base_id = 1; //碎片ID
}

message S2C_GetTreasureFragmentRobList {
  required uint32 ret = 1;
  required uint32 base_id = 2;
  repeated TreasureFragmentRobUser rob_users = 3;
}

message TreasureFragmentRobUser {
  required uint32 index = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint64 fight_value = 4;
  repeated uint32 knights = 5;
  required uint32 rob_rate = 6;
  required bool is_robot = 7;
  optional uint32 dress_base = 8;
  optional uint32 extend_level = 9;
}

message C2S_FastRobTreasureFragment {
  required uint32 index = 1;
}

message S2C_FastRobTreasureFragment {
  required uint32 ret = 1;
  optional uint32 base_id = 2; //抢夺宝物碎片id
  optional uint32 battle_times = 3; //战斗次数
  optional uint32 break_reason = 4; //中断原因(0:无中断/1:抢夺成功/2:精力不足)
  repeated bool rob_result = 5; //每次抢夺结果
  repeated Award turnover_rewards = 6; //每次翻牌结果
  repeated AwardList rewards = 7; //每次奖励
  repeated uint32 golden_task_item = 8;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 9;     // 试炼武将id
}

message C2S_RobTreasureFragment {
  required uint32 index = 1;
}

message S2C_RobTreasureFragment {
  required uint32 ret = 1;
  required bool rob_result = 2;
  optional BattleReport battle_report = 3; //4.6.50废弃
  optional AwardList turnover_rewards = 4;
  repeated Award rewards = 5;
  optional uint32 base_id = 6;
  optional uint32 golden_task_item = 7;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 8;     // 试炼武将id
	optional uint64 report_id = 11; //4.6.50
}

message C2S_UpgradeTreasure {
  required uint32 upgrade_id = 1;
  repeated uint32 treasure_list = 2;
	repeated KeyValueT treasure_frag_list = 3;
}

message S2C_UpgradeTreasure {
  required uint32 ret = 1;
}

message C2S_RefiningTreasure {
  required uint32 refining_id = 1;
  repeated uint32 treasure_list = 2;
}

message S2C_RefiningTreasure {
  required uint32 ret = 1;
}

message C2S_ComposeTreasure {
  required uint32 treasure_id = 1;
  optional uint32 num		= 2;
	optional bool is_sell = 3;	//是否出售
}

message S2C_ComposeTreasure {
  required uint32 ret = 1;
  required uint32 treasure_id = 2;
  optional uint32 num	= 3;
	optional bool is_sell = 4;
	optional uint32 money = 5;	//出售得到的银两
}

message C2S_TreasureFragmentForbidBattle {
  required uint32 item_id = 1;
}

message S2C_TreasureFragmentForbidBattle {
  required uint32 ret = 1;
  required uint32 item_id = 2;
}

message C2S_OneKeyRobTreasureFragment {
	required uint32 id = 1;			//宝物id
	required bool auto_supply = 2;	//是否自动使用精力丹
	required bool integrate = 3; //是否合成
	optional bool is_sell = 4;  //是否出售,需要integrate == true 才生效
}

message S2C_OneKeyRobTreasureFragment {
	required uint32 ret = 1;
	required bool integrate = 2;	//是否合成
	optional uint32 count = 3;		//挑战次数
	optional uint32 consume = 4;	//消耗精力丹数量
	optional uint32 money = 5;		//掉落银两
	optional uint32 exp = 6;			//获得经验
	repeated Award rewards = 7;		//奖励
	repeated Award treasure = 8;	//夺取的碎片或合成的宝物
	optional uint32 golden_task_item = 9;     	// 获得的升金试炼物品数量
	optional uint32 golden_task_knight_id = 10;  // 试炼武将id
	optional bool is_sell = 11;
}
message C2S_TreasureGolden {
  required uint32 id = 1;
}

message S2C_TreasureGolden {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message TreasureTransform {
  required uint32 treasure_id = 1;
  required uint32 target_base_id = 2;
}

message C2S_TreasureTransform {
  repeated TreasureTransform trans = 1;
  optional uint32 tp = 2;
}

message S2C_TreasureTransform {
  required uint32 ret = 1;
  repeated Treasure treasures = 2;
}

message C2S_UpgradeTreasureStar {
  required uint32 id = 1; //宝物ID
  repeated uint32 treasures = 2;
}

message S2C_UpgradeTreasureStar {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message C2S_PackageTreasure {
  required uint32 base_id = 1; //要打包的宝物BaseId
  repeated uint32 treasures = 2; //要打包的宝物ID
  required uint32 num = 3; //打包次数
}

message S2C_PackageTreasure {
  required uint32 ret = 1;
  optional uint32 base_id = 2; //要打包的宝物BaseId
  repeated uint32 treasures = 3; //要打包的宝物ID
  optional uint32 num = 4; //打包次数
}
//溯源养成
message C2S_TreasureSourceTrace {
	required uint32 treasure_id = 1; //宝物id
	required uint32 option = 2; //选择 1,2,3,4,5,6
	required uint32 stage = 3;  //0,1,2
	required uint32 cost_type = 4; //选择消耗什么宝物，1,2
}

message S2C_TreasureSourceTrace {
  required uint32 ret = 1;
  optional uint32 treasure_id = 2; //宝物id
  optional uint32 option = 3; //选择
	optional uint32 stage = 4;
}

//重置
message C2S_TreasureSourceTraceReset {
  required uint32 treasure_id = 1; //宝物id
	required bool is_preview = 2;
}
message S2C_TreasureSourceTraceReset {
  required uint32 ret = 1;
  optional uint32 treasure_id = 2; //宝物id
  optional bool is_preview = 3;
  repeated Award awards = 4;
}

message C2S_RecycleEquipment {
  repeated uint32 equip_id = 1;
  optional uint32 type = 2; // 0:回收 1:回收预览 2:继承回收奖励预览
}

message S2C_RecycleEquipment {
  required uint32 ret = 1;
  optional uint32 type = 2; // 0:回收 1:回收预览
  repeated Award  awards = 3; //回收时的奖励
}

message C2S_RebornEquipment {
  repeated uint32 equip_id = 1;
  required uint32 type	=	2;// 0: 重生 1:重生预览
}

message S2C_RebornEquipment {
  required uint32 ret		=	1;
  required uint32 type		=	2;// 0: 重生 1:重生预览
  repeated Award awards		=	3;
}

message C2S_GetKnightAttr {
  required uint32 knight_id = 1;
}

message S2C_GetKnightAttr {
  required uint64 attack = 1;
  required uint64 hp = 2;
  required uint64 physical_defense = 3;
  required uint64 magical_defense = 4;
}


// 取新手引导步骤id
message C2S_GetGuideId {
}

message S2C_GetGuideId {
  required uint32 id = 1;     // 无数据返回0
}


// 存新手引导步骤id
message C2S_SaveGuideId {
  required uint32 id = 1;
}

message S2C_SaveGuideId {
  required uint32 ret = 1;
}

message C2S_GetVip{
}

message S2C_GetVip {
  required uint32 ret = 1;
  optional uint32 level = 2;
  optional uint32 exp = 3;
  repeated uint32 vip_dungeons = 4;//已经开启的
  optional uint32 vip_dungeon_count = 5;//剩余次数
  optional uint32 vip_reset_cost = 6;//下次购买所需元宝 0说明无法购买
}

message C2S_ExecuteVipDungeon {
  required uint32 id = 1;
}

message S2C_ExecuteVipDungeon {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 vip_dungeon_count = 3;
  optional BattleReport info = 4; //4.6.50废弃
  repeated Award drop_awards = 5;
  optional Award extra_award = 6;
  optional Award least_award = 7;
	optional uint64 report_id = 8; //4.6.50
}

message C2S_ResetVipDungeonCount {

}

message S2C_ResetVipDungeonCount {
  required uint32 ret = 1;
  optional uint32 vip_dungeon_count = 2;//剩余次数
  optional uint32 vip_reset_cost = 3;
}

message C2S_GetRecharge{
}

//以后充值有特殊的东西都在这里了
message Recharge {
  repeated uint32 recharge_ids = 1;
  //optional MonthCard mc = 2;
}

message MonthCard {
  required uint32 mc_id = 1;//mc info id
  required uint32 mc_days = 2;//mc 剩余天数
  required uint32 last_use_time = 3;//最后次使用时间
  required bool mc_use = 4;//今天月卡是否可以使用
}

//充值相关都在这了
message S2C_GetRecharge{
  required uint32 ret = 1;
  optional Recharge recharge = 2;//充值
  repeated MonthCard mc = 3;//月卡
  optional bool bonus = 4;//首冲奖励
  optional bool is_recharge = 5;//表示从2.6.0版本，玩家是否有过充值
  optional Recharge crystal_recharge = 6;//水晶充值
  //6.4.50-首充累登
  optional NewFirstRechargeData new_recharge = 7;
}
message NewFirstRechargeData {
	optional bool is_active =1;//是否激活
	optional uint32 group = 2;//当前激活期数
    optional uint32 login_days = 3;//当前登录第几天
	repeated uint32 award_ids = 4;//已经领取的登录天奖励
}

message S2C_RechargeSuccess {
  required uint32 ret = 1;
  optional string order_id = 2; //订单ID
  optional uint32 amount = 3; //充值金额
  optional string product_id = 4; //商品ID
  optional string product_name = 5; //商品名称
}

message MonthCardTimes {
  required uint32 mc_id = 1;//mc info id
  required uint32 award_times = 2;//可消耗领奖次数
  required uint32 total_times = 3;//总领奖次数
}

message C2S_GetRechargeTimes {
}

message S2C_GetRechargeTimes {
  required uint32 ret = 1;
  repeated MonthCardTimes mc = 2;//月卡
}

message C2S_GetRechargeBonus {
  required uint32 id = 1;//drop id 做校验
}

message S2C_GetRechargeBonus {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  optional bool bonus = 4;
}
message C2S_LiquorInfo {
}

message S2C_LiquorInfo {
  required uint32 state= 1;  // 1午餐前 2未吃午餐 3已吃午餐 4午餐晚餐间 5未吃晚餐 6已吃晚餐 7晚餐后
  required uint32 next_time = 2;
}

message C2S_Drink {
}

message S2C_Drink {
  required uint32 ret = 1;
  optional uint32 gold = 2;  // 获得的金币数
  required uint32 state = 3;
}

message C2S_IconClick {
  required uint32  icon_id = 1; //点击的icon
}

message S2C_IconClick {
}

message C2S_UseMonthCard {
  required uint32 id = 1;
}

message S2C_UseMonthCard {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GetMonthCardTimesReward {
  required uint32 id = 1;
}

message S2C_GetMonthCardTimesReward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  optional uint32 award_times = 4;
}


// 查询关公信息
message C2S_MrGuanInfo {
}

message S2C_MrGuanInfo {
  required uint32 today_count = 1;     // 今天已祭拜次数
  required uint32 total_count = 2;  // 总共已祭拜次数
  required uint32 next_time = 3;  // 下次祭拜时间
}

// 祭拜
message C2S_Worship {
}

message S2C_Worship {
  required uint32 ret = 1;
  repeated Award award = 2; // 奖励
}

// 查询签到信息
message C2S_LoginRewardInfo {
}

message S2C_LoginRewardInfo {
  required uint32 ret = 1;
  required uint32 total1 = 2;				// 普通签到已签到次数
  required uint32 last_time1 = 3;		// 普通签到上次签到时间
  repeated uint32 vip_login_id = 4; //豪华签到奖励id
  repeated uint32 vip_login_st = 5; //豪华签到状态 0:未充值 1:已充值 2:已领取
  repeated uint32 vip_login_nm = 6; //豪华签到已经充值的次数
  repeated uint32 vip_login_rw = 7; //豪华签到已经领奖的次数
}

// 签到
message C2S_LoginReward {
  required uint32 type = 1;					// 0 普通签到 1 豪华签到
  optional uint32 vip_login_id = 2; //豪华签到奖励id
}

message S2C_LoginReward {
  required uint32 ret = 1;
  required uint32 type = 2;					// 0 普通签到 1 豪华签到
  optional uint32 mult = 3;					// vip翻倍
  optional uint32 total = 4;				// 普通签到已签到次数
  optional uint32 vip_login_id = 5;	// 豪华签到奖励id
}

message DailyMission {
  required uint32 id = 1;
  required uint32 progress = 2;
  required bool is_finished = 3;
}

message C2S_GetDailyMission {

}

message S2C_GetDailyMission {
  required uint32 ret = 1;
  repeated DailyMission fixed_mission = 2;
  optional DailyMission rand_mission = 3;
  optional uint32 reset_cost = 4;
  optional uint32 reset_count = 5;//已经重制的次数
  optional uint32 score = 6;
  repeated DailyMission score_awards = 7;//积分奖励
  optional uint32 level = 8;//计算用的等级
}

message C2S_FinishDailyMission {
  required uint32 id = 1;
}

message S2C_FinishDailyMission {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional DailyMission daily_mission = 3;
  repeated Award awards = 4;
  optional uint32 score = 5;
}

message C2S_GetDailyMissionAward {
  required uint32 id = 1;
}

message S2C_GetDailyMissionAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_ResetDailyMission {

}

message S2C_ResetDailyMission {
  required uint32 ret = 1;
  optional DailyMission daily_mission = 2;
  optional uint32 reset_cost = 3;
  optional uint32 reset_count = 4;
}

message C2S_FirstEnterChapter {
  required uint32 id = 1;
}

message S2C_FirstEnterChapter {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Chapter chapter = 3;
}

message S2C_FlushDailyMission {
  optional DailyMission daily_mission = 1;
}

message C2S_DailyMissionGameHelper {
  required uint32 helper_id = 1;
}

message S2C_DailyMissionGameHelper {
  required uint32 ret = 1;
  required uint32 helper_id = 2;
}

message Wush2Buff {
  optional uint32 id = 1;
  optional uint32 rd = 2; //回合数
}

//查询信息
message C2S_Wush2Info {
}
message S2C_Wush2Info {
  required uint32 ret = 1;
  optional uint32 reset_count = 2;      // 今日已重置次数
  optional uint32 star_total = 3;       // 当前总星数
  optional uint32 max_clean = 4;        // 最大3星层
  optional uint32 star_his = 5;         // 历史最高星
  repeated uint32 star = 6;             // 每关星数
  repeated Wush2Buff buffs = 7;         // 已获得buff
  optional uint32 failed = 8;           // 是否已失败 1:true 0:false
  optional uint32 failed_times = 9;     // 失败次数
  optional uint32 boss_times = 10;      // boss剩余次数
  optional uint32 floor = 11;           // 当前所在层 一层都没打就在第0层
  repeated uint32 boss_list = 12;       //打过的boss id
  optional uint32 boss_buy_times = 13;  //boss购买次数
}
// 挑战下一关
message C2S_Wush2Challenge {
  optional uint32 mode = 1;  //0 普通， 1   boss   2:定级  3: boss扫荡
  optional uint32 index = 2;     // 怪物id:0~2
  optional bool clean = 3; // 是否是扫荡
  optional uint32 boss_id = 4; //mode==1
  optional uint32 floor  = 5; //关卡id
}
message S2C_Wush2Challenge {
  optional uint32 ret = 1;
  optional BattleReport battle_report = 2; // 扫荡的话无战报
  repeated Award award = 3;
  optional uint32 index = 4;     // 怪物id:0~2
  optional uint32 mode = 5; //0 普通， 1，  boss
  optional uint32 golden_task_item = 6;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 7;     // 试炼武将id
  optional uint64 report_id = 8; //4.6.50
  optional bool is_win = 9; //4.6.50战斗结果
  optional Wush2Buff buff = 10;//获得的buff 
  optional uint32 boss_id = 11;
  optional uint32 floor = 12; //定级挑战停留的关卡
}

// 重置
message C2S_Wush2Reset {
}
message S2C_Wush2Reset {
  optional uint32 ret = 1;
  optional uint32 max_clean = 2; // 最大扫荡层
}

message C2S_Wush2RankingList {
}
message S2C_Wush2RankingList {
  optional WushRanking ranking = 1;
}

// 一键挑战
message C2S_Wush2ChallengePlus {
  optional bool until_fail = 1;  //定级 true， 三星扫荡  false
}
message S2C_Wush2ChallengePlus {
  optional uint32 ret = 1;
  repeated Award award = 3;
  optional uint32 buy_id = 5; // 可以买的id
  optional uint32 golden_task_item = 6;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 7;     // 试炼武将id
  optional uint32 max_floor = 8;
  optional bool until_fail = 9;
  optional uint32 star_total = 10;     // 当前总星数
}

message C2S_Wush2Buy {
  optional uint32 buy_type = 1;
  optional uint32 times   = 2;
}
message S2C_Wush2Buy {
  required uint32 ret = 1;
  optional uint32 buy_type = 2;
  optional uint32 times = 3;
}

// 查询信息
message C2S_WushInfo {
}
message S2C_WushInfo {
  required uint32 floor = 1;     // 当前所在层 一层都没打就在第0层
  required uint32 reset_count = 2;     // 今日已重置次数
  required uint32 star_total = 3;     // 当前总星数
  required uint32 star_cur = 4;     // 当前剩余星数
  required uint32 star_his = 5;     // 历史最高星
  repeated uint32 star = 6;     // 每关星数
  repeated uint32 buffs = 7;  // 已获得buff
  required uint32 failed = 8;  // 是否已失败 1:true 0:false
  required uint32 buy_id = 9;  // 可以买的id 0是没有
  required bool bought = 10; // 是否已购买
  required uint32 max_clean = 11; // 最大3星层
}

// 获取当前关buff
message C2S_WushGetBuff {
}
message S2C_WushGetBuff {
  repeated uint32 buff_id = 1;
}

// 挑战下一关
message C2S_WushChallenge {
  required uint32 index = 1;     // 怪物id:0~2
  required bool clean = 2; // 是否是扫荡
}
message S2C_WushChallenge {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2; // 扫荡的话无战报
  repeated Award award = 3;
  required uint32 index = 4;     // 怪物id:0~2
  optional uint32 buy_id = 5; // 可以买的id
  optional uint32 golden_task_item = 6;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 7;     // 试炼武将id
  optional uint64 report_id = 8; //4.6.50
	optional bool is_win = 9; //4.6.50战斗结果
}

// 一键挑战
message C2S_WushChallengePlus {
  optional bool until_fail = 1;
}
message S2C_WushChallengePlus {
  required uint32 ret = 1;
  repeated Award award = 3;
  optional uint32 buy_id = 5; // 可以买的id
  optional uint32 golden_task_item = 6;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 7;     // 试炼武将id
  optional uint32 max_floor = 8;
  optional bool until_fail = 9;
  required uint32 star_total = 10;     // 当前总星数
}

// 重置
message C2S_WushReset {
}
message S2C_WushReset {
  required uint32 ret = 1;
  optional uint32 max_clean = 2; // 最大扫荡层
}

// 获取排行榜
message WushRanking {
  required string name = 1;
  required uint32 star = 2;
	optional uint32 rank = 3;
	optional uint32 user_id = 4;
	optional uint32 base_id = 5;
	optional uint32 level = 6;
	optional uint64 fv = 7;	//战力
	optional uint32 dress_id = 8;
	optional uint32 clid = 9;
	optional uint32 cltm = 10;
	optional bool   clop = 11;
	optional uint32 extend_level = 12;
	optional uint32 corp_id = 13;
	optional string corp_name = 14;
	optional uint64 sid = 15;
}
message C2S_WushRankingList {
}
message S2C_WushRankingList {
  repeated WushRanking ranking = 1;
}

// 应用buff
message C2S_WushApplyBuff {
  required uint32 buff_id = 1;
}
message S2C_WushApplyBuff {
  required uint32 ret = 1;
  required uint32 buff_id = 2;
}

message C2S_WushBuy {
}
message S2C_WushBuy {
  required uint32 ret = 1;
}

//礼品码
message C2S_GiftCode {
  required string code = 1;
}

message S2C_GiftCode {
  required uint32 ret = 1;
}

message S2C_RollNotice {
  required string msg = 1;
}

message TargetInfo {
  required uint32 t = 1;  // 目标类型
  required uint32 id = 2; // id
  required uint32 step = 3; // 阶段：1开启未完成 2完成未领奖 3该类型已全部完成
  required uint32 num = 4; // 完成值
 }

// 查询目标系统信息
message C2S_TargetInfo {
}

message S2C_TargetInfo {
  repeated TargetInfo info = 1;
}

// 目标系统领取奖励
message C2S_TargetGetReward {
  required uint32 t = 1; // 目标类型
}

message S2C_TargetGetReward {
  required uint32 ret = 1;
  required uint32 t = 2; // 目标类型
}

message C2S_GetMainGrouthInfo {

}

message S2C_GetMainGrouthInfo {
  required uint32 ret = 1;
  repeated uint32 used_mg = 2;
}

message C2S_UseMainGrouthInfo {
  required uint32 id = 1;
  required uint32 index = 2;//如果是多选1就写序号1--4 如果是就填0
}

message S2C_UseMainGrouthInfo {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 index  = 3;
  repeated Award awards = 4;
}

message C2S_GetDaysActivityInfo {

}

message DaysActivity {
  required uint32 id = 1;
  required uint32 status = 2;//0无法领奖条件不足 1可领奖 2已经领奖
  optional uint32 progress = 3;
  optional uint32 count = 4;
}

enum ACTIVITY_STATE {
  CLOSED = 0; //活动关闭
  OPEN = 1; //活动开启
  AWARD = 2; //领奖状态
}

message S2C_GetDaysActivityInfo {
  required uint32 ret = 1;
  optional uint32 status = 2;//状态 0关闭 1开启 2领奖
  optional uint32 start_time = 3;
  optional uint32 end_time = 4;
  optional uint32 current_day = 5;
  repeated DaysActivity days_activity = 6;
}

message C2S_FinishDaysActivity {
  required uint32 id = 1;
  optional uint32 index = 2;
}

message S2C_FinishDaysActivity {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 index = 3;
  optional DaysActivity days_activity = 4;
  repeated Award awards = 5;
}

message AcitivitySell {
  required uint32 id = 1;
  required uint32 num = 2;//剩余数量
  required bool bought = 3;//玩家是否买过
}
message C2S_GetDaysActivitySell {

}

message S2C_GetDaysActivitySell {
  required uint32 ret = 1;
  repeated AcitivitySell sells = 2;
}

message C2S_PurchaseActivitySell {
  required uint32 id = 1;
}

message S2C_PurchaseActivitySell {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional AcitivitySell sell = 3;
  repeated Award awards = 4;
}

message S2C_FlushDaysActivity {
  repeated DaysActivity activitys = 1;
}

message C2S_GetSevenDaysDailySales {
}

message S2C_GetSevenDaysDailySales {
	repeated uint32 id = 1;
	repeated uint32 buyed_cnt = 2;
}

message C2S_BuySevenDaysDailySale {
	required uint32 id = 1;
	required uint32 cnt = 2;
}

message S2C_BuySevenDaysDailySale {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 buyed_cnt = 3;
}

message C2S_GetFundInfo {
}

message S2C_GetFundInfo {
  required uint32 ret = 1;
  optional uint32 start_time = 2; //活动开始时间
  optional uint32 buy_count  = 3; //全服购买次数
  optional uint32 open_time = 4; //开服时间
}

message C2S_GetUserFund {
}

message S2C_GetUserFund {
  required uint32 ret = 1;
  optional UserFund fund = 2;
}

message UserFund {
  required bool buy = 1; //是否购买
  repeated uint32 award  = 2; //已领奖id
  repeated uint32 weal  = 3; //已领福利id
}

message C2S_BuyFund {
}

message S2C_BuyFund {
  required uint32 ret = 1;
  optional UserFund fund = 2;
}

message C2S_GetFundAward {
  required uint32 id = 1;
}

message S2C_GetFundAward {
  required uint32 ret = 1;
  optional UserFund fund = 2;
}

message C2S_GetFundWeal {
  required uint32 id = 1;
}

message S2C_GetFundWeal {
  required uint32 ret = 1;
  optional UserFund fund = 2;
}

//名人堂界面信息
message C2S_HOF_UIInfo {
  required uint32 kind = 1; //1, 战力 2, 等级
}

message HOF_Info {
  required uint32 id = 1; //玩家ID
  required string name = 2; //玩家名字
  required uint64 value = 3; //战力或等级
  required uint32 points = 4; //获得点赞数
  required string info = 5; //签名
  required uint32 base_id = 6;
  required uint32 dress_id = 7;
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool	  clop = 10;
  optional uint32 wid = 11;
  optional uint32 extend_level = 12;
  optional uint32 wing_moult_lv = 13;
}

message S2C_HOF_UIInfo {
  required uint32 kind = 1;
  required uint32 points = 2;
  repeated HOF_Info infos = 3;
}

//点赞
message C2S_HOF_Confirm {
  required uint32 id = 1;
}

message S2C_HOF_Confirm {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 points = 3;
}

//签名
message C2S_HOF_Sign {
  required string info = 1;
}

message S2C_HOF_Sign {
  required uint32 ret = 1;
  required string info = 2;
}

//名人堂排行榜
message C2S_HOF_RankInfo {
  required uint32 kind = 1; //1, 战力 2, 等级
  required uint32 start_rank = 2; //从0开始 eg: 前十名就是 0-9
  required uint32 stop_rank = 3;
}

message HOF_RankInfo {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint64 fv = 4; //战斗力
  required uint32 base_id = 5;
  required uint32 dress_id = 6;
  required string sept_name = 7;
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool   clop = 10;
  optional uint32 home_level = 11;
  optional uint32 extend_level = 12;
	optional uint32 corp_id = 13;
	optional string corp_name = 14;
}

message S2C_HOF_RankInfo {
  required uint32 kind = 1; //1, 战力 2, 等级
  required uint32 start_rank = 2; //从0开始 eg: 前十名就是 0-9
  required uint32 stop_rank = 3;
  repeated HOF_RankInfo infos = 4;
  required uint32 self_rank = 5; //0表示不在榜上
}

// 城池挂机
message CityIEvent {
  required uint32 id = 1; // 事件ID
  required uint32 start = 2; // 开始时间
  required uint32 end = 3; // 解决时间
  required string name = 4; // 解决者名字
  optional uint32 times	=	5;	// 资源加倍
}

message CityREvent {
  required uint32 id = 1; // 事件ID
  required uint32 reward_id = 2; // 奖励id(扩展用)
  optional uint32 times	=	3;	// 资源加倍
}

message City {
  required uint32 id = 1; // 城池id
  required uint32 start = 2; // 巡逻开始时间
  required uint32 kac = 3; // 巡逻武将进阶码
  required uint32 duration = 4; // 巡逻时间1~3
  required uint32 efficiency = 5; // 巡逻效率/间隔1~3
  repeated CityIEvent ie  = 6; // 互动事件
  repeated CityREvent re  = 7; // 资源事件
  repeated uint32 reward = 8; // 结束奖励值
  optional uint32 skac = 9; // 设置巡逻武将ID
  optional uint32 sduration = 10; // 设置巡逻时间1~3
  optional uint32 sefficiency = 11; // 设置巡逻效率/间隔1~3
  optional uint32 level = 12; // 城市等级
}

message C2S_CityTechUp {
	required uint32 id = 1; // 城池id
}

message S2C_CityTechUp {
	required uint32 ret = 1;
	optional uint32 id  = 2;
	optional uint32 level = 3;
}

// 查询城池信息
message C2S_CityInfo {
  required uint32 id = 1; // 用户id 0是自己
}

message S2C_CityInfo {
  required uint32 id = 1; // 用户id
  required uint32 assist_count = 2; // 互动事件协助次数
  repeated City city = 3; // 城池
  required uint32 speed = 4; // 巡逻倍速
  optional uint32 totaltime = 5 ;// 总共巡逻时间
}

// 攻打城池
message C2S_CityAttack {
}

message S2C_CityAttack {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2; //4.6.50废弃
  repeated Award award = 3;
  optional uint64 report_id = 8; //4.6.50
}

// 开始巡逻
message C2S_CityPatrol {
  required uint32 city = 1; // 城池id
  required uint32 knight = 2; // 巡逻武将id
  required uint32 duration = 3; // 巡逻时间1~3
  required uint32 efficiency = 4; // 巡逻效率/间隔1~3
}

message S2C_CityPatrol {
  required uint32 ret = 1;
  optional City city = 2; // 城池
}

// 领取巡逻奖励
message C2S_CityReward {
  required uint32 city = 1; // 城池id
}

message S2C_CityReward {
  required uint32 ret = 1;
  repeated Award award = 2;
  optional uint32 totaltime = 3;
}

// 镇压
message C2S_CityAssist {
  required uint32 id 	= 1; // 玩家id
  required uint32 city 	= 2; //城池id
}

message S2C_CityAssist {
  required uint32 ret 	= 1;
  repeated Award award 	= 2;
  optional uint32 favor = 3; //好友度(0-表示不增加)
  optional uint32 uid 	= 4; //玩家id
  optional uint32 city 	= 5; //城池id
}

message RiotCity {
  repeated uint32 id = 1;
}

// 检查好友造反事件
message C2S_CityCheck {
  repeated uint32 id = 1; // 玩家id
}

message S2C_CityCheck {
  repeated uint32 id = 1; // 玩家id
  repeated uint32 num = 2; // 城池数
  repeated uint32 patrol = 3; // 巡逻中的领地数
  repeated uint32 riot = 4; // 造反了的领地数
  repeated RiotCity riot_city = 5; // 造反了的领地id
}

// 好友来协助你（事件推送）
message S2C_CityAssisted {
  required uint32 id = 1; // 玩家id
  required uint32 city_id = 2; // 城池id
  required string name = 3; // 玩家名字
}

// 一键领取巡逻奖励
message C2S_CityOneKeyReward {
}

message S2C_CityOneKeyReward {
  required uint32 ret = 1;
  repeated Award award = 2;
  optional uint32 totaltime = 3;
}

///////////////////// 一键巡逻 ////////////////////////
message CityOneKeyPatrolSet{
  required uint32 id  = 1;	// 设置城池ID
  required uint32 skac = 2; // 设置巡逻武将ID
  required uint32 sduration = 3; // 设置巡逻时间1~3
  required uint32 sefficiency = 4; // 设置巡逻效率/间隔1~3
}

//一键巡逻
message C2S_CityOneKeyPatrol{
	repeated CityOneKeyPatrolSet tmp = 1; // 这个是临时用如果没有则用玩家身上的去执行一键巡逻
}

message S2C_CityOneKeyPatrol{
	//required uint32 ret = 1;
	repeated S2C_CityPatrol citys = 1;
}

// 一键巡逻设置
message C2S_CityOneKeyPatrolSet{
	repeated CityOneKeyPatrolSet cokps = 1;//设置请求
}

message S2C_CityOneKeyPatrolSet{
	required uint32 ret = 1;
}
///////////////////// 一键巡逻 ////////////////////////

message UserCustomActivityQuest {
  required uint32 act_id = 1; //活动ID
  required uint32 quest_id = 2; //任务ID
  required uint32 time = 3; //活动初始化时间
  required uint32 progress = 4; //活动完成进度
  required uint32 award_time = 5; //奖励领取时间
  required uint32 award_times = 6; //奖励领取次数
}

message CustomActivity {
  required uint32 act_id = 1; //活动ID
  required uint32 act_type = 2; //活动类型
  //required uint32 icon = 3; //活动图标
  required string title = 4; //活动标题
  required string sub_title = 5; //小标题
  required string desc = 6; //活动描述
  required uint32 preview_time = 7; //活动预览时间
  required uint32 start_time = 8; //活动开始时间
  required uint32 end_time = 9; //活动结束时间
  required uint32 award_time = 10; //活动奖励领取结束时间
  required uint32 vip_level = 11; //活动Vip等级限制
  optional uint32 icon_type = 12;
  optional uint32 icon_value = 13;
  optional uint32 role_icon = 14;
  optional uint32 level = 15;
  optional uint32 max_vip = 16;
  optional uint32 max_level = 17;
  optional uint32 series_id = 18;
  optional uint32 role_type = 19; //role_icon的type
}

message CustomActivityQuest {
  required uint32 quest_id = 1; //任务ID
  required uint32 act_id = 2; //活动ID
  required uint32 quest_type = 3; //任务类型
  required uint32 param1 = 4; //参数1
  required uint32 param2 = 5; //参数2
  required uint32 param3 = 6; //参数3
  required uint32 consume_type1 = 7; //消耗道具
  required uint32 consume_value1 = 8;
  required uint32 consume_size1 = 9;
  required uint32 consume_type2 = 10;
  required uint32 consume_value2 = 11;
  required uint32 consume_size2 = 12;
  required uint32 consume_type3 = 13;
  required uint32 consume_value3 = 14;
  required uint32 consume_size3 = 15;
  required uint32 consume_type4 = 16;
  required uint32 consume_value4 = 17;
  required uint32 consume_size4 = 18;
  required uint32 award_type1 = 19; //奖励道具
  required uint32 award_value1 = 20;
  required uint32 award_size1 = 21;
  required uint32 award_type2 = 22;
  required uint32 award_value2 = 23;
  required uint32 award_size2 = 24;
  required uint32 award_type3 = 25;
  required uint32 award_value3 = 26;
  required uint32 award_size3 = 27;
  required uint32 award_type4 = 28;
  required uint32 award_value4 = 29;
  required uint32 award_size4 = 30;
  required uint32 award_select = 31; //奖励道具是否可选
  required uint32 award_limit = 32; //奖励限制次数
  required uint32 server_limit = 33; //奖励全服限制次数
  required uint32 server_times = 34; //奖励全服领取次数
  optional uint32 index = 35;
	optional uint32 award_shine1 = 36;
	optional uint32 award_shine2 = 37;
	optional uint32 award_shine3 = 38;
	optional uint32 award_shine4 = 39;
  repeated uint32 params = 40; //多选参数
}

message C2S_GetCustomActivityInfo {
}

message S2C_GetCustomActivityInfo {
  required uint32 ret = 1;
  repeated CustomActivity activity = 2;
  repeated CustomActivityQuest quest = 3;
  repeated UserCustomActivityQuest user_quest = 4;
}
message C2S_GetWeekCustomActivityInfo {
}

message S2C_GetWeekCustomActivityInfo {
  required uint32 ret = 1;
  repeated UserCustomActivityQuest user_quest = 2;
}

message S2C_UpdateCustomActivity {
  repeated CustomActivity activity = 1;
  repeated CustomActivityQuest quest = 2;
  repeated uint32 delete_activity = 3;
}

message S2C_UpdateCustomActivityQuest {
  required uint32 flag = 1;
  repeated UserCustomActivityQuest user_quest = 2;
}

message C2S_GetCustomActivityAward {
  required uint32 act_id = 1;
  required uint32 quest_id = 2;
  optional uint32 award_id = 3;
  optional uint32 num = 4;
}

message S2C_GetCustomActivityAward {
  required uint32 ret = 1;
  required uint32 act_id = 2;
  required uint32 quest_id = 3;
  optional uint32 award_id = 4;
  optional uint32 num = 5;
}

message C2S_GetWeekCustomActivityAward {
  required uint32 act_id = 1;
  required uint32 quest_id = 2;
  optional uint32 award_id = 3;
  optional uint32 num = 4;
}

message S2C_GetWeekCustomActivityAward {
  required uint32 ret = 1;
  required uint32 act_id = 2;
  required uint32 quest_id = 3;
  optional uint32 award_id = 4;
  optional uint32 num = 5;
}
message S2C_UpdateCustomSeriesActivity {
  required uint32 series_id = 1;
}

message C2S_GetCustomSeriesActivity {
  required uint32 series_id = 1;
}

message S2C_GetCustomSeriesActivity {
  required uint32 ret = 1;
  repeated CustomActivity activity = 2;
  repeated CustomActivityQuest quest = 3;
  repeated UserCustomActivityQuest user_quest = 4;
  required uint32 series_id = 5;
}

message CorpSnapShot {
  required uint32 id = 1;
  required uint32 level = 2;
  required uint32 size = 3;//成员数
  required string name = 4;//军团名
  required string leader_name = 5;//军团长名
  required string announcement = 6;//军团宣言
  required uint32 icon_pic  = 7;//ICON pic
  required uint32 icon_frame = 8;//ICON frame
  required bool has_join = 9;//是否有申请
  optional uint32 exp = 10;
}

//start end 传军团排名位置
message C2S_GetCorpList {
  required uint32 start = 1;
  required uint32 tail = 2;
}

//如果啥都没则返回start end = 0
message S2C_GetCorpList {
  required uint32 ret = 1;
  required uint32 start = 2;
  required uint32 tail = 3;
  repeated CorpSnapShot corps = 4;
}

message C2S_GetJoinCorpList {
}

message S2C_GetJoinCorpList {
  required uint32 ret = 1;
  repeated CorpSnapShot corps = 2;
}

enum CORP_POSITION {
  MEMBER = 0;//普通人
  LEADER = 1;//军团长
  VICE_LEADER = 2;//副军团长
}

message CorpDetail {
  //军团总信息
  required uint32 id = 1;
  optional uint32 level = 2;
  optional uint32 size = 3;//成员数
  optional string name = 4;//军团名
  optional string leader_name = 5;//军团长名
  optional string announcement = 6;//军团宣言
  optional uint32 icon_pic  = 7;//ICON pic
  optional uint32 icon_frame = 8;//ICON frame
  optional uint32 exp = 9;//军团经验
  optional string notification = 10;//军团公告（内部）
  optional uint32 history_index = 11;//军团动态
  optional uint32 max_war_rank = 12;//最高军团战排名
  optional uint32 home_level = 13;//军团图腾等级
  optional uint32 home_exp = 14;//军团图腾等级
  optional uint32 change_name_count = 15;
  //自身相关的
  optional uint32 position = 20;//自身级别
}

message C2S_GetCorpDetail {

}

//军团详情 拉军团先拉这个
message S2C_GetCorpDetail {
  required uint32 ret = 1;
  optional bool has_corp = 2;
  optional CorpDetail corp = 3;
  optional uint32 quit_corp_cd = 4;//加入帮会冷却CD时间
  optional uint32 join_corp_time = 5;
	optional bool spirit_award = 6;
}

message CorpMember {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint64 fight_value = 4;
  required uint32 total_contribute = 5;
  required uint32 worship_id = 6;//祭天ID 0为无
  required uint32 worship_exp  = 7;//祭天贡献值
  required uint32 online = 8;
  required uint32 main_role = 9;
  required uint32 join_corp_time = 10;
  required uint32 position = 11;
  required uint32 vip = 12;
  optional uint32 dress_id = 13;
  optional uint32 worship_point = 14;//后面加的
  optional uint32 worship_time = 15;
  optional uint32 clid = 16;
  optional uint32 cltm = 17;
  optional bool   clop = 18;
  optional uint32 sp1 = 19;//不同军团模块用//point
  optional uint32 sp2 = 20;//totalpoint
  optional uint32 fid = 21;
  optional uint32 wid = 22;//神翼id
  optional uint32 gve_title = 23; //北伐称号
  optional uint32 home_level = 24;//家园等级（官职）
  optional uint32 home_pos = 25;
  optional string home_content = 26;
  optional uint32 home_exp = 27;//家园经验
  repeated uint32 available_group_dungeon = 28;
  optional uint32 extend_level = 29;
	optional uint64 sid = 30;
	optional uint32 alliance_daily_exp = 31;
	optional uint32 alliance_daily_goods = 32;
	optional uint32 alliance_position = 33;	//联盟职位
	optional uint32 online_time = 34;	//online为在线时表示上线时间
  optional uint32 unlock_tent_level = 35; //营帐怪物解锁等级
  optional uint32 team_boss_times = 36;
	optional uint32 rogue = 37;
	optional uint64 spirit = 38;
  optional uint32 job_id = 39;
  optional uint32 job_level = 40;
}

message C2S_GetCorpMember {

}

message S2C_GetCorpMember {
  required uint32 ret = 1;
  repeated CorpMember members = 2;
}

message CorpHistory {
  required uint32 id = 1;
  required uint32 info_id = 2;
  required uint32 time = 3;
  repeated string key = 4;
  repeated string value = 5;
}

message C2S_GetCorpHistory {
  required uint32 start = 1;
  required uint32 tail= 2;
}

message S2C_GetCorpHistory {
  required uint32 ret = 1;
  required uint32 start = 2;
  required uint32 tail = 3;
  repeated CorpHistory history = 4;
}

message S2C_NotifyCorpDismiss {
  required uint32 dismiss = 1;//解散状态 0=>被T 1军团被解散
}
message C2S_CreateCorp {
  required string name = 1;
  optional uint32 icon_pic = 2;
  optional uint32 icon_frame = 3;
}

message S2C_CreateCorp {
  required uint32 ret = 1;
}

message C2S_RequestJoinCorp{
  required uint32 id = 1;
}

message S2C_RequestJoinCorp{
  required uint32 ret = 1;
  required uint32 id = 2;
  optional CorpSnapShot corp = 3;//申请的军团如果成功了 会传过来
}

message C2S_DeleteJoinCorp {
  required uint32 id = 1;
}

message S2C_DeleteJoinCorp {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional CorpSnapShot corp = 3;//删掉的军团会传过来 HAS_JOIN变为FALSE
}

message C2S_QuitCorp {

}

message S2C_QuitCorp {
  required uint32 ret = 1;
}

message C2S_SearchCorp {
  required string name = 1;
}

message S2C_SearchCorp {
  required uint32 ret = 1;
  optional CorpSnapShot corp = 2;
}

message C2S_ExchangeLeader {

}

message S2C_ExchangeLeader {
  required uint32 ret = 1;
  optional uint32 user_id = 2;//被弹劾的人的USERID
}

message C2S_ConfirmJoinCorp {
  required uint32 user_id = 1;
  required bool confirm = 2;//true为通过 FALSE为滚蛋
}

message S2C_ConfirmJoinCorp {
  required uint32 ret = 1;
  required uint32 user_id = 2;
  required bool confirm = 3;//true为通过 FALSE为滚蛋
}

message C2S_ModifyCorp {
  optional string announcement = 1;//军团宣言
  optional uint32 icon_pic  = 2;//ICON pic
  optional uint32 icon_frame = 3;//ICON frame
  optional string notification = 4;//军团公告（内部）
  optional string name = 5;//军团名字
}

message S2C_ModifyCorp {
  required uint32 ret = 1;
}

message C2S_DismissCorpMember {
  required uint32 id = 1;
}

message S2C_DismissCorpMember {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GetCorpJoin{

}

message CorpJoin{
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint64 fight_value = 4;
  required uint32 online = 5;
  required uint32 main_role = 6;
  required uint32 vip = 7;
  optional uint32 dress_id = 8;
  optional uint32 quit_corp_cd = 9;
  optional uint32 clid = 10;
  optional uint32 cltm = 11;
  optional bool   clop = 15;
  optional uint32 extend_level = 16;
}

message S2C_GetCorpJoin{
  required uint32 ret = 1;
  repeated CorpJoin joins = 2;
}

message C2S_DismissCorp {

}

message S2C_DismissCorp {
  required uint32 ret = 1;
}

message S2C_MyCorpChangedByCorpLeader {

}

message C2S_CorpStaff {
  required uint32 id = 1;
  required uint32 position = 2;
}

message S2C_CorpStaff {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 position = 3;
}

message C2S_GetCorpWorship {

}

message S2C_GetCorpWorship {
  required uint32 ret = 1;
  //军团共有属性
  optional uint32 worship_level = 2;//祭天用的id
  optional uint32 worship_point = 3;//祭天进度
  optional uint32 worship_count = 4;//剩余祭天次数
  //玩家自身属性
  optional uint32 worship_id = 10;//祭天ID
  optional uint32 worship_exp = 11;//祭天军团贡献值 (通过ID和暴击计算得出)
  optional bool worship_crit = 12;//祭天是否暴击
  repeated uint32 worship_award = 13;//今天已经领过的军团贡献
}

message C2S_CorpContribute {
  required uint32 id = 1;
}

message S2C_CorpContribute {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool worship_crit = 3;
  optional uint32 worship_exp = 4;//军团经验
  optional uint32 corp_point = 5;//玩家军团点数
}

message C2S_GetCorpContributeAward {
  required uint32 index = 1;
}

message S2C_GetCorpContributeAward {
  required uint32 ret = 1;
  required uint32 index = 2;
  repeated Award awards = 3;
}

message CorpShopItem {
  required uint32 id = 1;
  required uint32 num = 2;//剩余个数
  required bool bought = 3;//玩家是否购买
}

message C2S_GetCorpSpecialShop {

}

message S2C_GetCorpSpecialShop {
  required uint32 ret = 1;
  optional uint32 next_refresh_time = 2;
  repeated CorpShopItem item = 3;
}

message C2S_CorpSpecialShopping {
  required uint32 id = 1;
}

message S2C_CorpSpecialShopping {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  optional CorpShopItem item = 4;//如果购买成功这个属性会刷过来
}

message C2S_GetHolidayEventInfo {
}

message S2C_GetHolidayEventInfo {
  required uint32 ret = 1;
  optional uint32 time = 2; //数据初始化时间(隔天自动初始化数据)
  repeated HolidayEventAward award = 3; //奖励领取次数列表
}

message HolidayEventAward {
  required uint32 id = 1;
  required uint32 num = 2;
}

message C2S_GetHolidayEventAward {
  required uint32 id = 1;
}

message S2C_GetHolidayEventAward {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 num = 3;
}

message C2S_GetCorpChapter {

}

message S2C_GetCorpChapter {
  required uint32 ret = 1;
  optional uint32 chapter_id = 2;//军团长设定的章节ID
  optional uint32 today_chid = 3;//今日攻打的章节ID
  optional uint32 hp = 4;//当前血量
  optional uint32 max_hp = 5;//最大血量
  optional uint32 chapter_count = 6;//玩家剩余挑战次数
  repeated uint32 chapters = 7;//已经通过的军团副本
  optional uint32 reset_cost = 8;//购买需要的元宝
}

message CorpDungeon {
  required uint32 id= 1;//dungeon id
  required uint32 info_id = 2;//monster group id 四个中间随机出来的一个//新副本里面这个字段没啥用
  required uint64 max_hp = 3;
  required uint64 hp = 4;
  repeated CorpMonster monster = 5;
  optional string kill_name = 6;//击杀的人的名字
}

message CorpMonster {
  required uint32 index = 1;
  required uint64 hp = 2;
  required uint64 max_hp = 3;
}

message C2S_GetCorpDungeonInfo {
  required uint32 chapter_id = 1;//今日攻打章节的ID
}

message S2C_GetCorpDungeonInfo {
  required uint32 ret = 1;
  required uint32 chapter_id = 2;
  repeated CorpDungeon dungeon = 3;
}

message C2S_ExecuteCorpDungeon {
  required uint32 id = 1;
  required uint32 info_id = 2;//这个值也要传 保持数据一致
}

message S2C_ExecuteCorpDungeon {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 info_id = 3;
  optional BattleReport info = 4;
  optional CorpDungeon dungeon = 5;
  optional uint64 harm = 7;
  optional uint32 corp_point = 8;
  repeated Award final_award = 9;
}

message S2C_FlushCorpDungeon {
  optional CorpDungeon dungeon = 1;
  optional uint32 hp = 2;
  optional string name = 3;
  optional bool last_hit = 4;
  optional uint64 harm = 5;
}

message C2S_SetCorpChapterId {
  required uint32 id = 1;
}

message S2C_SetCorpChapterId {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message CorpSkin {
	optional uint32 id = 1; //演武台皮肤
	optional uint32 stock_time = 2; //皮肤剩余时间(使用时的瞬时值，非当前值)
	optional uint32 timestamp = 3; //皮肤使用时的时间戳
}

//军团演武台皮肤信息
message C2S_CorpSkinInfo {
}

message S2C_CorpSkinInfo {
	required uint32 ret = 1;
	optional uint32 id = 2;	//当前使用皮肤 0&1 都是默认皮肤
	repeated CorpSkin skins = 3;	//已有皮肤列表
}

//选择使用
message C2S_CorpSkinSelect {
	required uint32 skin_id = 1;	//选择使用的皮肤id
}

message S2C_CorpSkinSelect {
	required uint32 ret = 1;		
	optional uint32 skin_id = 2;	//透传回的id
	repeated CorpSkin skins = 3;	//更新皮肤信息
}

message C2S_GetDungeonAwardList {

}

message DungeonAward {
  required uint32 id = 1;
  required uint32 user_id = 2;
  required string name = 3;
  required uint32 index = 4;//蛋的位置必须>=1
}

message S2C_GetDungeonAwardList {
  required uint32 ret = 1;
  optional bool has_award = 2;//玩家有没有砸过彩蛋
  repeated DungeonAward list = 3;
  optional bool has_point = 4;//玩家有没有领过声望奖励
  optional bool has_auth = 5;//玩家今天有没有领奖的权利//用来区别军团副本结束后加入的玩家
}

message C2S_GetDungeonAward {
  required uint32 index = 1;//客户端需求
}

message S2C_GetDungeonAward {
  required uint32 ret = 1;
  required uint32 index = 2;
  optional bool has_award = 3;//砸蛋后刷回来
  optional DungeonAward da = 4;
  repeated Award awards = 5;
}

message S2C_FlushDungeonAward {
  optional DungeonAward da = 1;//刷新砸蛋信息
}

message C2S_GetDungeonAwardCorpPoint {
}

message S2C_GetDungeonAwardCorpPoint {
  required uint32 ret = 1;
  optional uint32 corp_point = 2;
  optional bool has_point= 3;
}

message CorpChapterGlobalRank {
  required uint32 id = 1;
  required string name = 2;
  required uint64 harm = 3;
  required uint32 rank = 4;
  required uint32 corp_id = 5;
  required string corp_name = 6;
  required uint32 main_role = 7;
  optional uint32 dress_id = 8;
  optional uint32 vip = 9;
  optional uint32 clid = 10;
  optional uint32 cltm = 11;
  optional bool   clop = 15;
}

message C2S_GetDungeonCorpRank{

}

message S2C_GetDungeonCorpRank{
  required uint32 ret = 1;
  optional uint32 self_rank = 2;
  repeated CorpChapterGlobalRank ranks = 3;
}

message C2S_GetDungeonCorpMemberRank {

}

message CorpChapterRank {
  required uint32 id = 1;
  required string name = 2;
  required uint64 harm = 3;
  required uint32 main_role = 4;
  optional uint32 dress_id = 5;
  optional uint32 vip = 6;
  optional uint32 sp1 = 7;//代表次数
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional uint64 fight_value = 10; //战力
  optional bool   clop = 15;
}

message S2C_GetDungeonCorpMemberRank {
  required uint32 ret = 1;
  repeated CorpChapterRank ranks = 3;
}

message C2S_ResetDungeonCount {

}

message S2C_ResetDungeonCount {
  required uint32 ret = 1;
  //optional uint32 chapter_count =2;
  //optional uint32 reset_cost = 3;这2个信息通过刷副本消息过来
}

message C2S_Share {
  required uint32 id = 1;
  optional uint32 extra = 2; // 不为1则不做处理 (前端要求加的字段，无意义)
}

message S2C_Share {
  required uint32 ret = 1;
  optional uint32 id = 2;
  repeated Award awards = 3;
  optional ShareState state = 4;
}

message ShareState {
  required uint32 id = 1; // id
  required uint32 step = 2; // 0.不能领取 1.可领取 2.已领取
}

message C2S_GetShareState {
  required uint32 t = 1; // 任务类型
}

message S2C_GetShareState {
  repeated ShareState state = 1;
  optional uint32 share_count = 2;
}

message C2S_GetPhoneBindNotice {
}

message S2C_GetPhoneBindNotice {
  required string notice = 1;
}


message C2S_GetRechargeBack {
}

message S2C_GetRechargeBack {
  required uint32 ret = 1;
  required bool has_recharge = 2;
  optional uint32 money = 3;
  optional uint32 gold = 4;
  optional uint32 vip_exp = 5;
}

message C2S_RechargeBackGold {

}

message S2C_RechargeBackGold {
  required uint32 ret = 1;
  required bool has_recharge = 2;
}

message CorpChapterIdRank {
  required uint32 id = 1;
  required uint32 level = 2;
  required uint32 size = 3;//成员数
  required string name = 4;//军团名
  required string leader_name = 5;//军团长名
  required uint32 icon_pic  = 7;//ICON pic
  required uint32 icon_frame = 8;//ICON frame
  required uint32 chapter_id = 9;//副本进度
  required uint32 rank = 10;
}

message C2S_GetCorpChapterRank {
}

message S2C_GetCorpChapterRank {
  required uint32 ret = 1;
  repeated CorpChapterIdRank ranks= 2;
}

message C2S_ComposeAwakenItem {
  required uint32 id = 1; //合成道具id
}

message S2C_ComposeAwakenItem {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_FastComposeAwakenItem {
  required uint32 id = 1; //合成道具id
  required uint32 num = 2; //合成道具数量
}

message S2C_FastComposeAwakenItem {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 num = 3;
}


message C2S_PutonAwakenItem {
  required uint32 kid = 1; //武将id
  required uint32 pos = 2; //装备位置
  required uint32 id = 3; //觉醒道具id
}

message S2C_PutonAwakenItem {
  required uint32 ret = 1;
}

message C2S_AwakenKnight {
  required uint32 kid = 1; //觉醒武将id
  repeated uint32 knight_list = 2; //消耗武将id
}

message S2C_AwakenKnight {
  required uint32 ret = 1;
}

message C2S_AutoAwakenKnight {
  required uint32 kid = 1; //觉醒武将id
  required uint32 level = 2; //觉醒等级
}

message S2C_AutoAwakenKnight {
  required uint32 ret = 1;
  optional uint32 kid = 2; //觉醒武将id
  optional uint32 level = 3; //觉醒等级
}

message C2S_GetCorpCrossBattleInfo {

}

enum CROSS_BATTLE_STATE{
  ERROR = 0;//错误
  ZERO = 1;//平常
  APPLY = 2;//报名阶段
  WAIT = 3;//匹配
  BATTLE = 4;//战斗
  END = 5;//结束
}

message S2C_GetCorpCrossBattleInfo {
  required uint32 ret = 1;
  optional uint32 state = 2;
  optional bool apply = 3;
  optional uint32 field = 4;
}

message C2S_ApplyCorpCrossBattle {

}

message S2C_ApplyCorpCrossBattle {
  required uint32 ret = 1;
}

message C2S_QuitCorpCrossBattle {

}

message S2C_QuitCorpCrossBattle {
  required uint32 ret = 1;
}

message C2S_GetCorpCrossBattleList {
}

message BattleCorp {
  required uint32 id = 1;
  required string name = 2;
}

message S2C_GetCorpCrossBattleList {
  required uint32 ret = 1;
  repeated BattleCorp corps = 2;
}

message S2C_FlushCorpCrossBattleList {
  required bool add = 1;
  optional BattleCorp corp = 2;
}

message C2S_GetCrossBattleEncourage {

}

message S2C_GetCrossBattleEncourage {
  required uint32 ret = 1;
  optional uint32 total_hp_count = 2;//总的是次数
  optional uint32 total_atk_count = 3;
  optional uint32 hp_count = 4;//自己次数
  optional uint32 atk_count = 5;
}

message C2S_CrossBattleEncourage {
  required uint32 e_type = 1;//1为hp 2为atk
}

message S2C_CrossBattleEncourage {
  required uint32 ret = 1;
  required uint32 e_type = 2;
  optional bool success = 3;
  optional uint32 total_hp_count = 4;//总的是次数
  optional uint32 total_atk_count = 5;
  optional uint32 hp_count = 6;//自己的值
  optional uint32 atk_count = 7;
}

message C2S_GetCrossBattleField {

}

message CrossBattleCorp {
  required uint64 sid = 1;
  required string sname = 2;
  required uint32 corp_id = 3;
  required string name = 4;
  required uint32 total_exp = 5;
  optional uint32 level = 6;
  optional bool fire_on = 7;
  optional uint32 rob_exp = 8;//我方掠夺的经验
  optional uint32 robbed_exp = 9;//掠夺我方的经验
  optional uint32 total_hp = 10;
  optional uint32 total_atk = 11;
  optional uint32 icon_pic = 12;
  optional uint32 icon_frame = 13;
  optional uint32 each_exp = 14;//每打一次
  optional uint32 total_robbed_exp = 15;//我方总共被掠夺的
}

message S2C_GetCrossBattleField {
  required uint32 ret = 1;
  //自己的信息
  optional uint32 kill_count = 2;//个人杀人数
  optional uint32 rob_exp = 3;//抢的经验
  optional uint32 refresh_cd = 4;//刷新对手CD
  optional uint32 battle_cd = 5;//挑战对手CD
  optional uint32 battle_cost = 6;//刷新挑战对手CD所需要的元宝
  //军团总的信息 包括自己的
  repeated CrossBattleCorp corp = 10;
}

message C2S_GetCrossBattleEnemyCorp {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
  required bool is_refresh = 3;
}

message CrossBattleUser {
  required uint32 id = 1;
  required string name = 2;
  required uint32 main_role = 3;
  required uint32 dress_id = 4;
  required uint64 fight_value = 5;
  required uint32 times = 6;
  optional uint32 score = 7;//胜利获得的军团贡献
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool   clop = 15;
  optional uint32 wid = 10;
}

message S2C_GetCrossBattleEnemyCorp {
  required uint32 ret= 1;
  required uint64 sid = 2;
  required uint32 corp_id = 3;
  required bool is_refresh = 4;
  optional bool is_finish = 5;
  optional uint32 refresh_cd = 6;
  repeated CrossBattleUser users = 7;
}

message C2S_CrossBattleChallengeEnemy {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
  required uint32 user_id = 3;
}

message S2C_CrossBattleChallengeEnemy {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 corp_id = 3;
  required uint32 user_id = 4;
  optional BattleReport info = 5;
  optional uint32 corp_point= 6;
  optional uint32 corp_exp = 7;//这个值客户端计算了
  optional uint32 battle_cd = 8;//战斗CD
  optional CrossBattleUser user = 9;
}

message C2S_ResetCrossBattleChallengeCD {

}

message S2C_ResetCrossBattleChallengeCD {
  required uint32 ret = 1;
  optional uint32 battle_cd = 2;
  optional uint32 battle_cost = 3;//刷新挑战对手CD所需要的元宝
}

message C2S_SetCrossBattleFireOn {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
}

message S2C_SetCrossBattleFireOn {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 corp_id = 3;
}

message C2S_CrossBattleMemberRank {

}

message CrossBattleRank {
  required uint32 user_id = 1;
  required string name = 2;
  required uint32 rob_exp = 3;
  required uint32 kill_count = 4;
  required uint32 main_role = 5;
  required uint32 dress_id = 6;
  required uint32 vip = 7;
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool   clop = 15;
}

message S2C_CrossBattleMemberRank {
  required uint32 ret = 1;
  repeated CrossBattleRank ranks = 2;

}

message S2C_BroadCastState {
  required uint32 state = 1;
}

message C2S_GetCorpCrossBattleTime {

}

message BattleTime {
  required uint32 state = 1;
  required uint32 start = 2;
  required uint32 close = 3;
}

message S2C_GetCorpCrossBattleTime {
  required uint32 ret = 1;
  repeated BattleTime times = 2;
}

message S2C_FlushCorpCrossBattleField {
  required uint32 field = 1;
}

message S2C_FlushCorpEncourage {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
  optional uint32 hp_encourage = 3;
  optional uint32 atk_encourage = 4;
}

message S2C_FlushCorpBattleResult {
  repeated CrossBattleCorp corps = 1;
}

message S2C_FlushFireOn{
  required uint64 sid = 1;
  required uint32 corp_id = 2;
}

message S2C_FlushBattleMemberInfo{
  required uint32 user_id = 1;
  required uint32 kill_count = 2;
  required uint32 rob_exp = 3;
}
// 查询活动
message C2S_WheelInfo {
}

message S2C_WheelInfo {
  required uint32 score = 1; // 可用积分
  required uint32 score_total = 2; //  总积分
  required uint32 pool = 3; // 奖池
  required bool got_reward = 4; // 是否已领取过奖励
  required uint32 pool2 = 5; // 新增奖池2
  required uint32 start = 6;
  required uint32 end = 7;
  required uint32 present = 8;
  optional uint32 bought_times1 = 9; // 今日已购买次数
  optional uint32 bought_times2 = 10; // 今日已购买次数
}

// 抽奖
message C2S_PlayWheel {
  required uint32 id = 1; // 类型
  required uint32 times = 2; // 次数
}

message S2C_PlayWheel {
  required uint32 ret = 1;
  repeated uint32 money = 2;
  repeated uint32 reward_id = 3;     // 1~7配置 8奖池
  required uint32 id = 4;
  optional uint32 rank = 5;
  required uint32 pool = 6;
  required uint32 pool2 = 7;
}

// 领取排名奖励
message C2S_WheelReward {
}

message S2C_WheelReward {
  required uint32 ret = 1;
  repeated Award award = 2;
}

// 获取排行榜
message WheelRanking {
  required string name = 1;
  required uint32 score = 2;
  required uint32 mainrole = 3; // 主角贝斯id
  optional uint32 dress_id = 4;
  optional uint32 clid = 5;
  optional uint32 cltm = 6;
  optional bool	  clop = 7;
	optional uint32 uid = 8;
	optional uint32 level = 9;
	optional uint64 fv = 10; //战力
	optional uint32 extend_level = 11;
	optional uint32 rank = 12;
	optional uint32 corp_id = 13;
	optional string corp_name = 14;
	optional uint64 sid = 15;
}
message C2S_WheelRankingList {
}
message S2C_WheelRankingList {
  repeated WheelRanking ranking = 1;
  required uint32 ret = 2;
}

// 查询活动
message C2S_GoldWheelInfo {
  optional uint32 group = 1; // 配置表group
}

message S2C_GoldWheelInfo {
  required uint32 score = 1; // 可用积分
  required uint32 score_total = 2; //  总积分
  required uint32 pool = 3; // 奖池
  required bool got_reward = 4; // 是否已领取过奖励
  required uint32 start = 6;
  required uint32 end = 7;
  required uint32 present = 8;
  repeated uint32 bought_times = 9; // 今日已购买次数
  optional uint32 rank = 10;
  optional uint32 group = 11; // 配置表group
  repeated uint32 bought_times_id = 12; // 今日已购买次数的id
  repeated uint32 progress_reward = 13;	//   6.2.0 已领的进度奖
  optional uint32 coin_num = 14; // 兑换代币的数量
}

// 抽奖
message C2S_PlayGoldWheel {
  required uint32 times = 1; // 次数
  optional uint32 id = 2; // 配置表id
}

message S2C_PlayGoldWheel {
  required uint32 ret = 1;
  repeated uint32 money = 2;
  repeated uint32 reward_id = 3;
  repeated uint32 score = 4;
  optional uint32 rank = 5;
  optional uint32 pool = 6;
  optional uint32 times = 7;
  optional uint32 id = 8; // 配置表id
  repeated uint32 multiple = 9;	//	 6.2.0 每次抽奖的倍率
}

// 领取排名奖励
message C2S_GoldWheelReward {
  optional uint32 group = 1; // 配置表group
}

message S2C_GoldWheelReward {
  required uint32 ret = 1;
  repeated Award award = 2;
  optional uint32 group = 3; // 配置表group
}

message C2S_GoldWheelRankingList {
  optional uint32 group = 1; // 配置表group
}
message S2C_GoldWheelRankingList {
  repeated WheelRanking ranking = 1;
  required uint32 ret = 2;
  optional uint32 group = 3; // 配置表group
}

// 领取积分进度奖励
// 6.2.0
message	C2S_GoldWheelProcessReward{
  optional uint32 group = 1;		//	配置表group
  required uint32 progress_id = 2;	//	阶段奖励ID,关联新表id
}
// 6.2.0
message S2C_GoldWheelProcessReward{
  required uint32 ret = 1;				//	返回值
  repeated uint32 progress_reward = 2;	// 已领的进度奖
  repeated Award award = 3;				// 领取的奖品
  optional uint32 group = 4;				// 配置表group
} 

message C2S_Hard_GetChapterList {

}

message S2C_Hard_GetChapterList {
  required uint32 ret = 1;
  optional uint32 total_star = 2;
  optional uint32 fast_execute_time = 3;
  optional uint32 fast_execute_cd = 4;
  //optional uint32 reset_cost = 5;
  repeated Chapter chapters = 6;
}

message C2S_Hard_GetChapterRank {
}

message S2C_Hard_GetChapterRank {
  required uint32 ret = 1;
  optional uint32 self_rank = 2;
  repeated ChapterRank ranks = 3;
}

message S2C_Hard_AddStage {
  required uint32 chpt_id = 1;
  required Stage stage = 2;
}

message C2S_Hard_ExecuteStage {
  required uint32 id  = 1;
}

message S2C_Hard_ExecuteStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Stage stage = 3;
  optional uint32 type = 4;
  //optional BattleReport info = 5;
  repeated Award awards = 7;
  optional uint32 stage_money = 8;
  optional uint32 stage_exp = 9;
  optional uint32 stage_star = 10;
  optional uint32 rebel = 11;
  optional uint32 rebel_level = 12;
}

message C2S_Hard_ExecuteMultiStage {
  required uint32 id = 1;
  required uint32 wave_id = 2;
}

message S2C_Hard_ExecuteMultiStage {
  required uint32 ret = 1;
  required uint32 id = 2;//stage id
  optional BattleReport info = 3; //4.6.50废弃
  required uint32 next_wave_id = 4;
  optional uint64 report_id = 5; //4.6.50
  optional uint32 stage_star = 6;
}

message C2S_Hard_FastExecuteStage {
  required uint32 id  = 1;
}

message S2C_Hard_FastExecuteStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 fast_execute_time = 3;
  optional uint32 fast_execute_cd = 4;
  optional Stage stage = 5;
  repeated Award awards = 6;
  optional uint32 stage_money = 7;
  optional uint32 stage_exp = 8;
  optional uint32 stage_star = 9;
  optional uint32 rebel = 10;
  optional uint32 rebel_level = 11;
}

message C2S_Hard_ResetDungeonExecution {
  required uint32 stage_id = 1;
}

message S2C_Hard_ResetDungeonExecution {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  optional Stage stage = 3;//这个副本
  optional uint32 next_reset_cost = 4; //下次消耗元宝
}

message C2S_Hard_FinishChapterBoxRwd {
  required uint32 ch_id = 1;
  required uint32 box_type = 2;//1铜箱子 2银箱子 3金箱子
}

message S2C_Hard_FinishChapterBoxRwd {
  required uint32 ret = 1;
  required uint32 ch_id  = 2;
  required uint32 box_type = 3;
  //repeated Award awards = 4;
}

message ChapterRoit {
  required uint32 ch_id = 1;
  required uint32 open_time = 2;//开启时间戳
  required uint32 roit_id = 3;//roit id
  required bool is_finish = 4;//是否完成
}

message C2S_Hard_GetChapterRoit {
}

message S2C_Hard_GetChapterRoit  {
  required uint32 ret = 1;
  repeated ChapterRoit roits = 2;
}

message C2S_Hard_FinishChapterRoit {
  required uint32 ch_id = 1;
}

message S2C_Hard_FinishChapterRoit {
  required uint32 ret = 1;
  required uint32 ch_id  = 2;
  optional ChapterRoit roit = 3;//roit 状态返回
  optional BattleReport info = 4; //4.6.50废弃
  repeated Award awards = 5;
  optional uint32 money = 6;
  optional uint32 exp = 7;
  optional uint64 report_id = 8; //4.6.50
	optional bool is_win = 9; //4.6.50
}

message C2S_Hard_FirstEnterChapter {
  required uint32 id = 1;
}

message S2C_Hard_FirstEnterChapter {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Chapter chapter = 3;
}

// 查询vip礼包信息
message C2S_VipDiscountInfo {
}

message S2C_VipDiscountInfo {
  repeated uint32 id = 1; // 已购买id
  required uint32 ret = 2; // OK
}

// 购买vip礼包
message C2S_BuyVipDiscount {
  required uint32 id = 1;
}

message S2C_BuyVipDiscount {
  required uint32 ret = 1; // OK
}

message C2S_GetTencentReward {
  required uint32 award_id = 1;
  required uint64 server_id = 2;
}

message C2S_GetCrossBattleInfo {

}

enum CROSS_USERPK_STATE{
  SERROR = 0;//错误
  SZERO = 1;//平常
  SSCORE = 2;//积分赛
  SWAIT1 = 3;//休息阶段1
  SLADDER = 4;//争霸赛
  SWAIT2 = 5;//休息阶段2
}

message S2C_GetCrossBattleInfo {
  required uint32 ret = 1;
  optional uint32 state = 2;
  optional uint32 group = 3;
  optional bool has_arena = 4;
}

message C2S_GetCrossBattleTime {

}

message S2C_GetCrossBattleTime {
  required uint32 ret = 1;
  repeated BattleTime times = 2;
}

//message C2S_GetCrossBattleGroup {
//}
//
//message CrossBattleGroup {
//  required uint32 group = 1;
//  required uint32 num = 2;
//}
//
//message S2C_GetCrossBattleGroup {
//  required uint32 ret = 1;
//  repeated CrossBattleGroup groups = 2;
//}

message C2S_SelectCrossBattleGroup {
  required uint32 group = 1;
}

message S2C_SelectCrossBattleGroup {
  required uint32 ret = 1;
  required uint32 group = 2;
}

message C2S_EnterScoreBattle {

}

message S2C_EnterScoreBattle {
  required uint32 ret = 1;
  optional uint32 score = 2;//积分
  optional uint32 rank = 3;//排名
  optional uint32 refresh_cost = 4;//刷新所需要元宝
  optional uint32 battle_cost = 5;//刷新挑战对手CD所需要的元宝
  optional uint32 wins = 6;//今日连胜次数
  optional uint32 refresh_count = 7;//可刷新次数
  optional uint32 battle_count = 8;//可挑战次数
  optional uint32 max_wins = 9;//今日最大连胜次数
  optional uint32 buy_battle = 10;//剩余可购买挑战次数
}

message C2S_GetCrossBattleEnemy {
  required bool is_refresh = 1;
}

message CrossSingleUser {
  required uint32 id = 1;
  required string name = 2;
  required uint32 main_role = 3;
  required uint32 dress_id = 4;
  required uint64 fight_value = 5;
  required uint64 sid = 6;
  required string sname = 7;
  required uint32 group = 8;
  required uint32 c_type = 9;//约定type 1最高 2中等 3最低
  required bool has_fight= 10;
  optional uint32 clid = 11;
  optional uint32 cltm = 12;
  optional bool   clop = 15;
  optional uint32 wid = 16;
	optional string cname =17;
	optional uint32 wing_moult_lv = 18; //换羽等级
  optional uint32 off_day = 19;//6.3.0-回归玩家离线天数
  optional uint32 job_id = 20;//6.4.0-主角职业id 
  optional uint32 job_level = 21;//6.4.0-主角职业等级
}

message S2C_GetCrossBattleEnemy {
  required uint32 ret = 1;
  optional uint32 refresh_count = 2;
  repeated CrossSingleUser users = 4;
}

message C2S_ChallengeCrossBattleEnemy{
    required uint64 sid = 1;
    required uint32 user_id = 2;
    optional bool skip_battle = 3; //是否跳过战报
}

message S2C_ChallengeCrossBattleEnemy {
    required uint32 ret = 1;
    required uint64 sid = 2;
    required uint32 user_id = 3;
    optional BattleReport info = 4;	//废弃
    optional uint32 battle_count = 5;//剩余战斗次数
    repeated Award awards = 6;
    optional uint32 max_wins = 7;
    optional uint32 wins = 8;
    optional uint32 score = 9;
    optional uint32 rank = 10;
    optional uint32 add_point = 11;
    optional uint32 add_score = 12;
    optional uint64 report_id = 13;
	optional bool is_win = 14; //4.6.50
    optional bool skip_battle = 15; //是否跳过战报
}

message C2S_GetWinsAwardInfo {

}

message S2C_GetWinsAwardInfo {
  required uint32 ret = 1;
  repeated uint32 ids = 2;//已经领过的
}

message C2S_FinishWinsAward {
  required uint32 id = 1;	//奖励的ID（0为一键领取）
}

message S2C_FinishWinsAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_GetCrossBattleRank {
  required uint32 group = 1;
}

message S2C_GetCrossBattleRank {
  required uint32 ret = 1;
  required uint32 group = 2;
  repeated CrossSingleRank ranks = 3;
}

message CrossSingleRank {
  required uint32 user_id = 1;
  required uint64 sid = 2;
  required string name = 3;
  required string sname = 4;
  required uint32 main_role = 5;
  required uint32 dress_id = 6;
  required uint32 score = 8;
  required uint32 max_wins = 9;
  required uint64 fight_value = 10;
  optional uint32 rank = 11;
  optional uint32 clid = 12;
  optional uint32 cltm = 13;
  optional bool   clop = 15;
}

message C2S_CrossCountReset {
  required uint32 reset_type = 1;//1代表刷新次数 2代表挑战次数
  optional uint32 count = 2;//购买的量
}

message S2C_CrossCountReset {
  required uint32 ret = 1;
  required uint32 reset_type = 2;
  optional uint32 refresh_cost = 3;//刷新所需要元宝//根据TYPE来 哪个Type 哪个有值
  optional uint32 refresh_count = 4;//可刷新次数
  optional uint32 battle_cost = 5;//刷新挑战对手CD所需要的元宝
  optional uint32 battle_count = 6;//可挑战次数
  optional uint32 buy_battle = 7;//剩余可购买挑战次数
  optional uint32 count = 8;
}

message S2C_FlushCrossContestScore {
  required uint32 user_id = 1;
  required uint32 score = 2;
}

message S2C_FlushCrossContestRank {
  required uint32 user_id = 1;
  required uint32 rank = 2;
}

message C2S_RecycleDress {
  required uint32 id = 1;
  required uint32 type = 2; // 0:重生 1:重生预览
}
message S2C_RecycleDress {
  required uint32 ret = 1;
  repeated Award award = 2;
  required uint32 type = 3; // 0:重生 1:重生预览
}


message C2S_ChangeTitle {
  required uint32 id = 1; //装备称号ID
}

message S2C_ChangeTitle {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GetTimeDungeonList {
}

message S2C_GetTimeDungeonList {
  required uint32 ret = 1;
  repeated TimeDungeonInfo info = 2;
}

message S2C_FlushTimeDungeonList {
  repeated TimeDungeonInfo info = 1;
}

message TimeDungeonInfo {
  required uint32 type_id = 1; //副本类型ID
  required uint32 start_time = 2; //开始时间戳
  required uint32 end_time = 3; //结束时间戳
}

message C2S_GetTimeDungeonInfo {
}

message S2C_GetTimeDungeonInfo {
  required uint32 ret = 1;
  optional UserTimeDungeonInfo info = 2;
}

message UserTimeDungeonInfo {
  required uint32 id = 1; //副本ID
  required uint32 time = 2; //副本初始化时间戳
  required uint32 dungeon_index = 3; //关卡进度(1-8,0:已通关)
  required uint32 buff_id = 4; //鼓舞ID(0为未鼓舞)
}

message C2S_AddTimeDungeonBuff {
  required uint32 id = 1; //副本ID
  required uint32 dungeon_index = 2; //关卡进度(1-8)
  required uint32 buff_id = 3; //鼓舞ID
}

message S2C_AddTimeDungeonBuff {
  required uint32 ret = 1;
  optional UserTimeDungeonInfo info = 2;
}

message C2S_AttackTimeDungeon {
  required uint32 id = 1; //副本ID
  required uint32 dungeon_index = 2; //关卡进度(1-8)
}

message S2C_AttackTimeDungeon {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2; //4.6.50废弃
  optional UserTimeDungeonInfo info = 3;
  repeated Award award = 4;
  optional uint64 report_id = 5; //4.6.50
	optional bool is_win = 6; //4.6.50
}

// 查
message C2S_RichInfo {
}
message S2C_RichInfo {
  required uint32 step = 1;
  required uint32 score = 2;
  required bool got_reward = 3; // 是否已领取排行榜奖励
  repeated uint32 shop_item = 4; // 商店物品
  repeated uint32 shop_item_count = 5; // 商店物品数量
  repeated uint32 round_award = 6;
  required uint32 start = 7;
  required uint32 end = 8;
  required uint32 present = 9;
  optional uint32 bought_times = 10; // 今日已购买次数
}

// 走
message C2S_RichMove {
  required uint32 dice = 1;     // 非0为遥控骰子，骰子可选值为1到6
  required uint32 count = 2;	// 1:走1次 10:走10次
  required uint32 step = 3; // 最终总步数
}
message S2C_RichMove {
  required uint32 ret = 1;
  repeated uint32 dice = 2;     // 骰子结果
  repeated int32 reroll = 3; // 再次移动，可能有多次
  repeated Award award = 4; // 奖励
  repeated uint32 goods = 5; // 新增货物
  repeated uint32 count = 6; // 新增货物数量
  repeated uint32 event = 7; // 事件
}

// 买
message C2S_RichBuy {
  required uint32 id = 1;
  required uint32 count = 2;
}
message S2C_RichBuy {
  required uint32 ret = 1;
}

// 领
message C2S_RichReward {
  required uint32 type = 1;     // 0:排行奖励 1:圈数奖励
  optional uint32 id = 2;     // 圈数奖励对应配置id
}

message S2C_RichReward {
  required uint32 ret = 1;
}

// 榜
message C2S_RichRankingList {
}
message S2C_RichRankingList {
  repeated WheelRanking ranking = 1;
  required uint32 ret = 2;
}


//动态更新代码协议
message C2S_GetCodeId {

}
message S2C_GetCodeId {
   required string id = 1;
}

message C2S_GetCode {

}

message S2C_GetCode {
   required string code = 1;
}
message C2S_SetCDLevel {
   required uint32 level = 1;
}

message S2C_SetCDLevel {
   required uint32 ret = 1;
}

message C2S_UpdateFightValue {
}
message C2S_GetSpreadId {
}
message S2C_GetSpreadId {
    required uint32 ret = 1;
    required string id = 2;
}
message C2S_RegisterId {
    required string id = 1;
}
message S2C_RegisterId {
    required uint32 ret = 1;
    required string invitor_code = 2;
}
message C2S_InvitorGetRewardInfo {

}
message InvitorRewardInfo {
    required uint32 reward_id = 1;  //奖励id
    required uint32 invited_qua = 2;  //玩家品质
    required string invited_name = 3;  //玩家信息
    required uint32 invited_id = 4;  //玩家所在的服
    required uint64 invited_sid = 5;  //玩家所在的服
}
message S2C_InvitorGetRewardInfo {
    required uint32 score = 1;
    required uint32 sum_score = 2;
    required uint32 invited_num = 3;
    repeated InvitorRewardInfo can_reward = 4 ;  //可以领取奖励信息
    repeated InvitorRewardInfo has_reward = 5 ;  //已经领取的奖励信息
}
message C2S_InvitorDrawScoreReward { }
message S2C_InvitorDrawScoreReward {
    required uint32 rret = 1; //1 成功,其他为错误码
}
message C2S_InvitorDrawLvlReward {
    required uint32 reward_id = 1;  //奖励id
    required uint32 invited_id = 2;
    required uint64 invited_sid = 3;
    required string invited_name = 4;
    required uint32 invited_qua = 5;
}
message C2S_InvitedDrawReward {
    required uint32 id = 1;
}
message C2S_InvitedGetDrawReward {

}
message InvitedReward {
    required uint32 id = 1;
    required bool stat = 2; //1可以领，0已经领
}
message S2C_InvitedGetDrawReward {
    repeated InvitedReward list = 1;
}
message C2S_QueryRegisterRelation {
}
message S2C_QueryRegisterRelation {
    required bool rret = 1;  //1已绑定，0未绑定
}
message S2C_InvitorDrawLvlReward {
    required uint32 ret = 1;  //1领奖成功，其他为错误码
}
message S2C_InvitedDrawReward{
    required uint32 ret = 1;  //1领奖成功，其他为错误码
}
message C2S_GetCrossArenaInfo {
}

message S2C_GetCrossArenaInfo {
  required uint32 ret = 1;
  optional bool invited = 2;//有没有参赛资格
  optional uint32 challenge_count = 3;//剩余挑战次数
  optional uint32 buy_count = 4;//剩余购买次数
  optional uint32 buy_cost = 5;
}

message C2S_GetCrossArenaInvitation {
}

message S2C_GetCrossArenaInvitation {
  required uint32 ret = 1;
  optional uint32 invite_type = 2;//1跨服获得 2竞技场获得
  optional uint32 rank = 3;//排名
  optional uint32 group = 4;//阵营
  //optional string sname = 5;//服务器名称
  optional uint32 time = 5;
}
//以这个为基准了 之前的算了 后面简版USER(非战斗)都用这个结构体
//2个必有字段
message CrossUser {
  required uint32 id = 1;
  required uint64 sid = 2;
  optional string name = 3;
  optional string sname = 4;
  optional uint32 dress_id = 5;
  optional uint32 main_role = 6;
  optional uint64 fight_value = 7;
  optional uint32 sp1 = 8;//特殊字段 前后端对应 模块内对应
  optional uint32 sp2 = 9;
  optional uint32 fight_pet = 10;//战宠
  optional uint32 level = 11;//等级 //这个后面补的 有些地方还是都需要等级的 之前有2个模块用了SP2字段作为等级
  optional uint32 fid = 12;//头像框
  optional uint32 vip = 13;//
  optional uint32 sp3 = 14;
  optional uint32 sp4 = 15;
  optional uint32 sp5 = 16;
  optional uint32 sp6 = 17;
  optional uint32 sp7 = 18;
  optional uint32 sp8 = 19;
  optional uint32 clid = 20;
  optional uint32 cltm = 21;
  optional bool   clop = 22;
  optional string cname = 23;//军团名//排行榜用
  optional uint32 wid	= 24;
  optional uint32 sp9 = 25;
  optional uint32 sp10 = 26;
  repeated uint32 sp = 27;
  optional uint32 sp11 = 28;
  optional uint32 home_level = 29;
  optional uint32 cid = 30;//军团id
  optional uint64 sp12 = 31;
  optional uint32 alliance_id = 32;
  optional uint32 extend_level = 33;
  optional string alliance_name = 34;
  optional uint32 world_war_city_title = 35;
	optional uint32 sp13 = 36;
	optional uint32 corp_size = 37;	//军团成员数
	optional string corp_lname = 38;	//军团长
  repeated string sp14 = 42; //自定义字符串切片
  repeated uint64 sp64 = 43;
  optional uint32 skin_id = 44;  //官邸皮肤
  optional uint32 skin_ts = 45;  //官邸时间戳
  optional uint32 alliance_level = 46;	//联盟等级
  optional bool rank_use_sp12 = 47;	//common_rank时使用sp12
  optional uint32 super_server = 48; //g_om_config.SuperServer
  optional uint32 wing_moult_lv = 49; //换羽等级
  optional uint32 off_day = 50; //6.3.0-老玩家-离线天数
  optional uint32 job_id = 51;//6.4.0-主角职业id 
  optional uint32 job_level = 52;//6.4.0-主角职业等级

}

message C2S_GetCrossArenaBetsInfo {
}

message S2C_GetCrossArenaBetsInfo {
  required uint32 ret = 1;
  optional uint32 total_bet = 2;//总奖池
  optional uint32 bet = 3;//玩家押注数量
  repeated CrossUser bet_users = 4;//押注的玩家sp1->押注级别bet_rank
}

message C2S_GetCrossArenaBetsList {
}

message S2C_GetCrossArenaBetsList {
  required uint32 ret = 1;
  repeated CrossUser users = 2;//sp1->关注度
}

message C2S_CrossArenaPlayBets {
  required uint32 user_id = 1;
  required uint64 sid = 2;
  required uint32 bet_rank = 3;
}

message S2C_CrossArenaPlayBets {
  required uint32 ret = 1;
  required uint32 user_id = 2;
  required uint64 sid = 3;
  required uint32 bet_rank = 4;
  repeated CrossUser users = 5;
}

message C2S_GetCrossArenaRankTop {
}

message S2C_GetCrossArenaRankTop {
  required uint32 ret = 1;
  repeated CrossUser users = 2;//sp1->排名rank
}

message C2S_GetCrossArenaRankUser {
}

message S2C_GetCrossArenaRankUser {
  required uint32 ret = 1;
  optional uint32 rank = 2;//玩家自身排行
  repeated CrossUser users = 3;//sp1->排名rank
}

message C2S_CrossArenaRankChallenge {
  required uint32 challenge_rank = 1;
}

message S2C_CrossArenaRankChallenge {
  required uint32 ret = 1;
  required uint32 challenge_rank = 2;
  //optional uint32 origin_rank = 3;//玩家原来
  //optional uint32 new_rank = 4;//玩家新排名
  optional BattleReport battle_report = 5;	//废弃
  //repeated CrossUser users = 6;//sp1->排名rank
  optional uint32 challenge_count = 7;
  repeated Award awards = 8;
  optional uint64 report_id = 9;
}

message C2S_CrossArenaCountReset {
  required uint32 count = 1;
}

message S2C_CrossArenaCountReset {
  required uint32 ret = 1;
  required uint32 count = 2;
  optional uint32 challenge_count = 3;
  optional uint32 buy_count = 4;//已经购买
  optional uint32 buy_cost = 5;//下次购买价格
}

message C2S_GetCrossArenaBetsAward{
}

message S2C_GetCrossArenaBetsAward{
  required uint32 ret = 1;
  optional bool award = 2;
  optional uint32 award_id = 3;
  optional uint32 award_size =4;
  optional uint32 bet = 5;
}

message C2S_CrossArenaServerAwardInfo {
}

message S2C_CrossArenaServerAwardInfo {
  required uint32 ret = 1;
  repeated uint32 ids = 2;
}

message C2S_FinishCrossArenaServerAward {
  required uint32 id = 1;
}

message S2C_FinishCrossArenaServerAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_FinishCrossArenaBetsAward {
}

message S2C_FinishCrossArenaBetsAward {
  required uint32 ret = 1;
  optional bool award = 2;
  repeated Award awards = 3;
}

message C2S_CrossArenaAddBets {
  required uint32 size = 1;
}

message S2C_CrossArenaAddBets {
  required uint32 ret = 1;
  required uint32 size = 2;
  optional uint32 total = 3;
}

message C2S_GetCrossUserDetail {
  required uint32 user_id = 1;
  required uint64 sid = 2;
}

message S2C_GetCrossUserDetail {
  required uint32 ret = 1;
  required uint32 user_id = 2;
  required uint64 sid = 3;
  optional ArenaBattleUser user = 4;
	optional uint32 shura_field_score = 5;	//4.7.0 修罗道场积分
}

message RebelBoss {
	required uint32 id =1;
	required uint64 hp = 2;
	required uint64 max_hp = 3;
	required uint32 level = 4;
	optional string killer_name = 5;
	optional uint32 killer_time = 6;
	required uint32 last_att_index = 7;
	required uint32 produce_time = 8;  //BOSS产生时间
}

message C2S_EnterRebelBossUI {
}

message S2C_EnterRebelBossUI {
	required uint32 ret = 1;
	required uint64 total_honor = 2;
	required uint32 group_thonor_rank = 3;
	required uint64 max_harm = 4;
	required uint32 group_mharm_rank = 5;
	required uint32 corp_rank = 7;
	required RebelBoss rebel_boss = 8;
	required uint32 state = 9;                     //0:活动关闭 1:活动期间
	repeated RebelBossRank group_first_ranks = 10; //各阵容累计荣誉排名第一
	optional uint32 att_count = 11;                //攻击次数
	optional uint32 remain_pur_count = 13;         //剩余购买挑战次数
	optional uint32 group = 14;                    //所在阵容
	optional uint32 end_time = 15;                 //state=1时，活动剩余时间
	optional uint32 gold = 16; //产出元宝
	optional uint32 group_gold_rank = 17;
	optional uint32 cross_static = 18;						//跨服叛军状态
	optional bool canEnterCross = 19; 	//玩家是否可以进入跨服叛军boss
}

message C2S_FlushBossACountTime {
}

message S2C_FlushBossACountTime {
	required uint32 ret = 1;
	required uint32 attack_count_time = 2;  //挑战次数刷新时间
}

message C2S_SelectAttackRebelBossGroup {
	required uint32 group  = 1;
}

message S2C_SelectAttackRebelBossGroup {
	required uint32 ret = 1;
	required uint32 group  = 2;
}

message C2S_ChallengeRebelBoss {
	required uint32 time = 1; //BOSS产生时间
  optional bool is_need_report = 2; //是否需要战报
}

message S2C_ChallengeRebelBoss {
	required uint32 ret = 1;
	optional BattleReport report = 2; //4.6.50废弃
	optional uint64 honor = 3;   //荣誉
	optional uint64 harm = 4;    //伤害
	optional Award faward = 5;   //第一次攻击奖励
	optional Award kaward = 6;   //击杀奖励
	optional uint32 crit_id  = 7;//攻击奖励
  optional uint64 report_id = 8; //4.6.50
	optional bool is_need_report = 9;
}

message C2S_ChallengeRebelBossLocal {
  required uint32 boss_type = 1; //BOSS tp 1 低级，2 高级
  optional bool is_need_report = 2; //是否需要战报
}

message S2C_ChallengeRebelBossLocal {
  required uint32 ret = 1;
  optional uint64 honor = 2;   //荣誉
  optional uint64 harm = 3;    //伤害
  optional Award faward = 4;   //第一次攻击奖励
  optional Award kaward = 5;   //击杀奖励
  optional uint32 crit_id  = 6;//攻击奖励
  optional uint64 report_id = 7;
  optional bool is_win = 8;
}

message RebelBossRank {
	required uint32 id = 1;
	required uint64 fight_value = 2;  //战力
	required uint32 mode = 3; //1:累计荣誉 2:最高伤害
	required uint64 value = 4;
	required uint32 rank = 5;
	required string name = 6;
	required string corp_name = 7;
	required uint32 user_id = 8;
	required uint32 dress_id = 9;
	required uint32 group = 10;
	optional uint32 clid  = 11;
	optional uint32 cltm  = 12;
	optional bool	clop  = 13;
}

message RebelBossSimpleRank {
	required uint32 rank = 1;
	required uint32 group = 2;
	required uint64 value = 3; //累计荣誉,最高伤害
}

enum REBEL_BOSS_RANK_TYPE {
	RANK_HONOR = 1;
	RANK_MAX_HARM = 2;
	RANK_GOLD = 3;
}

message C2S_RebelBossRank {
	required uint32 mode = 1;
	required uint32 group = 2;
}

message S2C_RebelBossRank {
	required uint32 ret = 1;
	required uint32 mode = 2;
	required uint32 group = 3;
	repeated RebelBossRank rbh_ranks = 4;    //累计荣誉排名
	repeated RebelBossRank rbmh_ranks = 5;   //最高伤害排名
	optional RebelBossSimpleRank rbh_my_rank = 6;
	optional RebelBossSimpleRank rbmh_my_rank = 7;
	repeated RebelBossRank rbg_ranks = 8; //元宝产出排名
	optional RebelBossSimpleRank rbg_my_rank = 9;
}

enum REBEL_BOSS_AWARD_TYPE {
	HARM = 1;
	BOSS_LEVEL = 2;
	CORP_HONOR = 3;
}

message C2S_RebelBossAwardInfo {
	required uint32 mode = 1; //1:荣誉奖励 2:BOSS等级奖励 3:军团奖励
}

message S2C_RebelBossAwardInfo {
	required uint32 ret = 1;
	required uint32 mode = 2;
	repeated uint32 status = 3; //info id
}

message C2S_RebelBossAward {
	required uint32 mode = 1;	//1:击杀奖励 2:等级奖励 3:军团奖励
	required uint32 id = 2;
}

message S2C_RebelBossAward {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated Award awards = 3;
}

message AttackRebelBossInfo {
	required string name = 1;
	required uint64 harm = 2;
}

//5s 刷新一次BOSS信息
message C2S_RefreshRebelBoss {
	required uint32 last_att_index = 1;
}

message S2C_RefreshRebelBoss {
	required uint32 ret = 1;
	required RebelBoss rebel_boss = 2;
	repeated AttackRebelBossInfo infos = 3;
}

message C2S_PurchaseAttackCount {
	required uint32 count = 1;
}

message S2C_PurchaseAttackCount {
	required uint32 ret = 1;
	required uint32 attack_count = 2;    //可攻击次数
	required uint32 remain_pur_count = 3;//剩余购买挑战次数
}

message C2S_GetRebelBossReport {
}

message BossReport {
	required uint32 boss_id = 1;
	required uint32 boss_level = 2;

	optional uint32 time1 = 3;
	optional string name1 = 4;
	optional Award  award1 = 5;

	optional uint32 time2 = 6;
	optional string name2 = 7;
	optional Award  award2 = 8;
}

//暂定显示10条
message S2C_GetRebelBossReport {
	required uint32     ret = 1;
	repeated BossReport reports = 2;
}

message C2S_RebelBossCorpAwardInfo {
}

message RBCRS {
	required uint32 activity_status = 1; //1:活动开启中 0:活动未开启
	required uint32 award_status = 2;    //1:已经领取   0:未领取
	required uint32 condition_status = 3;//1:满足条件   0:不满足条件
}

message RebelBoss_CorpRank {
	required uint32 rank = 1;
	required string corp_name = 2;
	required uint64 honor = 3;
	optional RBCRS state = 4;
  optional uint64 sid = 5;
  optional string sname = 6;
}

message CrossGroupRank {
  required uint32 group = 1;
  repeated CrossUser users = 2;
  repeated uint64 score = 3;
}

message S2C_RebelBossCorpAwardInfo {
	required uint32 ret = 1;
	repeated RebelBoss_CorpRank ranks = 2;
	optional RebelBoss_CorpRank my_rank = 3;
}

message C2S_GetRebelBossCrossUserRank {
  required uint32 mode = 1;	//1:荣誉排行榜 2:最大伤害排行榜
}

message S2C_GetRebelBossCrossUserRank {
  required uint32 ret = 1;
  required uint32 mode = 2;
  repeated CrossGroupRank user_rank = 3;
  optional uint32 self_group = 4;
  optional uint32 self_rank = 5;
  optional uint64 self_score = 6;
}

message C2S_GetRebelBossCrossCorpRank {
}

message S2C_GetRebelBossCrossCorpRank {
  required uint32 ret = 1;
  repeated RebelBoss_CorpRank corp_rank = 2;
  optional string self_cname = 3;
  optional uint32 self_rank = 4;
  optional uint64 self_honor = 5;
}

message C2S_RebelBossOneKeyAward {
  required uint32 mode = 1;
}

message S2C_RebelBossOneKeyAward {
  required uint32 ret = 1;
  optional uint32 mode = 2;
  repeated uint32 id = 3;
  repeated Award awards = 4;
}

message C2S_GetBlackcardWarning {
}

message S2C_GetBlackcardWarning {
  required bool warning = 1;
}

// 查询vip日礼包信息
message C2S_VipDailyInfo {
}

message S2C_VipDailyInfo {
  optional uint32 id = 1; // 下个可购买的vip礼包
	required uint32 ret = 2; // 占位, 不然lua解析出错
}

// 购买vip日礼包
message C2S_BuyVipDaily {
}

message S2C_BuyVipDaily {
  required uint32 ret = 1; // OK
}

//限时优惠
message C2S_ShopTimeInfo {

}

message S2C_ShopTimeInfo {
	required uint32 ret = 1;			//返回值，1表示成功，其他表示异常
	required uint32 progress = 2;		//进度条值
	optional uint32 time = 3;			//优惠充值所剩时间
	optional uint32	rechargeId = 4;		//充值Id
	optional uint32	extra_gold = 5;		//额外赠送元宝
}

message C2S_ShopTimeRewardInfo {

}

message S2C_ShopTimeRewardInfo {
	required uint32 ret = 1;				//返回值，1表示成功，其他表示异常
	repeated uint32 welfare_id = 2;			//全服奖励已领取id
	required uint32 recharge_count = 3;		//充值人数
}

message C2S_ShopTimeGetReward {
	required uint32 id = 1;
}

message S2C_ShopTimeGetReward {
	required uint32 ret = 1;
	repeated Award awards = 2;
}

message S2C_ShopTimePurchase {
	required uint32 ret = 1;            //返回值，1表示成功，其他表示异常
    required uint32 progress = 2;       //进度条值
    required uint32 time = 3;           //优惠充值所剩时间
    required uint32 rechargeId = 4;     //充值Id
	optional uint32	extra_gold = 5;		//额外赠送元宝
}

message C2S_ShopTimeStartTime {

}

message S2C_ShopTimeStartTime {
	required uint32 ret = 1;
	required uint32 start_time = 2;		//开服时间
}

message C2S_GetUserRice {
}

message S2C_GetUserRice {
  required uint32 ret = 1;
}

message S2C_UpdateUserRice {
  required UserRice user_rice = 1;
}

message C2S_FlushRiceRivals {
}

message S2C_FlushRiceRivals {
  required uint32 ret = 1;
}

message C2S_RobRice {
  required uint32 user_id = 1;
}

message S2C_RobRice {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2; //4.6.50废弃
  repeated Award rewards = 3;
  optional uint32 rob_init_rice = 4; //抢夺到的流动粮草
  optional uint32 rob_growth_rice = 5; //强夺到的固定粮草
  optional uint32 rob_crit_rice = 6; //额外获得的暴击粮草
  optional uint64 report_id = 8; //4.6.50
}

message S2C_ChangeUserRice {
  required uint32 user_id = 1;
  required uint32 init_rice = 2;
  required uint32 growth_rice = 3;
  required uint32 rice_refresh_time = 4;
  required uint32 rice_rank = 5;
}

message C2S_GetRiceEnemyInfo {
}

message S2C_GetRiceEnemyInfo {
  required uint32 ret = 1;
  repeated RiceEnemy enemys = 2;
}

message C2S_RevengeRiceEnemy {
  required uint32 enemy_id = 1;
}

message S2C_RevengeRiceEnemy {
  required uint32 ret = 1;
  required uint32 enemy_id = 2;
  optional BattleReport battle_report = 3; //4.6.50废弃
  repeated Award rewards = 4;
  optional uint32 rob_init_rice = 5; //抢夺到的流动粮草
  optional uint32 rob_growth_rice = 6; //强夺到的固定粮草
  optional uint32 rob_crit_rice = 7; //额外获得的暴击粮草
  optional uint64 report_id = 8; //4.6.50
}

message C2S_GetRiceAchievement {
  required uint32 achievement_id = 1;
}

message S2C_GetRiceAchievement {
  required uint32 ret = 1;
  required uint32 achievement_id = 2;
  repeated Award rewards = 3;
}

message C2S_GetRiceRankList {
}

message S2C_GetRiceRankList {
  required uint32 ret = 1;
  repeated RiceRankUser rank_list = 2;
  optional uint32 my_rank = 3;
}

message C2S_GetRiceRankAward {
}

message S2C_GetRiceRankAward {
  required uint32 ret = 1;
  optional uint32 rank = 2;
  repeated Award rewards = 3;
}

message C2S_BuyRiceToken {
  required uint32 token_type = 1; //0:抢粮令,1:复仇令
  required uint32 num = 2; //购买次数
}

message S2C_BuyRiceToken {
  required uint32 ret = 1;
}

message S2C_FlushRiceRank {
  required uint32 user_id = 1;
  required uint32 rice_rank = 2;
}

message C2S_PushSingleInfo{
}

message S2C_PushSingleInfo{
	optional string content		= 1;
	optional uint32 pushtime	= 2;
	optional uint32 level		= 3;	// 如果为0则表示都可以
	optional uint32 vip_level	= 4;	// 同上解释
}

message C2S_GetInvitorName {
    required string invitor_code = 1;
}
message S2C_GetInvitorName {
    required uint32 ret = 1;
    required uint64 sid = 2;
    required string name = 3;
}

message SummaryTask {
  optional uint32  task_id = 1;
  optional uint32  task_st = 2;
  optional uint64  task_val = 3;
}

message C2S_GetUserSummarys {
}
message S2C_GetUserSummarys {
  required uint32 ret = 1;
  optional uint32 group = 2;
  repeated SummaryTask  tasks = 3;
  optional uint32 is_supper_server = 4; //热血服标记
}

message C2S_CompUserSummary {
  optional uint32 task_id = 1;
}

message S2C_CompUserSummary {
  required uint32 ret = 1;
  repeated Award  awards = 2;
  optional SummaryTask task = 3;
}

message S2C_UserSummaryNtf {
  optional SummaryTask task = 1;
}

message MonthFundTime {
	required uint32 recharge_start_time = 1;
	required uint32 recharge_end_time = 2;
	required uint32 reward_start_time = 3;
	required uint32 reward_end_time = 4;
}

message C2S_GetMonthFundBaseInfo {

}

message S2C_GetMonthFundBaseInfo {
	required uint32 ret = 1;
	required MonthFundTime mfd_time = 2;	//配置时间
	required uint32 fund_kind = 3;			//基金类型 1表示大基金 2表示小基金 3表示大小基金
	required bool	activate = 4;			//是否激活双月卡
	required bool	buy_big = 5;			//大基金是否购买
	required bool	buy_small = 6;			//小基金是否购买
}

message MonthFund {
	required uint32 day = 1;				//当前是第几天
	repeated uint32 award_days_big = 2;		//大基金已领取的天
	repeated uint32 award_days_small = 3;	//小基金已领取的天
}

message C2S_GetMonthFundAwardInfo {
}

message S2C_GetMonthFundAwardInfo {
	required uint32 ret = 1;
	required MonthFund fund = 2;
}

message C2S_GetMonthFundAward {
	required uint32 day = 1;
	required uint32 type = 2;	//1表示288档，2表示128档
}

message S2C_GetMonthFundAward {
	required uint32 ret = 1;
	required MonthFund fund = 2;
}

message CorpChapterSnapShot {
  required uint32 id = 1;
  required uint64 hp = 2;
  required uint64 max_hp = 3;
}

message C2S_SetNewCorpRollbackChapter {
  required bool rollback = 1;
}

message S2C_SetNewCorpRollbackChapter {
  required uint32 ret = 1;
  required bool rollback = 2;
}

message C2S_CorpUpLevel {
}

message S2C_CorpUpLevel {
  required uint32 ret = 1;
  required uint32 level = 2;
  required uint32 exp = 3;
}

message S2C_CorpUpLevelBroadcast {
  required uint32 level = 1;
  required uint32 exp = 2;
}

message CorpTech {
  required uint32 tech_id = 1;
  required uint32 tech_level = 2;
}

message C2S_GetCorpTechInfo {

}

message S2C_GetCorpTechInfo {
  required uint32 ret = 1;
  repeated CorpTech corp_techs = 2;
  repeated CorpTech user_techs = 3;
}

message C2S_DevelopCorpTech {
  required uint32 tech_id = 1;
}

message S2C_DevelopCorpTech {
  required uint32 ret = 1;
  required uint32 tech_id = 2;
  required uint32 tech_level = 3;
  required uint32 exp = 4;
}

message S2C_DevelopCorpTechBroadcast {
  repeated CorpTech corp_techs = 1;
}

message C2S_LearnCorpTech {
  required uint32 tech_id = 1;
}

message S2C_LearnCorpTech {
  required uint32 ret = 1;
  required uint32 tech_id = 2;
  required uint32 tech_level = 3;
}

message C2S_GetNewCorpChapter {

}

message S2C_GetNewCorpChapter {
  required uint32 ret = 1;
  repeated CorpChapterSnapShot chapters = 2;//今天能打的章节ID
  repeated uint32 finish_ch= 3;//已经通过的军团副本
  optional uint32 chapter_count = 4;//玩家剩余挑战次数
  optional uint32 reset_cost = 5;//购买需要的元宝
  repeated uint32 finish_awards = 6;//已经领取的通关奖励
  optional bool rollback_chapter = 7; //次日军团副本回退章节
  optional uint32 reset_count = 8; //军团副本已经重置次数
}

message C2S_GetNewCorpDungeonInfo {
  required uint32 chapter_id = 1;//今日攻打章节的ID
}

message S2C_GetNewCorpDungeonInfo {
  required uint32 ret = 1;
  required uint32 chapter_id = 2;
  repeated CorpDungeon dungeon = 3;
}

message C2S_ExecuteNewCorpDungeon {
  required uint32 id = 1;//副本ID
}

message S2C_ExecuteNewCorpDungeon {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional BattleReport info = 4;	//废弃
  optional CorpDungeon dungeon = 5;
  optional uint64 harm = 7;
  optional uint32 corp_point = 8;
  repeated Award final_award = 9;
  optional uint32 star = 10;
  optional uint64 report_id = 11;
}

message S2C_FlushNewCorpDungeon {
  optional CorpDungeon dungeon = 1;
  //optional uint32 hp = 2;
  optional string name = 3;
  optional bool last_hit = 4;
  optional uint64 harm = 5;
}

message C2S_GetNewDungeonAwardList {
  required uint32 dungeon_id = 1;//副本ID
}

message S2C_GetNewDungeonAwardList {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  optional bool has_award = 3;//玩家有没有砸过彩蛋
  repeated DungeonAward list = 4;
  optional bool has_auth = 5;//玩家今天有没有领奖的权利//用来区别军团副本结束后加入的玩家
}

message C2S_GetNewDungeonAward {
  required uint32 dungeon_id = 1;
  required uint32 index = 2;//客户端需求
}

message S2C_GetNewDungeonAward {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  required uint32 index = 3;
  optional bool has_award = 4;//砸蛋后刷回来
  optional DungeonAward da = 5;
  repeated Award awards = 6;
}

message C2S_GetNewDungeonCorpMemberRank {

}

message S2C_GetNewDungeonCorpMemberRank {
  required uint32 ret = 1;
  repeated CorpChapterRank ranks = 3;
}

message S2C_FlushNewDungeonAward {
  optional uint32 dungeon_id = 1;
  optional DungeonAward da = 2;//刷新砸蛋信息
}

message C2S_ResetNewDungeonCount {
  required uint32 cnt = 1;
}

message S2C_ResetNewDungeonCount {
  required uint32 ret = 1;
  optional uint32 chapter_count = 2;//玩家剩余挑战次数
  optional uint32 reset_cost = 3;//购买需要的元宝
  optional uint32 reset_count = 4; //已经购买次数
  optional uint32 cnt = 5; //请求的cnt
}

message C2S_GetNewChapterAward {
  required uint32 id = 1;
}

message S2C_GetNewChapterAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_GetNewDungeonAwardHint {

}

message AwardHint {
  required uint32 id = 1;//dungeon id
  required bool has_award = 2;//玩家有没有砸过彩蛋
  required bool has_auth = 3;//玩家今天有没有领奖的权利//用来区别军团副本结束后加入的玩家
  required bool is_finish = 4;//章节是否完成
  optional uint32 award_id = 5;
}

message S2C_GetNewDungeonAwardHint {
  required uint32 ret = 1;
  repeated AwardHint hints = 2;
}
message C2S_TreasureSmelt {
    required uint32 index = 1;    //treasure_fragment_smelt_info.xml中的id
    repeated uint32 treasure_ids = 2;   //服务器限定最多为5个
}
message S2C_TreasureSmelt {
    required uint32 ret = 1;
    optional uint32 fragment_num = 2; //碎片数量
}
message C2S_TreasureForge {
    required uint32 id = 1;      //treasure index id
}
message S2C_TreasureForge {
    required uint32 ret = 1;     //此次操作的结果
    required uint32 id = 2;            //treasure index id
    required uint32 forge_id = 3;
}

message C2S_GetNewCorpChapterRank {
}

message S2C_GetNewCorpChapterRank {
  required uint32 ret = 1;
  repeated CorpChapterIdRank ranks= 2;
}
// 查看限时抽将现在处于哪个阵营抽取状态
message C2S_ThemeDropZY {
}

message S2C_ThemeDropZY {
	required uint32 ret					=	1;	// // 1.RET_OK   2.RET_IS_NOT_UP_TO_LEVEL
	optional uint32 zy_cycle			=	2;// 0~7 魏蜀吴群(各2天)
	optional uint32 star_value			=	3;	// 星运值
	optional uint32 left_consume_times	=	4;	// 剩余消费次数
	optional uint32 left_free_times		=	5;	// 剩余免费次数
}

// 占星
message C2S_ThemeDropAstrology {
	required uint32 type				=	1;	// 0:免费	1:一次  2:十次
	required uint32 zy_cycle			=	2;// 0~7 魏蜀吴群(各2天)
}

// 每次占星的结果
message AstrologyResult {
	required uint32 star_value			=	1;	// 星运值
	required uint32 knight_id			=	2;	// 抽中碎片对应的武将id
	required Award	award				=	3;
}

message S2C_ThemeDropAstrology {
	required uint32 ret					=	1;	// 背包不足?	等级不足?	此时阵营已变? 次数不足?
	optional uint32 left_consume_times	=	2;	// 剩余的总消费次数
	optional uint32 left_free_times		=	3;	// 剩余的总免费次数
	optional uint32 type				=	4;	// 刚才的占星类型
	optional uint32 sv_sum              =   5;  // 总星运值
	repeated AstrologyResult result		=	6;	// 抽取结果	// 每一个元素对应一次抽取结果
}

// 星运值满1000抽将
message C2S_ThemeDropExtract {
	required uint32 knight_id			=	1;	// 要抽取的武将
	required uint32 zy_cycle			=	2;// 0~7 魏蜀吴群(各2天)
}

message S2C_ThemeDropExtract {
	required uint32 ret					=	1;	// Ok?	Error?	该武将不在该阵营? 星运值不足? 背包不足?
	required uint32 star_value			=	2;  // 星运值
	optional uint32 kid					=	3;	// 新获得的武将信息
}

message SpeXialRankInfo {
  required uint32 user_id = 1;
  required uint32 rank = 2;
  required uint32 score = 3;
  required string name = 4;
  required uint32 base_id = 5;
}

message C2S_GetSpeXialScoreInfo {
}

message S2C_GetSpeXialScoreInfo {
  required uint32 ret = 1;
  optional uint32 score = 2;
  repeated uint32 awards = 3;
}

message C2S_GetSpeXialScoreRank {
}

message S2C_GetSpeXialScoreRank {
  required uint32 ret = 1;
  repeated SpeXialRankInfo rank_list = 2;
  optional uint32 my_rank = 3;
}

message C2S_GetSpeXialScoreAward {
  required uint32 award_id = 1;
}

message S2C_GetSpeXialScoreAward {
  required uint32 ret = 1;
  optional uint32 award_id = 2;
}

message C2S_WushBossInfo {
}
message S2C_WushBossInfo {
  required uint32 active_id = 1;     //无双激活关卡id
  required uint32 first_id = 2;     //首次攻打关卡id
  required uint32 times = 3;     //今日已攻打次数
  required uint32 buy_times = 4;     //今日已购买攻打次数
}

message C2S_WushBossChallenge {
  required uint32 id = 1;     //要挑战的关卡
}
message S2C_WushBossChallenge {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2; //4.6.50废弃
  repeated Award award = 3;
  required uint32 id = 4;
  optional uint64 report_id = 5; //4.6.50
}

message C2S_WushBossBuy {
  optional uint32 cnt = 1;
}
message S2C_WushBossBuy {
  required uint32 ret = 1;
  optional uint32 cnt = 2;
}

message GroupBuyTime {
	required string name = 1;					//活动名字
	required string content = 2;				//活动描述
	required uint32 start_time = 3;
	required uint32 end_time = 4;
	required uint32 award_end_time = 5;
	required uint32 vip_level = 6;
	required uint32 level = 7;
}

message GroupBuyItem {
	required uint32 id = 1;
	required uint32 type = 2;
	required uint32 value = 3;
	required uint32 size = 4;					//每次购买物品数量
	required uint32 initial_price = 5;			//初始价格
	required uint32 initial_off = 6;			//初始折扣
	required uint32 coupon_use_percent = 7;		//最大可用团购券比例
	required uint32 buyer_num_1 = 8;			//购买人数1
	required uint32 off_price_1 = 9;			//折扣1
	required uint32 buyer_num_2 = 10;
	required uint32 off_price_2 = 11;
	required uint32 buyer_num_3 = 12;
	required uint32 off_price_3 = 13;
	required uint32 buyer_num_4 = 14;
	required uint32 off_price_4 = 15;
	required uint32 buy_max_day = 16;			//玩家每日最大购买次数
	required uint32 coupon_give_percent = 17;		//团购券返还比率
	required uint32 level = 18;					//限制等级
	required uint32 vip_level = 19;				//限制vip
}

message GroupBuyItemData {
	required uint32 id = 1;						//id 对应配置表第一个字段
	required uint32 server_count = 2;			//服务器总购买次数
	required uint32 self_count = 3;				//玩家自己的购买次数
}

message C2S_GetGroupBuyConfig {
	required string md5 = 1;
}

message S2C_GetGroupBuyConfig {
	required uint32 ret = 1;
	required string md5 = 2;
//	required GroupBuyTime time_cfg = 3;			//活动时间和限制信息配置
	repeated GroupBuyItem items = 3;			//活动商品配置
}

message C2S_GetGroupBuyMainInfo {

}

message S2C_GetGroupBuyMainInfo {
	required uint32 ret = 1;
	required uint32 score = 2;					//积分
	repeated GroupBuyItemData item_datas = 3;	//商品信息 通过Id 唯一标识
}

message C2S_GetGroupBuyRanking {
	required uint32 type = 1;					//1 表示普通排行榜 2 表示豪华排行榜
	required uint32 max_rank_id = 2;			//最大排名，每次返回10个排名信息，比如前十就填10， 11-20就填20
}

message S2C_GetGroupBuyRanking {
	required uint32 ret = 1;
	required uint32 type = 2;					//1 表示普通排行榜 2 表示豪华排行榜
	required uint32 self_rank_id = 3;			//玩家自己的排名
	required uint32 handred_score = 4;			//第100名的积分
	repeated CrossUser gb_user = 5;				//sp1->排名 sp2->积分
}

message C2S_GetGroupBuyTaskAwardInfo {

}

message S2C_GetGroupBuyTaskAwardInfo {
	required uint32 ret = 1;
	required uint32 self_score = 2;				//当前积分
	required uint32 server_score = 3;			//当前全服购买次数
	required uint32 back_gold = 4;				//返还元宝
	repeated uint32 award_ids = 5;				//已领取奖励id  对应配置表id
}

message C2S_GetGroupBuyTaskAward {
	required uint32 id = 1;						//对应配置表第一个字段
}

message S2C_GetGroupBuyTaskAward {
	required uint32 ret = 1;
	repeated Award awards = 2;
	repeated uint32 award_ids = 3;				//已领取奖励id  对应配置表id
}

message C2S_GetGroupBuyEndInfo {

}

message S2C_GetGroupBuyEndInfo {
	required uint32 ret = 1;
	required uint32 self_rank_id = 2;
	required uint32 self_score = 3;
	required uint32 is_acquired = 4;			//是否领取过排名奖励 0为未领取 1为已领取
	repeated CrossUser gb_user = 5;				//sp1->排名 sp2->积分
}

message C2S_GetGroupBuyRankAward {
}

message S2C_GetGroupBuyRankAward {
	required uint32 ret = 1;
	required uint32 is_acquired = 2;			//是否领取
	repeated Award awards = 3;
}

message C2S_GroupBuyPurchaseGoods {
	required uint32 id = 1;						//对应配置表第一个字段
}

message S2C_GroupBuyPurchaseGoods {
	required uint32 ret = 1;
	required uint32 id = 2;						//购买的物品id 对应配置表第一个字段
	required uint32 self_count = 3;				//玩家的购买次数
	required uint32 server_count = 4;			//服务器的已购买次数
	required uint32 score = 5;					//积分
}

message C2S_GetGroupBuyTimeInfo {
}

message S2C_GetGroupBuyTimeInfo {
	required uint32 ret = 1;
	required GroupBuyTime time_cfg = 2;
}

message C2S_RookieInfo {
}
message S2C_RookieInfo {
  required uint32 create_time = 1;  // 从开服到注册时间的秒数
  repeated uint32 award_id = 2;     // 已领取的id
  required bool active = 3;         // 活动是否开启
}

message C2S_GetRookieReward {
  required uint32 id = 1;
}
message S2C_GetRookieReward {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_SetPictureFrame {
  required uint32 fid = 1;			// 请求切换的头像框ID
}

message S2C_SetPictureFrame {
  required uint32 ret = 1;
  optional uint32 fid = 2;			// 设置成功后的头像框ID
}

message C2S_SetChatBubble {
	required uint32 id = 1;			//泡泡配置id
}

message S2C_SetChatBubble {
	required uint32 ret = 1;
	required uint32 id = 2;		//返回成功后直接替换更新
}

message BattleFieldSample {
  required uint32 id = 1;
  required uint64 sid = 2;
  required uint32 user_id = 3;
  required uint64 fight_value = 4;
  optional uint32 hp_rate = 5;//0=>击破 100未攻打 中间数字攻击过
  optional string name = 6;
  optional uint32 level = 7;
  optional uint32 extend_level = 8;
}

message C2S_GetBattleFieldInfo {
  required uint32 bf_type = 1;
}

message S2C_GetBattleFieldInfo {
  required uint32 ret = 1;
  required uint32 bf_type = 2;
  optional uint32 bf_tag = 3;//战场关数 1--4
  repeated BattleFieldSample battle_field = 4;
  optional uint32 challenge_count = 5;//剩余挑战次数
  optional uint32 reset_cost = 6;//免费为0
  optional uint32 reset_count = 7;//剩余重置次数
  optional uint32 current_id = 8;//当前打的对象ID
  optional uint32 history_pet_point = 9;//历史最大兽魂
  optional uint32 current_pet_point = 10;//当前最大兽魂
}

message ChallengeKnightHp {
  required uint32 index = 1;
  required uint64 hp = 2;
  required uint64 max_hp = 3;
  required uint32 base_id = 4;
  optional uint32 tp = 5;//0武将 1名将
}

message C2S_BattleFieldDetail {
  required uint32 id = 1;//bf_id
}

message S2C_BattleFieldDetail {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated ChallengeKnightHp knights = 5;//战宠后面加
  optional CrossUser user = 6;
  optional uint32 pet_point = 7;//胜利获得的资源
}

message C2S_ChallengeBattleField {
    required uint32 id = 1;
    optional bool skip_battle = 2; //是否跳过战报
}

message S2C_ChallengeBattleField {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional BattleReport info = 3; //废弃
    optional uint32 pet_point = 4;
    optional uint32 challenge_count = 5;
    optional BattleFieldSample sample = 6;//被打的这个关卡
    repeated Award awards = 7;//奖励
    optional uint32 golden_task_item = 8;     // 获得的升金试炼物品数量
    optional uint32 golden_task_knight_id = 9;     // 试炼武将id
    optional uint64 report_id = 10;
    optional bool skip_battle = 11; //是否跳过战报
    optional bool win = 12; //胜负结果
}

message C2S_BattleFieldAwardInfo {

}

message S2C_BattleFieldAwardInfo {
  required uint32 ret = 1;
  optional uint32 drop_id = 2;//是drop id//如果全部开完这个值为0
  optional uint32 drop_cost = 3;//每次开箱子花费 0免费
  optional uint32 drop_time = 4;//开的次数
}

message C2S_GetBattleFieldAward {

}

message S2C_GetBattleFieldAward{
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional uint32 drop_id = 3;//是drop id//如果全部开完这个值为0
  optional uint32 drop_cost = 4;//每次开箱子花费 0免费
  optional uint32 drop_time = 5;//开的次数
}

message C2S_BattleFieldShopInfo {
}

message S2C_BattleFieldShopInfo {
  required uint32 refresh_count = 1; // 已刷新次数
  required uint32 free_refresh_count = 2; // 免费刷新次数
}


message C2S_BattleFieldShopRefresh {
  required uint32 type = 1; // 0 刷新令 1 金币
}

message S2C_BattleFieldShopRefresh {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  optional uint32 refresh_count = 3;
  optional uint32 free_refresh_count = 4;
}

message C2S_GetBattleFieldRank {

}

message S2C_GetBattleFieldRank {
  required uint32 ret = 1;
  repeated CrossUser users = 2;//sp1->pet_point
}

message C2S_PetUpLvl {
    required uint32 pet_id = 1;
    repeated Item consume_items = 2;
}

message S2C_PetUpLvl {
    required uint32 ret = 1;
    optional uint32 pet_id = 2;
    optional uint32 pet_exp = 3;
    optional uint32 pet_lvl = 4;
}

message C2S_PetUpStar {
    required uint32 pet_id = 1;
}
message S2C_PetUpStar {
    required uint32 ret = 1;
    optional uint32 pet_id = 2;
    optional uint32 pet_star = 3;
}
message C2S_PetUpAddition {
    required uint32  pet_id = 1;
    repeated Item consume_item = 2;
}
message S2C_PetUpAddition {
    required uint32 ret = 1;
    optional uint32 pet_id = 2;
    optional uint32 pet_addition_exp = 3;
    optional uint32 pet_addition_lvl = 4;
}
message C2S_ChangeFightPet {
	required uint32 pet_id = 1;	//0：表示卸下 其他：表示上阵或者替换
}

message S2C_ChangeFightPet {
	required uint32 ret = 1;
	optional uint32 pet_id = 2;
	optional uint32 old_pet_id = 3;
}

message C2S_RecyclePet {
  repeated uint32 pet_id = 1;
  optional uint32 type = 2;  // 0:分解 1:重生 2:分解预览 3:重生预览
}

message S2C_RecyclePet {
  required uint32 ret = 1;
  repeated Award item = 2;  // 返还道具
  optional uint32 money = 3;  // 银两
  optional uint32 type = 4;  // 0:回收 1:重生
  optional uint32 fight_score = 5;	//征战积分
}

// 查询宠物护佑
message C2S_GetPetProtect {
}
message S2C_GetPetProtect {
  repeated uint32 pet_id = 1;  // 6个位置的宠物id
}

// 设置宠物护佑
message C2S_SetPetProtect {
  required uint32 pos = 1; // 位置
  required uint32 pet_id = 2;  // 宠物id
}
message S2C_SetPetProtect {
  required uint32 ret = 1;
  required uint32 pos = 2; // 位置
  required uint32 pet_id = 3;  // 宠物id
  repeated uint32 pet_pos = 4;	//武将上护佑宠后，需要把护佑技能位置给客户端
}

message C2S_DungeonDailyInfo {
}

message S2C_DungeonDailyInfo {
	repeated uint32 dids = 1;
}

message C2S_DungeonDailyChallenge {
	required uint32 did = 1;
	required uint32 hard_level = 2;
}

message S2C_DungeonDailyChallenge {
	required uint32 ret = 1;
	repeated uint32 dids = 2;
	optional BattleReport info = 3; //4.6.50废弃
	repeated Award drop_awards = 4;
  optional uint64 report_id = 5; //4.6.50
	optional bool is_win = 6; //4.6.50
}

// 八卦信息
message TrigramInfo {
  repeated Award awards = 1;  // 8个奖励
  repeated uint32 award_level = 2;  // 8个奖励对应等级
  repeated uint32 open = 3;  // 8个位置开启状态，数字对应awards数组位置1~8，0代表未开启
}

// 查询活动
message C2S_TrigramInfo {
}
message S2C_TrigramInfo {
  required uint32 score = 1; //  积分
  required bool got_reward = 2; // 是否已领取排行榜奖励
  required TrigramInfo info = 3;  // 当前八卦信息
  required uint32 count = 4;  // 今日已抽次数
  required uint32 start = 5;
  required uint32 end = 6;
  required uint32 present = 7;
  repeated uint32 score_box = 8; //eight_trigram_number_info里面的id
}

// 抽奖
message C2S_TrigramPlay {
  required uint32 pos = 1; // 位置
}
message S2C_TrigramPlay {
  required uint32 ret = 1;
  optional uint32 pos = 2; // 位置
  optional uint32 open_id = 3;     // 对应awards 1~8
  optional TrigramInfo new_trigram_info = 4;
  optional uint32 score = 5;
}
message C2S_TrigramPlayAll {
}
message S2C_TrigramPlayAll {
  required uint32 ret = 1;
  optional TrigramInfo new_trigram_info = 2;     // 刷新后
  optional uint32 score = 3;
}

// 刷新
message C2S_TrigramRefresh {
}
message S2C_TrigramRefresh {
  required uint32 ret = 1;
  optional TrigramInfo new_trigram_info = 2;     // 刷新后
}


// 领取排名奖励
message C2S_TrigramReward {
}

message S2C_TrigramReward {
required uint32 ret = 1;
repeated Award awards = 2;
}

message C2S_TrigramScoreBox {
  required uint32 id = 1;
}

message S2C_TrigramScoreBox {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated uint32 score_box = 3;
}

message Ranking {
  required string name = 1;
  required uint32 score = 2;
  required uint32 mainrole = 3; // 主角base_id
  optional uint32 dress_id = 4;
}

// 获取排行榜
message C2S_GetTrigramRank {
}
message S2C_GetTrigramRank {
  //repeated CrossUser ranking = 1;	2.5.50 删除
  required uint32 ret = 2;
  repeated WheelRanking ranking = 3;	// 2.5.50 新增
}

message C2S_UpStarEquipment {
    required uint32 cost_type = 1;  //1银两 2元宝 6碎片
    required uint32 equip_id = 2;   //是index id
}
message S2C_UpStarEquipment {
    required uint32 ret = 1;
    optional uint32 equip_id = 2;
    optional uint32 star = 3;   //装备目前星级数
    optional uint32 exp = 4;    //装备的星级经验
    optional uint32 luck_value = 5;
    optional uint32 crit = 6;   //暴击倍率
}

message C2S_UpStarDarkGoldEquipment {
    required uint32 equip_id = 1;
}

message S2C_UpStarDarkGoldEquipment {
    required uint32   ret = 1;
    optional uint32   equip_id = 2;
    optional uint32   dark_star = 3;
}

message C2S_TransformEquipment {
  required uint32 equip_id = 1;
  required uint32 cost_type = 2; //2元宝  3 物品
  required uint32 tar_equip_code = 3; //转换目标的advance code
}

message S2C_TransformEquipment {
  required uint32   ret = 1;
  optional uint32   equip_id = 2;
}

message C2S_EquipmentSoulUpgrade {
	required uint32 eid = 1;		//装备id
	repeated Award frags = 2;	//碎片
}

message S2C_EquipmentSoulUpgrade {
	required uint32 ret = 1;
	required uint32 eid = 2;
}

message C2S_EquipmentSpiritualize{
	required uint32 eid = 1;		//装备id
}

message S2C_EquipmentSpiritualize{
	required uint32 ret = 1;
	required uint32 eid = 2;
	repeated Award awards = 3;	//返还的碎片银两
}

message C2S_EquipmentSetSpirit{
	required uint32 eid = 1;
	required uint32 pos = 2;	//器灵位置
	required uint32 sid = 3;	//器灵id
}

message S2C_EquipmentSetSpirit{
	required uint32 ret = 1;
	required uint32 eid = 2;
}

message C2S_FragmentSale {
	repeated uint32 frgids = 1;	// 各种碎片id 不包含宝物的
}

message S2C_FragmentSale {
	required uint32 ret	= 1;
}


//跨服夺帅功能协议
message CrossPvpInfo {
	required uint32 stage = 1;//初中高
	required uint32 level_min = 2;
	required uint32 level_max = 3;
	required uint32 max = 4;//最大人数
	optional uint32 current = 5;//当前人数
}

message CrossPvpSchedule {
	repeated CrossPvpActivity activity = 1;
}

message CrossPvpActivity {
	required CrossPvpInfo info = 1;
	repeated CrossPvpDetail details = 2;
}

 message CrossPvpDetail {
	required uint32 round = 1;//1报名 2海选 3依次
	required bool has_bet = 2;//是否有赌注
	required uint32 start_time = 3;//总的开始时间
	required uint32 view_time = 4;//预览结束时间
	required uint32 pre_time = 5;//准备开始时间
	required uint32 battle_time = 6;//战斗开始时间
	required uint32 end_time = 7;//总的结束时间
}
message AncientPvpInfo {
	required uint32 stage = 1;//初中高
	optional uint32 round = 2;//当前轮
	optional uint32 cur = 3; //当前人数
	optional bool is_bye = 4;//是否轮空
	optional uint32 state = 5; //0 未开启,1报名,2回顾和投注,3鼓舞,4战斗
	optional uint32 ob_room = 6; //当前轮可以观战的房间id,0表示没有可观战房间
}

message AncientPvpActivity {
	required AncientPvpInfo info = 1;
	repeated CrossPvpDetail details = 2;
}
message AncientPvpSchedule {
	repeated AncientPvpActivity activity = 1;
}

message CrossPvpArena {
	required uint32 flag = 1;	//坑位
	optional uint64 sid = 2;    //sid
	optional uint32 uid = 3;	//uid
	optional string name = 4;	//名字
	optional uint32 time = 5;	//玩家进入坑位的时间
}

message CrossPvpObInfo {
	required uint32 stage = 1;//哪个场次
	required uint32 round = 2;//哪轮 海选 OR 1024...
	required uint32 room_id = 3;//房间IDe
}

message C2S_GetCrossPvpSchedule {
}

message S2C_GetCrossPvpSchedule {
	required uint32 ret = 1;
	optional CrossPvpSchedule schedule = 2;
}

message C2S_GetCrossPvpBaseInfo {
}

message S2C_GetCrossPvpBaseInfo {
	required uint32 ret = 1;
	optional uint32 has_apply = 2;//是否报名
	optional uint32 stage = 3;//报名的哪个 初级中级高级
    optional uint32 state = 4;//状态 1报名 2报名完毕 3战斗准备 4战斗 5等待（可以投注）
    optional uint32 round = 5;//哪一轮 海选啥的
    optional uint32 time = 6;//拉取信息的时间点
	optional uint32 current_attack_buff = 9;
	optional uint32 current_defend_buff = 10;
  optional bool is_bye = 11;//该轮是否轮空
}

message C2S_GetCrossPvpScheduleInfo {
}

message S2C_GetCrossPvpScheduleInfo {
    required uint32 ret = 1;
	repeated CrossPvpInfo info = 2;
}

message C2S_ApplyCrossPvp {
	required uint32 stage = 1; //战场的类型 1:低级 2:中级 3:高级 4:至尊
}

message S2C_ApplyCrossPvp {
	required uint32 ret = 1;
	required uint32 stage = 2;
	optional uint32 num = 3;
}

message C2S_GetAtcAndDefCrossPvp {
}

message S2C_GetAtcAndDefCrossPvp {
	required uint32 ret = 1;
	optional uint32 current_attack_buff = 2; //当前伤害加深
	optional uint32 current_defend_buff = 3; //当前伤害减免
}

message C2S_ApplyAtcAndDefCrossPvp {
	required uint32 apply_type = 1;//1 2 根据策划配置
	optional uint32 count = 2;//预留字段 默认每次就+1
}

message S2C_ApplyAtcAndDefCrossPvp{
	required uint32 ret = 1;
	required uint32 apply_type = 2;//1 2 根据策划配置
	optional uint32 count = 3;//预留字段 默认每次就+1
	optional uint32 current = 4;//返回当前鼓舞次数
}

message C2S_GetCrossPvpRole {
}

message S2C_GetCrossPvpRole {
	required uint32 ret = 1;
	optional uint32 round = 2;//哪轮 海选 OR 1024...
	optional uint32 stage = 3;//哪个赛场
	optional uint32 room = 4;//房间ID
	optional uint32 score = 5;
}

message C2S_CrossWaitInit {
}

message S2C_CrossWaitInit {
	required uint32 ret = 1;
	optional uint32 stage = 2;			//战场
	optional uint32 rank = 3;			//排名
	optional uint32 score = 4;			//积分
	optional uint32 battle_count = 5;	//战斗次数
	optional uint32 win_count = 6;		//胜利次数
	optional bool has_award = 7;		//是否领取过晋级奖励
	optional CrossUser flower_award = 8;//是否领取过投注奖励
	optional CrossUser egg_award = 9;	//有就代表有奖励
	optional uint32 room_rank = 10;		//room stage rank 客户端通过这三个可以获取到奖励
}

message C2S_CrossWaitInitFlowerInfo {
}

message S2C_CrossWaitInitFlowerInfo {
	required uint32 ret = 1;
	repeated CrossUser ranks = 2;			//4个战场鲜花冠军
	optional uint32 flower_get = 3;			//得到的鲜花数量
	optional uint32 egg_get = 4;			//得到的鸡蛋数量
	optional CrossUser flower_receiver = 5;	//送花对象
	optional CrossUser egg_receiver = 6;	//送蛋对象
}

message C2S_CrossWaitRank {
	required uint32 stage = 1;
	required uint32 start = 2;//起始排名
	required uint32 finish = 3;//终止排名
}

message S2C_CrossWaitRank {
	required uint32 ret = 1;
	optional uint32 stage = 3;
	optional uint32 start = 4;
	optional uint32 finish = 5;
	repeated CrossUser ranks = 6;
}

message C2S_CrossWaitFlower {
  required uint64 sid = 1;//对方sid
  required uint32 role_id = 2;//对方uid
  required uint32 stage = 3;//对方所在赛场
  required uint32 type = 4;//鲜花还是鸡蛋
  required uint32 count = 5;//鲜花/鸡蛋的数量
}

message S2C_CrossWaitFlower {
  required uint32 ret = 1;
  optional uint64 sid = 2;
  optional uint32 role_id = 3;
  optional uint32 stage = 4;
  optional uint32 type = 5;
  optional uint32 count = 6;
}

message C2S_CrossWaitFlowerRank {
	required uint32 type = 1;// 1代表鲜花 2代表砸蛋
	required uint32 start = 2;
	required uint32 finish = 3;
}

message S2C_CrossWaitFlowerRank {
	required uint32 ret = 1;
	required uint32 type = 2;// 1代表鲜花 2代表砸蛋
	required uint32 start = 3;
	required uint32 finish = 4;
	repeated CrossUser ranks = 6;
	optional uint32 self_rank = 7;
}

message C2S_CrossWaitFlowerAward {
	required uint32 type = 1;
}

message S2C_CrossWaitFlowerAward {
	required uint32 ret = 1;
	required uint32 type = 2;
	repeated Award awards = 3;
}

message C2S_GetCrossPvpArena {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //战场房间号
}

message S2C_GetCrossPvpArena {
	required uint32 ret = 1;
	repeated uint32 flags = 2;	//房间内的坑位号（全局唯一）
}


message S2C_FlushCrossPvpArena {
	required uint32 stage = 1;	//战场
	required uint32 room = 2;	//房间
	required CrossUser arena = 3;	//坑位信息
	optional uint32 type = 4;//坑位变化情况 1代表坑位时间到了自动下坑 2代表被人击败
}

message S2C_FlushCrossPvpSpecific {
	required uint32 stage = 1;	//战场
	required uint32 room = 2;	//房间
	required uint32 type = 3;//坑位变化情况 1代表坑位时间到了自动下坑 2代表被人击败
	optional CrossUser arena = 4;	//当前坑位信息
}

message C2S_GetCrossPvpRank {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //战场房间号
}

message S2C_GetCrossPvpRank {
	required uint32 ret = 1;
	repeated CrossUser ranks = 2;
}

message C2S_CrossPvpBattle {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //房间号
	required uint32 flag = 3;//坑位
}

message S2C_CrossPvpBattle {
	required uint32 ret = 1;
	optional uint32 method = 2;//战斗结果类型 1代表击败别人 2代表占领了一个空的坑
	optional bool is_win = 3;
	optional uint32 score = 4;
	optional uint32 flag = 5;
	optional BattleReport report = 6; //战报 4.6.50废弃
  optional uint64 report_id = 7; //4.6.50
}

message S2C_FlushCrossPvpScore {
	optional uint32 score = 1;
	optional uint32 method = 2;//获取积分的方式 1日了别人 2守护据点
}

message C2S_GetCrossPvpDetail {
}

message S2C_GetCrossPvpDetail {
	required uint32 ret = 1;
	optional uint32 battle_count = 2; //战斗次数
	optional uint32 win_count = 3; //胜利次数
}

message C2S_CrossPvpGetAward {
}

message S2C_CrossPvpGetAward {
	required uint32 ret = 1;
	repeated Award awards = 2;
}
message C2S_ItemCompose {
    required uint32 index = 1;
    required uint32 cnt = 2;
}
message S2C_ItemCompose {
    required uint32 ret = 1;
    required uint32 index = 2; //客户端传过来的
    repeated Award item = 3;
}

message C2S_GetCrossPvpOb {
}

message S2C_GetCrossPvpOb {
	required uint32 ret = 1;
	required bool has_ob = 2;
	repeated CrossPvpObInfo rooms = 3;
}

message SpecialHolidayActivityInfo {
	required uint32 id = 1;
	required uint32 progress = 2;
	required uint32 award_count = 3;
	optional bool can_award = 4;
}

message C2S_GetSpecialHolidayActivity {
}

message S2C_GetSpecialHolidayActivity {
	required bool in_holiday = 1;
	required uint32 start_time = 2;
	required uint32 end_time = 3;
	repeated SpecialHolidayActivityInfo infos = 4;
	optional uint32 now = 5;
}

message S2C_UpdateSpecialHolidayActivity {
	required SpecialHolidayActivityInfo info = 1;
}

message C2S_GetSpecialHolidayActivityReward {
	required uint32 id = 1;
	optional uint32 index = 2;
}

message S2C_GetSpecialHolidayActivityReward {
	required uint32 ret = 1;
	optional SpecialHolidayActivityInfo info = 2; // 以前是required,但是当出现错误的时候,服务器发送的这个字段是nil,会导致错误号发送不到客户端-5.7.50-欢庆优化
	optional uint32 index = 3;
}

message C2S_GetSpecialHolidaySales {
}

message S2C_GetSpecialHolidaySales {
	repeated uint32 id = 1;
	repeated uint32 buyed_cnt = 2;
}

message C2S_BuySpecialHolidaySale {
	required uint32 id = 1;
	required uint32 cnt = 2;
}

message S2C_BuySpecialHolidaySale {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 buyed_cnt = 3;
}

message C2S_GetBulletScreenInfo {
  required uint32 id = 1;//info id
}

message S2C_GetBulletScreenInfo {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 last_send_time = 3;//这个ID类下面最后次弹幕发送CD时间
  optional uint32 min_index = 4;//根据bigtype不同 如果是聊天类的 这2个字段就没意义 如果是历史数据类的 就是起点和结束点//type = 2用
  optional uint32 max_index = 5;
}

//如果是聊天类的 S2C_SendBulletScreenInfo
//如果是普通的 后面设计
message C2S_SendBulletScreenInfo {
  required uint32 id = 1;
  required string content = 2;
  required uint32 bs_type = 3;
  optional uint32 sp1 = 4;//通用
  optional bool anonymous = 5;
  optional bool only_my_alliance = 6; //是否仅我的联盟可见
}

message S2C_SendBulletScreenInfo {
  required uint32 ret = 1;
  optional BulletScreen bs = 2;
  optional uint32 last_send_time = 3;//这个ID类下面最后次弹幕发送CD时间
}

message BulletScreen {
  required uint32 id = 1;//id
  required string content = 2;//内容
  required uint32 bs_type = 3;//弹幕级别//1 2
  optional uint32 time = 4;//时间
  optional uint64 sid = 5;
  optional uint32 user_id = 6;
  optional uint32 sp1 = 7;//特殊字段 通用
  optional string name = 8;
}

message S2C_FlushBulletScreen {
  repeated BulletScreen bs = 1;
}

// 查询vip周商店
message C2S_VipWeekShopInfo {
}

message S2C_VipWeekShopInfo {
  repeated uint32 id = 1; // 已购买id
  repeated uint32 num = 2; // 已购买id对应次数
  required uint32 ret = 3; // OK
}

// 购买vip周商店
message C2S_VipWeekShopBuy {
  required uint32 id = 1;     // 配置表id*10+子id(1~4)
  required uint32 num = 2; // 购买次数
}

message S2C_VipWeekShopBuy {
  required uint32 ret = 1; // OK
  optional uint32 id  = 2; // 配置表id*10+子id(1~4)
  optional uint32 num = 3; // 购买次数
}

message ExDuShopItem {
	required uint32 id = 1;			//商品id
	required uint32 num = 2;		//已购买次数
}

message ExDuChapter {
	required uint32 id = 1;
	required uint32 star = 2;
	required bool has_awarded = 3;		//是否领取章节奖励
	required bool has_entered = 4;		//是否第一次进入
	repeated ExDuStage stages = 5;		//关卡
	repeated ExDuShopItem items = 6;	//商品
}

message ExDuStage {
	required uint32 id = 1;
	required bool target1 = 2;			//目标1是否达成
	required bool target2 = 3;			//目标2是否达成
	required bool target3 = 4;			//目标3是否达成
	required uint32 max_uid = 5;		//最高战力uid
    required string max_name = 6;		//最高战力角色名
	required uint64 max_fv = 7;			//最高战力
	required uint32 min_uid = 8;		//最低战力uid
	required string min_name = 9;		//最低战力角色名
	required uint64 min_fv = 10;			//最低战力
}

message C2S_GetExpansiveDungeonChapterList {

}

message S2C_GetExpansiveDungeonChapterList {
	required uint32 ret = 1;
	repeated ExDuChapter chapters = 2;
}

message C2S_ExcuteExpansiveDungeonStage {
	required uint32 stage_id = 1;
}


message S2C_ExcuteExpansiveDungeonStage {
	required uint32 ret = 1;
	required uint32 chapter_id = 2;
	optional ExDuStage stage = 3;
	optional BattleReport report = 4; //4.6.50废弃
	repeated Award awards = 5;
	optional uint32 stage_exp = 6;
  optional uint64 report_id = 7; //4.6.50
}

message C2S_GetExpansiveDungeonChapterReward {
	required uint32 chapter_id = 1;
}

message S2C_GetExpansiveDungeonChapterReward {
	required uint32 ret = 1;
	required uint32 chapter_id = 2;
	repeated Award awards = 3;
}

message C2S_FirstEnterExpansiveDungeonChapter {
	required uint32 id = 1;
}

message S2C_FirstEnterExpansiveDungeonChapter {
	required uint32 ret = 1;
	required uint32 id = 2;
	optional ExDuChapter chapter = 3;
}

message S2C_AddExpansiveDungeonNewStage {
	required uint32 chapter_id = 1;
	required ExDuStage stage = 2;
}

message C2S_PurchaseExpansiveDungeonShopItem {
	required uint32 id = 1;
	required uint32 count = 2;
}

message S2C_PurchaseExpansiveDungeonShopItem {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 count = 3;
	repeated Award awards = 4;
}

message C2S_TeamPVPStatus {
}

message S2C_TeamPVPStatus {
	required uint32 ret = 1; // OK，跨服异常
	required uint32 status = 2; // 0: 不在队伍，1: 在自动匹配队伍，2：在队伍，3：组队完毕，在匹配其他队伍
    	required uint64 team_id = 3;
	repeated CrossUser team_members = 4; // sp2 表示机器人 sp3 表示所在位置，从0开始 // sp4 表示军团id，// sp5 表示 是否同意出战 // sp6表示称号 // sp7表示是否与队长好友 // sp8 表示剩余奖励次数 // npc的id是所拉 user_id | (rand(127) << 24)
	required uint32 leader_pos = 5;
	required bool only_invited = 6;
	optional uint32 online_buff = 7;
	optional uint32 corp_buff = 8;
	optional uint32 friend_buff = 9;
	optional bool kicked = 10;
}

message C2S_TeamPVPCreateTeam {
}

message S2C_TeamPVPCreateTeam {
	required uint32 ret = 1;
}

message C2S_TeamPVPJoinTeam {
}

message S2C_TeamPVPJoinTeam {
	required uint32 ret = 1;
}

message C2S_TeamPVPLeave {
}

message S2C_TeamPVPLeave {
	required uint32 ret = 1;
}

message C2S_TeamPVPChangePosition {
	required uint32 pos1 = 1;
	required uint32 pos2 = 2;
}

message S2C_TeamPVPChangePosition {
	required uint32 ret = 1;
}

message C2S_TeamPVPKickTeamMember {
	required uint64 kicked_sid = 1;
	required uint32 kicked_user_id = 2;
}

message S2C_TeamPVPKickTeamMember {
	required uint32 ret = 1;
}

message C2S_TeamPVPSetTeamOnlyInvited {
	required bool only_invited = 1;
}

message S2C_TeamPVPSetTeamOnlyInvited {
	required uint32 ret = 1;
}

message C2S_TeamPVPInvite {
	required uint32 invited_user_id = 1;
	required uint64 team_id = 2;
	optional uint64 invited_sid = 3;
}

message S2C_TeamPVPInvite {
	required uint32 ret = 1;
}

message S2C_TeamPVPBeInvited {
	required uint32 invitor_user_id = 1;
	required uint64 invitor_team_id = 2;
	optional uint64 invitor_sid = 3;
}

message C2S_TeamPVPInvitedJoinTeam {
        required uint32 invitor_user_id = 1;
        required uint64 invitor_team_id = 2;
	optional uint64 invitor_sid = 3;
}

message S2C_TeamPVPInvitedJoinTeam {
	required uint32 ret = 1;
}

message S2C_TeamPVPInviteCanceled {
	required uint64 team_id = 1;
	required uint32 invitor_user_id = 2;
	optional uint64 invitor_sid = 3;
}

message C2S_TeamPVPInviteNPC {

}

message S2C_TeamPVPInviteNPC {
	required uint32 ret = 1;
}

message C2S_TeamPVPAgreeBattle {
	required bool agree = 1;
}

message S2C_TeamPVPAgreeBattle {
        required uint32 ret = 1;
}

message C2S_TeamPVPMatchOtherTeam {

}

message S2C_TeamPVPMatchOtherTeam {
	required uint32 ret = 1;
}

message C2S_TeamPVPStopMatch {

}

message S2C_TeamPVPStopMatch {
        required uint32 ret = 1;
}
//此协议会序列化后存入数据库
message TeamPVPSingleBattleReport {
  required uint32 team1_pos = 1;
  required uint32 team2_pos = 2;
  required bool team1_fight_first = 3;
  required BattleBriefReport report = 4;
  required bool continue_win3 = 5;
  required uint32 continue_win = 6;
}
//此协议会序列化后存入数据库
message TeamPVPBattleReport {
  required uint64 battle_id = 1;
  required uint64 team1_id = 2;
  required uint32 team1_leader_pos = 3;
  repeated CrossUser team1_members = 4;
  required uint64 team2_id = 5;
  required uint32 team2_leader_pos = 6;
  repeated CrossUser team2_members = 7;
  required bool team1_win = 8;
  repeated TeamPVPSingleBattleReport reports = 9;
  required uint32 team1_award_buff = 10;
  required uint32 team2_award_buff = 11;
}

message S2C_TeamPVPBattleResult {
  required TeamPVPBattleReport report = 1;
  required uint32 score = 2;
  required uint32 honor = 3;
  required bool double_award = 4;
  optional uint32 golden_task_item = 5;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 6;     // 试炼武将id
  repeated AddFavorInfo favors = 7;	//增加好友度信息
  repeated Award special_awards = 8;	//特殊掉落
}

message C2S_TeamPVPBattleTeamChange {
}

message S2C_TeamPVPBattleTeamChange {
  required uint32 ret = 1;
}

message S2C_TeamPVPCrossServerLost {

}

message C2S_TeamPVPHistoryBattleReport {
}

message S2C_TeamPVPHistoryBattleReport {
  required TeamPVPBattleReport report = 1;
  optional uint32 ret = 2;//状态
}

message S2C_TeamPVPHistoryBattleReportEnd {
}

message C2S_TeamPVPGetRank {
}

message S2C_TeamPVPGetRank {
  required uint32 ret = 1;
  repeated CrossUser user = 2;
  repeated uint32 honor = 3;
}

message C2S_TeamPVPGetUserInfo {
}

message S2C_TeamPVPGetUserInfo {
  required uint32 ret = 1;
  optional uint32 honor = 2;
  optional uint32 score = 3;
  optional uint32 award_cnt = 4; //已经奖励次数
  optional uint32 buyed_award_cnt = 5; //已经购买次数
  optional uint32 npc_cd = 6; //上一次找npc时间
  optional uint32 rank = 7;
  optional uint32 title = 8;
  optional bool accept_invite = 9;
  optional bool pop_chat = 10;
  optional uint32 max_honor = 11;
}

message C2S_TeamPVPBuyAwardCnt {
  required uint32 cnt = 1;
}

message S2C_TeamPVPBuyAwardCnt {
  required uint32 ret = 1;
  required uint32 cnt = 2;
}

message C2S_TeamPVPAcceptInvite {
  required bool accept = 1;
}

message S2C_TeamPVPAcceptInvite {
  required uint32 ret = 1;
}

message C2S_GetAccountBindingInfo {
}

message S2C_GetAccountBindingInfo {
  required uint32 ret = 1;
  repeated uint32 awards = 2;
}

message C2S_GetAccountBindingAward {
  required uint32 id = 1;
}

message S2C_GetAccountBindingAward {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message C2S_TeamPVPPopChat {
  required bool pop_chat = 1;
}

message S2C_TeamPVPPopChat {
  required uint32 ret = 1;
}

message TeamPVPTeamInfo {
  required CrossUser leader = 1;
  required uint32 member_size = 2;
  required uint32 avg_level = 3;
  optional bool applyed = 4;
}

message C2S_TeamPVPTeamList {
}

message S2C_TeamPVPTeamList {
  required uint32 ret = 1;
  repeated TeamPVPTeamInfo teams = 2;
}

message C2S_TeamPVPApplyTeam {
  required uint32 leader_id = 1;
}

message S2C_TeamPVPApplyTeam {
  required uint32 ret = 1;
  required uint32 leader_id = 2;
}

message C2S_TeamPVPCancelApply {
}

message S2C_TeamPVPCancelApply {
  required uint32 ret = 1;
}

message C2S_TeamPVPApplyList {
}

message S2C_TeamPVPApplyList {
  required uint32 ret = 1;
  repeated CrossUser applyers = 2;
}

message C2S_TeamPVPApproveApply {
  required uint32 applyer_id = 1;
}

message S2C_TeamPVPApproveApply {
  required uint32 ret = 1;
  required uint32 applyer_id = 2;
}

message C2S_TeamPVPRejectApply {
  required uint32 applyer_id = 1;
}

message S2C_TeamPVPRejectApply {
  required uint32 ret = 1;
  required uint32 applyer_id = 2;
}

message S2C_TeamPVPNewApplyer {
  required CrossUser applyer = 1;
}

message C2S_TeamPVPSkipBattle {
}

message S2C_TeamPVPSkipBattle {
  required uint32 ret = 1;
}

message C2S_GetShopTag {

}
message S2C_GetShopTag {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
}
message C2S_AddShopTag {
    required uint32 id = 1;
}
message S2C_AddShopTag {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
}
message C2S_DelShopTag {
    required uint32 id =1;
}
message S2C_DelShopTag {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
}
message C2S_FastRefineEquipment {
    required uint32 eid = 1;
    repeated Item consume_item = 2;
}
message S2C_FastRefineEquipment {
    required uint32 ret =1;
    required uint32 eid = 2;
}

message C2S_GetOlderPlayerInfo {
}

message S2C_GetOlderPlayerInfo {
  required uint32 ret = 1;
  optional bool is_older = 2;
  optional uint32 activity_id = 3;
  optional uint32 activity_start = 4;
  optional uint32 activity_end = 5;
  optional uint32 limit_time = 6; //活动描述中的时间限制
  optional bool vip = 7; //true: 领取过VIP; false: 相反
  repeated uint32 awards = 8; //领取过的等级奖励ID
  optional uint32 limit_level = 9;//活动描述中的等级限制
}

message C2S_GetOlderPlayerVipAward {
}

message S2C_GetOlderPlayerVipAward {
  required uint32 ret = 1;
}

message C2S_GetOlderPlayerLevelAward {
  required uint32 id = 1;
}

message S2C_GetOlderPlayerLevelAward {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GetOlderPlayerVipExp {
}

message S2C_GetOlderPlayerVipExp {
  required uint32 ret = 1;
  optional uint32 exp = 2;
}

message Good {
  required uint32 id = 1;				//商品id
  required uint32 num = 2;			//购买次数
}

message WealBack {
  required bool free_award = 1;	    //免费领取 false:未领取 true:已领取
  repeated Good wb_goods = 2;		//购买信息
}

message HeroBack {
  required uint32 single_recharge = 1;	//单充金额
  required bool single_award = 2;				//单充奖励领取 false:未领取 true:已领取
  required uint32 total_recharge = 3;		//累充金额
  repeated uint32 total_awards = 4;			//累充奖励已领取id
  repeated uint32 free_awards = 5;			//免费奖励已领取id
  repeated Good hb_goods = 6;				//购买信息
}

message LocalVeteranAction {
  required uint32 id = 1; //任务ID
  required uint32 type = 2; //任务类型
  required uint32 value = 3; //任务进度要求
  required uint32 progress = 4; //任务进度
  required uint32 award = 5; //任务领取标记(0:未领取/1:已领取)
  required uint32 day = 6; //任务开启时间
}

message LocalVeteranDirectInfo {
  optional uint32 id = 1;         //礼包id
  optional uint32 direct_num = 2; //购买次数
  optional uint32 reward_num = 3; //领取次数
  optional uint32 begin_date = 4; //开始时间 time_t时间，以秒为单位
  optional uint32 end_date = 5;   //结束时间 time_t时间，以秒为单位
}

message C2S_GetLocalVeteranActionAward {
  required uint32 id = 1;
}

message S2C_GetLocalVeteranActionAward {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional LocalVeteranAction action = 3;
}

message C2S_LocalVeteranExtraBuy {
  required uint32 id = 1;
  required uint32 num = 2;
}

message S2C_LocalVeteranExtraBuy {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 num = 3;
}

message C2S_GetLocalVeteranInfo {
}

message S2C_GetLocalVeteranInfo {
  required uint32 ret = 1;
  optional uint32 status = 2;				//活动状态 0:无活动 1:福利返还 2:英雄归来
  optional uint32 new_online = 3;		//触发活动的登陆时间
  optional uint32 old_offline = 4;	//触发活动前的离线时间
  optional uint32 role_level = 5;		//激活活动时角色等级
  optional uint32 vip_level = 6;		//激活活动时vip等级
  optional WealBack weal_back = 7;	//福利返还信息
  optional HeroBack hero_back = 8;	//英雄归来信息
  optional uint32 new_server = 9;   //特殊贩售标记
  optional uint32 extra_group = 10; //三周年活动分组
  repeated LocalVeteranAction extra_actions = 11; //三周年活动任务
  repeated Good extra_goods = 12;	//三周年活动贩售
  optional uint32 extra_sell_end = 13; //三周年活动贩售结束时间
}

message C2S_LocalVeteranWealFree {
  required uint32 id = 1;
}

message S2C_LocalVeteranWealFree {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_LocalVeteranWealBuy {
  required uint32 id = 1;
  required uint32 num = 2;
}

message S2C_LocalVeteranWealBuy {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 num = 3;
}

message C2S_LocalVeteranHeroFree {
  required uint32 id = 1;
}

message S2C_LocalVeteranHeroFree {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message C2S_LocalVeteranHeroBuy {
  required uint32 id = 1;
  required uint32 num = 2;
}

message S2C_LocalVeteranHeroBuy {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 num = 3;
}

message C2S_LocalVeteranHeroRecharge {
  required uint32 type = 1;
  optional uint32 id = 2;
}

message S2C_LocalVeteranHeroRecharge {
  required uint32 ret = 1;
  optional uint32 type = 2;
  optional uint32 id = 3;
}

message C2S_GetNewSerVeteranInfo {
}

message S2C_GetNewSerVeteranInfo {
  required uint32 ret = 1;
  optional bool is_veteran = 2;					//true:老玩家 false:非老玩家
  optional uint32 activity_id = 3;			//活动id
  optional uint32 activity_start = 4;		//活动开始时间
  optional uint32 activity_end = 5;			//活动结束时间
  optional uint32 lost_day = 6;				  //活动描述中多少日未登录
  optional uint32 limit_level = 7;			//活动描述中的等级限制
  optional uint32 vip_exp = 8;					//继承的vip经验
  optional bool vip_award = 9;					//true: 领取过VIP; false: 相反
  repeated uint32 free_awards = 10;			//领取过的免费奖励ID
  repeated uint32 gift_awards = 11;			//领取过的优惠礼包ID
  optional bool vip_inherit = 12;       //vip继承是否开启
  optional bool free_gold = 13;         //元宝赠送是否开启
  optional bool gift_bag = 14;          //优惠礼包是否开启
}

message C2S_GetNewSerVeteranVipAward {
}

message S2C_GetNewSerVeteranVipAward {
  required uint32 ret = 1;
}

message C2S_GetNewSerVeteranFreeGold {
  required uint32 id = 1;
}

message S2C_GetNewSerVeteranFreeGold {
  required uint32 ret = 1;
  required uint32 id  = 2;
}

message C2S_GetNewSerVeteranGiftBag {
  required uint32 id = 1;
}

message S2C_GetNewSerVeteranGiftBag {
  required uint32 ret = 1;
  required uint32 id  = 2;
}

//老玩家回归直冲相关数据
message C2S_LocalVeteranExtraGetDirects {
}

message S2C_LocalVeteranExtraGetDirects {
  required uint32 ret = 1;
  repeated LocalVeteranDirectInfo directs = 2;
}

message S2C_LocalVeteranExtraDirectChargeSuc {
  required LocalVeteranDirectInfo direct_info = 1;
}

message C2S_LocalVeteranExtraDirectReward {
  required uint32 id = 1;
  optional uint32 index = 2;
}

message S2C_LocalVeteranExtraDirectReward {
  required uint32 ret = 1;
  optional LocalVeteranDirectInfo direct_info = 2;
  repeated Award awards = 3;
}

message C2S_ChangeName {
    required string new_name = 1;
}
message S2C_ChangeName {
    required uint32 ret = 1;
    optional string new_name = 2;
}

message C2S_GetKnightProperty {
    required uint32 pos = 1;	// 1~6位置
}
message S2C_GetKnightProperty {
    required uint32 pos = 1;
    repeated uint64 property = 2;	// 依次为： 战力 暴击 抗暴 命中 闪避 增伤 减伤 pvp增伤 pvp减伤 灭魏蜀吴群 抗魏蜀吴群
    optional uint64 fight_value = 3;//uint64战力
}

// 查询活动
message C2S_RCardInfo {
}

message S2C_RCardInfo {
  required uint32 score = 1; // 可用积分
  required uint32 score_total = 2; //  总积分
  required uint32 start = 3;
  required uint32 end = 4;
  required uint32 reset1 = 5; // 今日已重置普通牌次数
  repeated uint32 ids1 = 6; // 已抽取普通牌id
  required uint32 reset2 = 7; // 今日已重置豪华牌次数
  repeated uint32 ids2 = 8; // 已抽取豪华牌id
  repeated uint32 pos1 = 9; // 位置们
  repeated uint32 pos2 = 10; // 位置们
  required uint32 play1 = 11; // 今日已翻普通牌次数
  required uint32 play2 = 12; // 今日已翻豪华牌次数
}

// 抽奖
message C2S_PlayRCard {
  required uint32 id = 1; // 1普通 2豪华
  required uint32 pos = 2; // 0~7
}

message S2C_PlayRCard {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 cid = 3;
  required uint32 pos = 4; // 0~7
}

// 刷新
message C2S_ResetRCard {
  required uint32 id = 1; // 1普通 2豪华
}

message S2C_ResetRCard {
  required uint32 ret = 1;
  required uint32 id = 2; // 1普通 2豪华
}

// 购买商品
message C2S_RCardBuy {
  required uint32 id = 1;
  required uint32 num = 2;
}

message S2C_RCardBuy {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 num = 3;
}

message C2S_SetClothSwitch {
  required bool isOpen = 1; //false:关闭  true:打开
}

message S2C_SetClothSwitch {
  required bool isOpen = 1; //false:关闭 true:打开
}

message C2S_GetClothBook {
}

message ClothBook {
  required uint32 id = 1;
  required uint32 left_time = 2;
}

message S2C_GetClothBook {
  required uint32 ret = 1;
  repeated ClothBook book = 2;
}

message C2S_ChangeCloth {
  required uint32 new_book_id = 1;
}

message S2C_ChangeCloth {
  required uint32 ret = 1;
  required uint32 old_book_id = 2;
  required uint32 new_book_id = 3;
}

message C2S_RenewCloth {
  required uint32 book_id = 1; //时装图鉴ID
  required uint32 item_id = 2; //延期道具ID
  optional uint32 num = 3; //使用数量(5.0.50)
}

message S2C_RenewCloth {
  required uint32 ret = 1;
  optional uint32 book_id = 2;
  optional uint32 item_id = 3;
  optional uint32 num = 4;
}

message S2C_UpClothBook {
  required uint32 ret = 1;
  optional ClothBook book = 2;
}

message C2S_GetDays7CompInfo {
}

message Days7CompInfo {
	required uint32 id = 1;
	required string name = 2;
	required uint32 rank = 3;
	required uint32 flag = 4;
}
message S2C_GetDays7CompInfo {
  required uint32 ret = 1;
  optional Days7CompInfo me = 2;
  repeated Days7CompInfo infos  = 3;
  required uint32 oszt = 4; //开服零点时间
}

message C2S_GetDays7CompAward {
}

message S2C_GetDays7CompAward {
	required uint32 ret = 1;
	repeated Award awards = 2;
}

message Ksoul {
  required uint32 id = 1;
  required uint32 num = 2;
}

message C2S_GetKsoul {
}

message S2C_GetKsoul {
  repeated Ksoul ksouls = 1;//将灵
  repeated uint32 ksoul_groups = 2;//已激活的阵图
  repeated uint32 ksoul_targets = 3;//阵图成就
  optional uint32 free_summon = 4;//免费点将次数
  //optional uint32 summon_score = 5;//点将点数
  optional uint32 summon_count = 6;//轮回内已经点将的次数
  repeated Ksoul summon_exchange = 7;//今日奇遇兑换的信息
  optional uint32 dungeon_challenge_cnt = 8;
  optional uint32 dungeon_refresh_cnt = 9;
  optional uint32 max_target_value = 10; //历史最高阵图值
  optional uint32 max_group_star = 11;  //历史最高星数
	repeated KsoulFameGroup ksoulfames = 12;	//名将将灵阵图信息
	optional uint32 free_ksoulfame_summon = 13;		//免费名将点将次数
	optional uint32 ksoulfame_summon_count = 14;  //名将灵已经点将的次数
	repeated uint32 ksoulfame_targets = 15;//阵图成就
}

message KsoulFameGroup {
  required uint32 id = 1;
  repeated uint32 star = 2;
}

//一键操作, 多选
message KsoulFameGroups {
  required KsoulFameGroup group = 1;
  required uint32 pre_id = 2;
  repeated Award expend = 3;
}

message C2S_RecycleKsoul {
  repeated Ksoul ksoul = 1;
}

message S2C_RecycleKsoul {
  required uint32 ret = 1;
  optional uint32 ksoul_point = 4;
}

message OpKsoul {
  repeated Ksoul insert_ksouls = 1; //添加
  repeated Ksoul update_ksouls = 2; //更新
  repeated uint32 delete_ksouls = 3; //删除
}

message C2S_ActiveKsoulGroup {
  required uint32 id = 1;
}

message S2C_ActiveKsoulGroup {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 max_target_value = 3; //历史最高阵图值
  optional uint32 max_group_star = 4;  //历史最高星数
}

message AutoActiveKsoulGroupResult {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award consumes = 3;
}

message C2S_AutoActiveKsoulGroup {
  repeated uint32 ids = 1;
}

message S2C_AutoActiveKsoulGroup {
  required uint32 ret = 1;
  repeated AutoActiveKsoulGroupResult rets = 2;
  optional uint32 max_target_value = 5;
  optional uint32 max_group_star = 6;
}

message AutoUpgradeKsoulResult {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 base_id = 3; //升星前ID
  optional uint32 result_id = 4; //升星后ID
  optional uint32 star = 5; //原始星级
  optional uint32 result_star = 6; //结果星级
  repeated Award consumes = 7;
}

message AutoUpgradeKsoulSingle {
  required uint32 from = 1; //初始id
  required uint32 to = 2;   //目标id
}

message C2S_AutoUpgradeKsoulGroup {
  repeated AutoUpgradeKsoulSingle up_requires = 1; //升星请求列表
}

message S2C_AutoUpgradeKsoulGroup {
  required uint32 ret = 1;
  repeated AutoUpgradeKsoulResult up_results = 2;
  optional uint32 max_target_value = 3;
  optional uint32 max_group_star = 4; 
}

message C2S_ActiveKsoulTarget {
  required uint32 id = 1;
	required uint32 tp = 2;
}

message S2C_ActiveKsoulTarget{
  required uint32 ret = 1;
  required uint32 id = 2;
	required uint32 tp = 3;
}

//激活
message C2S_ActiveKsoulFame {
  required uint32 group_id = 1;		//条目id
  required uint32 pos = 2;			//位置
}

message S2C_ActiveKsoulFame {
  required uint32 ret = 1;
  optional uint32 group_id = 2;
  optional uint32 pos = 3;
	optional KsoulFameGroup group = 4;
}

//升星
message C2S_UpgradeKsoulFame {
	required uint32 group_id = 1;   //条目id
	required uint32 pos = 2;      //位置
}

message S2C_UpgradeKsoulFame {
  required uint32 ret = 1;
  optional uint32 group_id = 2;
  optional uint32 pos = 3;
	optional KsoulFameGroup group = 4;
}

//一键激活
message C2S_OneKeyActiveKsoulFame {
  required uint32 group_id = 1;		//条目id
}

message S2C_OneKeyActiveKsoulFame {
  required uint32 ret = 1;
  optional uint32 group_id = 2;
	optional KsoulFameGroup group = 3;
}

//一键升星
message C2S_OneKeyUpgradeKsoulFame {
	required uint32 group_id = 1;   //条目id
}

message S2C_OneKeyUpgradeKsoulFame {
  required uint32 ret = 1;
  optional uint32 group_id = 2;
	optional KsoulFameGroup group = 3;
}

//一键操作多选
message C2S_OneKeyKsoulFame {
  required uint32 type = 1;       //1为激活，其他为升星
  repeated uint32 group_ids = 2;
}

message S2C_OneKeyKsoulFame {
  required uint32 ret = 1;
  required uint32 type = 2;
  repeated KsoulFameGroups groups = 3;
}

//一键重置
message C2S_OneKeyResetKsoulFame {
  required uint32 chapter_id = 1; //章节id
}

message S2C_OneKeyResetKsoulFame {
  required uint32 ret = 1;
  required uint32 chapter_id = 2;
  repeated Award award = 3;
  repeated KsoulFameGroup groups = 4;
}

//重置
message C2S_ResetKsoulFame {
	required uint32 group_id = 1;   //条目id
}

message S2C_ResetKsoulFame {
  required uint32 ret = 1;
  optional uint32 group_id = 2;
	optional KsoulFameGroup group = 3;
	repeated Award ksouls = 4;
}


message C2S_SummonKsoul {
  required uint32 s_type = 1;//1免费 2单抽 3五连
	optional uint32 ksoul_type = 2; //0将灵 1名将灵
}

message S2C_SummonKsoul {
  required uint32 ret = 1;
  required uint32 s_type = 2;
  repeated Award awards = 3;
  repeated Award scores = 4;
  optional uint32 free_summon = 5;//免费点将次数
  optional uint32 summon_score = 6;//点将点数
  optional uint32 summon_count = 7;//轮回内已经点将的次数
	optional uint32 ksoul_type = 8; //0将灵 1名将灵
}

message C2S_SummonKsoulExchange{
  required uint32 id = 1;
}

message S2C_SummonKsoulExchange{
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Ksoul summon_exchange = 3;//今日奇遇兑换的信息
  optional uint32 summon_score = 4;
  repeated Award award = 5;
}

message C2S_GetCommonRank {
  required uint32 r_id = 1;//1代表KSOUL 2代表战马好感度3群雄逐鹿积分 4群雄逐鹿胜率 5抽奖活动鲜花积分 6跨服个人官衔排行
  required uint32 r_type = 2;//1本服 2跨服
}

message S2C_GetCommonRank {
  required uint32 ret = 1;
  required uint32 r_id = 2;
  required uint32 r_type =3;
  repeated CrossUser rank = 4;
  optional uint32 self_rank = 5;
  optional uint64 self_value1 = 6;
  optional uint64 self_value2 = 7;
}

message V3CRankBase {
	required uint32 tp = 1;				//榜类型
  optional uint64 score = 2;			//默认排名积分
  optional uint64 score2 = 3;			//默认排名积分
  optional uint64 score3 = 4;			//默认排名积分
  optional CrossUser user = 5; 	//玩家型数据
  optional CorpSnapShot corp = 6; 				//军团型数据
  optional CorpAllianceInfo alliance = 7; 	//联盟型数据
	optional LouLanMapUser llm_user = 8;    //烽火-玩家
	 optional LouLanGroup llm_group = 9; //烽火-势力
}

message C2S_GetV3CRank {
  required uint32 tp = 1;//榜id
  required uint32 page = 2; //第几页数据，0是整个榜，但可能超过最大包长，慎用，一页默认50个数据
	optional uint32 page_size =3;		//每页条数,最大50
}

message S2C_GetV3CRank {
  required uint32 ret = 1;
  required uint32 tp = 2;
  required uint32 page =3;
  repeated V3CRankBase rank = 4;
  optional uint32 self_rank = 5;
  optional V3CRankBase self = 6;
	optional uint32 totle = 7;   //总条数

}

message C2S_ResetKsoulGroup {
  required uint32 id = 1;
}

message S2C_ResetKsoulGroup {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 new_id = 3;
  repeated Award award = 4;
}

message ResetKsoulResult {
  required uint32 ret = 1;
  optional uint32 id = 2;
  repeated Award award = 3;
}

message C2S_AutoResetKsoulGroup {
  required uint32 chapter = 1;
}

message S2C_AutoResetKsoulGroup {
  required uint32 ret = 1;
  optional uint32 chapter = 2;
  optional uint32 new_id = 3;
  repeated ResetKsoulResult reset_result = 4;
}


message C2S_KsoulShopInfo {
}

message S2C_KsoulShopInfo {
  repeated uint32 id = 1;
  repeated uint32 num = 2;
  required uint32 refresh_cnt = 3;
  required uint32 next_refresh_time = 4;
  optional uint32 refresh_num = 5;
}

message C2S_KsoulShopBuy {
  required uint32 id = 1;
}

message S2C_KsoulShopBuy {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 index = 3;
}

message C2S_KsoulShopRefresh {
}

message S2C_KsoulShopRefresh {
  required uint32 ret = 1;
}

message C2S_KsoulShopManualRefresh {
}

message S2C_KsoulShopManualRefresh {
  required uint32 ret = 1;
}

message C2S_KsoulDungeonInfo {
}
message S2C_KsoulDungeonInfo {
  required uint32 id = 1;
  required uint32 refresh_cnt = 2;
  required uint32 challenge_cnt = 3;
}

message C2S_KsoulDungeonRefresh {
}
message S2C_KsoulDungeonRefresh {
  required uint32 ret = 1;
}

message C2S_KsoulDungeonChallenge {
  optional bool must_win = 1;
}
message S2C_KsoulDungeonChallenge {
  required uint32 ret = 1;
  optional BattleReport report = 2; //4.6.50废弃
  repeated Award awards = 3;
  required uint32 refresh_cnt = 4;
  required uint32 challenge_cnt = 5;
  optional uint64 report_id = 6; //4.6.50
	optional bool is_win = 7; //4.6.50
}

message C2S_ShareFriendAwardInfo {
}

message ShareFriendAwardInfo {
    required uint32 id = 1;
    required uint32 last_award_time = 2; //默认为0
}

message S2C_ShareFriendAwardInfo {
	required uint32	ret = 1;
	repeated ShareFriendAwardInfo datas = 2;
}

message C2S_ShareFriendGetAward {
	required uint32 id = 1;
}

message S2C_ShareFriendGetAward {
	required uint32 ret = 1;
	optional ShareFriendAwardInfo datas = 2;
}

message C2S_KsoulSetFightBase {
  required uint32 id = 1;
}

message S2C_KsoulSetFightBase {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_KsoulGold {
  required uint32 id = 1;
  required uint32 count = 2;
}

message S2C_KsoulGold {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 count = 3;
  repeated Award awards = 4;
}

message FortuneBuySilverInfo {
	required uint32 time = 1;
	required uint32 silver = 2;
	required uint32 multi = 3;
	required uint32 gold = 4;
}

message C2S_FortuneInfo {
}

message S2C_FortuneInfo {
	required uint32 times = 1;	// 招财总次数
	repeated uint32 boxids = 2; // 已经领取的箱子id
	repeated FortuneBuySilverInfo buys = 3; //每次招财的信息
}

message C2S_FortuneBuySilver {
}

message S2C_FortuneBuySilver {
	required uint32 ret = 1;
	optional FortuneBuySilverInfo buy  = 2;
}

message C2S_FortuneGetBox {
	required uint32 id = 1;
}

message S2C_FortuneGetBox {
	required uint32 ret = 1;
	optional uint32 bid = 2;
	repeated Award awards = 3;
}

message SecondWeekActivity {
  required uint32 id = 1;
  optional uint32 progress = 2;
  optional uint32 count = 3;//领奖次数
}

message SecondWeekSale {
  required uint32 id = 1;
  required uint32 cnt = 2;
  optional uint32 server_left_cnt = 3; //全服剩余次数
}

message C2S_GetSecondWeek {
}

message S2C_GetSecondWeek {
  required uint32 start_time = 1;
  repeated SecondWeekActivity acts = 2;
  repeated SecondWeekSale sales = 3;
  optional bool special_server = 4;
}

message C2S_SecondWeekAward {
  required uint32 id = 1;
  optional uint32 index = 2; //1-4
}

message S2C_SecondWeekAward {
  required uint32 ret = 1;
  optional SecondWeekActivity act = 2;
  repeated Award awards = 3;
}

message C2S_SecondWeekBuy {
  required uint32 id = 1;
  required uint32 cnt = 2;
  optional uint32 index = 3; //1-4
}

message S2C_SecondWeekBuy {
  required uint32 ret = 1;
  optional SecondWeekSale sale = 2;
  repeated Award awards = 3;
}

message C2S_CorpMsgBoardNewNum {
}

message S2C_CorpMsgBoardNewNum {
  required uint32 ret = 1;
  optional uint32 num = 2;	// 军团留言板有最新的多少条针对某个成员
}

message C2S_CorpMsgBoardContent {
  required uint32 miid = 1;	// 留言板获取到的最小留言id; 如果第一次就为0, 服务器拿最新的10条
}

message CorpMsgBoardContent {
  required uint32 id   = 1;
  required string name = 2;
  required uint32 time = 3;			// 发表时间戳
  required uint32 job  = 4;	// 职务
  required string content = 5;		// 内容
  optional string voicemail_id = 6; //非0表示语音聊天
  optional uint32 voicemail_length = 7; //时长
}

message S2C_CorpMsgBoardContent {
  required uint32 ret	= 1;
  optional uint32 count = 2;	//留言板总共条数
  optional CorpMsgBoardContent top = 3; // 置顶的那一条
  repeated CorpMsgBoardContent contents = 4;
}

enum CorpMsgBoard {
  ID_ADD_NEW	= 1;
  ID_SET_TOP	= 2;
  ID_CANCEL_TOP = 3;
  ID_DELETE = 4;
}

message S2C_CorpMsgBoardBroadCast   {
  required uint32 flag = 1;
  optional CorpMsgBoardContent  content = 2;
}

message C2S_CorpMsgBoardWrite {
  required string content = 1;
  optional string voicemail_id = 2;
  optional uint32 voicemail_length = 3; //时长
}

message S2C_CorpMsgBoardWrite {
  required uint32 ret = 1;
}

message C2S_CorpMsgBoardTop {
  required uint32 id = 1;	// 设置置顶留言,如果用来取消置顶的话就是0
}

message S2C_CorpMsgBoardTop {
  required uint32 ret = 1;
}

message C2S_CorpMsgBoardReadProcess {
}

message S2C_CorpMsgBoardReadProcess {
  required uint32 ret = 1;
}

message C2S_CorpMsgBoardDel {
  required uint32 id = 1;   //删除留言id
}

message S2C_CorpMsgBoardDel {
  required uint32 ret = 1;
  required uint32 id = 2;   //删除留言id
}

message RedEnvUser {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint32 base_id = 4;//main role
  optional uint32 dress_id = 5;
  optional uint32 vip_level = 6;//vip
  optional uint32 gold = 7;//sp1
  optional uint32 pic_fid = 8;//fid
  optional string corp_name = 9;//cname
}

message RedEnvRob {
  required uint32 id = 1;			//红包唯一id
  required uint32 rdev_id = 2;	//红包配置id
  required CrossUser owner = 3;
  required uint32 got_num = 4;	//已领取人数
  required uint32 dead_line = 5;	//红包生效时间
  required string wish = 6;		//寄语
  required bool got_flag = 7;	//是否领取过
}

message RedEnvOwn {
  required uint32 id = 1;
  required uint32 num = 2;
}

message RedEnvAch {
  required uint32 bounty_gold = 1;		//发放元宝
  required uint32 lucky_gold = 2;		//收到元宝
  repeated uint32 bounty_awarded = 3;	//已领取财神成就
  repeated uint32 lucky_awarded = 4;	//已领取手气成就
}

message C2S_GetRedEnvRobList {
}

message S2C_GetRedEnvRobList {
  required uint32 ret = 1;
  required uint32 rob_times = 2;
  required uint32 use_times = 3;
  repeated RedEnvRob red_robs = 4;	//收红包列表
}

message C2S_GetRedEnvRankInfo {
  required uint32 type = 1;
}

message S2C_GetRedEnvRankInfo {
  required uint32 ret = 1;
  required uint32 type = 2;
  repeated CrossUser ranks = 3;
  required uint32 self_rank = 4;	//0表示不在排行榜
}

message C2S_GetRedEnvAchievementInfo {

}

message S2C_GetRedEnvAchievementInfo {
  required uint32 ret = 1;
  optional RedEnvAch red_ach = 2;
}


message C2S_RobTheRedEnvelope {
  required uint32 id = 1;
}

message S2C_RobTheRedEnvelope {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 gold = 3;
}

message C2S_UseTheRedEnvelope {
  required Item item = 1;
  required string wish = 2;
}


message S2C_UseTheRedEnvelope {
  required uint32 ret = 1;
}

message S2C_PushRedEnvelope {
  required uint32 ret = 1;
}


message C2S_GetRedEnvAchievement {
  required uint32 id = 1;
}

message S2C_GetRedEnvAchievement {
  required uint32 ret = 1;
  repeated Award awards = 2;
}

message C2S_GetRedEnvRobRecord {
  required uint32 id = 1;
}

message S2C_GetRedEnvRobRecord {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated CrossUser robbers = 3;//已领取列表未排序
}

enum WAR_STATE{
  WERROR = 0;//错误
  WAPPLY = 1;//报名状态
  WINIT = 2;//初始化
  WBATTLE = 3;//战斗
  WWAIT = 4;//休息
}

message C2S_LegionWarInfo {

}

message S2C_LegionWarInfo {
  required uint32 ret = 1;
  optional bool has_apply = 2;//军团是否报名
  optional uint32 round = 3;//1 2 3 4 5 6 7 哪一轮了
  optional uint32 state = 4;// war_state
  optional uint32 point = 5;//本轮的积分
  optional uint32 total_point = 6;//总的积分
  repeated uint32 award_id = 7;
  optional uint32 challenge_count = 8;//剩余挑战次数
  optional uint32 award_simple = 9;
  optional uint32 award_normal = 10;
  optional uint32 award_perfect = 11;
  optional uint32 attack_total = 12;
}

message WarTime {
  required uint32 round = 1;
  required uint32 start_time = 2;//战斗 start ->battle 休息 battle->end 战斗前如果数据多可能初始化WINIT 报名为start->battle
  required uint32 battle_time = 3;
  required uint32 end_time = 4;
}

message C2S_LegionWarTime {
}

message S2C_LegionWarTime {
  required uint32 ret = 1;
  repeated WarTime war_time = 2;
}

//这个是查看自己防御的 只用id 标示
message SimpleWarDefend {
  required uint32 position = 1;//1 2 3 4
  repeated uint32 user_id = 2;//成员id
}

message C2S_LegionWarApply {
}

message S2C_LegionWarApply {
  required uint32 ret = 1;
  optional bool has_apply = 2;
}

message C2S_LegionWarSetDefend {
  required uint32 set_type = 1;//1自动 2手动
  repeated SimpleWarDefend defend = 2;
}

message S2C_LegionWarSetDefend {
  required uint32 ret = 1;
  required uint32 set_type = 2;
  repeated WarDefend defend = 3;
}

message C2S_LegionWarGetDefend {
}

message S2C_LegionWarGetDefend {
  required uint32 ret = 1;
  repeated WarDefend defend = 2;
}

message C2S_LegionWarEnemyInfo {
}

message CrossCorp{
  required uint64 sid = 1;
  optional string sname = 2;
  required uint32 corp_id = 3;
  optional string name = 4;
  optional uint32 icon_pic = 5;
  optional uint32 icon_frame = 6;
  optional uint32 level = 7;
  optional uint32 sp1 = 8;//剩余城防
  optional uint32 sp2= 9;//积分
  optional uint32 sp3= 10;//状态 0普通 1击败 2完美击败
  repeated uint32 sp4 = 11;//剩余每个城防活着的人
  repeated uint32 sp5 = 12;//每个城的城防值
  optional uint32 sp6 = 13;//是否激活 0否
  repeated uint32 sp7 = 14;//每个城防的防御次数
  optional uint32 home_level = 15;//家园等级
  optional uint32 home_exp = 16;//家园经验
  optional uint64 sp8 = 17;
  optional string alliance_name = 18;
  optional uint32 size = 19;	//成员数
  optional string lname = 20;	//军团长名
  optional CorpSkin skin = 21; //演武台皮肤
}

message S2C_LegionWarEnemyInfo {
  required uint32 ret = 1;
  repeated CrossCorp corp = 2;
  optional uint32 challenge_count = 3;//剩余挑战次数
  optional uint32 reset_count = 4;//剩余购买次数
  optional uint32 corp_point = 5;
  optional uint32 corp_total_point = 6;
}

message C2S_LegionWarEnemyDetail {
  required uint64 sid =1;
  required uint32 corp_id =2;
  required uint32 position = 3;
}

message WarDefend {
  required uint32 position = 1;//1 2 3 4
  optional uint32 left_defend = 2;
  repeated CrossUser user = 3;//成员id//sp1被挑战次数
}

message S2C_LegionWarEnemyDetail {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 corp_id = 3;
  required uint32 position = 4;
  optional WarDefend enemy = 5;
}

message C2S_LegionWarChallengeEnemy {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
  required uint32 user_id = 3;
}

message S2C_LegionWarChallengeEnemy {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 corp_id = 3;
  required uint32 user_id = 4;
  optional BattleReport info = 5; //4.6.50废弃
  optional uint32 challenge_count =7;//挑战次数
  optional CrossUser user = 8;
  optional uint32 point = 9;//本轮的积分
  optional uint32 total_point = 10;//总的积分
  optional uint32 award_point = 11;//加的积分
  optional uint32 award_cpoint= 12;//加的帮贡
  optional uint32 city_value =13;//城防值
  optional uint32 attack_total = 14;
  optional uint64 report_id = 15; //4.6.50
}

message S2C_LegionWarFlushEnemy {
  optional CrossCorp enemy= 1;
  optional uint32 corp_point = 2;
  optional uint32 corp_total_point = 3;
  optional uint32 award_simple = 4;
  optional uint32 award_normal = 5;
  optional uint32 award_perfect = 6;
  optional bool is_win = 7;
  optional CorpMember user = 8;//corp member 对象
  optional uint32 win_pos = 9;
  optional uint32 win_type = 10;
}

message C2S_LegionWarGetAward {
  required uint32 id = 1;
}

message S2C_LegionWarGetAward {
  required uint32 ret = 1;
  repeated uint32 award_id = 2;
  repeated Award awards = 3;
}

message C2S_LegionWarCountReset {
  required uint32 count = 1;//购买的量
}

message S2C_LegionWarCountReset {
  required uint32 ret = 1;
  required uint32 count = 2;
  optional uint32 challenge_count = 3;//剩余挑战次数
  optional uint32 reset_count = 4;//剩余购买次数
}

message C2S_LegionWarSetFireOn {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
}

message S2C_LegionWarSetFireOn {
  required uint32 ret = 1;
  required uint64 sid  =2;
  required uint32 corp_id = 3;
}

message C2S_LegionWarSelfInfo {
}

message S2C_LegionWarSelfInfo {
  required uint32 ret = 1;
  repeated CrossCorp corp = 2;
}

message C2S_LegionWarWaitInfo {
}

message S2C_LegionWarWaitInfo {
  required uint32 ret = 1;
  optional uint32 corp_point = 2;
  optional uint32 corp_total_point = 3;
  optional uint32 point = 4;
  optional uint32 total_point = 5;
  optional uint32 exp_win = 6;
  optional uint32 corp_def_point = 7;
  repeated CrossCorp corp = 8;
}

message C2S_LegionWarMemberInfo {

}
message S2C_LegionWarMemberInfo {
  required uint32 ret = 1;
  repeated CorpMember members = 2;
}

message C2S_LegionWarGetUserRank{
}

message S2C_LegionWarGetUserRank{
  required uint32 ret = 1;
  repeated CrossUser rank = 2;
  optional uint32 self_rank = 3;
}

message C2S_LegionWarGetCorpRank{
}

message S2C_LegionWarGetCorpRank{
  required uint32 ret = 1;
  repeated CrossCorp rank = 2;
  optional uint32 self_rank = 3;
}

message C2S_GetWingBag {}
message S2C_GetWingBag {
    repeated Wing wings = 1;
    optional uint32 wid = 2;  //装备神翼id
}
message C2S_ChangeWing {
    required uint32 id = 1;   //大于0则装备(换装)，=0则卸载
}
message S2C_ChangeWing {
    required uint32 ret = 1;
    required uint32 id = 2;
}
message C2S_RebirthWing {
    required uint32 id = 1;   //要重生的神翼id
}
message S2C_RebirthWing {
    required uint32 ret = 1;
    required uint32 id = 2;
}
message C2S_UpLvlWing {
    required uint32 id = 1;   //要强化的神翼id
    optional uint32 level = 2;
}
message S2C_UpLvlWing {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional uint32 level = 3;
}

message LuckyBagSchedule {
  required uint32 start_time = 1;
  required uint32 end_time = 2;
  repeated LuckyBagDuration duration = 3;//暂定最多2个
}

message LuckyBagDuration {
  required uint32 start_point = 1;
  required uint32 end_point = 2;
}

message C2S_GetLuckyBag {
}

message S2C_GetLuckyBag {
  required uint32 ret = 1;
  optional LuckyBagSchedule schedule = 2;
  repeated uint32 id = 3;
}

message C2S_LuckyBagAward{
  required uint32 id = 1;
}

message S2C_LuckyBagAward{
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_GetLuckyBagUser {
}

message LuckyBagUser {
  required uint32 id = 1;//信息ID
  required string name = 2;//玩家名字
  required uint32 bag = 3;//福袋ID
  required uint32 time = 4;//福袋时间
  optional uint32 main_role = 5;//名字颜色
}

message S2C_GetLuckyBagUser {
  repeated LuckyBagUser user = 1;
}

message S2C_FlushLuckyBagUser {
  required LuckyBagUser user = 1;
}

message C2S_GetNewYearCard {
}
message S2C_GetNewYearCard {
	optional uint32 ret = 1;
	optional LuckyBagSchedule schedule = 2; 
	optional uint32 id = 3;	//活动编号
}

message C2S_GetNewYearCardAward {
}
message S2C_GetNewYearCardAward { 
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

message C2S_GemSetWing {
    required uint32 wid = 1;
    required uint32 gid = 2;
    required uint32 pos = 3;
}
message S2C_GemSetWing {
    required uint32 ret = 1;
    required uint32 wid = 2;
    required uint32 gid = 3;
    required uint32 pos = 4;
}

message Gem {
  required uint32 id = 1;
  required uint32 num = 2;
}

message Inlay {
  required uint32 gem_id = 1;
  required uint32 wing_id = 2;
}


message C2S_GetGemList {
}

message S2C_GetGemList {
  required uint32 ret = 1;
  repeated Inlay inlays = 2;//已镶嵌宝石
  repeated Gem gems = 3;//所有宝石
}

message C2S_ComposeGem {
  required uint32 tar_id = 1;//目标宝石id
  required uint32 tar_num = 2;//目标宝石数量
}

message S2C_ComposeGem {
  required uint32 ret = 1;
  optional Gem add_gem = 2;//合成的宝石
  optional Gem del_gem = 3;//消耗的宝石
}

message C2S_TransformGem {
  required uint32 src_id = 1;
  required uint32 tar_id = 2;
  required uint32 num = 3;
}

message S2C_TransformGem {
  required uint32 ret = 1;
  optional Gem add_gem = 2;//增加的宝石
  optional Gem del_gem = 3;//消耗的宝石
}

message C2S_OneKeyComposeGem {
}

message S2C_OneKeyComposeGem {
  required uint32 ret = 1;
  repeated Inlay inlays = 2;//已镶嵌宝石
  repeated Gem gems = 3;
}

message C2S_ShortCutComposeGem {
  required uint32 wing_id = 1;
  required uint32 pos = 2;
}
message S2C_ShortCutComposeGem {
  required uint32 ret = 1;
  optional uint32 wing_id = 2;
  optional uint32 base_id = 3;
  optional uint32 pos = 4;
  optional uint32 new_gid = 5;
  optional uint32 old_gid = 6;
}

message C2S_BatchTransformGems {
  repeated uint32 src_ids = 1;
  repeated uint32 tar_ids = 2;
  repeated uint32 tar_nums = 3;
}

message S2C_BatchTransformGems {
  required uint32 ret = 1;
  repeated Gem add_gems = 2;//增加的宝石
  repeated Gem del_gems = 3;//消耗的宝石
}


message JewelerAward {
  required uint32 score = 1; // 积分
  repeated Award award = 2; // 道具奖励
}

message C2S_JewelerInfo {
}

message S2C_JewelerInfo {
  repeated uint32 jew = 1;  // 按每列从下到上排
  required uint32 move_times = 2; // 剩余移动次数
  repeated Award rewards = 3; // 今日已获得奖励
  required uint32 bought = 4; // 已购买次数
  required uint32 score = 5; // 积分
  repeated uint32 got_rewards = 6; // 已领取的奖励id
}

message C2S_JewelerMove {
  required uint32 x = 1;
  required uint32 y = 2;
  required uint32 dire = 3;     // 1:上 2:下 3:左 4:右
}

message S2C_JewelerMove {
  required uint32 ret = 1;
  repeated uint32 drop = 2;  // 掉落宝石(包括再次消除的)
  repeated JewelerAward rewards = 3; // 规则同info协议(包括再次消除的)
  required uint32 x = 4;
  required uint32 y = 5;
  required uint32 dire = 6;
  optional uint32 golden_task_item = 7;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 8;     // 试炼武将id
}

message C2S_JewelerAutoMove {
  required uint32 num = 1; //移动次数
}

message S2C_JewelerAutoMove {
  required uint32 ret = 1;
  optional uint32 num = 2;
  repeated uint32 drop = 3; //每次移动消除宝石数
  repeated JewelerAward rewards = 4; //每次移动获得奖励
  optional uint32 golden_task_item = 5;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 6;     // 试炼武将id
}

message C2S_JewelerResetMap {
}

message S2C_JewelerResetMap {
  required uint32 ret = 1;
  repeated uint32 jew = 2;     // 新的地图，规则同info协议
}

message C2S_JewelerClear {
}

message S2C_JewelerClear {
  required uint32 ret = 1;
  repeated uint32 jew = 2;     // 新的地图，规则同info协议
  repeated JewelerAward rewards = 3; // 规则同info协议(包括再次消除的)
  optional uint32 golden_task_item = 4;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 5;     // 试炼武将id
}

message C2S_JewelerBuy {
  required uint32 count = 1;
}

message S2C_JewelerBuy {
  required uint32 ret = 1;
  required uint32 count = 2;
}

message C2S_JewelerRanking {
}
message S2C_JewelerRanking {
  repeated WheelRanking ranking = 1;
  required uint32 ret = 2;
}

message C2S_JewelerAward {
  required uint32 id = 1;
}
message S2C_JewelerAward {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GemUnsetWing {
  required uint32 wid = 1;
  required uint32 pos = 2;
}

message S2C_GemUnsetWing {
  required uint32 wid = 1;
  required uint32 pos = 2;
  required uint32 ret = 3;
  optional uint32 gid = 4;
}

message C2S_GetWingProtect {
}

message S2C_GetWingProtect {
  required uint32 ret = 1;
  repeated WingProtect wp = 2;
}

message C2S_SetWingProtect {
  required uint32 wid = 1;  //金翅膀id
  required uint32 pos = 2;  //护佑位置
	optional uint32 pid = 3;	//护佑翅膀id
}

message S2C_SetWingProtect {
  required uint32 ret = 1;
  required uint32 wid = 2;  //金翅膀id
  required uint32 pos = 3;  //护佑位置
  optional uint32 pid = 4;  //护佑翅膀id
}

message C2S_DelWingProtect {
  required uint32 wid = 1;  //金翅膀id
  required uint32 pos = 2;  //护佑位置
}

message S2C_DelWingProtect {
  required uint32 ret = 1;
  required uint32 wid = 2;  //金翅膀id
  required uint32 pos = 3;  //护佑位置
	optional uint32 pid = 4;  //护佑翅膀id
}

message C2S_GVEDungeonTeamStatus {
}

message S2C_GVEDungeonTeamStatus {
	required uint32 ret = 1; // OK，跨服异常
	required uint32 status = 2; // 0: 不在队伍，1: 在自动匹配队伍，2：在队伍
	required uint64 team_id = 3;
	repeated CrossUser team_members = 4; // sp2 表示机器人 sp3 表示所在位置，从0开始 // sp4 表示军团id，// sp5 表示 是否同意出战 // sp6表示称号 // sp7表示是否与队长好友 // sp8 表示剩余>奖励次数 // npc的id是所拉 user_id | (rand(127) << 24)
	required uint32 leader_pos = 5;
	required bool only_invited = 6;
	optional uint32 online_buff = 7;
	optional uint32 corp_buff = 8;
	optional uint32 friend_buff = 9;
	optional bool kicked = 10;
	optional uint32 chapter = 11;
	repeated uint32 monsters = 12;  // 长度为9的数组，没有怪物id为0
	// 7 8 9
	// 4 5 6
	// 1 2 3
}

message C2S_GVEDungeonCreateTeam {
	required uint32 chapter = 1;
}

message S2C_GVEDungeonCreateTeam {
        required uint32 ret = 1;
	required uint32 chapter = 2;
}

message C2S_GVEDungeonJoinTeam {
	required uint32 chapter = 1;
}

message S2C_GVEDungeonJoinTeam {
        required uint32 ret = 1;
	required uint32 chapter = 2;
}

message C2S_GVEDungeonLeave {
}

message S2C_GVEDungeonLeave {
        required uint32 ret = 1;
}

message C2S_GVEDungeonChangePosition {
        required uint32 pos1 = 1;
        required uint32 pos2 = 2;
}

message S2C_GVEDungeonChangePosition {
        required uint32 ret = 1;
}

message C2S_GVEDungeonKickTeamMember {
        required uint64 kicked_sid = 1;
        required uint32 kicked_user_id = 2;
}

message S2C_GVEDungeonKickTeamMember {
        required uint32 ret = 1;
}

message C2S_GVEDungeonSetTeamOnlyInvited {
        required bool only_invited = 1;
}

message S2C_GVEDungeonSetTeamOnlyInvited {
        required uint32 ret = 1;
}

message C2S_GVEDungeonInvite {
        required uint32 invited_user_id = 1;
        required uint64 team_id = 2;
	required uint32 chapter = 3;
	optional uint64 invited_sid = 4;
}

message S2C_GVEDungeonInvite {
        required uint32 ret = 1;
}

message S2C_GVEDungeonBeInvited {
        required uint32 invitor_user_id = 1;
        required uint64 invitor_team_id = 2;
	required uint32 chapter = 3;
	optional uint64 invitor_sid = 4;
}

message C2S_GVEDungeonInvitedJoinTeam {
        required uint32 invitor_user_id = 1;
        required uint64 invitor_team_id = 2;
	required uint32 chapter = 3;
	optional uint64 invitor_sid = 4;
}

message S2C_GVEDungeonInvitedJoinTeam {
        required uint32 ret = 1;
}

message S2C_GVEDungeonInviteCanceled {
        required uint64 team_id = 1;
        required uint32 invitor_user_id = 2;
	optional uint64 invitor_sid = 3;
}

message C2S_GVEDungeonInviteNPC {

}

message S2C_GVEDungeonInviteNPC {
        required uint32 ret = 1;
}

message C2S_GVEDungeonAgreeBattle {
        required bool agree = 1;
}

message S2C_GVEDungeonAgreeBattle {
        required uint32 ret = 1;
}

message C2S_GVEDungeonExecute {

}

message S2C_GVEDungeonExecute {
        required uint32 ret = 1;
}

message GVEDungeonSingleBattleReport {
  required uint32 team_pos = 1; // 0 - 2
  required uint32 monster_pos = 2; // 0 - 8
  optional BattleBriefReport report = 3; //为空表示本次动作为移动
}

message GVEDungeonBattleRound {
  repeated GVEDungeonSingleBattleReport battles = 1;
}

message GVEDungeonBattleReport {
  required uint64 battle_id = 1;
  required uint64 team_id = 2;
  required bool team_win = 3;
  repeated GVEDungeonBattleRound rounds = 4;
  required uint32 team_leader_pos = 5;
  repeated CrossUser team_members = 6;
  required uint32 team_award_buff = 7;
  required uint32 chapter = 8;
  repeated uint32 monsters = 9;
  required uint32 star = 10;
}

message GVEDungeonMonsterAward {
  required uint32 monster = 1;
  required uint32 score = 2;
  required uint32 honor = 3;
}

message GVEDungeonBattleAwards {
  required uint64 sid = 1;
  required uint32 uid = 2;
  required uint32 score = 3;
  required uint32 honor = 4;
  required bool double_award = 5;
  repeated Award star_awards = 6;
  required uint32 left_award_cnt = 7;
  optional uint32 golden_task_item = 8;     // 获得的升金试炼物品数量
  optional uint32 golden_task_knight_id = 9;     // 试炼武将id
  optional uint32 chapter = 10;
  repeated GVEDungeonMonsterAward monster_awards = 11;
}

message S2C_GVEDungeonBattleResult {
  required GVEDungeonBattleReport report = 1;
  repeated GVEDungeonBattleAwards awards = 2;
	repeated AddFavorInfo favors = 7;	//增加好友度信息
}

message C2S_GVEDungeonBattleTeamChange {
}

message S2C_GVEDungeonBattleTeamChange {
  required uint32 ret = 1;
}

message S2C_GVEDungeonCrossServerLost {

}

message C2S_GVEDungeonGetRank {
}

message S2C_GVEDungeonGetRank {
  required uint32 ret = 1;
  repeated CrossUser user = 2;
  repeated uint32 honor = 3;
}

message C2S_GVEDungeonGetUserInfo {
}

message S2C_GVEDungeonGetUserInfo {
  required uint32 ret = 1;
  optional uint32 honor = 2;
  optional uint32 score = 3;
  optional uint32 award_cnt = 4; //已经奖励次数
  optional uint32 buyed_award_cnt = 5; //已经购买次数
  optional uint32 npc_cd = 6; //上一次找npc时间
  optional uint32 rank = 7;
  optional uint32 title = 8;
  optional bool accept_invite = 9;
  optional bool pop_chat = 10;
  optional uint32 max_honor = 11; //历史最高荣誉
}

message C2S_GVEDungeonBuyAwardCnt {
  required uint32 cnt = 1;
}

message S2C_GVEDungeonBuyAwardCnt {
  required uint32 ret = 1;
  required uint32 cnt = 2;
}

message C2S_GVEDungeonAcceptInvite {
  required bool accept = 1;
}

message S2C_GVEDungeonAcceptInvite {
  required uint32 ret = 1;
}

message C2S_GVEDungeonPopChat {
  required bool pop_chat = 1;
}

message S2C_GVEDungeonPopChat {
  required uint32 ret = 1;
}

message C2S_GVEDungeonRefreshMap {
  required uint32 chapter = 1;
}

message S2C_GVEDungeonRefreshMap {
  required uint32 ret = 1;
}

message C2S_GVEDungeonListenChapterTeams {
  required uint32 chapter = 1;
}

message S2C_GVEDungeonListenChapterTeams {
  required uint32 ret = 1;
  required uint32 chapter = 2;
}

message S2C_GVEDungeonChapterTeam {
  required uint32 chapter = 1;
  optional uint64 team_id = 2;
  optional CrossUser leader = 3; // leader为空，表示team消失了
  optional uint32 member_size = 4;
  optional uint64 avg_fight_value = 5;
  optional bool open = 6;
}

message C2S_GVEDungeonStopListenChapterTeams {
}

message S2C_GVEDungeonStopListenChapterTeams {
  required uint32 ret = 1;
}

message C2S_GVEDungeonJoinLocalTeam {
  required uint32 leader_id = 1;
  required uint64 team_id = 2;
  required uint32 chapter = 3;
}

message S2C_GVEDungeonJoinLocalTeam {
  required uint32 ret = 1;
}

message C2S_GVEDungeonSkipBattle {
}

message S2C_GVEDungeonSkipBattle {
  required uint32 ret = 1;
}

message C2S_GVEDungeonOneKey {
  required uint32 quality = 1; //难度，3,4,5,6
  required uint32 cnt = 2;
}

message S2C_GVEDungeonOneKey {
  required uint32 ret = 1;
  required uint32 quality = 2;
  required uint32 cnt = 3;
  repeated GVEDungeonBattleAwards awards = 4;
}

message S2C_GVEDungeonInviteNPCFail {
}

// 皇陵探宝奇遇
message TombsEventShop {
  required uint32 id = 1;
  required uint32 expire_date = 2;
  required uint32 item_id = 3; // 商品配置id
  required uint32 mult = 4; // 积分倍数
}
message TombsEventChest {
  required uint32 id = 1;
  required uint32 expire_date = 2;
  required bool opened1 = 3; // 免费宝箱是否已开启
  required bool opened2 = 4; // 付费宝箱是否已开启
  required uint32 score1 = 5; // 免费宝箱积分
  required uint32 score2 = 6; // 付费宝箱积分
}
message TombsEventFight {
  required uint32 expire_date = 1;
  required uint32 base_id = 2; // 怪物形象
  required uint64 max_hp = 3; // 总血量
  required uint64 hp = 4; // 当前血量
  repeated Award awards = 5; // 奖励
}
message TombsEventQuestion {
  required uint32 id = 1;
  required uint32 expire_date = 2;
  required uint32 question_id = 3; // 问题配置id
}
message TombsEventRecharge {
  required uint32 expire_date = 1;
  required uint32 item_id = 2; // 配置id
}

// 皇陵探宝 - 查询
message C2S_TombsInfo {
}
message S2C_TombsInfo {
  required uint32 score = 1; //  积分
  required bool got_reward = 2; // 是否已领取排行榜奖励
  repeated uint32 score_reward = 3; // 已领取的积分奖励id
  repeated TombsEventShop event_shop = 4; // 奇遇事件 - 商店
  repeated TombsEventChest event_chest = 5; // 奇遇事件 - 宝箱
  optional TombsEventFight event_fight = 6; // 奇遇事件 - 战斗
  repeated TombsEventQuestion event_question = 7; // 奇遇事件 - 答题
  required uint32 start = 8;
  required uint32 end = 9;
  required uint32 present = 10;
  required uint32 explored_count = 11; // 今天已探索次数
  repeated uint32 recharge = 12; // 可领取的充值事件(配置id)
  optional TombsEventRecharge event_recharge = 13; // 奇遇事件 - 充值
}

// 皇陵探宝 - 探索
message C2S_TombsExplore {
  required uint32 times = 1; // 1:1次 10:10次
}
message S2C_TombsExplore {
  required uint32 ret = 1;
  required uint32 times = 2; // 1:1次 10:10次
  optional uint32 score = 3;
  repeated Award awards = 4;
  repeated TombsEventShop event_shop = 5; // 奇遇事件 - 商店
  repeated TombsEventChest event_chest = 6; // 奇遇事件 - 宝箱
  optional TombsEventFight event_fight = 7; // 奇遇事件 - 战斗
  repeated TombsEventQuestion event_question = 8; // 奇遇事件 - 答题
  optional TombsEventRecharge event_recharge = 9; // 奇遇事件 - 充值
}

// 皇陵探宝 - 刷新商店
message C2S_TombsShopRefresh {
  required uint32 id = 1; // 商店事件id
}
message S2C_TombsShopRefresh {
  required uint32 ret = 1;
  required uint32 id = 2; // 商店事件id
  required uint32 item_id = 3; // 新商品配置id
  required uint32 mult = 4; // 新积分倍数
}

// 皇陵探宝 - 商店购买
message C2S_TombsShopBuy {
  required uint32 id = 1; // 商店事件id
}
message S2C_TombsShopBuy {
  required uint32 ret = 1;
  required uint32 id = 2; // 商店事件id
}

// 皇陵探宝 - 开启宝箱
message C2S_TombsChestOpen {
  required uint32 id = 1; // 宝箱事件id
  required uint32 t = 2; // 1:免费箱子 2:付费箱子
}
message S2C_TombsChestOpen {
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional uint32 score = 3;
  required uint32 id = 4; // 宝箱事件id
}

// 皇陵探宝 - 打守卫
message C2S_TombsFight {
}
message S2C_TombsFight {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  optional uint64 hp = 3; // 当前血量
  optional uint64 report_id = 4; //4.6.50
}

// 皇陵探宝 - 答题
message C2S_TombsAnswer {
  required uint32 id = 1; // 答题事件id
  required uint32 answer = 2; // 答案
}
message S2C_TombsAnswer {
  required uint32 ret = 1;
  required uint32 id = 2; // 答题事件id
}

// 皇陵探宝 - 获取排行榜
message C2S_TombsRank {
}
message S2C_TombsRank {
  repeated WheelRanking ranking = 1;
  required uint32 ret = 2;
}

// 皇陵探宝 - 领取排行奖励
message C2S_TombsRankReward {
}

message S2C_TombsRankReward {
  required uint32 ret = 1;
  repeated Award awards = 2;
}

// 皇陵探宝 - 领取积分奖励
message C2S_TombsScoreReward {
  required uint32 id = 1;
}

message S2C_TombsScoreReward {
  required uint32 ret = 1;
  required uint32 id = 2;
}

// 皇陵探宝 - 领取充值奖励
message C2S_TombsGetRechargeReward {
  required uint32 id = 1; // 配置id,有相同id就随便领其中一个
}

message S2C_TombsGetRechargeReward {
  required uint32 ret = 1;
  required uint32 id = 2;
}

// 皇陵探宝 - 删除事件
message C2S_TombsDelEvent {
  required uint32 t = 1; // 1商店 2宝箱 3战斗 4答题 5充值
  required uint32 id = 2; // 事件id, 战斗、充值填0
}

message S2C_TombsDelEvent {
  required uint32 ret = 1;
  required uint32 t = 2;
  required uint32 id = 3;
}

// 皇陵探宝 - 推送充值完成
message S2C_TombsRecharge {
  required uint32 id = 1; // 配置id
}

message C2S_SuperMarketInfo {
  required uint32 sm_id = 1;//交易所类ID//表里的唯一ID
  required uint32 sort_type = 2;//交易所排序方式 0默认 1额外方式1
  required bool sort_incr = 3;//升序降序
  required uint32 index = 4;//页面位置//默认传1 第一页
  optional uint32 type_id = 5;//大类ID
}

enum SMGOODS_STATUS {
  SMGS_EROR = 0; //错误状态
  SMGS_NORMAL = 1; //正常现象
  SMGS_SOLD = 2; //被卖掉
}

message SuperMarketGoods {
  required uint32 id = 1;//物品唯一ID
  required uint32 sm_id = 2;
  required uint32 price = 3;//价格
  required uint32 size = 4;//数量
  required uint32 due_time = 5;//到期时间点
  required string name = 6;//挂道具的玩家
  required string sname = 7;//挂道具玩家服务器名字
  optional uint32 status = 8;//对于买的人 这个状态无所谓 对于卖的人 这个代表货物的状态
  optional uint32 sp1 = 9;//额外属性1//神器就是战力
  optional uint32 sp2 = 10;//额外属性2//神器就是条数
}

message S2C_SuperMarketInfo {
  required uint32 ret = 1;
  required uint32 sm_id = 2;
  required uint32 sort_type = 3;
  required bool sort_incr = 4;
  required uint32 total_index = 5;//总页数
  repeated SuperMarketGoods goods = 6;//货物
  optional uint32 type_id = 7;
}

message C2S_SuperMarketDetail {
  required uint32 id = 1;//物品唯一ID
}

//有额外的详细信息往这个对象里面加
message SMGoodsDetail {
  required uint32 id = 1;//唯一ID
  required uint32 sm_id = 2;//说明是哪种
  optional Sacredwp sacred_wp = 3;//神器
}

message S2C_SuperMarketDetail {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional SMGoodsDetail detail = 3;
}

message C2S_SuperMarketPurchase {
  required uint32 id = 1;
}

message S2C_SuperMarketPurchase {
  required uint32 ret = 1;
  required uint32 id = 2;//后面返回的数据暂定无
}

message C2S_SuperMarketUserInfo {
}

message S2C_SuperMarketUserInfo {
  required uint32 ret = 1;
  repeated SuperMarketGoods goods = 2;//该类型下已经挂出的道具//其他用该背包里
}

message C2S_SuperMarketSell {
  required uint32 sm_id = 1;
  required uint32 id = 2;//这个物品的在该类型下的ID
  required uint32 price = 3;//价格
  required uint32 duration = 4;//挂的时间
  optional uint32 size = 5;//数量 神器只能是1
}

message S2C_SuperMarketSell {
  required uint32 ret = 1;
  required uint32 sm_id = 2;
  //optional SuperMarketGoods goods = 3;//出售成功会有这个
}

message C2S_SuperMarketGetBack {
  required uint32 id = 1;//物品唯一ID
}

message S2C_SuperMarketGetBack {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_SuperMarketGetPay {
  required uint32 id = 1;
}

message S2C_SuperMarketGetPay {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message SacredwpAttr {
  required uint32 id = 1;
  required uint32 value = 2;
}

message Sacredwp {
  required uint32 id = 1;
  required uint32 base_id = 2;
  optional uint32 exp = 3;
  optional uint32 kid = 4;
  optional bool replace = 5;
  repeated uint32 locks = 6;
  repeated SacredwpAttr cur_attrs = 7;
  repeated SacredwpAttr pro_attrs = 8;
  optional uint32 cur_fv = 9;                   //当前属性战斗力
  optional uint32 pro_fv = 10;                  //预览属性战斗力
  optional uint32 bp_stone = 11;                //消耗的洗炼石熟练
  optional uint32 cur_bpfv = 12;                //当前洗炼战斗力
  optional uint32 pro_bpfv = 13;                //预览洗炼战斗力
  optional uint32 trade_times = 14;             //交易次数
  optional uint32 soul_pos = 15;                //魂炼属性位置
  optional SacredwpAttr soul_attr = 16;         //魂炼属性值
  repeated SacredwpAttr cur_askill_attrs = 17;  //练技当前属性
  optional uint32 level = 18;                   //暗金神兵等级
  optional uint32 askill_soul_pos = 19;         //练技魂炼属性位置
  optional SacredwpAttr askill_soul_attr = 20;  //练技魂炼属性值
  optional uint32 ancester_base_id = 21;        //被继承神兵BaseId
  repeated SacredwpAttr ancester_attrs = 22;    //被继承神兵洗练属性
  optional uint32 askill_wash_pos = 23;         //练技洗练属性位置
  optional SacredwpAttr askill_wash_attr = 24;  //练技洗练属性值
  repeated SacredwpAttr quenching_attrs = 25;   //彩金神兵淬炼进度
  repeated Award material_attrs = 26;           //彩金神兵淬炼消耗
  optional uint32 book_type = 27;               //神兵谱类型
}

message C2S_GetSacredwpBag {
}

message S2C_GetSacredwpBag {
  required uint32 ret = 1;
  repeated Sacredwp  sacredwps = 2;
}

message C2S_EquipSacredwp {
  required uint32 kid = 1;   //武将id
  required uint32 swid = 2;  //神器id, 0表示卸载神器
}

message S2C_EquipSacredwp {
  required uint32 ret = 1;
  required uint32 kid = 2;   //武将id
  required uint32 swid = 3;  //神器id
}

message C2S_UpgradeSacredwp {
  required uint32 upgrade_id = 1;
  repeated uint32 consume_ids = 2;
}

message S2C_UpgradeSacredwp {
  required uint32 ret = 1;
}

message C2S_BaptizeSacredwpAttrs {
  required uint32 sacredwp_id = 1;
}

message S2C_BaptizeSacredwpAttrs {
  required uint32 ret = 1;
}

message C2S_ReplaceSacredwpAttrs {
  required uint32 sacredwp_id = 1;
}

message S2C_ReplaceSacredwpAttrs {
  required uint32 ret = 1;
}

message C2S_LockSacredwpAttrs {
  required uint32 sacredwp_id = 1;
  required uint32 index = 2;				//属性索引1~10
  required bool lock = 3;						//true:锁定 false:解锁
}

message S2C_LockSacredwpAttrs {
  required uint32 ret = 1;
}

message C2S_RebirthSacredwp {
  required uint32 sacredwp_id = 1;
  required uint32 type = 2; //1表示预览 0表示重生
}

message S2C_RebirthSacredwp {
  required uint32 ret = 1;
  required uint32 type = 2; //1表示预览 0表示重生
  repeated Award awards = 3;
}

message C2S_GetSacredwpRank {
}

message S2C_GetSacredwpRank {
  required uint32 ret = 1;
  repeated Sacredwp weapon = 2;
  repeated CrossUser user = 3;
}

message C2S_SoulTrainSacredwpAttr {
  required uint32 sacredwp_id = 1;	//神兵id
  required uint32 index = 2;				//第几条属性，从1开始
  required uint32 item_id = 3;			//使用的魂炼道具id
}

message S2C_SoulTrainSacredwpAttr {
  required uint32 ret = 1;
  optional SacredwpAttr old_attr = 2;
  optional SacredwpAttr new_attr = 3;
  optional uint32 old_fight_value = 4;
  optional uint32 new_fight_value = 5;
}

message C2S_SacredwpSoulTrainLostInfo {
  required uint32 sacredwp_id = 1;	//神兵id
}

message S2C_SacredwpSoulTrainLostInfo {
  required uint32 ret = 1;
  optional SacredwpAttr old_attr = 2;
  optional SacredwpAttr new_attr = 3;
  optional uint32 old_fight_value = 4;
  optional uint32 new_fight_value = 5;
}

message C2S_ConfirmSacredwpAttr {
  required uint32 sacredwp_id = 1;	//神兵id
  required bool confirm = 2;
}

message S2C_ConfirmSacredwpAttr {
  required uint32 ret = 1;
  required bool confirm = 2;
}

message C2S_SacredwpDailyBaptizeInfo {
}

message S2C_SacredwpDailyBaptizeInfo {
  required uint32 ret = 1;
  optional uint32 count = 2;
  repeated uint32 award_ids = 3;
}

message C2S_SacredwpDailyBaptizeAward {
  required uint32 id = 1;
}

message S2C_SacredwpDailyBaptizeAward {
  required uint32 ret = 1;
  repeated Award awards = 2;
  repeated uint32 award_ids = 3;
}

message SacredwpTransform {
  required uint32 sacredwp_id = 1;
  required uint32 target_base_id = 2;
}

message C2S_SacredwpTransform {
  repeated SacredwpTransform trans = 1;
  optional uint32 tp = 2;
}

message S2C_SacredwpTransform {
  required uint32 ret = 1;
  repeated Sacredwp wp = 2;
}

message C2S_SacredwpExpandCurrentAttr {
  required uint32 sacredwp_id = 1;
}

message S2C_SacredwpExpandCurrentAttr {
  required uint32 ret = 1;
  optional uint32 index = 2;
  optional SacredwpAttr add_attr = 3;
}

message C2S_SuperMarketLockInfo {
}

message S2C_SuperMarketLockInfo {
  required uint32 ret = 1;
  optional bool has_release = 2;
  optional bool has_set = 3;//是否设置过密码
  optional uint32 left_count = 4;
  optional uint32 next_time = 5;
}

message C2S_SuperMarketReleaseLock {
  required string pwd = 1;
}

message S2C_SuperMarketReleaseLock {
  required uint32 ret = 1;
  optional bool has_release = 2;
  optional uint32 left_count = 3;
  optional uint32 next_time = 4;
}

message C2S_SuperMarketResetLock {
  required string pwd = 1;
}

message S2C_SuperMarketResetLock {
  required uint32 ret = 1;
  optional bool has_release = 2;
  optional bool has_set = 3;
}

message C2S_SuperMarketLog {
  required uint32 tp = 1;
}

message SuperMarketLog {
  required uint64 id = 1;
  required uint32 time = 2;
  required uint32 tp = 3;
  required uint32 sm_id = 4;
  required uint32 price = 5;
  required uint32 size = 6;
}

message S2C_SuperMarketLog {
  required uint32 ret = 1;
  required uint32 tp = 2;
  repeated SuperMarketLog log = 3;
}

message C2S_UpdateSacredwpStar {
  required uint32 id = 1; //升星神兵ID
}

message S2C_UpdateSacredwpStar {
  required uint32 ret = 1;
  optional uint32 id = 2; //升星神兵ID
}

message C2S_SacredwpInherit {
  required uint32 inheritor_id = 1; //继承神兵ID
  required uint32 ancester_id = 2; //被继承神兵ID
}

message S2C_SacredwpInherit {
  required uint32 ret = 1;
  optional uint32 inheritor_id = 2; //继承神兵ID
  optional uint32 ancester_id = 3; //被继承神兵ID
  optional uint32 new_id = 4;//新生成的神兵ID
}

message C2S_WashSacredwpAskill {
  required uint32 id = 1; //神兵id
  required uint32 pos = 2; //第几条属性，从1开始
}

message S2C_WashSacredwpAskill {
  required uint32 ret = 1;
  optional uint32 id = 2; //神兵id
  optional uint32 pos = 3; //第几条属性，从1开始
  optional SacredwpAttr old_attr = 4;
  optional SacredwpAttr new_attr = 5;
  optional uint32 old_fight_value = 6;
  optional uint32 new_fight_value = 7;
}

message C2S_ReplaceSacredwpAskill {
  required uint32 id = 1; //神兵id
  //required uint32 pos = 2; //第几条属性，从1开始
}

message S2C_ReplaceSacredwpAskill {
  required uint32 ret = 1;
  optional uint32 id = 2; //神兵id
  //optional uint32 pos = 3; //第几条属性，从1开始
}

message C2S_SoulTrainSacredwpAskill {
  required uint32 id = 1; //神兵id
  required uint32 pos = 2; //第几条属性，从1开始
  required uint32 item_id = 3; //使用的魂炼道具id
}

message S2C_SoulTrainSacredwpAskill {
  required uint32 ret = 1;
  optional uint32 id = 2; //神兵id
  optional uint32 pos = 3; //第几条属性，从1开始
  optional uint32 item_id = 4; //使用的魂炼道具id
  optional SacredwpAttr old_attr = 5;
  optional SacredwpAttr new_attr = 6;
  optional uint32 old_fight_value = 7;
  optional uint32 new_fight_value = 8;
}

message C2S_ConfirmSacredwpAskill {
  required uint32 id = 1;	//神兵id
  required bool confirm = 2;
}

message S2C_ConfirmSacredwpAskill {
  required uint32 ret = 1;
  optional uint32 id = 2; //神兵id
  optional bool confirm = 3;
}

message C2S_SacredwpAskillLostInfo {
  required uint32 id = 1;	//神兵id
  required uint32 pos = 2;
}

message S2C_SacredwpAskillLostInfo {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 pos = 3;
  optional SacredwpAttr old_attr = 4; //当前属性
  optional SacredwpAttr wash_attr = 5; //洗练属性
  optional SacredwpAttr soul_attr = 6; //魂练属性
  optional uint32 old_fight_value = 7; //当前评分
  optional uint32 wash_fight_value = 8; //洗练评分
  optional uint32 soul_fight_value = 9; //魂练评分
}

message C2S_SacredwpInheritPreview {
  required uint32 inheritor_id = 1; //继承神兵ID
  required uint32 ancester_id = 2; //被继承神兵ID
}

message S2C_SacredwpInheritPreview {
  required uint32 ret = 1;
  optional uint32 inheritor_id = 2; //继承神兵ID
  optional uint32 ancester_id = 3; //被继承神兵ID
  optional uint32 fight_value = 4; //预览评分
}

message C2S_SacredwpQuenching {
  required uint32 id = 1;	//神兵id
  optional uint32 pos = 2;  //位置 
  repeated Award materials = 3; //消耗的碎片id,num
}

message S2C_SacredwpQuenching {
  required uint32 ret = 1; //操作结果
  optional uint32 id = 2; //神兵id
  optional uint32 pos = 3; //孔位位置
  optional uint32 exp = 4;
  optional uint32 old_fight_value = 5;
  optional uint32 new_fight_value = 6;
}

message C2S_SeniorSoulTrainSacredwpAskill {
  required uint32 id = 1;       //神兵id
  required uint32 pos = 2;      //第几条属性，从1开始
  required uint32 item_id = 3;  //使用的魂炼道具id
  required bool is_preview = 4; // 是否是预览，true:预览
}

message S2C_SeniorSoulTrainSacredwpAskill {
  required uint32 ret = 1;
  required uint32 id = 2;       //神兵id
  required uint32 pos = 3;      //第几条属性，从1开始
  required uint32 item_id = 4;  //使用的魂炼道具id
  required bool is_preview = 5; // 是否是预览，true:预览
  optional SacredwpAttr old_attr = 6;
  optional SacredwpAttr new_attr = 7;
  optional uint32 old_fight_value = 8;
  optional uint32 new_fight_value = 9;
}

// 天天返利 - 查询
message C2S_DailyRechargeInfo {
}
message S2C_DailyRechargeInfo {
  required uint32 start = 1; //  活动开始时间 0是未配置活动
  optional uint32 money = 2; // 充值金额
  repeated Award daily_rewards = 3; // 每日奖励，每天3个奖励，共21个
  repeated Award final_rewards = 4; // 最终奖励
  repeated uint32 recharged = 5; //  代表7天是否充值 0未充值，1已领取，2充值但未领取
  optional bool got_daily_reward = 6; // 当天奖励是否已领取 (已无效，是否领取看参数5)
  optional bool got_final_reward = 7; // 最终奖励是否已领取
  repeated uint32 worth = 8; // 7天的奖励价值
  repeated uint32 slt = 9; // 奖励是否多选 第1-7个变量:每日奖励 第8个变量:最终奖励
}
// 天天返利 - 推送当天充值已完成
message S2C_DailyRechargeNotice {
}

// 天天返利 -  领取奖励
message C2S_DailyRechargeReward {
  required uint32 reward_type = 1; // 1 每日奖励  2 最终奖励
  optional uint32 idx = 2; //多选1 idx:从1开始
}

message S2C_DailyRechargeReward {
  required uint32 ret = 1;
  required uint32 reward_type = 2;
  repeated Award rewards = 3;
}

message C2S_GetWeekFundConfigInfo {
}

message S2C_GetWeekFundConfigInfo {
  required uint32 ret = 1;
  required uint32 start_time = 2;
  required uint32 end_time = 3;
  required uint32 limit_money = 4;
  repeated uint32 days = 5;
  repeated Award  awards1 = 6;
  repeated Award  awards2 = 7;
  required uint32 times = 8; //返利倍数，gm后台传入，然后再传给客户端，服务器不做逻辑处理
  repeated Award  awards3 = 9;
  repeated Award  awards4 = 10;
  repeated uint32 selects = 11; //是否是4选1标记  1表示4选一 0 表示全部都给
}

message C2S_GetWeekFundBaseInfo {
}

message S2C_GetWeekFundBaseInfo {
  required uint32 ret = 1;
  required bool   buy = 2;					//是否购买
  required uint32 day = 3;					//第几天
  repeated uint32 award_days = 4;		//已领取的奖励
}

message C2S_AcquireWeekFundAward {
  required uint32 day = 1;
  optional uint32 pos = 2;
}

message S2C_AcquireWeekFundAward {
  required uint32 ret = 1;
  required uint32 day = 2;
  repeated Award awards = 3;
}
message C2S_FuseGem {
  required uint32 id = 1;
  required uint32 num = 2;
}
message S2C_FuseGem {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 num = 3;
}

// 等级礼包 - 礼包结构
message LevelGift {
  required uint32 id = 1; // 配置表id
  required uint32 expire_date = 2; // 截止时间
  required uint32 bought_times = 3; // 已购买次数
}

message LevelGiftRecharge {
  required uint32 id = 1; // 配置表id
  required uint32 expire_date = 2; // 截止时间
  required uint32 recharge = 3; // 金额(直冲时表示充值次数)
  required uint32 award = 4; //领奖次数 领了一次代表已经领过了
}

// 等级礼包 - 查询
message C2S_LevelGiftInfo {
}
message S2C_LevelGiftInfo {
  required uint32 ret = 1; // 永远返回OK，无意义，当gift结构为空时让客户端解析不报错
  repeated LevelGift gifts = 2; //  可以买的礼包们
  repeated LevelGiftRecharge recharges = 3;//冲值礼包
  repeated LevelGiftRecharge directs = 4; //直冲
}

// 等级礼包 -  购买
message C2S_LevelGiftBuy {
  required uint32 id = 1; // 配置表id
  required uint32 times = 2; // 购买次数
}

message S2C_LevelGiftBuy {
  required uint32 ret = 1;
  required uint32 id = 2; // 配置表id
  required uint32 times = 3; // 购买次数
}

message C2S_LevelGiftRechargeAward {
  required uint32 id = 1;
}

message S2C_LevelGiftRechargeAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_LevelGiftDirectAward {
  required uint32 id = 1; //直冲ID
  optional uint32 index = 2; //多选一选项
}

message S2C_LevelGiftDirectAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  optional uint32 index = 4;
}

message FFKSkillInfo {
  required uint32 skill_type = 1;
  required uint32 level = 2;
  required uint32 exp = 3;
}

message C2S_FFKSkillInfo {
}

message S2C_FFKSkillInfo {
  required uint32 ret = 1;
  repeated FFKSkillInfo info = 2;
}

message C2S_UpdateFFKSkillInfo {
  required uint32 skill_type = 1;
  required uint32 exp = 2;
}

message S2C_UpdateFFKSkillInfo {
  required uint32 ret = 1;
  required uint32 skill_type = 2;
  required uint32 exp = 3;
  optional FFKSkillInfo info = 4;
}

message C2S_FFKUserInfo{
}

message S2C_FFKUserInfo{
  required uint32 ret = 1;
  optional uint64 round_start_time = 2;
  optional uint64 round_end_time = 3;
  optional uint32 score = 4;
  optional uint32 title = 5;
  optional uint32 local_rank = 6;
  optional uint32 area_rank = 7;
  optional uint32 all_rank = 8;
  optional uint32 week_challenge_cnt = 9;
  optional uint32 week_win_challenge_cnt = 10;
  optional uint32 daily_challenge_cnt = 11;
  optional uint32 daily_win_challenge_cnt = 12;
  repeated uint32 awarded_task = 13;
  optional uint32 active = 14;
  optional uint32 win_rate = 15;
}

message C2S_FFKGetTaskAward{
  repeated uint32 id = 1;
}

message S2C_FFKGetTaskAward{
  required uint32 ret = 1;
  repeated uint32 id = 2;
}

message C2S_FFKGetRank {
  required uint32 type = 1; // 1 本服，2 赛区，3 全服
}

message S2C_FFKGetRank {
  required uint32 type = 1; // 1 本服， 2 赛区， 3 跨服
  repeated CrossUser users = 2; // sp2 表示score， sp3表示段位, sp8表示胜率 0 - 1000, sp9表示出战次数
}

message C2S_FFKStatus {
}

message S2C_FFKStatus {
  required uint32 ret = 1;
  required uint32 status = 2; // 0不在匹配，1在匹配, 2超时
}

message C2S_FFKMatch {
    optional bool skip_battle = 1; //是否跳过战报
}

message S2C_FFKMatch {
    required uint32 ret = 1;
}

message C2S_FFKLeave {
  required bool quit = 1; // true 表示离开整个界面，false仅表示取消匹配 // 服务器会根据这个字段做优化
}

message S2C_FFKLeave {
  required uint32 ret = 1;
}

message S2C_FFKBattle {
    required CrossUser enemy = 1;
    optional BattleReport report = 2; //废弃
    required bool me_first = 3;
    optional uint32 title = 4;
    optional uint32 local_rank = 5;
    optional uint32 area_rank = 6;
    optional uint32 all_rank = 7;
    optional int32 change_score = 8;
    optional uint64 report_id = 9;
    optional bool skip_battle = 10; //是否跳过战报
    optional bool win = 11; //胜负结果
}

message C2S_FFKGetPeakBriefs {
  required bool all = 1;
}

message FFKPeakBrief {
  required uint64 battle_id = 1;
  required CrossUser user1 = 2;
  required CrossUser user2 = 3;
  repeated uint32 knights1 = 4;
  repeated uint32 knights2 = 5;
  required bool user1_win = 6;
  required uint64 time = 7;
}

message S2C_FFKGetPeakBriefs {
  required bool all = 1;
  repeated FFKPeakBrief peaks = 2;
}

message C2S_FFKPeak {
  required bool all = 1;
  required uint64 battle_id = 2;
}

message S2C_FFKPeak {
  required uint32 ret = 1;
  required bool all = 2;
  required uint64 battle_id = 3;
  optional CrossUser user1 = 4;
  optional CrossUser user2 = 5;
  optional BattleReport report = 6;//废弃(仅内部使用)
  optional uint64 time = 7;
  optional uint64 report_id = 8;
}

message C2S_FFKLastBattleVideoBriefs {
}

message S2C_FFKLastBattleVideoBriefs {
  required uint32 ret = 1;
  optional uint64 battle_id = 2;
  optional CrossUser user1 = 3;
  optional CrossUser user2 = 4;
  optional uint64 time = 5;
  repeated uint32 knights1 = 6;
  repeated uint32 knights2 = 7;
  optional bool user1_win = 8;
  optional bool me_first = 9;
}

message C2S_FFKLastBattleVideo {
}

message S2C_FFKLastBattleVideo {
  required uint32 ret = 1;
  optional uint64 battle_id = 2;
  optional CrossUser user1 = 3;
  optional CrossUser user2 = 4;
  optional BattleReport report = 5; //废弃
  optional uint64 time = 6;
  optional uint64 report_id = 7;
  repeated uint32 knights1 = 8;
  repeated uint32 knights2 = 9;
  optional bool user1_win = 10;
  optional bool me_first = 11;
}

message C2S_FFKHonorHall {
}

message FFKHonorHallUser {
  required CrossUser user = 1;
  required uint32 title = 2;
  required uint32 rank = 3;
  required uint32 score = 4;
}

message FFKHonorHallOfOneSeason {
  required uint64 start_time = 1;
  required uint64 end_time = 2;
  repeated FFKHonorHallUser all_honor_users = 3;	//全服
  repeated FFKHonorHallUser area_honor_users = 4;	//战区
  repeated FFKHonorHallUser local_honor_users = 5;	//单服
}

message S2C_FFKHonorHall {
  required uint32 ret = 1;
  repeated FFKHonorHallOfOneSeason seasons = 2;
}

message FFKUserLog {
  required CrossUser enemy = 1;
  required uint64 time = 2;
  required bool active = 3; //主动匹配
  required bool win = 4;
  required int32 score = 5;
  required uint32 total_score = 6;
  required uint32 title = 7;
  optional bool title_change = 8;
  optional uint64 battle_id = 9;
}

message C2S_FFKUserLog {
  required uint64 last_log_battle_id = 1;
}

message S2C_FFKUserLog {
  required uint32 ret = 1;
  repeated FFKUserLog logs = 2;
}

message C2S_GetLabourDayInfo {
}

message S2C_GetLabourDayInfo {
  required uint32 ret = 1;
  repeated uint32 labour_day_ids = 2;
  optional uint32 login_days = 3;
  repeated uint32 labour_day_box_ids = 4;
}

message C2S_GetLabourDayAward {
 required uint32 id = 1;
}

message S2C_GetLabourDayAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  repeated uint32 labour_day_ids = 4;
  optional uint32 login_days = 5;
}

message C2S_GetLabourDayBoxAward {
 required uint32 id = 1;
}

message S2C_GetLabourDayBoxAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  repeated uint32 labour_day_box_ids = 4;
}

message C2S_GetYyb521ActivityInfo {
}

message S2C_GetYyb521ActivityInfo {
  required uint32 ret = 1;
  optional uint32 start = 2;
  optional uint32 end = 3;
  optional uint32 present = 4;
  optional uint32 state = 5;	//0未充值 1未领取，2已领取
}

message C2S_GetYyb521ActivityAward {
}

message S2C_GetYyb521ActivityAward {
  required uint32 ret = 1;
  repeated Award awards = 2;
}

message C2S_GetCreate {
}

message S2C_GetCreate {
  required uint32 create_time = 1;
}

message Horse {
  required uint32 advance_id = 1;
  required uint32 id = 2;
  required uint32 level = 3;
  required uint32 exp = 4;
  optional uint32 kid = 5;
  optional uint32 protector = 6; //金马义从 如果我是金马，这个字段表示帮助我的马
  optional uint32 protected = 7; //金马义从 如果我是红马，这个字段表示被我帮助的马
  optional uint32 protector_dg = 8; //暗金马协战 如果我是暗金马，这个字段表示帮助我的马
  optional uint32 protected_dg = 9; //暗金马协战 如果我是金马，这个字段表示被我帮助的马
}

message C2S_GetHorseBag {
}

message S2C_GetHorseBag {
  required uint32 ret = 1;
  repeated Horse horses = 2;
}

message C2S_EquipHorse {
  required uint32 kid = 1;   //武将id
  required uint32 horse_advance_id = 2;  //战马advanceid，0表示卸载
}

message S2C_EquipHorse {
  required uint32 ret = 1;
  required uint32 kid = 2;   //武将id
  required uint32 horse_advance_id = 3;  //战马id
}

message C2S_FeedHorse {
  required uint32 horse_advance_id = 1;
  repeated Item consume_items = 2;
}

message S2C_FeedHorse {
  required uint32 ret = 1;
  required uint32 horse_advance_id = 2;
  optional uint32 level = 3;
  optional uint32 exp = 4;
}

message C2S_HorseUpStar {
  required uint32 horse_advance_id = 1;
}

message S2C_HorseUpStar {
  required uint32 ret = 1;
  required uint32 horse_advance_id = 2;
  optional uint32 horse_id = 3;
}

message C2S_HorseCompose {
}

message S2C_HorseCompose {
  required uint32 ret = 1;
  repeated uint32 compose_id = 2;
}

message C2S_HorseComposeUp {
  required uint32 compose_id = 1;
}

message S2C_HorseComposeUp {
  required uint32 ret = 1;
  optional uint32 old_compose_id = 2;
  optional uint32 new_compose_id = 3;
}

message C2S_GetHorseInfo {
}

message S2C_GetHorseInfo {
  required uint32 ret = 1;
  optional uint32 horse_soul = 2;
  optional uint32 used_free_common_conjure_cnt = 3;
  optional uint32 used_free_bole_conjure_cnt = 4;
  optional uint32 key_common_conjure_cnt = 5; // 还有几次必出稀有
  optional uint32 key_bole_conjure_cnt = 6;
  optional uint32 level_target = 7; // 累计好感度
  optional uint32 used_level_target = 8; // 消耗的好感度
  optional uint32 level_target_id = 9; // 好感度id
  optional uint32 level_target_hp = 10;
  optional uint32 level_target_physical_attack = 11;
  optional uint32 level_target_magical_attack = 12;
  optional uint32 level_target_physical_defense = 13;
  optional uint32 level_target_magical_defense = 14;
  optional uint32 level_target_local_rank = 15;
  optional uint32 level_target_cross_rank = 16;
  optional uint32 daily_common_conjure_cnt = 17;
  optional uint32 daily_bole_conjure_cnt = 18;
  optional uint32 total_common_conjure_cnt = 19;
  optional uint32 total_bole_conjure_cnt = 20;
}

message C2S_ActiveHorseTarget {
  optional uint32 type = 1; // 1:提升hp  2:提升pa 3:提升ma 4:提升pd 5:提升md 6:突破
}

message S2C_ActiveHorseTarget {
  required uint32 ret = 1;
  optional uint32 level_target_id = 2; // 好感度id
  optional uint32 level_target_hp = 3;
  optional uint32 level_target_physical_attack = 4;
  optional uint32 level_target_magical_attack = 5;
  optional uint32 level_target_physical_defense = 6;
  optional uint32 level_target_magical_defense = 7;
  optional uint32 type = 8;
}

message C2S_ActiveHorseTargetOneKey {
  optional uint32 type = 1; // 1:提升hp  2:提升pa 3:提升ma 4:提升pd 5:提升md 6:突破
}

message S2C_ActiveHorseTargetOneKey {
  required uint32 ret = 1;
  optional uint32 level_target_id = 2; // 好感度id
  optional uint32 level_target_hp = 3;
  optional uint32 level_target_physical_attack = 4;
  optional uint32 level_target_magical_attack = 5;
  optional uint32 level_target_physical_defense = 6;
  optional uint32 level_target_magical_defense = 7;
  optional uint32 type = 8;
  optional uint32 level_target = 9; // 累计好感度
  optional uint32 used_level_target = 10; // 消耗的好感度
  optional uint32 left_level_target = 11; // 剩余好感度
}

message C2S_HorseConjure {
  required uint32 type = 1; // 1 普通 2 伯乐
  required uint32 cnt = 2; // 1 或者 5
}

message S2C_HorseConjure {
  required uint32 ret = 1;
  required uint32 type = 2;
  required uint32 cnt = 3;
  repeated uint32 pack_id = 5;
  optional uint32 horse_soul = 6;
}

message C2S_HorseReborn {
  required uint32 horse_advance_id = 1;
  required bool preview = 2;
}

message S2C_HorseReborn {
  required uint32 ret = 1;
  required uint32 horse_advance_id = 2;
  required bool preview = 3;
  repeated Item items = 4;
}

message C2S_HorseSetProtector {
  required uint32 horse_advance_id = 1; //金马id
  required uint32 protector_advance_id = 2; //红马id
}

message S2C_HorseSetProtector {
  required uint32 ret = 1;
  required uint32 horse_advance_id = 2;
  required uint32 protector_advance_id = 3;
}

message C2S_HorseUnsetProtector {
  required uint32 horse_advance_id = 1; //金马id
}

message S2C_HorseUnsetProtector {
  required uint32 ret = 1;
  required uint32 horse_advance_id = 2;
}

message C2S_HorseSetProtectorDG {
  required uint32 horse_advance_id = 1;  // 暗金马 id
  required uint32 protector_advance_id = 2; //金马id
}

message S2C_HorseSetProtectorDG {
  required uint32 ret = 1;
  required uint32 horse_advance_id = 2;
  required uint32 protector_advance_id = 3;
}

message C2S_CaptureInfo {
}

message S2C_CaptureInfo {
  required uint32 ret = 1; // OK，跨服异常
  required uint32 status = 2; // 1: 普通，2：在匹配，3：在战斗,4:匹配失败
  optional uint32 daily_rob = 3;
  repeated uint32 ids = 4;
	optional uint32 team_id = 5;	//房间号(默认0)
	optional uint32 mode = 6; //0-普通 1-天梯
}

message C2S_CaptureTeamInfo {
}

message S2C_CaptureTeamInfo {
  required uint32 ret = 1;
  repeated CrossUser members = 2;//(如果有队伍)
  optional bool is_leader = 3;
  optional uint32 score = 4;
  optional uint32 local_rank = 5;
  optional uint32 cross_rank = 6;
  optional uint32 daily_rob = 7;
  optional uint32 win_rate = 8;
	optional uint32 team_id = 9;
	optional uint32 mode = 10;	//无队伍时默认0
}

message C2S_CaptureAwardInfo {
}

message S2C_CaptureAwardInfo {
  required uint32 ret = 1;
  repeated uint32 ids = 2;//已经领取的id
}

message C2S_CaptureGetAward {
  required uint32 id = 1;
}

message S2C_CaptureGetAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  repeated uint32 ids = 4;
}

message C2S_CaptureRank {
  required uint32 r_type = 1;//3代表积分 4代表胜率
}

message S2C_CaptureRank {
  required uint32 ret = 1;
  required uint32 r_type = 2;
  repeated CrossUser users = 3;
}

message C2S_CaptureTeamInvite {
  required uint32 user_id = 1;
	optional uint32 mode = 2;	//0-普通 1-天梯
}

message S2C_CaptureTeamInvite {
  required uint32 ret = 1;
  required uint32 user_id = 2;
	optional uint32 mode = 3; //0-普通 1-天梯
}

message S2C_CaptureTeamInvited {
  required uint32 user_id = 1;
  optional CrossUser user = 2;
	optional uint32 mode = 3; //0-普通 1-天梯
}

message C2S_CaptureTeamJoin {
  required uint32 user_id = 1;
	optional uint32 mode = 2;
}

message S2C_CaptureTeamJoin {
  required uint32 ret = 1;
  required uint32 user_id = 2;
	optional uint32 mode = 3;
}

message C2S_CaptureTeamKick {
  required uint32 user_id = 1;//如果USERID是自己代表自己退队
	required uint64 sid = 2;
}

message S2C_CaptureTeamKick {
  required uint32 ret = 1;
  optional uint32 user_id = 2;
	optional uint64 sid = 3;
}

message C2S_CreateCaptureTeam {
	required uint32 mode = 1; //0-普通 1-天梯
}

message S2C_CreateCaptureTeam {
	required uint32 ret = 1;
	optional uint32 team_id = 2;
	optional bool open = 3;
	optional uint32 mode = 4; //0-普通 1-天梯
}

message C2S_OpenCaptureTeam {
	required uint32 team_id = 1; //房间号
	required bool open = 2; //true-开放，false-不开放
}

message S2C_OpenCaptureTeam {
	required uint32 ret = 1;
	required bool open = 2;
}

message C2S_JoinCaptureTeam {
	required uint32 team_id = 1;	//房间号
	required uint32 mode = 2; //0-普通 1-天梯
}

message S2C_JoinCaptureTeam {
	required uint32 ret = 1;
}


message C2S_CaptureMatch {
	optional uint32 mode = 1;
}

message S2C_CaptureMatch {
  required uint32 ret = 1;
	optional uint32 mode = 2;
}

message C2S_CaptureStopMatch {
}

message S2C_CaptureStopMatch {
  required uint32 ret = 1;
}

message C2S_CaptureGameInfo {
}

message CaptureGameTeam {
  required uint32 id = 1;
  required uint32 score = 2;
  repeated uint32 sight = 3;//客户端不支持uint64
  repeated CrossUser users = 4;
}

message S2C_CaptureGameInfo {
  required uint32 ret = 1;
  optional uint32 team_id = 2;
  repeated CaptureGameTeam teams = 3;
  optional CaptureGameMap map = 4;//包括所有动态静态信息
  optional uint32 state = 5;//哪个阶段 123
}

message C2S_CaptureGameRank {
}

message S2C_CaptureGameRank {
  required uint32 ret = 1;
  repeated CrossUser users = 3;
}

message C2S_CaptureGameTips {
}

message CaptureGameTip {
  required uint32 id = 1;
  optional string sp1 = 2;//SP2为这个SP1 STRING的品质//如果有的话
  optional uint32 sp2 = 3;
  optional string sp3 = 4;
  optional uint32 sp4 = 5;//SP4是SP3的
  optional uint32 sp5 = 6;//sp5 其他逻辑字段
}

message S2C_CaptureGameTips {
  required uint32 ret = 1;
  repeated CaptureGameTip tips = 3;
}

message C2S_CaptureGameMap {
}

message CaptureGameMap {
  required uint32 id = 1;
  required uint32 due_time = 2;
  required uint32 second_time = 3;
  required uint32 third_time = 4;
  repeated CaptureGamePoint points= 5;
}

message CaptureGamePoint {
  required uint32 pos_x = 1;
  required uint32 pos_y = 2;
  required uint32 base_type = 3;
  required uint32 base_value = 4;
}

message S2C_CaptureGameMap {
  required uint32 ret = 1;
  repeated CaptureGamePoint points= 3;
}

message S2C_CaptureGamePositionFlush {
  required uint32 reason = 1;
  repeated CrossUser users = 2;
  required CaptureGamePoint point = 3;
  repeated CaptureGameTip tips = 4;
  repeated CaptureGameTeam teams = 5;
}

message C2S_CaptureGameMove {
  required uint32 pos_x = 2;
  required uint32 pos_y = 3;
}

message S2C_CaptureGameMove {
  required uint32 ret = 1;
  required uint32 pos_x = 3;
  required uint32 pos_y = 4;
}

message C2S_CaptureGameItemUse {
  required uint32 item = 1;
  required uint64 Sp1 = 2;//根据ITEM不同传不同值
  required uint32 Sp2 = 3;
}

message S2C_CaptureGameItemUse {
  required uint32 ret = 1;
  required uint32 item = 2;
  required uint64 Sp1= 3;
  required uint32 Sp2= 4;
}

message S2C_CaptureGameItemUseVictim {
  optional uint32 item = 1;
}

message C2S_CaptureTime {
}

message CaptureTimeDuration {
  required uint32 duration_id = 1;
  required uint64 start_time = 2;
  required uint64 end_time = 3;
}

message S2C_CaptureTime{
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint64 start_time = 3;	//天梯时间
  required uint64 end_time = 4;
  repeated CaptureTimeDuration durations = 5;	//废弃
	optional uint64 start_time2 = 6; //普通时间
	optional uint64 end_time2 = 7;
}

message C2S_CaptureGameResetTeamer {
}

message S2C_CaptureGameResetTeamer {
	required uint32 ret = 1;
}

message C2S_GetDays7DrawTaskInfo {
}

message S2C_GetDays7DrawTaskInfo {
  required uint32 start_time = 1;
  required uint32 end_time = 2;
  required uint32 progress = 3;
  repeated uint32 awarded_task = 4;
}

message C2S_GetDays7DrawTaskAward {
  required uint32 task_id = 1;
  required uint32 award_id = 2;
}

message S2C_GetDays7DrawTaskAward {
  required uint32 ret = 1;
  required uint32 task_id = 2;
  required uint32 award_id = 3;
}

message S2C_CaptureGameResult {
  repeated CaptureGameTeam teams = 1;
  required uint32 win_team = 2;
	repeated AddFavorInfo favors = 3;	//增加好友度信息
	optional uint32 mode = 4;					//匹配模式
}

message S2C_CaptureGameMapFlush {
  repeated CaptureGamePoint points = 1;
  optional CaptureGameTip tip = 2;
  optional uint32 state = 3;
}

message C2S_SummerSignInfo {
}

message S2C_SummerSignInfo {
	required bool got_award = 1;  // 今天是否已领取奖励
  required uint32 ret = 2;
}

message C2S_GetSummerSign {
}

message S2C_GetSummerSign {
  required uint32 ret = 1;
}

message C2S_CorpActiveInfo {
}

message CorpActiveMission {
  required uint32 id = 1;
  required uint32 progress = 2;
  required bool awarded = 3;
}

message CorpActiveMemberPoints{
  required uint32 id = 1;
  required uint32 point = 2;
  optional CorpMember detail = 3;
  optional uint32 daily_points = 4;
}

message S2C_CorpActiveInfo {
  required uint32 ret = 1;
  repeated CorpActiveMission missions = 2; // 个人任务进度
  optional uint32 point = 3; // 个人的活跃值
  repeated uint32 awarded_boxes = 4; //个人已经打开的箱子
  optional bool lottery_played = 5;
  optional uint32 corp_total_points = 6;
  repeated CorpActiveMemberPoints members = 7;
  optional uint32 my_week_welfare_preview = 8; // 本周 根据军团总活跃值 预览 我的福利元宝
  optional uint32 week_lottery_total_preview = 9; // 本周 根据军团总活跃值 预览 奖池总量
  optional uint32 last_week_corp_total_points = 10; // 上周军团总活跃值
  optional bool lottery_playable = 11; // 是否有抽奖的权利
}

message C2S_FinishCorpActiveMission {
  required uint32 id = 1;
}

message S2C_FinishCorpActiveMission {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 new_point = 3;
}

message C2S_OpenCorpActiveBox {
  required uint32 id = 1;
}

message S2C_OpenCorpActiveBox {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_CorpActiveLottery {
}

message S2C_CorpActiveLottery {
  required uint32 ret = 1;
  optional uint32 medal = 2;
}

message CorpActiveLotteryLog {
  required string name = 1;
  required uint32 medal = 2;
}

message C2S_CorpActiveLotteryLog {
}

message S2C_CorpActiveLotteryLog {
  required uint32 ret = 1;
  required uint32 init_total = 2;
  required uint32 left_total = 3;
  required uint32 member_size = 4;
  repeated CorpActiveLotteryLog logs = 5;
  optional bool lottery_played = 6;
}

message CorpRiceCorp {
  optional CrossCorp corp = 1;
  optional bool my_corp = 2;
  optional bool temp_corp = 3;
  optional uint32 total_rice = 4;
  optional uint32 rank = 5;
}

message C2S_CorpRiceMyInfo {
}

message S2C_CorpRiceMyInfo {
  required uint32 ret = 1;
  optional uint32 fluid_rice = 2; //可抢夺粮草
  optional uint32 extra_rice = 3; //战斗胜利暴击获得的粮草，不可抢夺
  optional uint32 growth_rice = 4; //定时增长粮草
  optional uint32 my_local_rank = 5;
  optional uint32 my_area_rank = 6;
  optional uint32 my_corp_rank = 7;
  repeated CorpRiceCorp corps = 8;
  optional uint32 left_attack_cnt = 9; // 随时间增长的攻打次数
  optional uint32 left_buy_attack_cnt = 10; // 已经购买的攻打次数
  optional uint32 left_revenge_cnt = 11;
  optional uint32 left_buy_revenge_cnt = 12;
  optional uint32 my_corp_rice = 13;
  optional string my_corp_name = 14;
  optional uint32 my_max_rice = 15;
  optional uint32 my_corp_max_rice = 16;
  repeated uint32 achieve = 17;
  optional string announce = 18;
  optional uint32 left_assist_cnt = 19;
  optional uint32 left_buy_assist_cnt = 20;
  optional uint32 attack_cnt_refresh_time = 21;
  optional uint32 share_cnt = 22;
  optional uint32 total_rice = 23;
}

message C2S_CorpRiceRefreshCorps {
}

message S2C_CorpRiceRefreshCorps {
  required uint32 ret = 1;
  repeated CorpRiceCorp corps = 2;
}

message C2S_CorpRiceGetCorpMembers {
  optional uint64 corp_sid = 1;
  optional uint32 corp_id = 2;
  optional bool temp_corp = 3;
}

message CorpRiceUser {
  required CrossUser user = 1;
  optional uint32 fluid_rice = 2; //可抢夺粮草
  optional uint32 extra_rice = 3; //战斗胜利暴击获得的粮草，不可抢夺
  optional uint32 growth_rice = 4; //定时增长粮草
  optional string announce = 5;
}

message S2C_CorpRiceGetCorpMembers {
  required uint32 ret = 1;
  optional uint64 corp_sid = 2;
  optional uint32 corp_id = 3;
  optional bool temp_corp = 4;
  repeated CorpRiceUser user = 5;
  optional uint32 my_local_rank = 6;
  optional uint32 my_fluid_rice = 7;
  optional uint32 my_extra_rice = 8;
  optional uint32 my_growth_rice = 9;
}

message C2S_CorpRiceRob {
  required uint64 sid = 1;
  required uint32 uid = 2;
  optional uint32 corp_id = 3; // 3，4选填一个
  optional bool temp_corp = 4;
}

message S2C_CorpRiceRob {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  optional uint32 corp_id = 4;
  optional bool temp_corp = 5;
  optional BattleReport report = 6;	//4.6.50废弃
  repeated Award awards = 7;
  optional uint32 add_fluid_rice = 8;
  optional uint32 add_extra_rice = 9;
  optional uint32 add_extra_crit_rice = 10;
  optional uint32 my_local_rank = 11;
  optional uint32 my_fluid_rice = 12;
  optional uint32 my_extra_rice = 13;
  optional uint32 my_growth_rice = 14;
  optional uint32 robed_main_role = 15;
  optional string robed_name = 16;
  optional uint32 left_attack_cnt = 17;
  optional uint32 cd_finish_time = 18;
	optional uint64 report_id = 19; //4.6.50
}

message CorpRiceEnemy {
  required CrossUser user = 1;
  repeated uint32 knights = 2;
  required uint32 rice = 3;
  required uint32 time = 4;
  required uint32 robbable_rice = 5;
  optional bool shared = 6;
  optional uint32 sharer = 7;
  optional string sharer_name = 8;
  optional uint32 sharer_main_role = 9;
  optional bool revenged = 10;
  optional string revenger = 11;
  optional uint32 revenged_rice = 12;
}

message C2S_CorpRiceGetEnemy {
  required uint32 type = 1; // 客户端用
}

message S2C_CorpRiceGetEnemy {
  required uint32 ret = 1;
  required uint32 type = 2;
  repeated CorpRiceEnemy enemy = 3;
}

message C2S_CorpRiceShareEnemy {
  required uint32 time = 1;
}

message S2C_CorpRiceShareEnemy {
  required uint32 ret = 1;
  required uint32 time = 2;
  optional uint32 share_cnt = 3;
  optional uint32 left_revenge_cnt = 4;
}

message C2S_CorpRiceRevenge {
  required uint32 time = 1;
  optional uint32 sharer = 2; // 0表示普通, 非0表示协助复仇
}

message S2C_CorpRiceRevenge {
  required uint32 ret = 1;
  required uint32 time = 2;
  optional uint32 sharer = 3;
  optional BattleReport report = 4; //4.6.50废弃
  optional uint32 add_fluid_rice = 5;
  optional uint32 add_extra_rice = 6;
  optional uint32 add_extra_crit_rice = 7;
  optional uint32 my_local_rank = 8;
  optional uint32 my_fluid_rice = 9;
  optional uint32 my_extra_rice = 10;
  optional uint32 my_growth_rice = 11;
  optional uint32 robed_main_role = 12;
  optional string robed_name = 13;
  optional string sharer_name = 14;
  optional uint32 left_revenge_cnt = 15;
  optional uint32 left_assist_cnt = 16;
	optional uint64 report_id = 17; //4.6.50
}

message CorpRiceRankUser {
  required CrossUser user = 1;
  required uint32 total_rice = 2;
}

message C2S_CorpRiceGetUserRanks {
  required uint32 type = 1; // 1 本地 2 战区
  required uint32 top_n = 2; // 取多少名
}

message S2C_CorpRiceGetUserRanks {
  required uint32 ret = 1;
  required uint32 type = 2;
  required uint32 top_n = 3;
  repeated CorpRiceRankUser users = 4;
}

message C2S_CorpRiceGetCorpRanks {
  required uint32 top_n = 1;
}

message CorpRiceRankCorp {
  required CrossCorp corp = 1;
  required uint32 total_rice = 2;
}

message S2C_CorpRiceGetCorpRanks {
  required uint32 ret = 1;
  required uint32 top_n = 2;
  repeated CorpRiceRankCorp corps = 3;
}

message C2S_CorpRiceFinishAchieve {
  required uint32 id = 1;
}

message S2C_CorpRiceFinishAchieve {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_CorpRiceBuyAttackCnt {
  required uint32 cnt = 1;
}

message S2C_CorpRiceBuyAttackCnt {
  required uint32 ret = 1;
  optional uint32 left_attack_cnt = 2;
  optional uint32 left_buy_attack_cnt = 3;
}

message C2S_CorpRiceBuyRevengeCnt {
  required uint32 cnt = 1;
}

message S2C_CorpRiceBuyRevengeCnt {
  required uint32 ret = 1;
  optional uint32 left_revenge_cnt = 2;
  optional uint32 left_buy_revenge_cnt = 3;
}

message C2S_CorpRiceSetAnnounce {
  required string announce = 1;
}

message S2C_CorpRiceSetAnnounce {
  required uint32 ret = 1;
  required string announce = 2;
}

message C2S_CorpRiceBuyAssistCnt {
  required uint32 cnt = 1;
}

message S2C_CorpRiceBuyAssistCnt {
  required uint32 ret = 1;
  optional uint32 left_assist_cnt = 2;
  optional uint32 left_buy_assist_cnt = 3;
}

message C2S_CorpRiceGetAttackCnt {
}

message S2C_CorpRiceGetAttackCnt {
  required uint32 ret = 1;
  optional uint32 left_attack_cnt = 2;
  optional uint32 attack_cnt_refresh_time = 3;
}

message C2S_CorpRiceGetAchieve {
}

message S2C_CorpRiceGetAchieve {
  required uint32 ret = 1;
  optional uint32 my_max_rice = 2;
  optional uint32 my_corp_max_rice = 3;
  repeated uint32 achieve = 4;
}

message C2S_CorpRiceMarkEnemyCorp {
}

message S2C_CorpRiceMarkEnemyCorp {
}

message AuctionItem {
  required uint32 id = 1;//唯一ID
  required uint32 info_id = 2;//拍卖ID
  required uint32 price = 3;
  required uint32 view_time = 4;
  required uint32 due_time = 5;
  optional uint32 a_type = 6;//交易所类型
  optional uint32 user_id = 7;
  optional uint64 sid = 8;
}

message C2S_AuctionInfo {
  required uint32 a_type = 1;//1单服 2跨服
}

message S2C_AuctionInfo {
  required uint32 ret = 1;
  required uint32 a_type = 2;
  repeated AuctionItem items = 3;
  optional uint32 bonus = 4;
  optional bool has_bonus = 5;
}

message C2S_AuctionUserInfo {
}

message S2C_AuctionUserInfo {
  required uint32 ret = 1;
  repeated AuctionItem items = 2;
}

message C2S_AuctionPurchase {
  required uint32 a_type = 1;
  required uint32 id = 2;
  required uint32 price = 3;
}

message S2C_AuctionPurchase {
  required uint32 ret = 1;
  required uint32 a_type = 2;
  required uint32 id = 3;
  required uint32 price = 4;
  optional AuctionItem item = 5;
}

message AuctionLog {
  required uint32 id = 1;//拍卖ID
  optional uint32 log_type = 2;//1成交 2一口价 3流到跨服
  required uint32 time = 3;
  optional uint32 price = 4;
  optional string name = 5;
  optional string sname = 6;
}

message C2S_AuctionLog {
  required uint32 a_type = 1;
  required uint32 l_type = 2;//日志类型 1拍卖情况 2交易结果
}

message S2C_AuctionLog {
  required uint32 ret = 1;
  required uint32 a_type = 2;
  required uint32 l_type = 3;
  repeated AuctionLog logs = 4;
}

message S2C_FlushAuctionItem {
  required uint32 a_type = 1;
  optional AuctionItem item = 2;
  optional AuctionLog log = 3;
}

message S2C_FlushAuctionBonus {
  required uint32 bonus = 1;
}

message C2S_GetCrystalShopInfo {
}
message S2C_GetCrystalShopInfo {
  required uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated uint32 nums = 3;
}

message C2S_GetSpecialGiftMail {
  required uint32 info_id = 1;
}

message S2C_GetSpecialGiftMail {
  required uint32 ret = 1;
  required uint32 info_id = 2;
  required bool is_flush =  3;//是否推送
  repeated GiftMail mail = 4;
}

message C2S_ProcessGiftMailOneKey {
}

message S2C_ProcessGiftMailOneKey {
  required uint32 ret = 1;
  repeated Award awards = 2;
}

message C2S_GetQuestionnaireTime {
  optional string os = 1;           //手机操作系统
  optional string did = 2;          //设备ID
  optional string custom_data = 3;  //扩展参数
}

message S2C_GetQuestionnaireTime {
  required uint32 ret = 1;
  repeated QuestionnaireInfo info = 2;
}

message QuestionnaireInfo {
  optional uint32 id = 1;
  optional uint32 start_time = 2;
  optional uint32 end_time = 3;
  optional string url = 4;
  optional uint32 type = 5;
  optional string url_test = 6;
}

message NewHolidayTimeXml {
  required uint32 id = 1;
  required uint32 start_time = 2;
  required uint32 end_time = 3;
  required uint32 exchange_time = 4;
  required uint32 type1 = 5;
  required uint32 value1 = 6;
  required uint32 size1 = 7;
  required uint32 type2 = 8;
  required uint32 value2 = 9;
  required uint32 size2 = 10;
  required uint32 picture = 11;
  required string title = 12;
}

message NewHolidayActionXml {
  required uint32 id = 1;
  required uint32 start_time = 2;
  required uint32 end_time = 3;
  required uint32 task_type = 4;
  required uint32 task_value = 5;
  required uint32 type1 = 6;
  required uint32 value1 = 7;
  required uint32 size1 = 8;
  required uint32 type2 = 9;
  required uint32 value2 = 10;
  required uint32 size2 = 11;
  required uint32 tags = 12;
  optional uint32 index = 13;
}

message NewHolidayExchangeXml {
  required uint32 id = 1;
  required uint32 type = 2;
  required uint32 value = 3;
  required uint32 size = 4;
  required uint32 extra_type1 = 5;
  required uint32 extra_value1 = 6;
  required uint32 extra_size1 = 7;
  required uint32 extra_type2 = 8;
  required uint32 extra_value2 = 9;
  required uint32 extra_size2 = 10;
  required uint32 tags = 11;
  required uint32 discount = 12;
  required uint32 level_min = 13;
  required uint32 level_max = 14;
  required uint32 time_self = 15;
  optional uint32 index = 16;
}

message C2S_GetNewHolidayTimeXmlInfo {
  required string md5 = 1;
}

message S2C_GetNewHolidayTimeXmlInfo {
  required uint32 ret = 1;
  optional string md5 = 2;
  optional NewHolidayTimeXml info = 3;
}

message C2S_GetNewHolidayActionXmlInfo {
  required string md5 = 1;
}

message S2C_GetNewHolidayActionXmlInfo {
  required uint32 ret = 1;
  optional string md5 = 2;
  repeated NewHolidayActionXml actions = 3;
}

message C2S_GetNewHolidayExchangeXmlInfo {
  required string md5 = 1;
}

message S2C_GetNewHolidayExchangeXmlInfo {
  required uint32 ret = 1;
  optional string md5 = 2;
  repeated NewHolidayExchangeXml exchanges = 3;
}

message C2S_GetNewHolidayMainInfo {
}

message S2C_GetNewHolidayMainInfo {
  required uint32 ret = 1;
  required uint32 status = 2;         //0 close 1 open 2 exchange
  optional uint32 flower_rank = 3;    //鲜花排名
}

message C2S_NewHolidayLuckyDraw {
  required uint32 type = 1;           //1 抽一次 2 十连抽
}

message S2C_NewHolidayLuckyDraw {
  required uint32 ret = 1;
  repeated uint32 lottery_ids = 2;    //抽中的id
}

message LotteryNotice {
  required uint32 user_id = 1;
  required string name = 2;
  required uint32 lottery_id = 3;
  required uint32 base_id = 4;
}

message C2S_NewHolidayLotteryNotice {
}

message S2C_NewHolidayLotteryNotice {
  required uint32 ret = 1;
  repeated LotteryNotice notices = 2;
}

message NewHolidayAction {
  required uint32 id = 1;           //行为id
  required uint32 progress = 2;     //行为进程
  required uint32 award = 3;        //奖励状态
}

message C2S_NewHolidayActionInfo {
}

message S2C_NewHolidayActionInfo {
  required uint32 ret = 1;
  optional bool sign_in = 2;              //false 未签到 true 已签到
  repeated NewHolidayAction actions = 3;  //行为状态
}

message C2S_NewHolidayDailySignIn {
}

message S2C_NewHolidayDailySignIn {
  required uint32 ret = 1;
  repeated Award awards = 2;
}

message C2S_NewHolidayActionAward {
  required uint32 id = 1;
}

message S2C_NewHolidayActionAward {
  required uint32 ret = 1;
  repeated Award awards = 2;
  repeated NewHolidayAction actions = 3;
}

message C2S_NewHolidayLotteryBackInfo {
}

message S2C_NewHolidayLotteryBackInfo {
  required uint32 ret = 1;
  optional uint32 lottery_count = 2;  //累抽次数
  repeated uint32 award_ids = 3;      //已领取奖励id
}

message C2S_NewHolidayLotteryBackAward {
  required uint32 id  = 1;
}

message S2C_NewHolidayLotteryBackAward {
  required uint32 ret = 1;
  repeated Award awards = 2;
  repeated uint32 award_ids =3;
}

message C2S_NewHolidayFriendsFlowerInfo {
}

message S2C_NewHolidayFriendsFlowerInfo {
  required uint32 ret = 1;
  optional CrossUser self = 2;    //自己的数据
  repeated CrossUser friends = 3; //好友的数据
}

message C2S_NewHolidayDonateFlowers {
  required uint32 user_id = 1;    //user_id为自己时增加自己的鲜花数
  required uint32 flower_num = 2;
}

message S2C_NewHolidayDonateFlowers {
  required uint32 ret = 1;
  required uint32 user_id = 2;    //user_id为自己时增加自己的鲜花数
  required uint32 flower_num = 3;
}

message C2S_NewHolidayExchangeInfo {
}

message S2C_NewHolidayExchangeInfo {
  required uint32 ret = 1;
  repeated Good goods = 2;
}

message C2S_NewHolidayExchangeGood {
  required uint32 id = 1;     //对应兑换表的配置id
  required uint32 num = 2;
}

message S2C_NewHolidayExchangeGood {
  required uint32 ret = 1;
  required uint32 id = 2;     //对应兑换表的配置id
  required uint32 num = 3;
}

message C2S_OneKeyLotteryBackAward {
}

message S2C_OneKeyLotteryBackAward {
  required uint32 ret = 1;
  repeated Award awards = 2;
  repeated uint32 award_ids =3;
}

message ActivityTime {
  required uint32 id = 1;
  required uint32 start = 2;
  required uint32 end = 3;
  //required uint32 present = 4;
}

message C2S_GetActivityTimeInfo {
}

message S2C_GetActivityTimeInfo {
  required uint32 ret = 1;
  repeated ActivityTime activity = 2;
}

message C2S_PetSwallow {
  required uint32 id = 1; //宠物ID
  repeated Fragment frags = 2; //宠物碎片ID
}

message S2C_PetSwallow {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 exp = 3;
  optional uint32 level = 4;
}

message C2S_PetFormation {
  required uint32 id = 1; //宠物ID
  required uint32 atype = 2; //玄阵属性类型
  repeated Fragment frags = 3; //宠物碎片ID
}

message S2C_PetFormation {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 level = 3;
  optional FormationExp formation_exp = 4;
}

message C2S_PetFormationUpdate {
  required uint32 id = 1; //宠物ID
}

message S2C_PetFormationUpdate {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message C2S_PetFormationUpdateOneKey {
  required uint32 id = 1; //宠物ID
  required uint32 up_level = 2;
  repeated Fragment frags = 3; //宠物碎片ID
}

message S2C_PetFormationUpdateOneKey {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 up_level = 3;
  optional FormationExp formation_exp = 4;
}

//彩金的暗金玄阵
message C2S_DGPetFormation{
  required uint32 id = 1;//彩金宠id
  required uint32 atype = 2;//暗金玄阵属性类型
  repeated Fragment frags = 3;//准备消耗的暗金宠物碎片id与num的集合 id->num
}
message S2C_DGPetFormation{
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 level = 3;
  optional FormationExp formation_exp = 4; //属性 hp at pd md
}
//彩金的暗金玄阵升阶
message C2S_DGPetUpFormation{
  required uint32 id = 1; //彩金宠物id
}
message S2C_DGPetUpFormation{
  required uint32 ret =1;
  optional uint32 id =2;
}
//彩金的暗金玄阵一键
message C2S_DGPetUpFormationOneKey{
  required uint32 id =1;//宠物id
  required uint32 up_level =2;//请求升的等级
  repeated Fragment frags = 3; //消耗宠物碎片id->num
}
message S2C_DGPetUpFormationOneKey{
  required uint32 ret =1;
  optional uint32 id =2;
  optional uint32 up_level =3;//真正升的等级
  optional FormationExp formation_exp = 4; //属性 hp at pd md
}

//鎏金的彩金玄阵
message C2S_CGPetFormation {
	required uint32 id = 1;//彩金宠id
	required uint32 atype = 2;//暗金玄阵属性类型
	repeated Fragment frags = 3;//准备消耗的暗金宠物碎片id与num的集合 id->num
}
message S2C_CGPetFormation {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 level = 3;
  optional FormationExp formation_exp = 4; //属性 hp at pd md
}
//鎏金的彩金玄阵升级
message C2S_CGPetUpFormation {
  required uint32 id = 1; //彩金宠物id
}
message S2C_CGPetUpFormation { 
  required uint32 ret =1;
  optional uint32 id =2;
}
//鎏金的彩金玄阵一键
message C2S_CGPetUpFormationOneKey {
  required uint32 id =1;//宠物id
  required uint32 up_level =2;//请求升的等级
  repeated Fragment frags = 3; //消耗宠物碎片id->num
}
message S2C_CGPetUpFormationOneKey {
  required uint32 ret =1;
  optional uint32 id =2;
  optional uint32 up_level =3;//真正升的等级
  optional FormationExp formation_exp = 4; //属性 hp at pd md
}
//护佑宠的护佑技能
message C2S_CGPetSummoningSkill {
	repeated uint32 pet_id = 1;    //宠物id
}

message S2C_CGPetSummoningSkill {
	required uint32 ret = 1;
	repeated uint32 pet_id = 2;	//护佑位置
}

message C2S_GetHomeInfo {

}

message S2C_GetHomeInfo {
  required uint32 ret = 1;
  optional uint32 home_level = 2;
  optional uint32 home_exp = 3;
  optional uint32 home_level_award = 4;//军衔奖励进度
  optional uint32 world_war_home_buy_times = 5;
  optional uint32 world_war_home_refresh_time = 6; //天下联盟购买官邸下一次刷新时间
}

message C2S_GetHomeUserInfo {
}
message HomeSkin {
  required uint32 id = 1;
  required uint32 tm = 2;
}

message HomeInfo {
  required uint32 user_id = 1;
  optional uint32 home_level = 2;
  optional uint32 home_exp = 3;
  optional string content = 4;//气泡
  repeated HomePro pros = 5;
  optional uint32 coin = 6;
  optional uint32 wood = 7;
  optional uint32 boom = 8;
  optional uint32 defense = 9;
  optional uint32 defense_recover_time = 10;
  optional bool salary_got = 11;
  optional uint32 flush_shop_times = 12;
//  repeated HomeSkin skins = 13; //购买的官邸皮肤
  optional uint32 skin_id = 14;  //正在使用的皮肤
  optional uint32 skin_tm = 15;  //正在使用的皮肤到期时间戳
}

message HomePro {
  required uint32 pro_type = 1;
  required uint32 level = 2;
  repeated uint32 value = 3;//根据TYPE表达不同意思
}

message S2C_GetHomeUserInfo {
  required uint32 ret = 1;
  optional HomeInfo home = 2;//包含对象 好扩展
}

message C2S_GetHomeTask {
}

message HomeTask {
  required uint32 id = 1;
  required uint32 progress = 2;
  required bool award = 3;//是否领奖
  optional bool yesterday = 4;
}

message S2C_GetHomeTask {
  required uint32 ret = 1;
  optional HomeTask person_task = 2;
  repeated HomeTask active_task = 3;
  repeated HomeTask corp_task = 4;
  optional uint32 refresh_count= 5;
  repeated HomeTask redeem_task = 6; //名望任务追回，昨天的军团任务状态，以及今天买过的
  optional uint32 task_purchase_count = 7;//个人任务购买次数
  optional uint32 task_left_count = 8;//剩余可完成个人任务的次数
}

message C2S_FinishHomeTask {
  required uint32 task_type = 1;//1person 2active 3corp 4redeem
  required uint32 id = 2;
}

message S2C_FinishHomeTask {
  required uint32 ret = 1;
  required uint32 task_type = 2;
  required uint32 id = 3;
  repeated Award awards = 4;
  optional HomeTask task = 5;//刷新任务状态过来 该task_type下
  optional uint32 task_left_count = 6;
}

//for person task
message C2S_RefreshHomeTask {
}

message S2C_RefreshHomeTask {
  required uint32 ret = 1;
  optional HomeTask task = 4;
  optional uint32 refresh_count= 5;
}

message C2S_SetHomeInfo {
  required uint32 save_type = 1;//气泡1
  required HomeInfo info = 2;
}

message S2C_SetHomeInfo {
  required uint32 ret = 1;
  required uint32 save_type = 2;
  optional HomeInfo info = 3;
}

message HomeSkill{
  required uint32 id = 1;
  required uint32 level = 2;
}

message C2S_GetHomeSkillTree {

}

message S2C_GetHomeSkillTree {
  required uint32 ret = 1;
  optional uint32 skill_point = 2;
  repeated HomeSkill skill = 3;
}

message C2S_SetHomeSkillTree {
  required HomeSkill skill = 1;
}

message S2C_SetHomeSkillTree {
  required uint32 ret = 1;
  required HomeSkill skill = 2;
  optional uint32 skill_point = 3;
}

message C2S_ResetHomeSkillTree {
  required uint32 tree = 1;//tree id
}

message S2C_ResetHomeSkillTree {
  required uint32 ret = 1;
  required uint32 tree = 2;//tree id
  optional uint32 skill_point = 3;
  repeated HomeSkill skill = 4;
}

message C2S_GetHomeOfficeAward {
}

message S2C_GetHomeOfficeAward {
  required uint32 ret = 1;
  optional uint32 home_level_award = 2;
  repeated Award awards = 3;
  optional uint32 skill_point = 4;
}

message C2S_GetHomeCorpRank {

}

message S2C_GetHomeCorpRank {
  required uint32 ret = 1;
  repeated CrossCorp rank = 2;
  optional uint32 self_rank = 3;
}
message C2S_GetHomeTech {

}

message S2C_GetHomeTech {
  required uint32 ret = 1;
  repeated HomeSkill tech = 2;
}

message C2S_SetHomeTech {
  required HomeSkill tech = 1;
}

message S2C_SetHomeTech {
  required uint32 ret = 1;
  required HomeSkill tech = 2;
}
message C2S_GetHomeSalary {
}
message S2C_GetHomeSalary {
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional bool salary_got = 3;
}
message C2S_BuyHomeDefense {
  required uint32 cnt = 1;
}
message S2C_BuyHomeDefense {
  required uint32 ret = 1;
  optional uint32 cnt = 2;
  optional uint32 defense = 3;
  optional uint32 defense_recover_time = 4;
  optional uint32 world_war_home_buy_times = 5;
  optional uint32 world_war_home_refresh_time = 6; //天下联盟购买官邸下一次刷新时间
}
message S2C_UpdateTechValue {
  repeated KeyValueT info = 1;
}
message C2S_FlushHomeShop {
}
message S2C_FlushHomeShop {
  required uint32 ret = 1;
  optional uint32 times = 2; //剩余刷新次数
  repeated uint32 id = 3;
  repeated uint32 num = 4;
}


message NightMareChapterBox {
  required uint32 chapter_id = 1; // 1 - 5
  optional bool copper_awarded = 2;
  optional bool silver_awarded = 3;
  optional bool gold_awarded = 4;
}

message NightMareDungeonInfo {
  repeated uint32 passed_dungeons = 1; //已通关关卡 1 - 75
  optional uint32 star = 2; // 总星数
  repeated uint32 awarded_star = 3; // 已领取的星数奖励id
  repeated NightMareChapterBox box = 4; //已领取的章节宝箱
  required uint32 challenge_cnt = 5; //今日已挑战次数
  required uint32 buy_cnt = 6; //今日已购买次数
  required uint32 total_buy_cnt = 7; //每日全部可以购买的次数
}

message C2S_GetNightMareDungeonInfo {
}

message S2C_GetNightMareDungeonInfo {
  required uint32 ret = 1;
  optional NightMareDungeonInfo info = 2;
}


message C2S_ChallengeNightMareDungeon {
  required uint32 id = 1;
}

message S2C_ChallengeNightMareDungeon {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional BattleReport report = 3; //废弃
  repeated Award awards = 4;
  optional NightMareDungeonInfo info = 5;
  optional uint64 report_id = 6;
	optional bool is_win = 7; //4.6.50
}

message C2S_BuyNightMareDungeonCnt {
  required uint32 cnt = 1;
}

message S2C_BuyNightMareDungeonCnt {
  required uint32 ret = 1;
  optional uint32 buy_cnt = 2; //新的今日已购买次数
}

message C2S_OpenNightMareChapterBox {
  required uint32 chapter = 1;
  required uint32 box_type = 2; // 1,2,3 => 铜，银，金
}

message S2C_OpenNightMareChapterBox {
  required uint32 ret = 1;
  required uint32 chapter = 2;
  required uint32 box_type = 3;
  optional NightMareChapterBox chapter_box = 4;
  repeated Award awards = 5;
}

message C2S_GetNightMareStarAward {
  required uint32 id = 1;
}

message S2C_GetNightMareStarAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message NightMareDungeonVideo {
  required uint32 rounds = 1;
  required uint32 sub_rounds = 2;
  required uint64 fight_value = 3;
  required uint32 user_id = 4;
  required string name = 5;
  repeated uint32 knights = 6;
  required uint32 time = 7;
  optional BattleReport video = 8;
  required uint32 main_role = 9;
  optional uint64 report_id = 10;
}

message C2S_GetNightMareDungeonVideo {
  required uint32 dungeon_id = 1;
}

message S2C_GetNightMareDungeonVideo {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  optional NightMareDungeonVideo quickest = 3;
  optional NightMareDungeonVideo hardest = 4;
  optional NightMareDungeonVideo latest = 5;
}

message C2S_NightMareDungeonIsOpen {
  repeated uint32 id = 1;
}

message NightMareDungeonIsOpen {
  required uint32 id = 1;
  optional bool pre_dungeon_passed = 2;
  optional bool lock_open = 3;
}

message S2C_NightMareDungeonIsOpen {
  required uint32 ret = 1;
  repeated NightMareDungeonIsOpen dungeons = 2;
}

//宝藏线索
message TroveThread {
  required uint32 id = 1;
  required string name = 2;
}

//许愿信息
message WishInfo {
  required string name = 1;
  required Award award = 2;
}

message CorpCaveDetail {
  required uint32 id = 1;
  required uint32 cave_score = 2;     //当前关卡积分 判断是否通关用
  repeated uint32 attacked_num = 3;   //每个位置怪物被击败次数
  optional uint32 pool_progress = 4;  //许愿池进度
  repeated uint32 trove_ids = 5;      //随机生成宝箱id
  optional bool   box_award = 6;      //宝箱领取标记 0 未领取 1 已领取 (玩家数据)
  optional uint32 trove_pos = 7;      //宝藏中领取位置 1 - 10 0 未领取
  repeated uint32 pool_award = 8;     //许愿池奖励领取进度 (玩家数据 1,2,3)
  repeated TroveThread thread = 9;    //宝箱线索
  repeated WishInfo pool = 10;        //许愿池奖励信息
  optional uint32 wish_count = 11;    //许愿次数
}

message C2S_GetCorpCaveMainInfo {
}

message S2C_GetCorpCaveMainInfo {
  required uint32 ret = 1;
  optional uint32 start_time = 2;      //开始时间
  optional uint32 end_time = 3;        //结束时间
  optional uint32 initial_num = 4;     //初始次数
  optional uint32 attack_num = 5;      //攻打次数
  optional uint32 purchase_num = 6;    //购买次数
  optional uint32 user_score = 7;      //个人积分
  optional uint32 corp_score = 8;      //军团积分
  optional uint32 cur_cave_id = 9;     //最新关卡
  repeated uint32 daily_award = 10;    //已领取挑战次数奖励
  optional uint32 user_rank = 11;      //个人排行
  optional uint32 corp_rank = 12;      //军团排行
  repeated uint32 award_dungeon = 13;  //有奖励可领的关卡
}

message C2S_GetCorpCaveDetail {
  required uint32 id = 1;              //关卡id
}

message S2C_GetCorpCaveDetail {
  required uint32 ret = 1;
  optional CorpCaveDetail cave = 2;    //关卡数据
}

message C2S_CorpCaveDoAttack {
  required uint32 id = 1;             //关卡id
  required uint32 pos = 2;            //怪物位置
  optional uint32 type = 3;             // 游戏助手完成任务 5.7.0
}

message S2C_CorpCaveDoAttack {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 pos = 3;
  optional BattleReport battle_report = 4; //4.6.50废弃
  optional uint32 thread_id = 5;      //宝箱线索id 0表示没线索
  repeated Award awards = 6;
  optional uint32 new_dungeon = 7;    //新增关卡id 0表示没有新增
  optional uint32 corp_score = 8;     //军团积分
  optional uint32 user_score = 9;     //玩家积分
  repeated uint32 defeat_num = 10;    //被击败次数
  optional uint64 report_id = 11; //4.6.50
	optional bool is_win = 12; //4.6.50
}

message C2S_CorpCaveMakeAWish {
  required uint32 cave_id = 1;       //章节id
  optional uint32 type = 2;         // 0:正常 1：游戏助手 5.7.0
}

message S2C_CorpCaveMakeAWish {
  required uint32 ret = 1;
  optional uint32 cave_id = 2;      //章节id
  repeated Award awards = 3;        //许愿奖励
  repeated WishInfo wish_info = 4;  //许愿池奖励信息
  optional uint32 wish_score = 5;   //许愿进度
  optional uint32 wish_count = 6;   //许愿次数
}

message C2S_GetCorpCaveWishBox {
  required uint32 id = 1;          //关卡id
  required uint32 index = 2;       //索引1,2,3
}

message S2C_GetCorpCaveWishBox {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 index = 3;
  repeated Award awards = 4;
}

message C2S_GetCorpCaveTroveAward {
  required uint32 id = 1;          //关卡id
  required uint32 pos = 2;
}

message S2C_GetCorpCaveTroveAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 pos = 3;
  repeated Award awards = 4;
}

//游戏助手领取 5.7.0
message C2S_GetCorpCaveAllAward {
    required uint32 id = 1;          //关卡id
    optional uint32 pos = 2;
    optional uint32 type = 3;         // 1:宝藏奖励 2：关卡奖励 3:每日奖励 5.7.0
}

message S2C_GetCorpCaveAllAward {
    required uint32 ret = 1;        
    required uint32 id = 2;
    required uint32 pos = 3;
    repeated Award awards = 4;
}

message C2S_GetCorpCaveBoxAward {
  required uint32 id = 1;
}

message S2C_GetCorpCaveBoxAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_GetCorpCaveDailyAward {
  required uint32 id = 1;
}

message S2C_GetCorpCaveDailyAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_CorpCavePurchaseAttack {
  required uint32 num = 1;
}

message S2C_CorpCavePurchaseAttack {
  required uint32 ret = 1;
  required uint32 num = 2;
}

message S2C_PushCorpCaveChapterInfo {
  required uint32 score = 1;
  repeated CorpCaveDetail cave = 2;    //关卡数据
  repeated uint32 dungeon = 3;  //有奖励可领的关卡
}

message C2S_GetCorpCaveCorpRank {
}

message S2C_GetCorpCaveCorpRank {
  required uint32 ret = 1;
  repeated CrossCorp rank = 2;
  optional uint32 self_rank = 3;
}

message S2C_PushCorpCaveKillInfo {
  required uint32 id = 1;
  required uint32 pos = 2;
  required string name = 3;
}

message CorpCaveMemberRank {
  required uint32 id = 1;
  required string name = 2;
  required uint32 main_role = 3;
  optional uint32 dress_id = 4;
  optional uint32 vip = 5;
  optional uint32 clid = 6;
  optional uint32 cltm = 7;
  optional bool   clop = 8;
  optional uint32 score = 9;   //积分
  optional uint32 count = 10;  //次数
}

message C2S_GetCorpCaveMemberRank {
}

message S2C_GetCorpCaveMemberRank {
  required uint32 ret = 1;
  repeated CorpCaveMemberRank rank = 2;
}

message C2S_EquipmentGolden {
  required uint32 id = 1;
  optional uint32 step = 2;//升级到的进度
}

message S2C_EquipmentGolden {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 step = 3;//当前
}

message C2S_GetCityDefenseMainInfo {
}

message S2C_GetCityDefenseMainInfo {
  required uint32 ret = 1;
  optional uint32 total_page = 2;     //总页数
  optional uint32 user_score = 3;     //玩家积分
  optional uint32 user_rank = 4;      //玩家排名
  optional uint32 fast_gain = 5;      //快速收获
  optional uint32 occupy_num = 6;     //占领次数
  optional CityDefenseRoom self_room = 7; //自己仓库
}

message CityDefenseRoom {
  required uint32 room_id = 1;        //仓库id
  optional uint32 room_color = 2;     //仓库品质
  optional uint32 start_occupy = 3;   //开始占领时间
  optional uint32 continue_occupy = 4;//连续占领时间
  optional uint32 last_gain_time = 5; //上次收获时间
  optional uint32 extend_hour = 6;    //延长占领时间
  optional string declaration = 7;    //个人宣言
  optional uint32 fast_score = 8;     //快速收获物资
  optional CrossUser occupant = 9;    //占领者 sp1:corp_id sp2:corp_icon_pic sp3:corp_icon_frame sp4:corp_level
}

message CityDefenseTown {
  required uint32 town_id = 1;        //城池id
  required uint32 town_color = 2;     //城池品质
  repeated CityDefenseRoom rooms = 3; //城池中的仓库
}

message C2S_GetCityDefensePageInfo {
  required uint32 page_id = 1;
}

message S2C_GetCityDefensePageInfo {
  required uint32 ret = 1;
  required uint32 page_id = 2;
  repeated CityDefenseTown towns = 3;     //当前页中的城池
}

message C2S_GetCityDefenseTownInfo {
  required uint32 town_id = 1;
}

message S2C_GetCityDefenseTownInfo {
  required uint32 ret = 1;
  optional uint32 town_id = 2;
  optional CityDefenseTown town = 3;      //城池详情
}

message CityDefenseBriefTown {
  required uint32 town_id = 1;
  required uint32 town_color = 2;
  optional uint32 page_id = 3;
  optional uint32 occupy_num = 4;
}

message C2S_GetCityDefenseCorpTown {
}

message S2C_GetCityDefenseCorpTown {
  required uint32 ret = 1;
  repeated CityDefenseBriefTown towns = 2;  //自己军团所占城池
}

message C2S_GetCityDefenseNullTown {
}

message S2C_GetCityDefenseNullTown {
  required uint32 ret = 1;
  repeated CityDefenseBriefTown towns = 2;  //有空仓库的城池
}

message CityDefenseRecord {
  required bool is_win = 1;             //防守结果
  required uint32 old_color = 2;        //原先城池品质
  required uint32 new_color = 3;        //当前城池品质
  required uint32 defense_time = 4;     //防守时间
  required uint32 occupy_time = 5;      //开始占领时间
  required CrossUser enemy = 6;         //敌人信息
  optional uint32 enemy_town = 7;       //敌人所在城池
}

message C2S_GetCityDefenseUserInfo {
}

message S2C_GetCityDefenseUserInfo {
  required uint32 ret = 1;
  repeated CityDefenseRecord records = 2;
}

message C2S_CityDefenseOccupyARoom {
  required uint32 room_id = 1;
  required uint32 occupy_type = 2;  //占领类型 1:空 2:非空
}

message S2C_CityDefenseOccupyARoom {
  required uint32 ret = 1;
  optional uint32 occupy_type = 2;      //占领类型 1:空 2:非空
  optional bool occupy_ret = 3;         //占领结果
  optional uint32 occupy_num = 4;       //占领次数
  optional CityDefenseTown town = 5;
  optional BattleReport battle_report = 6; //4.6.50废弃
  optional uint64 report_id = 7; //4.6.50
}

message C2S_CityDefenseGainRoomAwd {
  required uint32 room_id = 1;
}

message S2C_CityDefenseGainRoomAwd {
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional CityDefenseRoom self_room = 3;
}

message C2S_CityDefenseGiveUpARoom {
}

message S2C_CityDefenseGiveUpARoom {
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional CityDefenseTown town = 3;
}

message C2S_CityDefenseExtendARoom {
  required uint32 hour = 1;
}

message S2C_CityDefenseExtendARoom {
  required uint32 ret = 1;
  optional CityDefenseTown town = 2;
}

message C2S_CityDefenseFastGainAwd {
  required uint32 num = 1;
}

message S2C_CityDefenseFastGainAwd {
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional uint32 fast_gain = 3;
  optional uint32 cur_gain = 4;
}

message C2S_CityDefenseDeclaration {
  required string declaration = 1;
}

message S2C_CityDefenseDeclaration {
  required uint32 ret = 1;
  optional CityDefenseRoom self_room = 2;
}

message C2S_CityDefenseFindAnEnemy {
  required uint64 sid = 1;
  required uint32 uid = 2;
}

message S2C_CityDefenseFindAnEnemy {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  optional CityDefenseTown town = 4;
}

message S2C_CityDefensePushTheTown {
  required uint64 sid = 1;
  required uint32 uid = 2;
  required CityDefenseTown town = 3;
}

message C2S_RequestCityDefenseRank {
  required uint32 type = 1;
}

message S2C_RequestCityDefenseRank {
  required uint32 ret = 1;
  required uint32 type = 2;
  repeated CrossUser users = 3; //sp1: score
}

message C2S_RequestCityDefenseGain {
}

message S2C_RequestCityDefenseGain {
  required uint32 ret = 1;
  required uint32 size = 2;
}

message S2C_CityDefenseDefeatInfo {
  required uint32 ret = 1;
}

message C2S_GetUserVersion {
}

message S2C_GetUserVersion {
  required string tag = 1;
  required string time = 2;
  optional string ip = 3;
}

message C2S_SpecialQuestionnaire {
  required uint32 id = 1;
  required string name = 2;
  required string phone = 3;
  required string address = 4;
}

message S2C_SpecialQuestionnaire {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_ConstructJuvenileGod {
	required uint32 type = 1;
	repeated Award award = 2;
}

message S2C_ConstructJuvenileGod {
	required uint32 ret = 1;
	required uint32 type = 2;
	repeated Award award = 3;
	optional CrossUser user= 4;
}

message C2S_GetJuvenileGodAward {
	required uint32 id = 1;	
}

message S2C_GetJuvenileGodAward {
	required uint32 ret = 1;
	repeated Award award = 2;
	repeated uint32 godAward = 3; //已经领取的进度
}

message C2S_GetSpecialHolidayGodInfo {
}

message S2C_GetSpecialHolidayGodInfo {
  required uint32 ret = 1;
  optional uint32 user_build_value = 2;
  repeated uint32 user_build_award = 3;
  repeated uint64 god_build_value = 4;
  repeated ConstructGodRecord records = 5;
}

message C2S_ConstructSpecialHolidayGod {
  required uint32 type = 1;
  required uint32 cnt = 2;
}

message S2C_ConstructSpecialHolidayGod {
  required uint32 ret = 1;
  repeated Award award = 2;
  required uint32 type = 3;
}

message C2S_GetSpecialHolidayGodAward {
  required uint32 id = 1;
}

message S2C_GetSpecialHolidayGodAward {
  required uint32 ret = 1;
  repeated Award award = 2;
  repeated uint32 user_god_award = 3;
}

message S2C_PushSpecialHolidayGodInfo {
  repeated uint64 god_build_value = 1;
}

message C2S_GetAllSpeciallHolidayGodAward {
}

message S2C_GetAllSpeciallHolidayGodAward {
  required uint32 ret = 1;
  repeated Award award = 2;
  repeated uint32 user_god_award = 3;
}

message ConstructGodRecord {
  required uint64 sid = 1;
  required uint32 uid = 2;
  required string sname = 3;
  required string uname = 4;
  required uint32 type = 5;
  required uint64 add = 6;
  repeated Award awards = 7;
  required uint32 time = 8;
}

message ConstructJuvenileGodRecord {
	required CrossUser user = 1; 
	repeated Award awards = 2;
    required uint32 time = 3;
}


message S2C_PushConstructGodRecords {
  repeated ConstructGodRecord records = 1;
}

message C2S_PullSpecialHolidayGodInfo {
}

message ExcelSpecialHoliday { // 欢庆表格配置
  optional uint32 id = 1;
  repeated Award sli_award = 2;
}
message C2S_GetExcelSpecialHolidayInfo {
  optional uint32 limit_time = 1; // 欢庆期数(0:至今为止的所有数据)
}
message S2C_GetExcelSpecialHolidayInfo {
  optional uint32 ret = 1;
  optional uint32 limit_time = 2; // 欢庆期数(0:至今为止的所有数据)
  repeated ExcelSpecialHoliday sli_data = 3; // 数据
}

message C2S_GetExcelSpecialHolidaySale {
  optional uint32 limit_time = 1; // 欢庆期数(0:至今为止的所有数据)
}
message S2C_GetExcelSpecialHolidaySale {
  optional uint32 ret = 1;
  optional uint32 limit_time = 2; // 欢庆期数(0:至今为止的所有数据)
  repeated ExcelSpecialHoliday sli_data = 3; // 数据
}

//一些基本信息可能以后需要的红点信息也可以弄在这里
message C2S_CityWarUserInfo {
}

message S2C_CityWarUserInfo {
  required uint32 ret = 1;
  repeated uint32 award = 2;//个人次数奖励
  optional uint32 id = 3;//map id
  optional uint32 pos = 4;//map pos
  optional uint32 challenge_count = 5;
  optional uint32 city_war_score = 6;
  optional uint32 attack_state = 7;
  optional uint64 battle_cd = 8;
  optional uint32 corp_score = 9;
  optional uint32 corp_rank = 10;
  optional uint32 remote_count = 11;//追缉令远程攻击次数
}

message C2S_CityWarInfo {
}

message CityWarMap {
  required uint32 id = 1;
  required CrossCorp corp = 2;
}

message S2C_CityWarInfo {
  required uint32 ret = 1;
  //repeated uint32 self_map = 2;//自己军团占领//这个逻辑改成客户端自己计算
  repeated CityWarMap maps = 3; //所有地图信息 自己的从这里遍历
  repeated uint32 fire_on = 4;
}

message C2S_CityWarSingleInfo {
  required uint32 id = 1;//地图城市ID
  required uint32 pos = 2;//页签默认为1
}

message S2C_CityWarSingleInfo {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 pos = 3;
  optional uint32 size = 4;//总数
  repeated CrossUser user = 5;
  optional CrossCorp corp = 6; //top 1
  optional uint32 self_rank = 7;
  optional uint32 corp_rank = 8;
  optional uint32 corp_score = 9;
}

message C2S_CityWarSingleRankInfo {
  required uint32 id = 1;
}

message S2C_CityWarSingleRankInfo {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated CrossCorp corp = 3;
  optional uint64 request_time = 4;//最后次刷新时间
}

message C2S_CityWarCorpRankInfo {
}

message S2C_CityWarCorpRankInfo {
  required uint32 ret = 1;
  repeated CrossCorp corp = 2;
  optional uint32 self_rank = 3;
  optional uint32 self_score = 4;
}

message C2S_CityWarUserRankInfo {
  required uint32 query_type = 1;//1本服 2跨服
}

message S2C_CityWarUserRankInfo {
  required uint32 ret = 1;
  required uint32 query_type = 2;
  repeated CrossUser user = 3;
  optional uint32 self_rank = 4;
}

message C2S_CityWarGetAward {
  required uint32 id = 1;
}

message S2C_CityWarGetAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  repeated uint32 ids = 4;
}

message C2S_CityWarAttackInfo {
}

message S2C_CityWarAttackInfo {
  required uint32 ret = 1;
  optional uint32 left_count = 2;
  optional uint32 purchase_count = 3;
  optional CrossUser user = 4;//sp1 map sp2 pos sp3 city_war_point sp4 city_war_socre
  optional uint32 attack_state = 5;//1正常 2已经追捕 3已经领过奖
}

message C2S_CityWarAttackPurchase {
  required uint32 size = 1;
}

message S2C_CityWarAttackPurchase {
  required uint32 ret = 1;
  required uint32 size = 2;
  optional uint32 left_count = 3;
  optional uint32 purchase_count = 4;
}

message C2S_CityWarAttackRefresh {
}

message S2C_CityWarAttackRefresh {
  required uint32 ret = 1;
  optional CrossUser user = 2;//sp1 map sp2 pos sp3 city_war_point sp4 city_war_socre
  optional uint32 attack_state = 3;//1正常 2已经追捕 3已经领过奖
}

message C2S_CityWarAttackAward {
}

message S2C_CityWarAttackAward {
  required uint32 ret = 1;
  repeated Award awards = 2;
}

message C2S_CityWarChallengeCity {
  required uint32 id = 1;
  required uint32 pos = 2;
}

message S2C_CityWarChallengeCity {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 pos = 3;
  optional BattleReport battle_report = 4; //废弃
  optional uint32 challenge_count = 5;
  optional uint64 battle_cd = 6;
  optional uint32 remote_count = 7;//追缉令远程攻击次数
  optional uint64 report_id = 8;
	optional bool is_win = 9; //4.6.50
}

message C2S_CityWarTimeInfo {
}

message S2C_CityWarTimeInfo {
  required uint32 ret = 1;
  optional uint64 start_time = 2;
  optional uint64 end_time = 3;
}

message C2S_CityWarSetFireOn{
  repeated uint32 fire_on = 1;
}

message S2C_CityWarSetFireOn {
  required uint32 ret = 1;
  repeated uint32 fire_on = 2;
}

message S2C_CityWarFlushFireOn {
  repeated uint32 fire_on = 1;
}

message C2S_CityWarUserLog {
}

message S2C_CityWarUserLog {
  required uint32 ret = 1;
  repeated CityWarLog log = 2;
}

message CityWarLog {
  required string name = 1;
  required string sname = 2;
  required bool is_win = 3;
  required uint64 time = 4;
  optional uint32 from_map = 5;
  optional uint32 from_pos = 6;
  optional uint32 to_map = 7;
  optional uint32 to_pos = 8;
}

message S2C_CityWarFlushUserInfo{
  required uint32 id = 1;
  required uint32 pos = 2;
}

message S2C_CityWarFlushMap {
  repeated CityWarMap maps = 1;
  repeated uint32 delete_map = 2;
  repeated CrossUser user = 3;//地图上移动的玩家
  repeated uint32 busy = 4;//很急很火的城市
}

message S2C_CityWarFlushUser{
  repeated CrossUser user = 1;//地图上移动的玩家
  repeated uint32 busy = 2;//很急很火的城市
}

message CityWarFlush {
  required uint32 map = 1;
  required uint32 score = 2;
}

message S2C_CityWarFlushScore {
  repeated CityWarFlush flush = 1;
}

message C2S_GetGroupDungeonInfo {
}

message S2C_GetGroupDungeonInfo {
  required uint32 ret = 1;
  repeated uint32 passed_dungeons = 2; //已通关关卡
  optional uint32 honor = 3; //积分
  optional uint32 coin = 4; //九州币
  optional uint32 award_cnt = 5; //已经奖励次数
  optional uint32 buyed_award_cnt = 6; //已经购买次数
  optional uint32 title = 7;
}

message C2S_ChallengeGroupDungeonSingle {
  required uint32 id = 1;
}

message S2C_ChallengeGroupDungeonSingle {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional BattleReport report = 3; //废弃
  optional uint32 award_honor = 4;
  optional uint32 award_coin = 5;
  repeated Award drops = 6;
  optional bool double_award = 7;
  optional uint32 left_award_cnt = 8;
  optional bool first_pass = 9;
  optional uint64 report_id = 10;
	optional bool is_win = 11; //4.6.50
}

//游戏助手-一键九州
message C2S_ChallengeOneKeyGroupDungeonSingle{
  required uint32 id =1;
  optional uint32 cnt =2;
}

message S2C_ChallengeOneKeyGroupDungeonSingle {
   required uint32 ret = 1;
   repeated GroupDungeonSingle group_dungeon =2;
}

message GroupDungeonSingle{
   required uint32 id = 1;
   optional uint32 award_honor = 2; //九州积分
   optional uint32 award_coin = 3; //币
   repeated Award drops = 4; //掉落道具
   optional bool double_award = 5; //是否双倍积分
   optional uint32 left_award_cnt = 6; //剩余奖励次数
   optional bool first_pass = 7; //是否第一次
   optional uint64 report_id = 8; //报告id
   optional bool is_win = 9; //4.6.50
}

message C2S_BuyGroupDungeonCnt {
  required uint32 cnt = 1;
}

message S2C_BuyGroupDungeonCnt {
  required uint32 ret = 1;
  required uint32 cnt = 2;
}

message GroupDungeonKnight {
  required uint64 sid = 1;
  required uint32 uid = 2;
  required uint32 kid = 3;
  optional uint32 select = 4; //0表示不上阵，1-6表示上阵位置
  optional uint32 base_id = 5;
  optional uint64 fight_value = 6;
  optional bool main_role = 7;
}

message C2S_GroupDungeonTeamStatus {
}

message S2C_GroupDungeonTeamStatus {
        required uint32 ret = 1; // OK，跨服异常
        optional uint32 status = 2; // 0: 不在队伍，1: 在自动匹配队伍，2：在队伍
        optional uint64 team_id = 3;
        repeated CrossUser team_members = 4; //sp4 表示军团id，// sp5 表示 是否同意出战 // sp6表示称号 // sp7表示是否与队长好友 // sp8 表示剩余>奖励次数
	repeated GroupDungeonKnight knights = 5;
        repeated Pet pet = 6;
        optional bool only_invited = 7;
        optional uint32 online_buff = 8;
        optional uint32 corp_buff = 9;
        optional uint32 friend_buff = 10;
        optional bool kicked = 11;
        optional uint32 dungeon_id = 12;
}

message C2S_GroupDungeonCreateTeam {
        required uint32 dungeon_id = 1;
}

message S2C_GroupDungeonCreateTeam {
        required uint32 ret = 1;
        required uint32 dungeon_id = 2;
}

message C2S_GroupDungeonJoinTeam {
        required uint32 dungeon_id = 1;
}

message S2C_GroupDungeonJoinTeam {
        required uint32 ret = 1;
        required uint32 dungeon_id = 2;
}

message C2S_GroupDungeonLeave {
}

message S2C_GroupDungeonLeave {
        required uint32 ret = 1;
}

message C2S_GroupDungeonKickTeamMember {
        required uint64 kicked_sid = 1;
        required uint32 kicked_user_id = 2;
}

message S2C_GroupDungeonKickTeamMember {
        required uint32 ret = 1;
}

message C2S_GroupDungeonSetTeamOnlyInvited {
        required bool only_invited = 1;
}

message S2C_GroupDungeonSetTeamOnlyInvited {
        required uint32 ret = 1;
}

message C2S_GroupDungeonInvite {
        required uint32 invited_user_id = 1;
        required uint64 team_id = 2;
        required uint32 dungeon_id = 3;
	optional uint64 invited_sid = 4;
}

message S2C_GroupDungeonInvite {
        required uint32 ret = 1;
	required uint32 invited_user_id = 2;
	optional uint64 invited_sid = 3;
}

message S2C_GroupDungeonBeInvited {
        required uint32 invitor_user_id = 1;
        required uint64 invitor_team_id = 2;
        required uint32 dungeon_id = 3;
	optional uint64 invitor_sid = 4;
		optional uint32 job_id = 5;//职业id
		optional uint32 job_level =6;//职业等级
}

message C2S_GroupDungeonInvitedJoinTeam {
        required uint32 invitor_user_id = 1;
        required uint64 invitor_team_id = 2;
        required uint32 dungeon_id = 3;
	optional uint64 invitor_sid = 4;
}

message S2C_GroupDungeonInvitedJoinTeam {
        required uint32 ret = 1;
}

message S2C_GroupDungeonInviteCanceled {
        required uint64 team_id = 1;
        required uint32 invitor_user_id = 2;
	optional uint64 invitor_sid = 3;
}

message C2S_GroupDungeonSelectKnight {
  repeated GroupDungeonKnight knights = 1;
  optional uint64 pet_sid = 2;
  optional uint32 pet_uid = 3;
}

message S2C_GroupDungeonSelectKnight {
  required uint32 ret = 1;
}

message C2S_GroupDungeonSelectPet {
  required uint64 sid = 1;
  required uint32 uid = 2;
}

message S2C_GroupDungeonSelectPet {
  required uint32 ret = 1;
}

message C2S_GroupDungeonAgreeBattle {
        required bool agree = 1;
}

message S2C_GroupDungeonAgreeBattle {
        required uint32 ret = 1;
}

message C2S_GroupDungeonExecute {

}

message S2C_GroupDungeonExecute {
        required uint32 ret = 1;
}

message GroupDungeonBattleReport {
  required uint64 battle_id = 1;
  required uint64 team_id = 2;
  //required BattleReport report = 3; //4.6.50废弃
  repeated CrossUser team_members = 4;
  required uint32 dungeon_id = 5;
  optional uint32 online_buff = 6;
  optional uint32 corp_buff = 7;
  optional uint32 friend_buff = 8;
  optional Pet pet = 9;
  optional uint64 report_id = 10; //4.6.50
}

message S2C_GroupDungeonBattleResult {
  required GroupDungeonBattleReport report = 1;
  optional uint32 award_honor = 2;
  optional uint32 award_coin = 3;
  repeated Award drops = 4;
  optional bool double_award = 5;
  optional uint32 left_award_cnt = 6;
	repeated AddFavorInfo favors = 7;	//增加好友度信息
}

message S2C_GroupDungeonCrossServerLost {

}

message C2S_GroupDungeonGetRank {
}

message S2C_GroupDungeonGetRank {
  required uint32 ret = 1;
  repeated CrossUser user = 2;
  repeated uint32 honor = 3;
}

message Runestone {
  required uint32 id = 1;
  required uint32 kid = 2;
  repeated uint32 hole = 3;
  optional uint32 protector = 4;
  optional uint32 protected = 5;
  optional uint32 protector_dg = 6;
  optional uint32 protected_dg = 7;
  optional uint32 enhance_tp = 8;
  repeated uint32 spirity_hole = 9;//[1-4]
}

message WarSoul {
  required uint32 id = 1;
  required uint32 num = 2;
}

message InlayWarSoul {
  required uint32 wid = 1;  //战魂id
  required uint32 rid = 2;  //兵符id
}

message C2S_GetRunestoneBag {
}

message S2C_GetRunestoneBag {
  required uint32 ret = 1;
  repeated Runestone runestones = 2;
}

message C2S_EquipRunestone {
  required uint32 kid = 1;   //武将id
  required uint32 rid = 2;   //兵符id 0 表示卸下，大于0 装备
}

message S2C_EquipRunestone {
  required uint32 ret = 1;
  required uint32 kid = 2;
  required uint32 rid = 3;
  optional uint32 eid = 4;  //卸下的兵符id
  repeated uint32 wid = 5;  //卸下的战魂id
}

message C2S_GetWarSoulBag {
}

message S2C_GetWarSoulBag {
  required uint32 ret = 1;
  repeated InlayWarSoul inlay_war_soul = 2;//已镶嵌战魂
  repeated WarSoul war_soul = 3;//所有战魂
}

message C2S_EquipOneWarSoul {
  required uint32 rid = 1;  //兵符id
  required uint32 pos = 2;  //位置1-10
  required uint32 wid = 3;  //战魂id
}

message S2C_EquipOneWarSoul {
  required uint32 ret = 1;
  required uint32 rid = 2;
  required uint32 pos = 3;
  required uint32 wid = 4;
  optional uint32 old_id = 5;
}

message C2S_CompoundOneWarSoul {
  required uint32 tar_id = 1;//目标战魂id
  required uint32 tar_num = 2;//目标战魂数量
}

message S2C_CompoundOneWarSoul {
  required uint32 ret = 1;
  optional WarSoul add_war_soul = 2;//合成的战魂
  optional WarSoul del_war_soul = 3;//消耗的战魂
}

message C2S_CompoundAllWarSoul {
}

message S2C_CompoundAllWarSoul {
  required uint32 ret = 1;
  repeated InlayWarSoul inlay_war_soul = 2;//已镶嵌战魂
  repeated WarSoul war_soul = 3;//所有战魂
}

message C2S_CompoundInlaidWarSoul {
  required uint32 rid = 1;
  required uint32 pos = 2;
}

message S2C_CompoundInlaidWarSoul {
  required uint32 ret = 1;
  optional uint32 rid = 2;
  optional uint32 pos = 3;
  optional uint32 new_wid = 4;
  optional uint32 old_wid = 5;
}

message C2S_GetRunestoneCompose {
}

message S2C_GetRunestoneCompose {
  required uint32 ret = 1;
  repeated uint32 compose_id = 2;
}

message C2S_GetWarSoulCompose {
}

message S2C_GetWarSoulCompose {
  required uint32 ret = 1;
  repeated uint32 advance_id = 2;
}

message C2S_ResolveTheWarSoul {
  repeated ExDuShopItem souls = 1;
}

message S2C_ResolveTheWarSoul {
  required uint32 ret = 1;
  repeated Award award = 2;
}

message RunestoneShopInfo {
  required uint32 free = 1;         //当前免费次数
  required uint32 refresh_num = 2;  //已刷新次数
  required uint32 last_time = 3;    //免费次数上次恢复时间
  repeated uint32 item_id = 4;      //六个商品
  repeated uint32 item_num = 5;     //已购买数量
}

message C2S_GetRunestoneShop {
}

message S2C_GetRunestoneShop {
  required uint32 ret = 1;
  optional RunestoneShopInfo info = 2;
}

message C2S_ShoppingRunestoneShop {
  required uint32 index = 1;      //第几个格子1-6
  required uint32 item_id = 2;    //商品id
}

message S2C_ShoppingRunestoneShop {
  required uint32 ret = 1;
  repeated Award award = 2;
}

message C2S_RefreshRunestoneShop {
}

message S2C_RefreshRunestoneShop {
  required uint32 ret = 1;
  optional RunestoneShopInfo info = 2;
}

message C2S_RunestoneSetProtector {
  required uint32 gold_runestone_id = 1;
  required uint32 red_runestone_id = 2;
}

message S2C_RunestoneSetProtector {
  required uint32 ret = 1;
  required uint32 gold_runestone_id = 2;
  required uint32 red_runestone_id = 3;
}

message C2S_RunestoneUnSetProtector {
  required uint32 gold_runestone_id = 1;
}

message S2C_RunestoneUnSetProtector {
  required uint32 ret = 1;
  required uint32 gold_runestone_id = 2;
}

message C2S_RunestoneDGOpProtector {
  required uint32 dg_runestone_id = 1; //暗金兵符ID
  required uint32 gold_runestone_id = 2; //金兵符ID
}

message S2C_RunestoneDGOpProtector {
  required uint32 ret = 1;
  optional uint32 dg_runestone_id = 2; //暗金兵符ID
  optional uint32 gold_runestone_id = 3; //金兵符ID
}

message C2S_UserFreezeGoldInfo {
}

message S2C_UserFreezeGoldInfo {
  required uint32 ret = 1;
  required uint32 freeze_gold = 2;
}

message C2S_GetUserFreezeGold {
}

message S2C_GetUserFreezeGold {
  required uint32 ret = 1;
  required uint32 freeze_gold = 2;
  repeated Award awards = 3;
}

message C2S_GetFlushShopInfo {
  required uint32 shop_id = 1; //商店ID
}

message S2C_GetFlushShopInfo {
  required uint32 ret = 1;
  optional Shop shop = 2; //商店信息
}

message C2S_FlsuhShopBuy {
  required uint32 shop_id = 1;
  required uint32 index = 2;
}

message S2C_FlsuhShopBuy {
  required uint32 ret = 1;
  optional Shop shop = 2; //商店信息
}

message C2S_FlushShopGoods {
  required uint32 shop_id = 1;
  required uint32 flush_type = 2; //0-3
}

message S2C_FlushShopGoods {
  required uint32 ret = 1;
  optional Shop shop = 2; //商店信息
}

message C2S_GetCorpDungeonOption {
}

message S2C_GetCorpDungeonOption {
  required uint32 ret = 1;
  repeated uint32 option = 2;//刚开始如果没设置这个字段没有
}

message C2S_SetCorpDungeonOption {
  repeated uint32 option = 1;
}

message S2C_SetCorpDungeonOption {
  required uint32 ret = 1;
  repeated uint32 option = 2;
}

message C2S_GetRedHint {
}

message CityWarHint {
  repeated uint32 award = 1;//个人次数奖励
  optional uint32 challenge_count = 2;
  optional uint32 attack_left_count = 3;
  optional uint32 attack_state = 4;
}

message SpecialHolidayGodHint {
  repeated uint64 god_build_value = 1;
  repeated uint32 user_build_award = 2;
}

message HomeHint{
  required uint32 coin = 1;
  required uint32 wood = 2;
  required uint32 boom = 3;
  repeated HomePro pros = 4;
  repeated uint32 platform_knight = 5;
  repeated uint32 platform_pet = 6;
  repeated uint32 platform_horse = 7;
  optional uint32 home_level_award = 8;
  optional bool salary_got = 9;
  repeated HomeSkill tech = 10;
}

message WorldWarHint {
  optional uint32 daily_used_campaign_point = 1;
  repeated uint32 daily_awards = 2;
  optional uint32 migrate_point = 4;
  optional uint32 campaign_point = 5;
  optional uint32 migrate_recover_tm = 6;
  optional uint32 campaign_recover_tm = 7;
  optional uint32 tired_point = 8;
  optional uint32 tired_recover_tm = 9;
  optional uint32 defense = 10;
  optional uint32 defense_recover_time = 11;
  optional uint32 camp_evil = 12;
  optional uint32 camp_evil_tm = 13;
}

message StarGiftHint {
  repeated StarPoster stars = 1;  //服务器明星信息
  required uint32 like_count = 2; //玩家今日点赞次数
  repeated StarAward award = 3;   //明星翻牌奖励
}
message SkyTestHint {
  required uint32 start_time = 1;
  required uint32 end_time = 2;
  optional uint32 times = 3;
  optional uint32 floor = 4;
  repeated uint32 floor_award_got = 5;
  optional uint32 history_max_floor = 6;  //6.3.50 历史最高层数
  optional uint32 reset_group = 7; //6.3.50重置组ID
}
message HomeTechHint {
  repeated KeyValueT info = 1;
}

message H5Activity {
  optional uint32 start = 1;
  optional uint32 end = 2;
  optional string url = 3;
}

message ArenaHint {
  optional uint32 rank = 1;
}

message RoadHint {
  repeated RoadHandbook hb = 1;
}

message ChickenHint {
  optional uint32 start = 1;
  optional uint32 end = 2;
}

message ViceFormationHint {
	repeated ViceFormationPos poss = 1;
}

message MysteryTime {
	required uint32 open_time = 1;
	required uint32 end_time = 2;
	required uint32 shop_time = 3;
	optional uint32 challenge_count = 4;
	optional uint32 max_stage = 5;
	repeated uint32 targets = 6;
	optional uint32 chapter = 7;
	optional uint32 coin = 8;
}

//只有登录拉一次
message S2C_GetRedHint {
  required uint32 ret = 1;
  optional CityWarHint city_war = 2;//国战红点
  optional SpecialHolidayGodHint sp_god = 3; //神像红点
  optional HomeHint home_hint = 4;
  optional WorldWarHint world_war_hint = 5;
  optional ScoreExchargeTimeXml score_excharge_hint = 6;
  //optional StarGiftHint star_gift = 7;
  optional SkyTestHint sky_test = 8;
  optional HomeTechHint home_tech = 9;
  optional CorpAllianceInfo alliance = 10;
  optional H5Activity h5 = 11;
  optional ArenaHint arena = 12;
  optional RoadHint road = 13;
  optional ChickenHint chicken = 14;
  optional ViceFormationHint vice_formation = 15;
  //optional MysteryTime mystery = 16;
  optional RoadBiRedHint road_bi = 17;
  optional ViceFormationHint militarist_vice_formation = 18;
  optional BookLibraryRedHint book_library = 19; //藏经阁
  optional WorldWarSpiritInfo spirit = 20; //鏖战英灵
  optional Wush2Hint wush2 = 21;//真三国无双红点  5.6.0
  optional uint32 OldUserBackRedHit = 22;//老玩家回归红点显示标记
  optional BattlePassHint battle_pass_hint = 23; //通行证红点 5.7.0
  optional SummaryHint summary = 24; //5.7.0-三国纪要红点
  repeated KeyValueT spring_words = 25;//春节祝福语
  optional RateTreasureRedHit rate_treasure_info = 26; //6.0.0-汉室秘宝
  optional WWTBForGameHelperRedHit wwtb_game_helper = 27; //6.2.0-异兽信息
  optional WarFareHint war_fare = 28;
  optional UserPreLottery pre_lottery = 29; // 6.3.0-H5预抽卡
  optional GreetingCard greeting_card = 30; //6.3.0-登录贺卡
  optional OldPlayerRedHit old_player = 31; //6.3.0-老玩家回归
  optional uint32 buy_bag_size = 32; //6.3.50-购买的背包空间
  optional UserRefundInfo refund_info = 33; //6.5.0-退款信息
}

message OldPlayerRedHit {
  optional uint32 status = 1; //状态
  optional uint32 start_day = 2; //开始时间
  repeated Award  login_awards = 3; //见面礼
  optional uint32 login_awards_tm = 4; //领取见面礼时间
  optional uint32 off_days = 5 ;//流失天数
  optional uint32 box_id = 6;
  optional uint32 rebel_add_times = 7; //叛军boss加成次数
  optional uint32 add_exp = 8; //每日额外获得经验最大值
}

message C2S_GetRedHintSec {
	optional string activity_h5_info_md5 = 1;
}

message ActivityH5Info {
	optional string md5 = 1;
	optional bytes data = 2;	//json格式字节流
}

message RogueRedHint {
	optional uint32 challenge_count = 1;	//已挑战次数
	optional uint32 invite = 2; 		//邀请函数
}

message SpiritRedHint {
	optional bool corp_award = 1;		//军团有待发奖励
	optional bool alliance_award = 2;	//联盟有待发奖励
}

message Wush2Hint {
 optional uint32  star  = 1; //最大星星数
 optional uint32  reset_times = 2; //5.6.50 重置次数
 optional uint32  boss_times = 3; //boss 剩余次数
}

message SummaryHint {
  optional uint32 super_server = 1; //热血服标记，0-否，1-是
  optional uint32 group = 2;   //
  optional bool   is_act = 3;  //是否活动期间
}

// 通行证红点
message BattlePassHint {
  optional uint32 open_state = 1; // 活动状态(0:无,数据初始化中;1:已关闭;2:全开状态,可完成任务,可领取奖励;3:禁用任务状态)
  optional bool has_award = 2; // 是否存在未领取的奖励
}

message WarFareHint {
  optional uint32 open_state = 1; // 活动状态(0:无,数据初始化中;1:已关闭;2:全开状态)
  optional bool has_award = 2; // 是否存在未领取的奖励
}

//每次到主界面都拉
message S2C_GetRedHintSec {
  required uint32 ret = 1;
  optional DipperRedHint dipper = 2;
  optional IndieRechargeRedHint indie_recharge = 3;
  optional DailySign daily_sign = 4;
  optional KPRankBeton beton = 5; //自己的押注信息
  optional BraveListInfo brave_list = 6; //骁勇榜活动信息
  repeated AncientInfo ancient_info = 7; //阵法信息
  optional CelebrationRedHint celebration = 8; //三国庆典
  optional RoadActRedHint road_act = 9; //传奇之路活动副本
  repeated uint32 guide = 10; //新向导 将军手卷
  optional StarGiftHint star_gift = 11;
  optional RoadLDRedHint road_ld = 12; //传奇之路联动副本
  optional MysteryTime mystery = 13;
  optional AnniversaryRedHint anniversary_road =14;//少三之路
  optional ActivityH5Info activity_h5_info = 15; //三国快报
  optional RogueRedHint rogue = 16; //寻龙摸金
  optional SpiritRedHint spirit = 17; //鏖战英灵
  repeated AncientFlagInfo flag_info = 18;  //阵旗信息
  optional BattlePassHint battle_pass_hint = 19; //通行证红点 5.7.0
  optional uint32 spring_card_state = 20; //6.0.0-新年贺卡红点 0:活动未开放 1：活动开放 有未领取奖励
  optional RateTreasureRedHit rate_treasure_info = 21; //6.0.0-汉室秘宝
  optional WWTBForGameHelperRedHit wwtb_game_helper = 22; //6.2.0-异兽信息
  repeated Propelling propelling_gift = 23; //6.2.50-推送礼包
  optional CustomFestivalActRedHint custom_festival = 24; //6.3.0-定制欢庆九州巡礼 
  optional JuvenileInfo juvenile = 25;//6.3.0-少年节活动
  optional SuperLucklyRedHint superLucklyLottery    =26;//6.3.0-超级幸运星红点
  repeated DirectMonthFundInfo direct_month_fund = 27; //6.4.0-新版月基金
  optional ChessDailyMissionRedHint chess_daily_mission = 28; //6.4.50-镇魂街联动（大富翁）
  optional BattlePassDungeonInfo battle_pass_dungeon = 29; //6.4.50-主线战令信息	
  optional ObtainCustomPackAct custom_pack_act = 30;//6.5.0-定制礼包
}
message SuperLucklyRedHint {
  optional bool is_open =1; //活动是否开启
  optional uint32 start_time =2;//开始时间
  optional uint32 end_time = 3;//结束时间
  optional uint32 present_end_time =4;//最晚领奖时间
  optional bool is_operate = 5;//是否可操作
}
  

message JuvenileInfo {
	optional uint32 count = 1; //神石数量
	repeated uint32 godAward = 2; //领奖次数
}

message C2S_GetCrystalWeekShopInfo {
}

message S2C_GetCrystalWeekShopInfo {
  required uint32 ret = 1;
  optional uint32 vip = 2;
  optional uint32 lvl = 3;
  repeated uint32 ids = 4;
  repeated uint32 nums = 5;
}

message C2S_GetCityWarShopInfo {
}

message CityWarShop {
  required uint32 id = 1;
  required uint32 count = 2;
}

message S2C_GetCityWarShopInfo {
  required uint32 ret = 1;
  repeated CityWarShop shop = 2;
}

message C2S_BroadcastOp {
  required uint32 tp = 1;//类型 1代表citywar
  required bool enter = 2;
}

message S2C_BroadcastOp {
  required uint32 ret = 1;
  required uint32 tp = 2;
  required bool enter = 3;
}

message C2S_GetHomeProProduct {
  required uint32 pro_type = 1;
}

message S2C_GetHomeProProduct {
  required uint32 ret = 1;
  required uint32 pro_type = 2;
  repeated uint32 value = 3;
}

message C2S_UpgradeHomePro {
  required uint32 pro_type = 1;
}

message S2C_UpgradeHomePro {
  required uint32 ret = 1;
  required uint32 pro_type = 2;
  optional uint32 level = 3;
  optional uint32 coin = 4;
  optional uint32 wood = 5;
  optional uint32 boom = 6;
}

message C2S_GetHomeProPlatform {
  required uint32 pro_type = 1;
}

message S2C_GetHomeProPlatform {
  required uint32 ret = 1;
  required uint32 pro_type = 2;
  repeated uint32 values = 3;
}

message C2S_SetHomeProPlatform {
  required uint32 pro_type = 1;
  repeated uint32 values = 2;
}

message S2C_SetHomeProPlatform {
  required uint32 ret = 1;
  required uint32 pro_type = 2;
  repeated uint32 values = 3;
}

message C2S_CollectHomeProProduct {
  required uint32 pro_type = 1;
}

message S2C_CollectHomeProProduct {
  required uint32 ret = 1;
  required uint32 pro_type = 2;
  optional HomePro pro = 3;
  optional uint32 wood = 4;
  optional uint32 coin = 5;
}

message C2S_GetHomeProDinner {

}

message HomeDinner {
  required uint32 id = 1;
  optional uint32 tp  = 2;
  optional uint32 time = 3;
  optional CrossUser host = 4;//主人
  repeated CrossUser user = 5;//sp1
  optional bool public = 6;
  optional uint32 level = 7;
}

message S2C_GetHomeProDinner {
  required uint32 ret = 1;
  optional HomeDinner dinner = 2;//宴会信息
  optional uint32 left_hold_count = 3;//剩余可举办次数
  optional uint32 left_attend_count = 5;//剩余参加次数
  optional bool has_award = 6;//是否领奖
  optional uint32 purchase_count = 7;
  optional uint32 high_purchase_count = 8;
  repeated uint32 bonus = 9;
}

message C2S_HoldHomeProDinner {
  required uint32 hold_type = 1;//普通1高级2
}

message S2C_HoldHomeProDinner {
  required uint32 ret = 1;
  required uint32 hold_type = 2;
  optional HomeDinner dinner = 3;
  optional bool has_award = 4;
  optional uint32 left_hold_count = 5;
  optional uint32 purchase_count = 6;
  optional uint32 high_purchase_count = 7;
}

message C2S_PublicHomeProDinner {
  required bool public = 1;
}

message S2C_PublicHomeProDinner {
  required uint32 ret = 1;
  required bool public = 2;
}

message C2S_GetPublicHomeDinner {
  required uint32 index = 1;
}

message S2C_GetPublicHomeDinner {
  required uint32 ret = 1;
  required uint32 index = 2;
  repeated CrossUser dinners = 3;
  optional uint32 size = 4;
}

message C2S_GetHomeDinnerLog {

}

message S2C_GetHomeDinnerLog {
  required uint32 ret = 1;
  repeated CrossUser dinners = 2;
}

message C2S_GetHomeDinnerAward {
}

message S2C_GetHomeDinnerAward {
  required uint32 ret = 1;
  optional bool has_award = 2;
  repeated Award awards = 3;
}

message C2S_GetCrossHomeInfo {
  required uint64 query_sid = 1;
  required uint32 query_user_id = 2;
}

message S2C_GetCrossHomeInfo {
  required uint32 ret = 1;
  required uint64 query_sid = 2;
  required uint32 query_user_id = 3;
  optional HomeInfo home = 4;
  optional CrossUser user = 5;
}

message C2S_GetCrossHomeDinner {
  required uint64 query_sid = 1;
  required uint32 query_user_id = 2;
}

message S2C_GetCrossHomeDinner {
  required uint32 ret = 1;
  required uint64 query_sid = 2;
  required uint32 query_user_id = 3;
  optional HomeDinner dinner = 5;
}

message C2S_JoinCrossHomeDinner {
  required uint64 query_sid = 1;
  required uint32 query_user_id = 2;
  required uint32 query_id = 3;
  required uint32 pos = 4;		//一键赴宴时，位置由后端进行随机
	optional uint32 max_pos = 5; //一键赴宴时，把最大位置传给后端做随机
	optional bool one_key = 6;	//一键赴宴 根据max_pos随机一个空的位置
}

message S2C_JoinCrossHomeDinner {
  required uint32 ret = 1;
  required uint64 query_sid = 2;
  required uint32 query_user_id = 3;
  required uint32 query_id = 4;
  required uint32 pos = 5;
  optional HomeDinner dinner = 6;
  repeated Award awards = 7;
  optional uint32 left_attend_count = 8;
  optional uint32 favor = 9;  //好友度(0-表示不增加)
	optional bool one_key = 10;
}

message C2S_GetHomeDinnerInvite {

}

message S2C_GetHomeDinnerInvite {
  required uint32 ret = 1;
  repeated CrossUser users = 2;
}

message C2S_InviteHomeDinner {
  required uint32 query_user_id = 1;
  required uint64 query_sid = 2;
}

message S2C_InviteHomeDinner {
  required uint32 ret = 1;
  required uint32 query_user_id = 2;
  required uint64 query_sid = 3;
}

message C2S_InviteHomeDinnerOnline {
  repeated uint32 local_user = 1;
  repeated SidUid cross_user = 2;
}

message S2C_InviteHomeDinnerOnline {
  required uint32 ret = 1;
  repeated uint32 local_user = 2;
  repeated SidUid cross_user = 3;
}

message C2S_PurchaseHomeTaskCount {
  required uint32 count = 1;
}

message S2C_PurchaseHomeTaskCount {
  required uint32 ret = 1;
  required uint32 count = 2;
  optional uint32 task_purchase_count = 3;
  optional uint32 task_left_count = 4;
}

message WorldWarCity {
  required uint32 id = 1;
  optional CrossUser win_user = 2;
  optional AllianceSnapShot win_alliance = 3;
}

message WorldWarCityBuildingOwner {
  required uint32 point_group = 1;
  optional AllianceSnapShot alliance = 2;
}

message WorldWarMonster {
  required uint32 id = 1;
  optional uint32 life = 2;
  optional uint64 blood = 3;
  optional uint64 full_blood = 4;
  optional CrossUser summoner = 5;
  optional uint32 create_time = 6;
  optional uint32 help_times = 7; //承伤次数
}

message WorldWarFarmLand {
  required CrossUser owner = 1;
  required uint32 farm_id = 2;
  required uint32 create_time = 3;
  optional uint32 robed = 4;
  optional uint32 robed_salary = 5;
}

message WorldWarDefense {
  required uint32 time = 1;
  required uint32 defense = 2; //time的时候的城防值，使用的时候实际城防值应计算 = defense + (now - time) / recover_seconds
  required uint32 max_defense = 3;
  required uint32 recover_seconds = 4; //X秒回复一点城防值
  optional uint32 protect_end_time = 5; //保护状态结束时间
  optional bool auto_protect = 6; //自动使用免战令
  optional uint32 recover_per_time = 8;
  optional uint32 camp_evil = 9;
  optional uint32 camp_evil_tm = 10;
  optional uint32 evil_camp_time = 11; //下次可进入异族的时间
}

message WorldWarArsenal {
  optional AllianceSnapShot alliance = 1;
  optional uint32 goods = 2;
}

message WorldWarGuard {
  optional CrossUser user = 1;
  optional uint32 broken_end_tm = 2;
}

message WorldWarCampMonster {
  required uint32 id = 1;
  optional uint32 x = 2;
  optional uint32 y = 3;
}

message WorldWarTeamBoss {
  required uint32 id = 1;
  optional uint32 x = 2;
  optional uint32 y = 3;
  optional uint32 list_id = 4;//boss唯一标识id
  optional uint32 born_tm = 5;  //产生时间
  optional uint32 last_tm = 6;  //持续时间
  optional uint32 max_hp  = 7; //血量上限
  optional uint32 tar_idx = 8; //固定锁敌idx
}

message WorldWarTeamBossBuff {
  required uint32  list_id = 1;
  optional uint32  buff_id = 2;
  optional uint32  buff_type = 3;
  optional uint32  start_tm = 4;
}

message WorldWarTeamBossMapInfo {
  optional uint32 hp = 1;
  optional uint32 map_type=2;
  optional bool   win = 3;
  repeated WorldWarTeamBossBuff buff_list = 5;
}

message WorldWarAreaMonsterInfo {
  optional uint32 id = 1;
  optional uint32 level = 2;
  optional uint32 exp = 3;
}

message WorldWarMapCell {
  optional uint32 x = 1;
  optional uint32 y = 2;
  optional uint32 type = 3; // 0 表示空，1玩家，2军团的左上角，3普通怪，4召唤怪, 5城池, 6军团boss, 7粮田, 8联盟, 9营寨怪物, 13高级召唤宠, 14特殊召唤宠，15鏖战英灵, 16战区守护兽, 17战区守护兽雕像
  optional CrossUser user = 4;
  optional CrossCorp corp = 5;
  optional WorldWarMonster monster = 6;
  optional WorldWarCity city = 7;
  optional CrossUser attacker = 8;
  optional WorldWarFarmLand farm_land = 9;
  optional WorldWarDefense defense = 10; //有user，就有这个
  optional uint32 city_id = 11; //城池id，0表示大地图, 1-9表示城池，101-109表示营寨
  optional WorldWarArsenal arsenal = 12;
  optional uint32 remove_reason = 13; //0表示主动，1表示被打飞
  optional WorldWarCampMonster camp_monster = 14;//营寨里面的怪
  optional WorldWarCampMonster attacker_monster = 15; //怪主动打玩家的那个怪
  optional WorldWarTeamBoss   world_team_boss = 16;
  optional WorldWarTeamBossMapInfo boss_map = 17;
  optional WorldWarAreaMonsterInfo area_monster = 26;
}

message WorldWarCorpMemberPos {
  required uint32 uid = 1;
  required uint32 x = 2;
  required uint32 y = 3;
  optional bool has_farm = 4;
  optional uint32 farm_x = 5;
  optional uint32 farm_y = 6;
}

message C2S_WorldWarEnterMap {
  optional bool guide = 1;
}

message S2C_WorldWarEnterMap {
  required uint32 ret = 1;
  optional uint32 my_x = 2;
  optional uint32 my_y = 3;
  repeated WorldWarMapCell cells = 4;
  optional CrossUser user = 5;
  optional uint32 my_corp_x = 6;
  optional uint32 my_corp_y = 7;
  optional bool has_corp = 8;
  optional uint32 guide_empty_x = 9;
  optional uint32 guide_empty_y = 10;
  repeated WorldWarCorpMemberPos corp_members = 11;
  optional uint32 my_farm_x = 12;
  optional uint32 my_farm_y = 13;
  optional bool auto_protect = 14;
  optional uint32 my_farm_buff = 15;
  optional uint32 my_farm_harvest = 16;
  optional uint32 defense = 17;
  optional uint32 defense_recover_time = 18;
  optional uint32 my_farm_salary = 19;
  optional uint32 protect_end_time = 20;
  optional uint32 my_city_id = 21;
  optional uint32 my_alliance_x = 22;
  optional uint32 my_alliance_y = 23;
  optional uint32 my_city_title = 24;
  optional WorldWarFarmLand farm = 25;
  optional bool auto_harvest_farm = 26;
  optional uint32 evil_camp_time = 27; //下次可进入异族的时间
}

message C2S_WorldWarMoveMap {
  required uint32 center_x = 1;
  required uint32 center_y = 2;
  optional uint32 area = 3;
}

message S2C_WorldWarMoveMap {
  required uint32 ret = 1;
  optional uint32 center_x = 2;
  optional uint32 center_y = 3;
  repeated WorldWarMapCell cells = 4;
  optional uint32 area = 5;
}

message S2C_WorldWarCellChange {
  required WorldWarMapCell cell = 1;
}

message C2S_WorldWarMapListen {
}

message S2C_WorldWarMapListen {
}

message C2S_WorldWarMapQuit {
}

message S2C_WorldWarMapQuit {
}

message C2S_WorldWarMigrateUser {
  required uint32 new_x = 1;
  required uint32 new_y = 2;
}

message S2C_WorldWarMigrateUser {
  required uint32 ret = 1;
  optional uint32 new_x = 2;
  optional uint32 new_y = 3;
  optional uint32 migrate_point = 4;
  optional uint32 migrate_recover_tm = 5;
}

message C2S_WorldWarMigrateCorp {
  required uint32 new_x = 1;
  required uint32 new_y = 2;
}

message S2C_WorldWarMigrateCorp {
  required uint32 ret = 1;
  optional uint32 new_x = 2;
  optional uint32 new_y = 3;
  optional uint32 migrate_point = 4;
  optional uint32 migrate_recover_tm = 5;
}

message C2S_WorldWarAttackMonster {
  required uint32 monster_id = 1;
  required uint32 monster_level = 2;
}

message S2C_WorldWarAttackMonster {
  required uint32 ret = 1;
  optional BattleReport report = 2; //废弃
  optional uint32 campaign_point = 3;
  optional uint32 campaign_recover_tm = 4;
  optional uint32 daily_used_campaign_point = 5;
  repeated Award awards = 6;
  optional uint64 report_id = 7;
  optional uint32 monster_id = 8;
}

message C2S_WorldWarSummonMonster {
  required uint32 item_id = 1;
  required uint32 monster_x = 2;
  required uint32 monster_y = 3;
  optional uint32 city_id = 4;
}

message S2C_WorldWarSummonMonster {
  required uint32 ret = 1;
  optional uint32 monster_x = 2;
  optional uint32 monster_y = 3;
  optional uint32 city_id = 4;
  optional uint32 high_summon_times = 5; //返回每天已经召唤次数
  optional uint32 special_summon_times = 6; //返回每天已经召唤次数
}

message C2S_WorldWarAttackSummonMonster {
  required uint32 monster_x = 1;
  required uint32 monster_y = 2;
  optional uint32 monster_type = 3;
}

message S2C_WorldWarAttackSummonMonster {
  required uint32 ret = 1;
  optional BattleReport report = 2; //废弃
  optional uint32 attack_summon_monster_cnt = 3;
  optional uint32 daily_used_campaign_point = 4;
  repeated Award awards = 5;
  optional uint32 campaign_point = 6;
  optional uint32 campaign_recover_tm = 7;
  optional uint64 harm = 8;
  optional uint64 report_id = 9;
  optional uint32 tired_point = 10;
  optional uint32 tired_recover_tm = 11;
}

message C2S_WorldWarMyInfo {
}

message S2C_WorldWarMyInfo {
  required uint32 ret = 1;
  optional uint32 corp_boss_group = 2;
  optional uint32 corp_worship = 3;
  optional uint32 migrate_point = 4;
  optional uint32 campaign_point = 5;
  optional uint32 migrate_recover_tm = 6;
  optional uint32 campaign_recover_tm = 7;
  optional uint32 migrate_point_buyed_cnt = 8;
  optional uint32 campaign_point_buyed_cnt = 9;
  optional uint32 attack_summon_monster_cnt = 10;
  optional uint32 buy_attack_summon_monster_cnt = 11;
  optional uint32 daily_used_campaign_point = 12;
  repeated uint32 daily_awards = 13;
  optional uint64 corp_boss_my_harm = 14;
  optional uint64 corp_boss_my_corp_harm = 15;
  optional uint32 corp_boss_my_rank = 16;
  optional uint32 corp_boss_my_corp_rank = 17;
  optional uint32 tired_point = 18;
  optional uint32 tired_recover_tm = 19;
  optional uint32 tired_point_buyed_cnt = 20;
  optional uint32 rob_farm_cnt = 21;
  optional uint32 buy_rob_farm_cnt = 22;
  optional uint32 create_farm_cnt = 23; //今日剩余种田次数
  optional uint32 rob_user_cnt = 24; //今日已经攻打官邸次数
  optional uint32 unlock_tent_level = 25;
  optional uint32 tent_attack_left_times = 26;//进攻营寨试炼场剩余奖励次数
  optional uint32   tent_attack_total_times = 27; //进攻营寨试炼场总次数，包含失败
  optional uint32 camp_evil = 28;
  optional uint32 camp_evil_tm = 29;
  optional uint32 team_boss_left_times = 30;// 天下boss剩余次数
  optional uint32 high_summon_times = 31;     // 每日召唤高级宠物次数
  optional uint32 special_summon_times = 32;  // 每日召唤特殊宠物次数
  optional uint32 spring_monster_attack_count = 33; //天下瑞兽可攻打次数
}

message C2S_WorldWarGetPoints {
}

message S2C_WorldWarGetPoints {
  required uint32 ret = 1;
  optional uint32 migrate_point = 2;
  optional uint32 campaign_point = 3;
  optional uint32 migrate_recover_tm = 4;
  optional uint32 campaign_recover_tm = 5;
  optional uint32 tired_point = 6;
  optional uint32 tired_recover_tm = 7;
}

message C2S_WorldWarSelectCorpBossGroup {
  required uint32 group = 1;
}

message S2C_WorldWarSelectCorpBossGroup {
  required uint32 ret = 1;
  required uint32 group = 2;
}

message C2S_WorldWarAttackCorpBoss {
}

message S2C_WorldWarAttackCorpBoss {
  required uint32 ret = 1;
  optional BattleReport report = 2; //废弃
  optional uint32 daily_used_campaign_point = 3;
  repeated Award awards = 4;
  optional uint32 campaign_point = 5;
  optional uint32 campaign_recover_tm = 6;
  optional uint64 corp_boss_my_harm = 7;
  optional uint64 corp_boss_my_corp_harm = 8;
  optional uint64 my_harm = 9;
  optional uint32 corp_boss_my_rank = 10;
  optional uint32 corp_boss_my_corp_rank = 11;
  optional uint64 report_id = 12;
}

message C2S_WorldWarGetCorpBoss {
}

message S2C_WorldWarGetCorpBoss {
  required uint32 ret = 1;
  optional uint32 boss_id = 2;
  optional uint32 boss_level = 3;
  optional uint64 boss_hp = 4;
  optional uint64 boss_max_hp = 5;
}

message WorldWarCorpBossUserRank {
  required uint32 group = 1;
  repeated CrossUser users = 2;
}

message C2S_WorldWarGetCorpBossLocalUserRank {
}

message S2C_WorldWarGetCorpBossLocalUserRank {
  required uint32 ret = 1;
  repeated WorldWarCorpBossUserRank ranks = 2;
  optional uint32 my_rank = 3;
  optional uint64 my_harm = 4;
}

message C2S_WorldWarGetCorpBossAreaUserRank {
}

message S2C_WorldWarGetCorpBossAreaUserRank {
  required uint32 ret = 1;
  repeated WorldWarCorpBossUserRank ranks = 2;
  optional uint32 my_rank = 3;
  optional uint64 my_harm = 4;
}

message C2S_WorldWarGetCorpBossCorpRank {
}

message S2C_WorldWarGetCorpBossCorpRank {
  required uint32 ret = 1;
  repeated CrossCorp corps = 2;
  optional uint32 my_rank = 3;
  optional uint64 my_harm = 4;
}

message C2S_WorldWarBuyMigratePoint {
  required uint32 cnt = 1;
}

message S2C_WorldWarBuyMigratePoint {
  required uint32 ret = 1;
  optional uint32 migrate_point = 2;
  optional uint32 migrate_recover_tm = 3;
  optional uint32 migrate_point_buyed_cnt = 4;
}

message C2S_WorldWarBuyCampaignPoint {
  required uint32 cnt = 1;
}

message S2C_WorldWarBuyCampaignPoint {
  required uint32 ret = 1;
  optional uint32 campaign_point = 2;
  optional uint32 campaign_recover_tm = 3;
  optional uint32 campaign_point_buyed_cnt = 4;
}

message C2S_WorldWarBuyAttackSummonMonsterCnt {
  required uint32 cnt = 1;
}

message S2C_WorldWarBuyAttackSummonMonsterCnt {
  required uint32 ret = 1;
  optional uint32 buy_attack_summon_monster_cnt = 2;
  optional uint32 attack_summon_monster_cnt = 3;
}

message C2S_WorldWarReceiveDailyAward {
  required uint32 id = 1;
}

message S2C_WorldWarReceiveDailyAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  repeated uint32 daily_awards = 4;
}

message C2S_WorldWarAreaList {
}

message WorldWarAreaList {
  required uint32 area = 1;
  required uint64 min_sid = 2;
  required uint64 max_sid = 3;
  optional CrossCorp corp = 4;
  optional bool my_area = 5;
}

message S2C_WorldWarAreaList {
  required uint32 ret = 1;
  repeated WorldWarAreaList area = 2;
}

message C2S_WorldWarGetOtherMap {
  required uint32 area = 1;
  required uint32 x = 2;
  required uint32 y = 3;
}

message S2C_WorldWarGetOtherMap {
  required uint32 ret = 1;
  required uint32 area = 2;
  required uint32 x = 3;
  required uint32 y = 4;
  repeated WorldWarMapCell cells = 5;
}

message C2S_WorldWarMigrateArsenal {
  required uint32 new_x = 1;
  required uint32 new_y = 2;
}

message S2C_WorldWarMigrateArsenal {
  required uint32 ret = 1;
  optional uint32 new_x = 2;
  optional uint32 new_y = 3;
  optional uint32 migrate_point = 4;
  optional uint32 migrate_recover_tm = 5;
}

message C2S_WorldWarAttackSpringMonster {
	required uint32 x = 1;
	required uint32 y = 2;
}

message S2C_WorldWarAttackSpringMonster {
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional uint32 challenge_count = 3;
  optional uint32 tired_point = 4;
  optional uint32 tired_recover_tm = 5;
	optional uint32 x = 6;
	optional uint32 y = 7;
}

message C2S_WorldWarCreateFarmLand {
  required uint32 x = 1;
  required uint32 y = 2;
  required uint32 farm_id = 3;
}

message S2C_WorldWarCreateFarmLand {
  required uint32 ret = 1;
  required uint32 x = 2;
  required uint32 y = 3;
  required uint32 farm_id = 4;
  optional uint32 my_farm_buff = 5;
  optional uint32 my_farm_harvest = 6;
  optional uint32 my_farm_salary = 7;
  optional uint32 create_farm_cnt = 8;
  optional WorldWarFarmLand farm = 9;
}

message C2S_WorldWarEraseFarmLand {
}

message S2C_WorldWarEraseFarmLand {
  required uint32 ret = 1;
}

message C2S_WorldWarHarvestFarmLand {
  required uint32 farm_id = 1;
}

message S2C_WorldWarHarvestFarmLand {
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional bool auto = 3;
}

message C2S_WorldWarRobFarmLand {
  required uint32 enemy_farm_id = 1;
  required uint32 enemy_x = 2;
  required uint32 enemy_y = 3;
}

message S2C_WorldWarRobFarmLand {
  required uint32 ret = 1;
  optional bool win = 2;
  repeated Award awards = 3;
  optional uint32 rob_farm_cnt = 5;
  optional uint32 tired_point = 6;
  optional uint32 tired_recover_tm = 7;
  optional uint64 report_id = 8;
  optional CrossUser enemy = 9;
}

message WorldWarRobLog {
  required CrossUser user = 1; //另一个玩家
  required uint32 x = 2; //另一个玩家官邸坐标
  required uint32 y = 3;
  required bool farm = 4; //是否粮田抢夺
  required bool rob = 5; //我是抢还是被抢
  required uint32 time = 6; //发生的时间
  required uint32 rice = 7; //粮食增加减少，或者城防增加减少
  optional uint32 farm_id = 8; //粮田id
  optional bool win = 9; //打人者是否胜利
  optional uint32 salary = 10; //抢的官银数量
  optional string item_name = 11; //攻城道具名字
  optional bool corp = 12; //被打的演武台的军团
  optional bool kicked = 13;
  optional uint32 log_type = 14; //特殊日志分类 1，农田互助；2，农田种植；3，农田收获；4，英灵攻打
  optional uint64 harm = 15;	//鏖战英灵攻打的伤害值
}

message C2S_WorldWarRobLog {
  required uint32 last_log_time = 1;
}

message S2C_WorldWarRobLog {
  required uint32 ret = 1;
  repeated WorldWarRobLog logs = 2;
}

message C2S_WorldWarBuyTiredPoint {
  required uint32 cnt = 1;
}

message S2C_WorldWarBuyTiredPoint {
  required uint32 ret = 1;
  optional uint32 tired_point = 2;
  optional uint32 tired_recover_tm = 3;
  optional uint32 tired_point_buyed_cnt = 4;
}

message C2S_WorldWarRobUser {
  required uint32 enemy_x = 1;
  required uint32 enemy_y = 2;
}

message S2C_WorldWarRobUser {
  required uint32 ret = 1;
  optional bool win = 2;
  optional uint32 tired_point = 6;
  optional uint32 tired_recover_tm = 7;
  optional uint64 report_id = 8;
  optional CrossUser enemy = 9;
  optional uint32 robed = 10;
  optional uint32 left_defense = 11;
  optional uint32 rob_user_cnt = 12;
  optional bool protected = 13;
}

message C2S_WorldWarBuyRobFarmCnt {
  required uint32 cnt = 1;
}

message S2C_WorldWarBuyRobFarmCnt {
  required uint32 ret = 1;
  optional uint32 buy_rob_farm_cnt = 2;
  optional uint32 rob_farm_cnt = 3;
}

message C2S_WorldWarAutoProtect {
  required bool auto = 1;
}

message S2C_WorldWarAutoProtect {
  required uint32 ret = 1;
  required bool auto = 2;
}

message S2C_WorldWarUpdateDefense {
  optional uint32 defense = 1;
  optional uint32 defense_recover_time = 2;
  optional uint32 protect_end_time = 3;
  optional uint32 my_x = 4;
  optional uint32 my_y = 5;
  optional uint32 my_city = 6;
  optional uint32 my_corp_x = 7;
  optional uint32 my_corp_y = 8;
  optional uint32 my_alliance_x = 9;
  optional uint32 my_alliance_y = 10;
}

message Famous {
  required uint32 advance_id = 1;
  required uint32 star_id = 2;
  required uint32 level   = 3;
  optional uint32 formation_pos = 4;
  optional uint32 protect_advance_id = 5; //副将advanceId
  optional uint32 protect_advance_id2 = 6; //副将advanceId
	optional uint32 teach_level = 7;
}
message C2S_GetFamous {
}

message S2C_GetFamous {
  required uint32 ret = 1;
  repeated Famous fam = 2;
}
message C2S_GetFamousFormation {
}
message S2C_GetFamousFormation {
  required uint32 ret = 1;
  repeated uint32 famous_id = 2;
}
message C2S_GetFamousComposeGro {
}
message S2C_GetFamousComposeGro {
  required uint32 ret = 1;
  repeated uint32 compose_id = 2;
}
message S2C_AddFamousComposeGro {
  required uint32 compose_id = 1;
}


message C2S_FamousStarUp {
  required uint32 advance_id = 1;
}
message S2C_FamousStarUp {
  required uint32 ret = 1;
  optional uint32 advance_id  = 2;
  optional uint32 star_id = 3;
}
message C2S_FamousFormation {
  required uint32 advance_id = 1;
  required uint32 pos = 2; // 阵型位置: 1-6  0表示下阵
}
message S2C_FamousFormation {
  required uint32 ret = 1;
  optional uint32 advance_id  = 2;
  optional uint32 old_pos = 3;
  optional uint32 new_pos = 4;
}

message C2S_SetSecondFamousFormation {
  required uint32 advance_id = 1;
  required uint32 pos = 2; // 阵型位置: 1-6 7-12  0表示下阵  
}

message S2C_SetSecondFamousFormation {
  required uint32 ret = 1;
  optional uint32 advance_id  = 2;
  optional uint32 old_pos = 3;
  optional uint32 new_pos = 4;
}

message C2S_FamousLevelUp {
  required uint32 advance_id = 1;
  optional uint32 level = 2; //目标等级
}
message S2C_FamousLevelUp {
  required uint32 ret = 1;
  optional uint32 advance_id  = 2;
  optional uint32 level = 3;
}
message C2S_FamousRebirthLook {
  required uint32 advance_id = 1;
}
message S2C_FamousRebirthLook {
  required uint32 ret = 1;
  optional uint32 advance_id  = 2;
  repeated Award  award = 3;
}
message C2S_FamousRebirth {
  required uint32 advance_id = 1;
}
message S2C_FamousRebirth {
  required uint32 ret = 1;
  optional uint32 advance_id  = 2;
  optional uint32 level = 3;
  repeated Award  award = 4;
}
message C2S_GetFamousProperty {
  repeated uint32 advance_id = 1;
}
message FamousProperty {
  required uint32 advance_id = 1;
  repeated uint64 base_property = 2;    //依次为: 攻击 生命 物防 法防
  repeated uint32 advance_property = 3;	// 依次为: 战力 暴击 抗暴 命中 闪避 增伤 减伤 pvp增伤 pvp减伤 灭魏蜀吴群 抗魏蜀吴群
  repeated uint64 element_property = 4; //依次为:火攻 火防 水攻 水防 风攻 风防
  optional uint64 fight_value = 5;//uint64战力
  optional uint32 inherit_percent = 6;	//属性继承比例（名将并肩+武阁天赋）
}
message S2C_GetFamousProperty {
  required uint32 ret = 1;
  repeated FamousProperty fam = 2;
}

message C2S_FamousTeachUpgrade {
  required uint32 pos = 1; //名将位置
  required uint32 cnt = 2; //升几级，默认1级
}
message S2C_FamousTeachUpgrade {
  required uint32 ret = 1;
  optional uint32 pos = 2; //名将位置
  optional uint32 level = 3; //传道等级
}

//重置
message C2S_FamousReset {
  required uint32 advance_id = 1; //名将id
}
message S2C_FamousReset {
  required uint32 ret = 1;
  optional uint32 advance_id = 2; //名将id
  repeated Award awards = 3;
}

// 好友度
message SidUid {
  required uint64 sid = 1;
  required uint32 uid = 2;
}
message C2S_SendFriendGifts {
  required uint32 op = 1;   //0-本服 1-跨服; 2-本服一键 3-跨服一键
  optional SidUid friend = 2;
}

message S2C_SendFriendGifts {
  required uint32 op = 1;
  required uint32 ret = 2;
  repeated SidUid friends = 3;
}

message C2S_GetFriendGifts {
  required uint32 op = 1; //0-本服 1-跨服; 2-本服一键 3-跨服一键
  optional SidUid friend = 2;
}

message S2C_GetFriendGifts {
  required uint32 op = 1;
  required uint32 ret = 2;
  repeated SidUid friends = 3;
}

message AddFavorInfo {
	required uint32 id = 1;
	optional string name = 2;
	required uint64 sid = 3;
	optional string sname = 4;
	required uint32 favor = 5;	//约定999表示双方今日好友度已满,不再增加
}
message ScoreExchargeTimeXml {
  required uint32 id = 1;
  required uint32 start_time = 2;
  required uint32 end_time = 3;
  required uint32 exchange_time = 4;
  required uint32 daily_score_limit = 5;
  required uint32 picture = 6;
  required string title = 7;
  optional string tags_name1 = 8;
  optional string tags_name2 = 9;
  optional string tags_name3 = 10;
  optional string tags_name4 = 11;
}

message ScoreExchargeActionXml {
  required uint32 id = 1;
  required uint32 task_type = 2;
  required uint32 task_score = 3;
  optional uint32 index = 4; //5.0.50新增排序字段
}

message ScoreExchargeItemXml {
  required uint32 id = 1;
  repeated Award costs = 2;
  repeated Award awards = 3;
  required uint32 select = 4;
  required uint32 tags = 5;
  required uint32 discount = 6;
  required uint32 level_min = 7;
  required uint32 level_max = 8;
  required uint32 times_max = 9;
  optional uint32 index = 10; //5.0.50新增排序字段
}
message C2S_GetScoreExchargeTimeXmlInfo {
  required string md5 = 1;
}

message S2C_GetScoreExchargeTimeXmlInfo {
  required uint32 ret = 1;
  optional string md5 = 2;
  optional ScoreExchargeTimeXml info = 3;
}

message C2S_GetScoreExchargeActionXmlInfo {
  required string md5 = 1;
}

message S2C_GetScoreExchargeActionXmlInfo {
  required uint32 ret = 1;
  optional string md5 = 2;
  repeated ScoreExchargeActionXml actions = 3;
}

message C2S_GetScoreExchargeItemXmlInfo {
  required string md5 = 1;
}

message S2C_GetScoreExchargeItemXmlInfo {
  required uint32 ret = 1;
  optional string md5 = 2;
  repeated ScoreExchargeItemXml items = 3;
}

message ScoreExchargeAction {
  required uint32 id = 1;        //行为id
  required uint32 score = 2;     //活跃积分
}

//获取活跃积分信息
message C2S_ScoreExchargeActionInfo {
}

message S2C_ScoreExchargeActionInfo {
  required uint32 ret = 1;
  optional uint32 action_score_got = 2;   //今日已领取积分
  optional uint32 action_score_add = 3;   //可领取积分
  repeated ScoreExchargeAction actions = 4;
}
//领取活跃积分
message C2S_GetScoreExchargeActionScore {
}

message S2C_GetScoreExchargeActionScore {
  required uint32 ret = 1;
  optional uint32 action_score_got = 2;
  optional uint32 action_score_add = 3;
}
//获取兑换信息
message C2S_ScoreExchargeItemInfo {
}

message S2C_ScoreExchargeItemInfo {
  required uint32 ret = 1;
  repeated Good goods = 2;
}
//兑换道具
message C2S_ScoreExchargeItemGood {
  required uint32 id = 1;     //对应兑换表的配置id
  required uint32 num = 2;
  optional uint32 idx = 3; //道具N选1的参数 idx=1-4
}

message S2C_ScoreExchargeItemGood {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 num = 3;
  optional uint32 idx = 4;
  repeated Award awards = 5;
  optional uint32 buyed_times = 6;
}

message C2S_SetRealNameAndIdentityId {
  required string real_name = 1;
  required string identity_id = 2;
}

message S2C_SetRealNameAndIdentityId {
  required uint32 ret = 1;
  required string real_name = 2;
  required string identity_id = 3;
}

//通天试炼begin
message KeyValueT {
  required uint32 key = 1;
  required uint32 value = 2;
}
message KeyValue64 {
	required uint32 key = 1;
	required uint64 value = 2;
}

//通天试炼npc被选次数 5.7.0
message KeySelectInfo {
    optional uint32 npc_id       = 1; 
    optional uint32 select_times = 2;      //选择该NPC的次数
}
message skyTestFloorInfo {
  required uint32 floor = 1; //当前层数
  required bool is_init_floor = 2; //是否已进入当层
  required bool is_buyed_shop1 = 3;
  required uint32 monster_failed_times = 4;
  required uint32 select_entry = 5; //已选中的指路人
  required uint32 event = 6; //指路人的事件
  repeated uint32 enemy_buffs = 7; //给敌方的debuff
  repeated uint32 shopid = 8; //商店ID
  repeated KeyValueT shops = 9; //商店已购买次数
  optional CrossUser enemy = 10;
  optional uint32 question_id = 11;
  optional uint32 rank = 12;
	repeated KeyValueT reset_shops = 13;  //重置商店 5.0.50
  optional uint32 history_max_floor = 14; //历史最高层数 6.3.50	
}

message C2S_GetSkyTestInfo {
}
message S2C_GetSkyTestInfo {
  required uint32 ret = 1;
  optional uint32 start_time = 2;
  optional uint32 end_time = 3;
  optional uint32 times = 4; //可进入次数
  optional uint32 buyed_times = 5; //已购买次数
  optional uint32 help_times = 6; //已协助次数
  optional bool is_enter = 7;   //是否已进入试炼
  optional skyTestFloorInfo floor_info = 8;
  repeated KeyValueT items = 9; //key=itemid value=num
  repeated KeyValueT buffs = 10; //key=buffid value=floor
  repeated uint32 floor_award_got = 11;
  optional uint32 ask_times = 12;
	optional uint32 reset_floor = 13;	//重置起始floor >= 100 则可进入腾云阁 5.0.50
	optional uint32 reset_group = 14; //重置group
	optional bool can_reset_enter = 15; //是否能进入滕云阁
    repeated KeySelectInfo select_info = 16;  //当前层数npc被选中的次数
}

//进入试炼
message C2S_SkyTestEnter {
}

message S2C_SkyTestEnter {
  required uint32 ret = 1;
  optional bool is_enter = 2;
  optional uint32 times = 3;
  repeated Award reset_awards = 5;	//首次重置掉落奖励 5.0.50
  repeated KeySelectInfo select_info = 6; 
}
//进入新的一层
message C2S_SkyTestEnterNextFloor {
}
message S2C_SkyTestEnterNextFloor {
  required uint32 ret = 1;
  optional skyTestFloorInfo floor_info = 2;
  optional bool is_dead = 3;
    optional bool can_reset_enter = 4; //是否能进入滕云阁 5.0.50
 repeated KeySelectInfo select_info = 5;
}

message C2S_SkyTestEnterEntry {
  required uint32 entry_idx = 1; //指路人索引 1-6
}
message S2C_SkyTestEnterEntry {
  required uint32 ret = 1;
  optional skyTestFloorInfo floor_info = 2;
}
message C2S_SkyTestDoEvent {
  optional uint32 param = 1; //答题时的答案 从1开始
}

message S2C_SkyTestDoEvent {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2; //废弃
  repeated Award award = 3;
  optional skyTestFloorInfo floor_info = 4;
  optional bool is_dead = 5;
  optional uint32 rank = 6;
  optional bool monstercard_fail = 7;
  optional uint64 report_id = 8;
}
message C2S_SkyTestUseItem {
  required uint32 id = 1;
}

message S2C_SkyTestUseItem {
  required uint32 ret = 1;
  repeated uint32 del_buff = 2;    //消除的buff
  optional KeyValueT add_buff = 3; //给自己获得的buff
  optional uint32 show_entry = 4;
  optional uint32 show_event = 5;
  optional KeyValueT skytest_item = 6;
  optional uint32 add_enemy_buff = 7; //给敌方加的debuff
  optional skyTestFloorInfo floor_info = 8;
}
message C2S_SkyTestBuyTimes {
  required uint32 times = 1;
}

message S2C_SkyTestBuyTimes {
  required uint32 ret = 1;
  optional uint32 times = 2;
  optional uint32 buyed_times = 3;
}
message S2C_SkyTestUpdateBuff {
  repeated KeyValueT add_buff = 1;
  repeated uint32 del_buff = 2;
}
message C2S_SkyTestBuyShop {
  required uint32 idx = 1; //商店索引 值:1-4
  optional uint32 tp = 2;	//0-每层商人(旧逻辑) 1-重置商人 5.0.50
}

message S2C_SkyTestBuyShop {
  required uint32 ret = 1;
  optional uint32 idx = 2;
  optional uint32 times = 3;
  repeated Award award = 4;
  optional uint32 tp = 5;
}
message C2S_SkyTestGetFloorAward {
  required uint32 floor = 1; //0表示一键领取
}

message S2C_SkyTestGetFloorAward {
  required uint32 ret = 1;
  repeated uint32 floor = 2;
  repeated Award award = 3;
}
message C2S_SkyTestAskHelp {
}

message S2C_SkyTestAskHelp {
  required uint32 ret = 1;
}
message C2S_SkyTestHelpUser {
  required uint32 uid = 1;
}

message S2C_SkyTestHelpUser {
  required uint32 ret = 1;
  required uint32 uid = 2;
  optional BattleReport battle_report = 3; //废弃
  optional uint32 help_times = 4;
  repeated Award award = 5;
  optional uint64 report_id = 6;
}
//好友帮助击杀成功,则发起人收到该协议
message S2C_SkyTestHelpRet {
  required string name = 1;
  required uint32 ask_times = 2;
  required skyTestFloorInfo floor_info = 3;
}
message SkyTestAskInfo {
  required uint32 uid = 1;
  required string user_name = 2;
  required uint32 floor = 3;
  required CrossUser enemy = 4;
}
message C2S_SkyTestGetAskList {
}
message S2C_SkyTestGetAskList {
  required uint32 ret = 1;
  repeated SkyTestAskInfo info = 2;
}
message S2C_SkyTestItemUpdate {
   repeated KeyValueT item = 1;
}
message S2C_SkyTestHelpUpdate {
  required uint32 uid = 1;
  required uint32 tp  = 2; //1:发起求援 2:敌方已被击杀
}

message SkyTestDropAward {
	optional uint32 floor = 1;
	repeated Award  award = 2;
}

message C2S_SkyTestOneKeyHelper{
}

message S2C_SkyTestOneKeyHelper{
  required uint32 ret = 1;
  repeated SkyTestDropAward drop_award = 2;
  repeated Award floor_award = 3;
  repeated Award reset_award = 4;
}
//通天试炼end

//实名认证
message C2S_IdentityAuthentication {
	optional bool auth = 1;	//是否认证完成
}

message S2C_IdentityAuthentication {
	required uint32 ret = 1;
}

message StarPiece {
  required uint32 id = 1;    //位置
  required uint32 state = 2; //状态 0:锁定 不可点赞 1:解锁 可点赞 2:翻牌 可领奖
  required uint32 point = 3; //人气值
}

message StarPoster {
  required uint32 id = 1;         //明星id
  required uint32 start_time = 2; //开始时间
  repeated StarPiece pieces = 3;  //明星碎片
}

message StarAward {
  required uint32 star_id = 1;
  repeated uint32 award_id = 2;
}

message C2S_GetStarGiftInfo {
}

message S2C_GetStarGiftInfo {
  required uint32 ret = 1;
  repeated StarPoster stars = 2;  //服务器明星信息
  required uint32 like_count = 3; //玩家今日点赞次数
  repeated StarAward award = 4;   //明星翻牌奖励
}

message C2S_GiveALikeToStar {
  required uint32 star_id = 1;    //明星id
  required uint32 piece_id = 2;   //碎片id
  required uint32 like_num = 3;   //点赞次数
}

message S2C_GiveALikeToStar {
  required uint32 ret = 1;
  required uint32 star_id = 2;
  required uint32 piece_id = 3;
  required uint32 like_num = 4;
  optional uint32 piece_point = 5;
  repeated Award award = 6;
}

message C2S_GetStarPieceAward {
  required uint32 star_id = 1;
  required uint32 piece_id = 2;
}

message S2C_GetStarPieceAward {
  required uint32 ret = 1;
  required uint32 star_id = 2;
  required uint32 piece_id = 3;
  repeated Award award = 4;
}

message C2S_PushStarLikeInfo {
}

message S2C_PushStarLikeInfo {
  required uint32 ret = 1;
  repeated StarPoster stars = 2; //服务器明星信息
}

//传奇系统
message C2S_GetLegendTreeInfo {
	required uint32 kid = 1;	//武将唯一id
}

message LegendNodeTask {
	required uint32 task_id = 1;	//升级任务id
	optional uint32 task_value = 2;	//任务达标值
	optional uint32 cur_value = 3;	//当前值
}

message LegendTreeNode {
	required uint32 id = 1;
	required uint32 level = 2;
	repeated LegendNodeTask tasks = 3;	//或条件,满足其中之一即可
}

message S2C_GetLegendTreeInfo {
	required uint32 ret = 1;
	required uint32 kid = 2;
	optional uint32 path_id = 3;	//0-未激活 1-枭雄 2-霸者
	repeated LegendTreeNode nodes = 4;	//树节点
	optional uint32 point = 5;	//点数
	optional uint32 title_id = 6;//称号
}

message C2S_UpLegendTreeNode {
	required uint32 kid = 1;
	required uint32 nid = 2;	//节点id
}

message S2C_UpLegendTreeNode {
	required uint32 ret = 1;
	required uint32 kid = 2;
	optional LegendTreeNode node = 3;
	optional uint32 point = 4;  //点数
	optional uint32 title_id = 5;//称号
	optional uint32 path_id = 6;
}

message C2S_ResetLegendTree {
	required uint32 kid = 1;
}

message S2C_ResetLegendTree {
	required uint32 ret = 1;
	required uint32 kid = 2;
}

message C2S_GetLegendTreeNodes {
	required uint32 kid = 1;
	required uint32 req_path_id = 2;
}

message S2C_GetLegendTreeNodes {
	required uint32 ret = 1;
	optional uint32 kid = 2;
	optional uint32 req_path_id = 3;
	repeated LegendTreeNode req_nodes = 4;	//树节点
}

message LegendTree {
	optional uint32 path_id = 1;	//转职
	optional uint32 title_id = 2;
	optional uint32 point = 3;
	repeated LegendTreeNode nodes = 4;
	optional uint32 kid = 5;
}

message C2S_GetOldRedHint {
	optional string nh_time_md5 = 1;
	optional string nh_action_md5 = 2;
	optional string nh_exchange_md5 = 3;
	optional string score_exchange_md5 = 4;
	//optional string group_buy_md5 = 5;
}

message C2S_GetOldRedHintSec {

}

message C2S_GetOldRedHintRelate {
	optional string group_buy_md5 = 1;
}

message C2S_GetOldRedHintRelateSec {
}

message WheelRedHint {
	optional bool got_reward = 4; // 是否已领取过奖励
	optional uint32 start = 6;
	optional uint32 end = 7;
	optional uint32 present = 8;
	optional uint32 bought_times1 = 9; // 今日已购买次数
	optional uint32 bought_times2 = 10; // 今日已购买次数
}
message RichRedHint {
  optional uint32 step = 1;
  optional uint32 score = 2;
  optional bool got_reward = 3; // 是否已领取排行榜奖励
  repeated uint32 round_award = 6;
  optional uint32 start = 7;
  optional uint32 end = 8;
  optional uint32 present = 9;
  optional uint32 bought_times = 10; // 今日已购买次数
}
message TrigramRedHint {
	optional uint32 score = 1; //  积分
	optional bool got_reward = 2; // 是否已领取排行榜奖励
	optional uint32 count = 4;  // 今日已抽次数
	optional uint32 start = 5;
	optional uint32 end = 6;
	optional uint32 present = 7;
}

message SpecialHolidayActRedHint {
	optional bool in_holiday = 1;//C2S_GetSpecialHolidayActivity
	optional uint32 start_time = 2;
	optional uint32 end_time = 3;
	repeated SpecialHolidayActivityInfo infos = 4;
	optional uint32 now = 5;

	repeated uint32 shop_id = 6;//C2S_GetSpecialHolidaySales
	repeated uint32 shop_buyed_cnt = 7;
}

message RCardRedHint {
	optional uint32 score = 1; // 可用积分
	optional uint32 start = 3;
	optional uint32 end = 4;
	optional uint32 play1 = 11; // 今日已翻普通牌次数
	optional uint32 play2 = 12; // 今日已翻豪华牌次数
}
message CorpCaveRedHint {
	optional uint32 start_time = 2;      //开始时间
	optional uint32 end_time = 3;        //结束时间
	optional uint32 initial_num = 4;     //初始次数
	optional uint32 attack_num = 5;      //攻打次数
	optional uint32 purchase_num = 6;    //购买次数
	optional uint32 user_score = 7;      //个人积分
	optional uint32 corp_score = 8;      //军团积分
	optional uint32 cur_cave_id = 9;     //最新关卡
	repeated uint32 daily_award = 10;    //已领取挑战次数奖励
	optional uint32 user_rank = 11;      //个人排行
	optional uint32 corp_rank = 12;      //军团排行
	repeated uint32 award_dungeon = 13;  //有奖励可领的关卡
}
message LocalVeteranRedHint {
	optional uint32 status = 2;				//活动状态 0:无活动 1:福利返还 2:英雄归来
  optional uint32 new_online = 3;		//触发活动的登陆时间
  optional uint32 old_offline = 4;	//触发活动前的离线时间
  optional uint32 role_level = 5;		//激活活动时角色等级
  optional uint32 vip_level = 6;		//激活活动时vip等级
  optional WealBack weal_back = 7;	//福利返还信息
  optional HeroBack hero_back = 8;	//英雄归来信息
  optional uint32 new_server = 9;   //特殊贩售标记
  optional uint32 extra_group = 10; //三周年活动分组
  repeated LocalVeteranAction extra_actions = 11; //三周年活动任务
  repeated Good extra_goods = 12;	//三周年活动贩售
  optional uint32 extra_sell_end = 13; //三周年活动贩售结束时间
  optional uint32 direct_recharge_end_time = 14; //直冲倒计时
}
message LuckyBagRedHint {
  optional LuckyBagSchedule schedule = 2;
  repeated uint32 id = 3;
}
message ThemeDropZYRedHint {
	optional uint32 zy_cycle			=	2;// 0~7 魏蜀吴群(各2天)
	optional uint32 star_value			=	3;	// 星运值
	optional uint32 left_consume_times	=	4;	// 剩余消费次数
	optional uint32 left_free_times		=	5;	// 剩余免费次数
}
message MysticalShopRedHint {
  optional uint32 refresh_count = 1; // 已刷新次数
  optional uint32 free_refresh_count = 2; // 免费刷新次数
}
message AwakenShopRedHint {
  optional uint32 refresh_count = 1; // 已刷新次数
  optional uint32 free_refresh_count = 2; // 免费刷新次数
}
message BattleFieldShopRedHint {
  optional uint32 refresh_count = 1; // 已刷新次数
  optional uint32 free_refresh_count = 2; // 免费刷新次数
}
message ShopTagRedHint {
    repeated uint32 ids = 1;
}
message CorpActiveRedHint {
  repeated CorpActiveMission missions = 2; // 个人任务进度
  optional uint32 point = 3; // 个人的活跃值
  repeated uint32 awarded_boxes = 4; //个人已经打开的箱子
  optional bool lottery_played = 5;
  optional uint32 corp_total_points = 6;
  repeated CorpActiveMemberPoints members = 7;
  optional uint32 my_week_welfare_preview = 8; // 本周 根据军团总活跃值 预览 我的福利元宝
  optional uint32 week_lottery_total_preview = 9; // 本周 根据军团总活跃值 预览 奖池总量
  optional uint32 last_week_corp_total_points = 10; // 上周军团总活跃值
  optional bool lottery_playable = 11; // 是否有抽奖的权利
}
message CorpActiveLotteryLogRedHint {
  optional uint32 ret = 1;
  optional uint32 init_total = 2;
  optional uint32 left_total = 3;
  optional uint32 member_size = 4;
  repeated CorpActiveLotteryLog logs = 5;
  optional bool lottery_played = 6;
}
message TombsRedHint {
  optional uint32 score = 1; //  积分
  optional bool got_reward = 2; // 是否已领取排行榜奖励
  repeated uint32 score_reward = 3; // 已领取的积分奖励id
  repeated TombsEventShop event_shop = 4; // 奇遇事件 - 商店
  repeated TombsEventChest event_chest = 5; // 奇遇事件 - 宝箱
  optional TombsEventFight event_fight = 6; // 奇遇事件 - 战斗
  repeated TombsEventQuestion event_question = 7; // 奇遇事件 - 答题
  optional uint32 start = 8;
  optional uint32 end = 9;
  optional uint32 present = 10;
  optional uint32 explored_count = 11; // 今天已探索次数
  repeated uint32 recharge = 12; // 可领取的充值事件(配置id)
  optional TombsEventRecharge event_recharge = 13; // 奇遇事件 - 充值
}
message SacredwpDailyBaptizeRedHint {
  optional uint32 count = 1;
  repeated uint32 award_ids = 2;
}
message FFKUserRedHint{
  optional uint64 round_start_time = 2;
  optional uint64 round_end_time = 3;
  optional uint32 score = 4;
  optional uint32 title = 5;
  optional uint32 local_rank = 6;
  optional uint32 area_rank = 7;
  optional uint32 all_rank = 8;
  optional uint32 week_challenge_cnt = 9;
  optional uint32 week_win_challenge_cnt = 10;
  optional uint32 daily_challenge_cnt = 11;
  optional uint32 daily_win_challenge_cnt = 12;
  repeated uint32 awarded_task = 13;
  optional uint32 active = 14;
  optional uint32 win_rate = 15;
}
message FFKSkillRedHint {
  repeated FFKSkillInfo info = 1;
}

message NewHolidayStatus {
	optional uint32 status = 1;         		//0 close 1 open 2 exchange
  optional uint32 flower_rank = 2;    		//鲜花排名
}
message NewHolidayActions {
	optional bool sign_in = 1;              //false 未签到 true 已签到
  repeated NewHolidayAction actions = 2;  //行为状态
}
message NewHolidayLottery {
	optional uint32 lottery_count = 1;  		//累抽次数
  repeated uint32 award_ids = 2;      		//已领取奖励id
}
message NewHolidayExchange {
	repeated Good goods = 1;
}
message NewHolidayRedHint {
	 optional NewHolidayStatus status = 1;
	 optional NewHolidayActions action = 2;	//全名福利
	 optional NewHolidayLottery lottery = 3;	//界抽
	 optional NewHolidayExchange exchange = 4;	//兑换
}
message ActivityTimeRedHint {
  repeated ActivityTime activity = 1;
}
message ClothBookRedHint {
  repeated ClothBook book = 1;
}
message LoginRewardRedHint {
  optional uint32 total1 = 2;				// 普通签到已签到次数
  optional uint32 last_time1 = 3;		// 普通签到上次签到时间
  repeated uint32 vip_login_id = 4; //豪华签到奖励id
  repeated uint32 vip_login_st = 5; //豪华签到状态 0:未充值 1:已充值 2:已领取
  repeated uint32 vip_login_nm = 6; //豪华签到已经充值的次数
  repeated uint32 vip_login_rw = 7; //豪华签到已经领奖的次数
}
message RunestoneBagRedHint {
  repeated Runestone runestones = 1;
}
message WarSoulBagRedHint {
  repeated InlayWarSoul inlay_war_soul = 1;//已镶嵌战魂
  repeated WarSoul war_soul = 2;//所有战魂
}
message CityWarTimeRedHint {
  optional uint64 start_time = 1;
  optional uint64 end_time = 2;
}
message FreezeGoldRedHint {
  optional uint32 freeze_gold = 1;
}
message SummerSignRedHint {
	optional bool got_award = 1;  // 今天是否已领取奖励
}

message NewHolidayTimeXmlInfo {
	optional string md5 = 1;
  optional NewHolidayTimeXml info = 2;
}
message NewHolidayActionXmlInfo {
	optional string md5 = 1;
  repeated NewHolidayActionXml actions = 2;
}
message NewHolidayExchangeXmlInfo {
	optional string md5 = 1;
  repeated NewHolidayExchangeXml exchanges = 2;
}
message NewHolidayXmlRedHint {
	optional NewHolidayTimeXmlInfo time = 1;
	optional NewHolidayActionXmlInfo action = 2;
	optional NewHolidayExchangeXmlInfo exchange = 3;
}

message ScoreExchargeTimeXmlRedHint {
	optional string md5 = 2;
  optional ScoreExchargeTimeXml info = 3;
}

message FriendsHint {
  optional uint32 getPresentCount = 1;	//精力次数
  optional bool newFriend = 2;
	optional uint32 favorGiftCount = 3; 	//送礼次数
}

message WushHint {
  optional uint32 reset_count = 2;     // 今日已重置次数
}

message DailyMissionHint {
  repeated DailyMission fixed_mission = 1;
  optional uint32 score = 5;
  repeated DailyMission score_awards = 6;//积分奖励
  optional uint32 level = 7;//计算用的等级
}

message FundHint {
  optional uint32 start_time = 1; //活动开始时间
  optional uint32 buy_count  = 2; //全服购买次数
  optional uint32 open_time = 3; //开服时间
  optional UserFund fund = 4;//C2S_GetUserFund
}

message PetHint {
  repeated uint32 pet_id = 1;  // 6个位置的宠物id
}

message PetProtectSkill {
	repeated uint32 pos = 1;	// 护佑技能对应宠物的位置
}

message MonthFundHint {
	optional MonthFundTime mfd_time = 2;	//配置时间
	optional uint32 fund_kind = 3;			//基金类型 1表示大基金 2表示小基金 3表示大小基金
	optional bool	activate = 4;			//是否激活双月卡
	optional bool	buy_big = 5;			//大基金是否购买
	optional bool	buy_small = 6;			//小基金是否购买
}

message RookieHint {
  optional uint32 create_time = 1;  // 从开服到注册时间的秒数
  repeated uint32 award_id = 2;     // 已领取的id
  optional bool active = 3;         // 活动是否开启
}

message RechargeHint {
  optional bool has_recharge = 1;
}

message ShareHint {
  repeated ShareState state = 1;
  optional uint32 share_count = 3;
}

message VipHint {
  optional uint32 id = 1; // 下个可购买的vip礼包
  repeated uint32 shop_id = 2; // 已购买id
  repeated uint32 shop_num = 3; // 已购买id对应次数
}

message InvitorHint{
  optional uint32 score = 1;//C2S_InvitorGetRewardInfo
  optional uint32 sum_score = 2;
  optional uint32 invited_num = 3;
  repeated InvitorRewardInfo can_reward = 4 ;  //可以领取奖励信息
  repeated InvitorRewardInfo has_reward = 5 ;  //已经领取的奖励信息

  repeated InvitedReward list = 6;
}

message JewelerHint {
  optional uint32 move_times = 2; // 剩余移动次数
  optional uint32 score = 5; // 积分
  repeated uint32 got_rewards = 6; // 已领取的奖励id
}

message GVEHint {
  optional uint32 honor = 1;
  optional uint32 score = 2;
  optional uint32 award_cnt = 3; //已经奖励次数
  optional uint32 buyed_award_cnt = 4; //已经购买次数
  optional uint32 npc_cd = 5; //上一次找npc时间
  optional uint32 rank = 6;
  optional uint32 title = 7;
  optional bool accept_invite = 8;
  optional bool pop_chat = 9;
  optional uint32 max_honor = 10; //历史最高荣誉
}

message DaysActivityHint {
  optional uint32 status = 2;//状态 0关闭 1开启 2领奖
  optional uint32 start_time = 3;
  optional uint32 end_time = 4;
  optional uint32 current_day = 5;
  repeated DaysActivity days_activity = 6;
  repeated AcitivitySell sells = 7;
}

message CityHint {
  optional uint32 id = 1;
  optional uint32 assist_count = 2; // 互动事件协助次数
  repeated City city = 3; // 城池
  optional uint32 speed = 4; // 巡逻倍速
  optional uint32 totaltime = 5 ;// 总共巡逻时间
}

message PushHint {
	optional string content		= 1;
	optional uint32 pushtime	= 2;
	optional uint32 level		= 3;	// 如果为0则表示都可以
	optional uint32 vip_level	= 4;	// 同上解释
}

message Days7BaseHint {
  optional uint32 start_time = 1;
  optional uint32 end_time = 2;
  optional uint32 progress = 3;
  repeated uint32 awarded_task = 4;
}

message Days7ExtHint {
  optional Days7CompInfo me = 1;
  repeated Days7CompInfo infos  = 2;
  optional uint32 oszt = 3; //开服零点时间
}

message GroupBuyHint {
	optional string md5 = 2;
	repeated GroupBuyItem items = 3;			//活动商品配置

	optional GroupBuyTime time_cfg = 4;

	optional uint32 self_score = 5;				//当前积分
	optional uint32 server_score = 6;			//当前全服购买次数
	optional uint32 back_gold = 7;				//返还元宝
	repeated uint32 award_ids = 8;				//已领取奖励id  对应配置表id
}

message OldPlayerHint {
  optional bool is_older = 2;
  optional uint32 activity_id = 3;
  optional uint32 activity_start = 4;
  optional uint32 activity_end = 5;
  optional uint32 limit_time = 6; //活动描述中的时间限制
  optional bool vip = 7; //true: 领取过VIP; false: 相反
  repeated uint32 awards = 8; //领取过的等级奖励ID
  optional uint32 limit_level = 9;//活动描述中的等级限制
}

message NewVeteranHint {
  optional bool is_veteran = 2;					//true:老玩家 false:非老玩家
  optional uint32 activity_id = 3;			//活动id
  optional uint32 activity_start = 4;		//活动开始时间
  optional uint32 activity_end = 5;			//活动结束时间
  optional uint32 lost_day = 6;				  //活动描述中多少日未登录
  optional uint32 limit_level = 7;			//活动描述中的等级限制
  optional uint32 vip_exp = 8;					//继承的vip经验
  optional bool vip_award = 9;					//true: 领取过VIP; false: 相反
  repeated uint32 free_awards = 10;			//领取过的免费奖励ID
  repeated uint32 gift_awards = 11;			//领取过的优惠礼包ID
  optional bool vip_inherit = 12;       //vip继承是否开启
  optional bool free_gold = 13;         //元宝赠送是否开启
  optional bool gift_bag = 14;          //优惠礼包是否开启
}

message DailyRechargeHint {
  optional uint32 start = 1; //  活动开始时间 0是未配置活动
  repeated uint32 recharged = 5; //代表7天是否充值\领取  //0-未充值  1-已领取  2-未领取
  optional bool got_daily_reward = 6; // 当天奖励是否已领取(已无效)
  optional bool got_final_reward = 7; // 最终奖励是否已领取
}

message GroupDungeonHint {
  repeated uint32 passed_dungeons = 2; //已通关关卡
  optional uint32 honor = 3; //积分
  optional uint32 coin = 4; //九州币
  optional uint32 award_cnt = 5; //已经奖励次数
  optional uint32 buyed_award_cnt = 6; //已经购买次数
  optional uint32 title = 7;
}

message CorpRiceHint {
  optional uint32 fluid_rice = 2; //可抢夺粮草
  optional uint32 extra_rice = 3; //战斗胜利暴击获得的粮草，不可抢夺
  optional uint32 growth_rice = 4; //定时增长粮草
  optional uint32 my_local_rank = 5;
  optional uint32 my_area_rank = 6;
  optional uint32 my_corp_rank = 7;
  repeated CorpRiceCorp corps = 8;
  optional uint32 left_attack_cnt = 9; // 随时间增长的攻打次数
  optional uint32 left_buy_attack_cnt = 10; // 已经购买的攻打次数
  optional uint32 left_revenge_cnt = 11;
  optional uint32 left_buy_revenge_cnt = 12;
  optional uint32 my_corp_rice = 13;
  optional string my_corp_name = 14;
  optional uint32 my_max_rice = 15;
  optional uint32 my_corp_max_rice = 16;
  repeated uint32 achieve = 17;
  optional string announce = 18;
  optional uint32 left_assist_cnt = 19;
  optional uint32 left_buy_assist_cnt = 20;
  optional uint32 attack_cnt_refresh_time = 21;
  optional uint32 share_cnt = 22;
  optional uint32 total_rice = 23;
}

message FortuneHint {
	optional uint32 times = 1;	// 招财总次数
	repeated uint32 boxids = 2; // 已经领取的箱子id
	repeated FortuneBuySilverInfo buys = 3; //每次招财的信息
}

message CrossBattleHint {
  optional uint32 state = 2;
  optional uint32 group = 3;
  optional bool has_arena = 4;
}

message BattleFieldHint {
  optional uint32 bf_tag = 3;//战场关数 1--4
  repeated BattleFieldSample battle_field = 4;
  optional uint32 challenge_count = 5;//剩余挑战次数
  optional uint32 reset_cost = 6;//免费为0
  optional uint32 reset_count = 7;//剩余重置次数
  optional uint32 current_id = 8;//当前打的对象ID
  optional uint32 history_pet_point = 9;//历史最大兽魂
}

message ShopTimeHint {
	optional uint32 start_time = 2;		//开服时间
}

message RebelHint {
  repeated Rebel rebels = 1;//C2S_RefreshRebel

	optional uint32 total_honor = 2;// C2S_EnterRebelBossUI
	optional uint32 group_thonor_rank = 3;
	optional uint64 max_harm = 4;
	optional uint32 group_mharm_rank = 5;
	optional uint32 corp_rank = 7;
	optional RebelBoss rebel_boss = 8;
	optional uint32 state = 9;                     //0:活动关闭 1:活动期间
	repeated RebelBossRank group_first_ranks = 10; //各阵容累计荣誉排名第一
	optional uint32 att_count = 11;                //攻击次数
	optional uint32 remain_pur_count = 13;         //剩余购买挑战次数
	optional uint32 group = 14;                    //所在阵容
	optional uint32 end_time = 15;                 //state=1时，活动剩余时间

  repeated RebelHintAward award = 16;//C2S_RebelBossAwardInfo

	repeated RebelBoss_CorpRank ranks = 17;//C2S_RebelBossCorpAwardInfo
	optional RebelBoss_CorpRank my_rank = 18;
}

message RebelHintAward {
	optional uint32 mode = 2;
	repeated uint32 status = 3; //info id
}

message RiotHint {
  repeated ChapterRoit roits = 2;
}

message DungeonDailyHint {
	repeated uint32 dids = 1;
}

message HandbookHint {
  repeated HandbookHintSub handbook = 1;
}

message HandbookHintSub {
  optional uint32 hand_type = 2;
  repeated uint32 ids = 3;
}

message ExpansiveDungeonHint {
	repeated ExDuChapter chapters = 2;
}

message TeamPVPHint {
  optional uint32 honor = 2;
  optional uint32 score = 3;
  optional uint32 award_cnt = 4; //已经奖励次数
  optional uint32 buyed_award_cnt = 5; //已经购买次数
  optional uint32 npc_cd = 6; //上一次找npc时间
  optional uint32 rank = 7;
  optional uint32 title = 8;
  optional bool accept_invite = 9;
  optional bool pop_chat = 10;
  optional uint32 max_honor = 11;
}

message KsoulHint {
  repeated Ksoul ksouls = 1;//将灵
  repeated uint32 ksoul_groups = 2;//已激活的阵图
  repeated uint32 ksoul_targets = 3;//阵图成就
  optional uint32 free_summon = 4;//免费点将次数
  //optional uint32 summon_score = 5;//点将点数
  optional uint32 summon_count = 6;//轮回内已经点将的次数
  repeated Ksoul summon_exchange = 7;//今日奇遇兑换的信息
  optional uint32 dungeon_challenge_cnt = 8;
  optional uint32 dungeon_refresh_cnt = 9;
  optional uint32 max_target_value = 10; //历史最高阵图值
  optional uint32 max_group_star = 11;  //历史最高星数
}

//message GemHint {
//  repeated Inlay inlays = 2;//已镶嵌宝石
//  repeated Gem gems = 3;//所有宝石
//}

//message WingHint {
//  repeated Wing wings = 1;
//  optional uint32 wid = 2;  //装备神翼id
//}

//message SacredwpHint {
//  repeated Sacredwp  sacredwps = 2;
//}

message SuperMarketHint {
  optional bool has_release = 2;
  optional bool has_set = 3;//是否设置过密码
  optional uint32 left_count = 4;
  optional uint32 next_time = 5;
}

message LevelGiftHint {
  repeated LevelGift gifts = 2; //  可以买的礼包们
  repeated LevelGiftRecharge recharges = 3;//冲值礼包
  repeated LevelGiftRecharge directs = 4; //直冲
}

//message HorseHint {
//  repeated Horse horses = 1;//C2S_GetHorseBag
//
//  optional uint32 horse_soul = 2;//C2S_GetHorseInfo
//  optional uint32 used_free_common_conjure_cnt = 3;
//  optional uint32 used_free_bole_conjure_cnt = 4;
//  optional uint32 key_common_conjure_cnt = 5; // 还有几次必出稀有
//  optional uint32 key_bole_conjure_cnt = 6;
//  optional uint32 level_target = 7; // 累计好感度
//  optional uint32 used_level_target = 8; // 消耗的好感度
//  optional uint32 level_target_id = 9; // 好感度id
//  optional uint32 level_target_hp = 10;
//  optional uint32 level_target_physical_attack = 11;
//  optional uint32 level_target_magical_attack = 12;
//  optional uint32 level_target_physical_defense = 13;
//  optional uint32 level_target_magical_defense = 14;
//  optional uint32 level_target_local_rank = 15;
//  optional uint32 level_target_cross_rank = 16;
//  optional uint32 daily_common_conjure_cnt = 17;
//  optional uint32 daily_bole_conjure_cnt = 18;
//  optional uint32 total_common_conjure_cnt = 19;
//  optional uint32 total_bole_conjure_cnt = 20;
//
//  repeated uint32 compose_id = 21; //C2S_HorseCompose
//}

message AuctionHint {
  repeated AuctionHintSub auctions = 1;
  repeated AuctionItem items = 2;
}

message AuctionHintSub {
  optional uint32 a_type = 2;
  repeated AuctionItem items = 3;
  optional uint32 bonus = 4;
  optional bool has_bonus = 5;
}

message NightMareHint {
  optional NightMareDungeonInfo info = 1;//C2S_GetNightMareDungeonInfo
}

//message RuneStoneHint {
//  repeated Runestone runestones = 1;//C2S_GetRunestoneBag
//
//  repeated uint32 compose_id = 2;//C2S_GetRunestoneCompose
//
//  repeated InlayWarSoul inlay_war_soul = 3;//已镶嵌战魂//C2S_GetWarSoulBag
//  repeated WarSoul war_soul = 4;//所有战魂
//}

message FamousHint {
  repeated uint32 compose_id = 2;
}

message S2C_GetOldRedHint {
	required uint32 ret = 1;
	optional SpecialHolidayActRedHint special_holiday = 5;//C2S_GetSpecialHolidayActivity C2S_GetSpecialHolidaySales
	optional CorpCaveRedHint corp_cave = 7;	//C2S_GetCorpCaveMainInfo
	optional LocalVeteranRedHint veteran = 8;	//C2S_GetLocalVeteranInfo
	//optional ThemeDropZYRedHint drop = 10;	//C2S_ThemeDropZY
	//optional CorpActiveRedHint corp_active = 15;	//C2S_CorpActiveInfo
	//optional CorpActiveLotteryLogRedHint corp_lottery = 16;	//C2S_CorpActiveLotteryLog
	optional NewHolidayRedHint new_holiday = 21;	//C2S_GetNewHolidayMainInfo C2S_NewHolidayActionInfo C2S_NewHolidayLotteryBackInfo
	optional ActivityTimeRedHint activity_time = 22;//C2S_GetActivityTimeInfo
	//optional RunestoneBagRedHint runestones = 25;	//see 73
	//optional WarSoulBagRedHint war_soul_bag = 26;	//see 73
	optional NewHolidayXmlRedHint new_holiday_xml = 30;//C2S_GetNewHolidayTimeXmlInfo C2S_GetNewHolidayActionXmlInfo C2S_GetNewHolidayExchangeXmlInfo C2S_NewHolidayExchangeInfo
	optional ScoreExchargeTimeXmlRedHint excharge_xml = 31;//C2S_GetScoreExchargeTimeXmlInfo
	optional Days7BaseHint day_seven = 48;//C2S_GetDays7DrawTaskInfo C2S_GetDays7CompInfo
    optional GroupBuyHint group_buy = 49;//C2S_GetGroupBuyConfig C2S_GetGroupBuyTimeInfo C2S_GetGroupBuyTaskAwardInfo
}

message S2C_GetOldRedHintSec {
  required uint32 ret = 1;
	optional WheelRedHint wheel = 2;	//C2S_WheelInfo
	optional RichRedHint rich = 3;		//C2S_RichInfo
	optional TrigramRedHint trigram = 4;	//C2S_TrigramInfo
	optional RCardRedHint rcard = 6;	//C2S_RCardInfo
	optional LuckyBagRedHint lucky_bag = 9;	//C2S_GetLuckyBag
	optional MysticalShopRedHint mshop = 11;//C2S_MysticalShopInfo
	optional AwakenShopRedHint awken_shop = 12;//C2S_AwakenShopInfo
	optional BattleFieldShopRedHint bfshop = 13;//C2S_BattleFieldShopInfo
	optional ShopTagRedHint shop_tag = 14;//C2S_GetShopTag
	optional TombsRedHint tombs = 17;	//C2S_TombsInfo
	optional SacredwpDailyBaptizeRedHint sacredw = 18;	//C2S_SacredwpDailyBaptizeInfo
	optional FFKUserRedHint ffk_user = 19;	//C2S_FFKUserInfo
	optional FFKSkillRedHint ffk_skill = 20;	//C2S_FFKSkillInfo
	optional ClothBookRedHint cloth_book = 23;//C2S_GetClothBook
	optional LoginRewardRedHint login_reward = 24;	//C2S_LoginRewardInfo
	optional CityWarTimeRedHint city_war_time = 27;//C2S_CityWarTimeInfo
	optional FreezeGoldRedHint freeze_gold = 28;//C2S_UserFreezeGoldInfo
	optional SummerSignRedHint summer_sign = 29;//C2S_SummerSignInfo
}

message S2C_GetOldRedHintRelate {
  required uint32 ret = 1;
  optional FriendsHint friend = 32;//C2S_GetFriendsInfo//start by sf
  optional WushHint wush = 33;//C2S_WushInfo
  optional DailyMissionHint daily = 34;//C2S_GetDailyMission
  optional FundHint fund = 35;//C2S_GetFundInfo C2S_GetUserFund
  optional PetHint pet = 36;//C2S_GetPetProtect
  optional MonthFundHint month_fund = 37;//C2S_GetMonthFundBaseInfo
  optional RookieHint rookie = 38;//C2S_RookieInfo
  optional RechargeHint recharge = 39;//C2S_GetRechargeBack
  optional ShareHint share = 40;//C2S_GetShareState(both)
  optional VipHint vip = 41;//C2S_VipDailyInfo C2S_VipWeekShopInfo
  //optional InvitorHint invitor = 42;//C2S_InvitorGetRewardInfo C2S_InvitedGetDrawReward
  optional JewelerHint jeweler = 43;//C2S_JewelerInfo
  optional GVEHint gve = 44;//C2S_GVEDungeonGetUserInfo
  optional DaysActivityHint days_activity = 45;//C2S_GetDaysActivityInfo C2S_GetDaysActivitySell
  optional CityHint city = 46;//C2S_CityInfo
  optional PushHint push = 47;//C2S_PushSingleInfo
  optional Days7ExtHint day_seven = 48;//C2S_GetDays7DrawTaskInfo C2S_GetDays7CompInfo
  optional GroupBuyHint group_buy = 49;//C2S_GetGroupBuyConfig C2S_GetGroupBuyTimeInfo C2S_GetGroupBuyTaskAwardInfo //move to GetOldRedHint
  //optional OldPlayerHint old_player = 50;//C2S_GetOlderPlayerInfo [to account]
  //optional NewVeteranHint new_veteran = 51;//C2S_GetNewSerVeteranInfo [to account]
  optional DailyRechargeHint daily_recharge = 52;//C2S_DailyRechargeInfo
  optional GroupDungeonHint group_dungeon = 53;//C2S_GetGroupDungeonInfo
  //optional CorpRiceHint corp_rice = 54;//C2S_CorpRiceMyInfo [to record]
  optional PetProtectSkill skill = 55;
}

message S2C_GetOldRedHintRelateSec {
  required uint32 ret = 1;
  optional FortuneHint fortune = 55;//C2S_FortuneInfo
  optional CrossBattleHint cross_battle = 56;//C2S_GetCrossBattleInfo
  //optional BattleFieldHint battle_field = 57;//C2S_GetBattleFieldInfo [to cross]
  optional ShopTimeHint shop_time = 58;//C2S_ShopTimeStartTime
  //optional RebelHint rebel = 59;//C2S_RefreshRebel [to record] C2S_EnterRebelBossUI [to record] C2S_RebelBossAwardInfo C2S_RebelBossCorpAwardInfo [to record]
  optional RiotHint riot = 60;//C2S_Hard_GetChapterRoit
  optional DungeonDailyHint dungeon_daily = 61;//C2S_DungeonDailyInfo
  optional HandbookHint handbook = 62;//C2S_GetHandbookInfo
  optional TeamPVPHint team_pvp = 63;//C2S_TeamPVPGetUserInfo
  //optional KsoulHint ksoul = 64;//C2S_GetKsoul
  //optional GemHint gem = 65;//C2S_GetGemList
  //optional WingHint wing = 66;//C2S_GetWingBag
  //optional SacredwpHint sacredwp = 67;//C2S_GetSacredwpBag
  optional SuperMarketHint sm = 68;//C2S_SuperMarketLockInfo
  optional LevelGiftHint level_gift = 69;//C2S_LevelGiftInfo
  //optional HorseHint horse = 70;//C2S_GetHorseBag C2S_GetHorseInfo C2S_HorseCompose
  //optional AuctionHint auction = 71;//C2S_AuctionInfo [to cross] C2S_AuctionUserInfo [to cross]
  optional NightMareHint night_mare = 72;//C2S_GetNightMareDungeonInfo
  //optional RuneStoneHint runestone = 73;//C2S_GetRunestoneBag C2S_GetRunestoneCompose C2S_GetWarSoulBag
  //optional FamousHint famous = 74;//C2S_GetFamousComposeGro //see 62
  //optional ExpansiveDungeonHint expansive_dungeon= 75;//C2S_GetExpansiveDungeonChapterList[direct]
	//more...
}

//七星坛
message C2S_GetDipperInfo {
}

message DipperLevelAwards {
	required uint32 id = 1;			//dipper_chest id
	required uint32 state = 2;	//领取状态(0-不可领取，1-可领取，2-已领取)
}
message DipperRedHint {
	optional uint32 start_time = 1;	//开始时间
	optional uint32 end_time = 2;		//结束时间
	required uint32 total_exp = 3;		//总成长值
	repeated DipperLevelAwards level_awards = 4;	//七星坛等级奖励
	required uint32 sacrifice_count = 5;	//剩余祭祀次数
	required uint32 sacrificed_days = 6; 	//累加祭祀天数
	repeated DipperLog logs = 7;
	required uint32 award_user_level = 8;
	optional DipperTaskInfo task_info = 9;
	required uint32 sacrifice_level = 10;
	required uint32 sacrifice_mcnt = 11;	//今日最大祭祀次数
	required bool happy_time = 12;	//是否爆点
	required uint32 config_id = 13;	//奖励方案：0-第一套 1-第二套
}
message S2C_GetDipperInfo {
	required uint32 ret = 1;
	optional DipperRedHint info = 2;
}

message C2S_GetDipperLogInfo {
	required uint64 msecs = 1;
}

message DipperLog {
	required uint64 sid = 1;
	required uint32 user_id = 2;
	required uint32 base_id = 3;
	optional string name = 4;
	optional uint64 msecs = 5;   //祭祀时间戳
	optional uint32 item_type = 6;
	optional uint32 item_value = 7;
	optional uint32 item_size = 8;
	required uint32 type = 9;	//1-翻倍 2-爆点 3-翻倍加爆点
	required string sname = 10;
}
message S2C_GetDipperLogInfo {
	required uint32 ret = 1;
	repeated DipperLog logs = 2;
}

message C2S_GetDipperAward {
	required uint32 id = 1;     //dipper_chest id
}

message S2C_GetDipperAward {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated Award awards = 3;
}

message C2S_DipperSacrifice {
}

message S2C_DipperSacrifice {
	required uint32 ret = 1;
	optional uint32 sacrifice_count = 2;  //剩余祭祀次数
	optional uint32 sacrificed_days = 3;   //累加祭祀天数
	required bool double = 4;	//是否加倍
	repeated Award awards = 5;
}

message C2S_GetDipperTasks {
}

message DipperTask {
	required uint32 task_id = 1;		//唯一id
	required uint32 task_type = 2;	//任务类型
	required uint32 task_value = 3;	//任务值
	repeated Award awards = 4;			//奖励
}
message DipperTaskToday {
	required DipperTask task = 1;
	required uint32 curl_value = 2;	//当前进度
	required bool gotten = 3;			//是否已领取
}
message DipperTaskYesterday {
	required DipperTask task = 1;
	required uint32 status = 2;  //购买状态(0-未购买, 1-已购买)
	required uint32 cost = 3;		//购买价格(元宝)
}

message DipperTaskInfo {
	repeated DipperTaskToday today = 1;	//今日任务
	repeated DipperTaskYesterday yesterday = 2;		//昨日任务(如果有，则可进行追回)
}
message S2C_GetDipperTasks {
	required uint32 ret = 1;
	optional DipperTaskInfo task_info = 2;
}

message C2S_BuyDipperTask {
	required uint32 task_id = 1;    //任务类型
}

message S2C_BuyDipperTask {
	required uint32 ret = 1;
	required uint32 task_id = 2;
}

message C2S_GetDipperTaskAwards {
	required uint32 task_id = 1;
}

message S2C_GetDipperTaskAwards {
	required uint32 ret = 1;
	required uint32 task_id = 2;
}

message C2S_KnightOriginStar {
  required uint32 id = 1;
}

message S2C_KnightOriginStar {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Knight knight = 3;
}

message C2S_KnightOriginSwallow {
  required uint32 id = 1;
  repeated Fragment frag = 2;
}

message S2C_KnightOriginSwallow {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Fragment frag = 3;
  optional Knight knight = 4;
}

message C2S_KnightOriginSwallowUpgrade {
  required uint32 id = 1;
}

message S2C_KnightOriginSwallowUpgrade {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Knight knight = 3;
}

message C2S_WorldWarGetCity {
  required uint32 city_id = 1; //城池id，0表示大地图, 1-9表示城池，101-109表示营寨
  required uint32 x = 2;
  required uint32 y = 3;
}

message S2C_WorldWarGetCity { //这个消息会有多个，因为一个消息可能放不下城池里面的所有对象
  required uint32 ret = 1;
  required uint32 city_id = 2;
  repeated WorldWarMapCell cells = 3;
  optional uint32 x = 4;
  optional uint32 y = 5;
  optional uint32 user_cnt = 6;
  repeated WorldWarCityBuildingOwner buildings = 7;
}

message S2C_WorldWarCityBuildingOwner {
  required WorldWarCityBuildingOwner building = 1;
}

message S2C_WorldWarCityCellChange {
  required WorldWarMapCell cell = 1;
}

message C2S_WorldWarListenCity {
}

message S2C_WorldWarListenCity {
}

message C2S_WorldWarQuitCity {
}

message S2C_WorldWarQuitCity {
}

message C2S_WorldWarMigrateToCity {
  required uint32 city_id = 1;
  required uint32 x = 2;
  required uint32 y = 3;
}

message S2C_WorldWarMigrateToCity {
  required uint32 ret = 1;
  required uint32 city_id = 2;
  required uint32 x = 3;
  required uint32 y = 4;
  optional uint32 cd_end_tm = 5;
  optional uint32 migrate_point = 6;
  optional uint32 migrate_recover_tm = 7;
}

message C2S_WorldWarOccupyCityBuilding {
  required uint32 city_id = 1;
  required uint32 x = 2;
  required uint32 y = 3;
}

message S2C_WorldWarOccupyCityBuilding {
  required uint32 ret = 1;
  optional uint32 cd_end_tm = 2;
  optional uint32 city_id = 3;
  optional uint32 x = 4;
  optional uint32 y = 5;
}

message C2S_WorldWarAttackCityBuilding {
    required uint32 city_id = 1;
    required uint32 x = 2;
    required uint32 y = 3;
    optional bool skip_battle = 4; //是否跳过战报
}

message S2C_WorldWarAttackCityBuilding {
    required uint32 ret = 1;
    optional bool win = 2;
    optional uint64 report_id = 3;
    optional uint32 cd_end_tm = 4;
    optional uint32 tired_point = 6;
    optional uint32 tired_recover_tm = 7;
    optional CrossUser enemy = 9;
    optional uint32 robed = 10;
    optional uint32 left_defense = 11;
    optional uint32 rob_user_cnt = 12;
    optional bool protected = 13;
    optional bool skip_battle = 14; //是否跳过战报
}

message C2S_WorldWarCityGetUserRank {
  optional bool local = 1;
}

message S2C_WorldWarCityGetUserRank {
  required uint32 ret = 1;
  repeated CrossUser users = 3; //sp12表示积分
  optional uint32 my_rank = 4;
  optional uint64 my_score = 5;
  optional bool local = 6;
}

message C2S_WorldWarCityGetAllianceRank {
  required uint32 city_id = 1;
}

message S2C_WorldWarCityGetAllianceRank {
  required uint32 ret = 1;
  required uint32 city_id = 2;
  repeated AllianceSnapShot alliances = 3; //sp8表示积分, 暂用Corp
  optional uint32 my_rank = 4;
  optional uint64 my_score = 5;
}

message C2S_WorldWarCityRepairDefense {
}

message S2C_WorldWarCityRepairDefense {
  required uint32 ret = 1;
  optional uint32 cd_end_tm = 2;
}

message WorldWarCityScore {
  required uint32 city_id = 1;
  optional uint64 score = 2;
  optional uint32 tm = 3;
  optional uint32 speed = 4;
}

message C2S_WorldWarCityMyInfo {
  required uint32 city_id = 1;
}

message S2C_WorldWarCityMyInfo {
  required uint32 ret = 1;
  optional uint32 migrate_cd_end_tm = 2;
  optional uint32 attack_cd_end_tm = 3;
  optional uint32 repair_cd_end_tm = 4;
  optional uint64 my_score = 5;
  optional uint64 my_alliance_score = 6;
  optional uint32 prepare_time = 7; //报名时间，从此以后可以迁移入城
  optional uint32 start_time = 8; //开始时间，从此以后可以占据点，打人
  optional uint32 end_time = 9; //结束时间
  optional uint32 finish_time = 10; //清场，在此之前迁移回大地图
  optional uint32 city_id = 11;
  optional uint32 my_local_rank = 12;
  optional uint32 my_alliance_rank = 13;
  optional uint32 my_area_rank = 14;
  optional uint32 migrate_ban_end_tm = 15;
  optional uint32 repair_ban_end_tm = 16;
  optional uint32 world_war_home_buy_times = 17;
  optional uint32 world_war_home_refresh_time = 18;
}

message C2S_WorldWarCityScore {
  required uint32 city_id = 1;
}

message S2C_WorldWarCityScore {
  required uint32 ret = 1;
  required uint32 city_id = 2;
  optional uint64 my_score = 3;
  optional uint64 my_alliance_score = 4;
  optional uint32 my_local_rank = 5;
  optional uint32 my_area_rank = 6;
  optional uint32 my_alliance_rank = 7;
}

message C2S_WorldWarCityBriefUserRank {
}

message S2C_WorldWarCityBriefUserRank {
  required uint32 ret = 1;
  repeated CrossUser users = 3;
}

message WorldWarCityTitle {
  required uint32 title = 1;
  optional CrossUser user = 2;
}

message C2S_WorldWarGetCityTitles {
}

message S2C_WorldWarGetCityTitles {
  required uint32 ret = 1;
  repeated WorldWarCityTitle titles = 2;
}

message C2S_WorldWarSetCityTitle {
  required uint32 title = 1;
  required uint64 sid = 2;
  optional uint32 uid = 3;
  optional string name = 4;
  optional string server_name = 5;
}

message S2C_WorldWarSetCityTitle {
  required uint32 ret = 1;
  required uint32 title = 2;
  required uint64 sid = 3;
  optional uint32 uid = 4;
  optional string name = 5;
}

message C2S_WorldWarCityWinAlliances {
}

message S2C_WorldWarCityWinAlliances {
  required uint32 ret = 1;
  repeated WorldWarCity citys = 2;
}

message C2S_WorldWarGetCityAnnounce {
}

message S2C_WorldWarGetCityAnnounce {
  required uint32 ret = 1;
  optional string announce = 2;
}

message C2S_WorldWarSetCityAnnounce {
  required string announce = 1;
}

message S2C_WorldWarSetCityAnnounce {
  required uint32 ret = 1;
  required string announce = 2;
}

message C2S_WorldWarCityTime {
}

message S2C_WorldWarCityTime {
  required uint32 ret = 1;
  optional uint32 prepare_time = 2; //报名时间，从此以后可以迁移入城
  optional uint32 start_time = 3; //开始时间，从此以后可以占据点，打人
  optional uint32 end_time = 4; //结束时间
  optional uint32 finish_time = 5; //清场，在此之前迁移回大地图
}

message C2S_WorldWarCityOtherUserScore {
  required uint64 sid = 1;
  required uint32 uid = 2;
  required uint32 city = 3;
}

message S2C_WorldWarCityOtherUserScore {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  required uint32 city = 4;
  optional uint64 score = 5;
}

message C2S_WorldWarCityUseItem {
  required uint32 item_id = 1;
  required uint32 city_id = 2;
  repeated uint32 coors = 3; //x,y,x,y,x,y
}

message S2C_WorldWarCityUseItem {
  required uint32 ret = 1;
  required uint32 item_id = 2;
  required uint32 city_id = 3;
  repeated uint32 coors = 4; //x,y,x,y,x,y
}

//=========================
//	军团联盟 4.0.0
//=========================
message C2S_GetCorpAllianceInfo {
}

message CorpAllianceInfo {
	required uint32 id = 1;			//id
	required string name = 2;		//名称
	required uint32 level = 3;	//等级
	required uint32 exp = 4;		//经验
	required uint32 icon_pic = 5;	//icon
	required uint32 icon_frame = 6;
	required uint64 total_fp = 7;			//总战力
	required uint64 leader_sid = 8;		//联盟长
	required uint32 leader_uid = 9;
	required string leader_name = 10;	//联盟长名字
	required string manifesto = 11;		//宣言
	required uint32 leader_corpid = 12;	//联盟长所在军团
	repeated AllianceCorp corps = 13;	//军团信息
	required uint32 daily_exp = 14;	//今日经验
	required uint32 goods = 15;	//总资材
	optional uint32 area = 16; //战区
}

message S2C_GetCorpAllianceInfo {
	required uint32 ret = 1;
	required uint32 join_time = 2;	//所属军团加入联盟时间
	required uint32 join_cd = 3;		//所属军团下次加入cd
	required uint32 position = 4;		//个人在军团中的职位
	optional CorpAllianceInfo info = 5;
	//required uint32 task_status = 6;	//0-未领取 1-已领取
	optional CorpAllianceTaskInfo task = 6;
	optional bool spirit_award = 7;
}

message C2S_CreateCorpAlliance {
	required string name = 1;
	optional uint32 icon_pic = 2;
	optional uint32 icon_frame = 3;
}

message S2C_CreateCorpAlliance {
	required uint32 ret = 1;
	required uint32 join_time = 2;	//所属军团加入联盟时间
	required uint32 join_cd = 3;		//所属军团下次加入联盟cd
	required uint32 position = 4;		//个人在联盟的职位-创建者默认就是联盟长了
	optional CorpAllianceInfo info = 5;
}

message C2S_GetCorpAllianceList {
	required uint32 start = 1;
	required uint32 tail = 2;
}

message S2C_GetCorpAllianceList {
	required uint32 ret = 1;
	required uint32 start = 2;
  required uint32 tail = 3;
	repeated CorpAllianceInfo alliances = 4;
}

message C2S_GetCorpAllianceJoinApplied {
}

message S2C_GetCorpAllianceJoinApplied {
	required uint32 ret = 1;
	repeated CorpAllianceInfo alliances = 2;
}

message C2S_ReqJoinCorpAlliance {
	required uint32 clid = 1;	//联盟id
	required uint32 op = 2;	//0-申请加入 1-取消申请
}

message S2C_ReqJoinCorpAlliance {
	required uint32 ret = 1;
	required uint32 clid = 2; //联盟id
	required uint32 op = 3; //0-申请加入 1-取消申请
}

message C2S_GetCorpAllianceJoinApply {
	required uint32 clid = 1;
}

message AllianceCorp {
	required uint64 sid = 1;
	required string sname = 2;
	required uint32 corp_id = 3;
  required uint32 level = 4;
  required uint32 size = 5;//成员数
  required string name = 6;//军团名
	required uint32 leader_uid = 7;	//军团长id
  required string leader_name = 8;//军团长名
	required uint32 icon_pic  = 9;//ICON pic
  required uint32 icon_frame = 10;//ICON frame
	required uint64 fight_value = 11;	//战力
	required uint32 join_time = 12; 	//加入联盟时间
	required uint32 position = 13;	//任职
	required uint32 assist_exp = 14;	//经验贡献
	required uint32 assist_item = 15;	//资材贡献
	optional uint64 world_war_spirit_harm = 16;	//鏖战英灵军团的总伤害
	repeated uint32 world_war_spirit_award_ids = 17;	//鏖战英灵已经分配的奖励ID列表
}

message S2C_GetCorpAllianceJoinApply {
	required uint32 ret = 1;
	required uint32 clid = 2;
	repeated AllianceCorp corps = 3;
}

message C2S_ResJoinCorpAlliance {
	required uint32 clid = 1;		//联盟id
	required uint64 corp_sid = 2;
	required uint32 corp_id = 3;	//被审核军团id
	required uint32 op = 4;	//0-同意 1-拒绝
}

message S2C_ResJoinCorpAlliance {
	required uint32 ret = 1;
	required uint32 clid = 2;
	required uint64 corp_sid = 3;
	required uint32 corp_id = 4;	//被审核军团id
	required uint32 op = 5;	//0-同意 1-拒绝
}

enum CORPALLIANCE_POSITION {
	CL_MEMBER = 0;	//成员
	CL_LEADER = 1;	//联盟长
	CL_VICE_LEADER = 2;	//副联盟长
}

message C2S_CorpAllianceAppoint {
	required uint32 clid = 1;   	//联盟id
	required uint64 asid = 2;			//被任命的sid
	required uint32 auid = 3;			//被任命的uid
	required uint32 corp_id = 4;	//所属军团
	required uint32 clposition = 5;	//职位-CORPALLIANCE_POSITION
}

message S2C_CorpAllianceAppoint {
	required uint32 ret = 1;
	required uint32 clid = 2;   		//联盟id
	required uint64 asid = 3;				//被任命的sid
	required uint32 auid = 4;				//被任命的uid
	required uint32 corp_id = 5;		//所属军团
	required uint32 clposition = 6;	//职位-CORPALLIANCE_POSITION
}

message C2S_CorpAllianceKick {
	required uint32 clid = 1;
	required uint64 corp_sid = 2;
	required uint32 corp_id = 3; //军团id
}

message S2C_CorpAllianceKick {
	required uint32 ret = 1;
	required uint32 clid = 2;
	required uint64 corp_sid = 3;
	required uint32 corp_id = 4; //军团id
}

message C2S_CorpAllianceDimiss {
	required uint32 clid = 1;
}

message S2C_CorpAllianceDimiss {
	required uint32 ret = 1;
}

message C2S_OpCorpAllianceMsg {
	required uint32 clid = 1;
	required uint32 op = 2;	//操作类型 0-宣言 1-图标 2-名字
	optional string msg = 3;	//宣言 名字
	optional uint32 icon_pic = 4;
	optional uint32 icon_frame = 5;
}

message S2C_OpCorpAllianceMsg {
	required uint32 ret = 1;
	required uint32 clid = 2;
	required uint32 op = 3;	//操作类型
	optional string msg = 4;	//宣言 名字
	optional uint32 icon_pic = 5;
	optional uint32 icon_frame = 6;
}

message C2S_CorpAllianceImpeach {
	required uint32 clid = 1;
}

message S2C_CorpAllianceImpeach {
	required uint32 ret = 1;
	required uint32 clid = 2;
}

message C2S_GetCorpAllianceCorpMembers {
	required uint32 clid = 1;	//联盟id
	required uint64 corp_sid = 2;	//军团sid
	required uint32 corp_id = 3; //军团id
}

message S2C_GetCorpAllianceCorpMembers {
	required uint32 ret = 1;
	required uint32 clid = 2;	//联盟id
	required uint64 corp_sid = 3;	//军团sid
	required uint32 corp_id = 4; //军团id
  repeated CorpMember members = 5;	//暂时复用原军团成员结构
}

message C2S_CorpAllianceQuit {
}

message S2C_CorpAllianceQuit {
	required uint32 ret = 1;
}

message C2S_SearchCorpAlliance {
	required string name = 1;
}

message S2C_SearchCorpAlliance {
	required uint32 ret = 1;
	repeated CorpAllianceInfo infos = 2;
}

message C2S_GetCorpAllianceNews {
	required uint64 ts = 1;
}

message StringKV {
	required string key = 1;
	required string value = 2;
}

message CorpAllianceNews {
  required uint64 ts = 1;
  required uint32 news_id = 2;
	repeated StringKV kv = 3;
}

message S2C_GetCorpAllianceNews {
  required uint32 ret = 1;
  repeated CorpAllianceNews news = 2;
}

//留言板
message C2S_GetCorpAllianceMsgBoard {
	required uint64 ts = 1;	//毫秒时间戳, 0-全部 N-获取最新
}

message AllianceMsgBoardContent {
	required uint64 ts = 1;			// 毫秒时间戳-唯一标识
  required string name = 4;		// 发表人
  required uint32 position  = 5;	// 联盟职务
  required string content = 6;		// 内容
  optional string voicemail_id = 7; //非0表示语音聊天
  optional uint32 voicemail_length = 8; //时长
}

message S2C_GetCorpAllianceMsgBoard {
	required uint32 ret = 1;
	optional uint64 top = 2;	//置顶
	repeated AllianceMsgBoardContent contents = 3;
}

enum AllianceMsgBoardOp {
	OP_ADD_NEW  = 1;			//添加新留言
	OP_SET_TOP  = 2;			//置顶
	OP_CANCEL_TOP = 3;		//取消置顶
	OP_DELETE = 4;				//删除
}

message C2S_CorpAllianceMsgBoardOp {
	required uint32 op = 1;
	optional string content = 2;
	optional string voicemail_id = 3;
	optional uint32 voicemail_length = 4; //时长
	optional uint64 ts = 5;
}

message S2C_CorpAllianceMsgBoardOp {
	required uint32 ret = 1;
	required uint32 op = 2;
	optional AllianceMsgBoardContent content = 3;
}

//广播最新的操作
message S2C_CorpAllianceMsgBoardOpBroadCast {
	required uint32 op = 1;
	required AllianceMsgBoardContent content = 2;
}

message C2S_ReqCorpAllianceTaskInfo {
}

message CorpAllianceTask {
	required uint32 task_id = 1;
	required uint32 value = 2;	//当前任务进度
}

message CorpAllianceTaskExpAward {
	required uint32 id = 1;
	required uint32 status = 2;	//0-未领取 1-已领取
}

message CorpAllianceTaskInfo {
	repeated CorpAllianceTaskExpAward exp_awards = 2;	//里程碑宝箱
	required uint32 status = 4;		//任务状态 0-未领取 1-已领取奖励
	optional CorpAllianceTask task = 5;	//任务
}

message S2C_ReqCorpAllianceTaskInfo {
	required uint32 ret = 1;
	optional CorpAllianceTaskInfo task = 2;
}

message C2S_GetCorpAllianceTaskExpAward {
	required uint32 exp_award_id = 1;
}

message S2C_GetCorpAllianceTaskExpAward {
	required uint32 ret = 1;
	required uint32 exp_award_id = 2;
}

message C2S_GetCorpAllianceTaskAward {
	required uint32 task_id = 1;
}

message S2C_GetCorpAllianceTaskAward {
	required uint32 ret = 1;
	required uint32 task_id = 2;
}

message C2S_RefreshCorpAllianceTask {
}

message S2C_RefreshCorpAllianceTask {
	required uint32 ret = 1;
	optional CorpAllianceTask task = 4;	//任务
}

//简易信息
message AllianceSnapShot {
	required uint32 id = 1;			//id
	required string name = 2;		//名称
	required uint32 level = 3;	//等级
	required uint32 exp = 4;		//经验
	required uint32 icon_pic = 5;	//icon
	required uint32 icon_frame = 6;
	optional uint64 world_war_city_score = 7;
}

message C2S_ReqCorpAllianceSkillInfo {
}

message AllianceSkill {
	required uint32 tp = 1;			//类型
	required uint32 level = 2;	//等级
	required uint32 deadline = 3;			//截止时间
}

message S2C_ReqCorpAllianceSkillInfo {
	required uint32 ret = 1;
	required uint32 daily_goods = 2;	//个人
	repeated AllianceSkill skills = 3;
}

message C2S_UpCorpAllianceSkill {
	required uint32 tp = 1;
	required uint32 op = 2;	//0-研究 1-取消
}

message S2C_UpCorpAllianceSkill {
	required uint32 ret = 1;
	required uint32 tp = 2;
	optional uint32 deadline = 3;	//剩余时间
	optional uint32 goods = 4;	//联盟剩余资材
	required uint32 op = 5; //0-研究 1-取消
}

message C2S_WorldWarAttackCorpAltar {
  required uint32 x = 1;
  required uint32 y = 2;
}

message S2C_WorldWarAttackCorpAltar {
  required uint32 ret = 1;
  optional CrossUser enemy = 2;
  optional bool win = 3;
  optional uint64 report_id = 4;
  optional string enemy_corp = 5;
  optional uint32 tired_point = 6;
  optional uint32 tired_recover_tm = 7;
  optional uint32 robed = 8;
  optional uint32 left_defense = 9;
}

message C2S_WorldWarBuyCorpAltarDefense {
  required uint32 cnt = 1;
}

message S2C_WorldWarBuyCorpAltarDefense {
  required uint32 ret = 1;
  required uint32 cnt = 2;
}

message C2S_WorldWarSetAllianceGuard {
  required uint32 pos = 1; // 1-6
  required uint64 sid = 2;
  required uint32 uid = 3;
}

message S2C_WorldWarSetAllianceGuard {
  required uint32 ret = 1;
  required uint32 pos = 2; // 1-6
  required uint64 sid = 3;
  required uint32 uid = 4;
  optional CrossUser target = 5;
}

message C2S_WorldWarAttackArsenal {
  required uint32 x = 1;
  required uint32 y = 2;
  required uint64 sid = 3;
  required uint32 uid = 4;
}

message S2C_WorldWarAttackArsenal {
  required uint32 ret = 1;
  optional CrossUser enemy = 2;
  optional bool win = 3;
  optional uint64 report_id = 4;
  optional string enemy_alliance = 5;
  optional uint32 robed = 6;
  optional uint32 left_defense = 7;
  optional uint32 tired_point = 8;
  optional uint32 tired_recover_tm = 9;
}

message C2S_WorldWarGetCorpGuard {
  required uint32 x = 1;
  required uint32 y = 2;
}

message S2C_WorldWarGetCorpGuard {
  required uint32 ret = 1;
  required uint32 x = 2;
  required uint32 y = 3;
  optional CrossCorp corp = 4;
  repeated WorldWarGuard guards = 5;
}

message C2S_WorldWarGetAllianceGuard {
  required uint32 x = 1;
  required uint32 y = 2;
  required uint32 alliance_id = 3;
}

message S2C_WorldWarGetAllianceGuard {
  required uint32 ret = 1;
  required uint32 x = 2;
  required uint32 y = 3;
  optional WorldWarArsenal arsenal = 4;
  repeated WorldWarGuard guards = 5;
  optional uint32 goods = 6; //资材
}

message C2S_WorldWarAttackBrokenArsenal {
  required uint32 x = 1;
  required uint32 y = 2;
}

message S2C_WorldWarAttackBrokenArsenal {
  required uint32 ret = 1;
  optional string enemy_alliance = 2;
  optional uint32 robed = 3;
  optional uint32 left_defense = 4;
  optional uint32 tired_point = 5;
  optional uint32 tired_recover_tm = 6;
}

message C2S_WorldWarRobArsenal {
  required uint32 x = 1;
  required uint32 y = 2;
  required uint32 enemy_alliance_id = 3;
}

message S2C_WorldWarRobArsenal {
  required uint32 ret = 1;
  optional uint32 robed = 2;
  optional uint32 left = 3;
  optional string enemy_alliance = 4;
  optional uint32 tired_point = 5;
  optional uint32 tired_recover_tm = 6;
}

message WorldWarCityItem {
  required uint32 id = 1;
  required uint32 cnt = 2;
}

message C2S_WorldWarCityItemBag {
}

message S2C_WorldWarCityItemBag {
  required uint32 ret = 1;
  repeated WorldWarCityItem items = 2;
}

message S2C_WorldWarCityItemBuff {
  optional uint32 migrate_ban_end_tm = 1;
  optional uint32 repair_ban_end_tm = 2;
}

message S2C_WorldWarCityItemEffect {
  required uint32 city_id = 1;
  required uint32 item_id = 2;
  required uint32 x = 3;
  required uint32 y = 4;
}

message C2S_GetRoadInfo {
}

message RoadStage {
  required uint32 id = 1;
  required uint32 process = 2;//1 2 4位比较 7代表3星
}

message RoadItem {
  required uint32 id = 1;
  required uint32 num = 2;
}

message S2C_GetRoadInfo {
  required uint32 ret = 1;
  repeated RoadStage stages = 2;
  optional uint32 challenge_count = 3;//剩余挑战次数
  optional uint32 purchase_count = 4;
  repeated uint32 award = 5;//已经领取过的奖励
  repeated RoadItem items = 6;//所有道具
  optional bool is_playing = 7;
  optional uint32 point = 8;
  repeated RoadItem frags = 9;
}

message C2S_PlayRoadGame {
	required uint32 battle_type = 1;
  required uint32 stage_id = 2;
}

message RoadGame {
  required uint32 target_id = 1;//对应到MAP
  repeated RoadGamePoint point = 2;//game里面特殊对象//主要为怪物
  repeated RoadItem items = 3;//已经用过的道具数量
  repeated uint32 target_list = 4;
	optional uint32 sp1 = 5;	//扩展字段灵活使用
	optional uint32 sp2 = 6;
}

message RoadGamePoint {
  required uint32 x = 1;//逻辑上这两个客户端暂时不需要 因为移动都客户端做 服务器只传初始位置（读表）过来
  required uint32 y = 2;
  optional uint32 tp = 3;
  optional uint32 unique_id = 4;//uniqueid only id
  optional uint32 id = 5;//from xml
  optional uint32 group = 6;//from xml
  repeated uint32 sp = 7;//monster=> sell list
  optional uint32 sp1 = 8;//monster=>hp user=>hp trap=>duetime
  optional uint32 sp2 = 9;//monster=>question id
  repeated uint32 sp3 = 10;//monster=>buffid
  optional uint32 move = 11;//from xml
  repeated uint32 sp4 = 12;//monster=>hp rate//12size
  repeated RoadItem related_item = 13;//sell monster may have
}

message S2C_PlayRoadGame {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  optional uint32 challenge_count = 3;//挑战次数
  optional RoadGame game = 4;
}

message C2S_PurchaseRoadCount {
  optional uint32 count = 1;
	required uint32 type = 2;
}

message S2C_PurchaseRoadCount {
  required uint32 ret = 1;
  optional uint32 count = 2;
  optional uint32 challenge_count = 3;
  optional uint32 purchase_count = 4;
	required uint32 type = 5;
}

message C2S_RoadGameMove {
  required uint32 x = 1;
  required uint32 y = 2;
}

message S2C_RoadGameMove {
  required uint32 ret = 1;
  required uint32 x = 2;
  required uint32 y = 3;
}

message C2S_RoadGameProcessMonster {
  required uint32 unique_id = 2;
  optional uint32 sp1 = 3;
  optional uint32 sp2 = 4;//购买怪的数量
}

message S2C_RoadGameProcessMonster {
  required uint32 ret = 1;
  required uint32 unique_id = 2;
  repeated Award awards = 3;//临时获取的奖励
  optional uint64 report_id= 4;
	optional uint32 award_type = 5;	//道具类型,1,永久道具,2,临时道具; 不传也是1
	optional bool is_win = 6; //4.6.50
}

message C2S_RoadGameUseItem {
  required uint32 id = 1;
  optional uint32 x = 2;
  optional uint32 y = 3;
  repeated uint32 sp = 4;//targetid
}

message S2C_RoadGameUseItem {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional RoadGamePoint point = 3;
  repeated RoadItem items = 4;//已经使用道具
}

message C2S_RoadGameComposeItem {
  required uint32 id = 1;
  optional uint32 count = 2;
}

message S2C_RoadGameComposeItem {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated RoadItem items = 3;//所有道具
  repeated RoadItem frags = 4;//所有碎片
  repeated RoadHandbook hb = 5;//所有图鉴
  optional uint32 count = 6;
}

message S2C_RoadGamePositionFlush{
  required uint32 ret = 1;
  required uint32 tp = 2;//1UatkM 2MatkM 3Answer 4Gift 5Sell 6ChangeTarget 7ItemAffect 8Revive
  repeated RoadGamePoint point = 3;//有变化的
  repeated uint32 clear = 4;//清除的ID
  optional uint32 target_id = 5;
  repeated uint32 target_list = 6;
}

message C2S_RoadGameInfo {
}

message S2C_RoadGameInfo {
  required uint32 ret = 1;
  required uint32 tp = 2;//0代表刷新过来(客户端主动请求的返回 其他都是服务器主动推送) 1代表完成这个GAME 2代表失败
  optional RoadGame game = 3;
  repeated Award awards = 4;//掉落奖励
  optional RoadStage stage = 5;//变化的stage
  optional uint32 challenge_count = 6;
  optional uint32 process = 7;//状态
  repeated Award stage_awards = 8;//关卡奖励获胜才有
	required uint32 type = 9;
}

message C2S_PurchaseRoadRevive {

}

message S2C_PurchaseRoadRevive {
  required uint32 ret = 1;
  optional RoadGamePoint point = 2;
  optional uint32 revive_time = 3;
}

message C2S_RoadStarAward {
  required uint32 id = 1;
}

message S2C_RoadStarAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;//具体奖励
  repeated uint32 award = 4;
}

message C2S_RoadGameMonsterAttack {
  required uint32 id1 = 1;//unique id
  required uint32 id2 = 2;
}

message S2C_RoadGameMonsterAttack {
  required uint32 ret = 1;
  required uint32 id1 = 2;
  required uint32 id2 = 3;
  optional RoadGamePoint point = 4;
}

message C2S_RoadFinishStage {
  required uint32 id = 1;
}

message S2C_RoadFinishStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  optional uint32 challenge_count = 4;
}

message C2S_RoadGameGiveUp {
  required bool fail = 1;//true代表失败放弃 false代表放弃 不走扣次数奖励流程
}

message S2C_RoadGameGiveUp {
  required uint32 ret = 1;
  required bool fail = 2;
}

message C2S_RoadGameItemProcess {
  required uint32 unique_id = 1;//item id
  optional bool cancel = 2;//是否拆除
  repeated uint32 target_list = 3;//作用对象
}

message S2C_RoadGameItemProcess{
  required uint32 ret = 1;
  required uint32 unique_id= 2;//unique id
  optional bool cancel = 3;
  repeated uint32 target_list = 4;
}

message C2S_RoadGameDetailInfo {

}

message S2C_RoadGameDetailInfo {
  required uint32 ret = 1;
  optional uint32 process = 2;
  repeated Award awards = 3;
}

message S2C_NotifyAliMsg {
	repeated uint32 privilege_id = 1;	//特权id
}

message C2S_RoadAskItem {
  required uint32 item_id = 1;

}

message S2C_RoadAskItem {
  required uint32 ret = 1;
  required uint32 item_id = 2;
}

message C2S_RoadGiveItem {
  required uint32 id = 1;
  required uint64 sid = 2;
  required uint32 user_id = 3;
}

message S2C_RoadGiveItem {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint64 sid = 3;
  required uint32 user_id = 4;
  repeated Award awards = 5;
  optional uint32 give = 6;
}

message RoadAskInfo {
  required uint64 sid = 1;
  required uint32 user_id = 2;
  required uint32 id = 3;
  required uint32 item_id = 4;
}

message C2S_RoadItemAskInfo {
}

message S2C_RoadItemAskInfo {
  required uint32 ret = 1;
  repeated RoadAskInfo infos = 2;
  optional uint32 give = 3;//赠送次数
  optional uint32 receive =4;//接受次数
}

message BattleBalance {
  required uint32 atk_uid = 1;  //攻击方uid
  required uint32 def_uid = 2;  //防御方uid
  required string atk_name = 3; //攻击方name
  required string def_name = 4; //防御方name
  required uint32 all_cnt = 5;  //总战斗次数
  required uint32 win_cnt = 6;  //攻击方获胜次数
  required uint32 all_rnd = 7;  //总战斗回合数
  required bool fv_first = 8;   //战力高先手
  required uint32 err_cnt = 9;  //战斗异常场数
}

message C2S_ExecuteBattleBalanceTest {
  repeated uint32 user_id = 1; //玩家id 默认2个
  required uint32 all_cnt = 2; //战斗场次 默认500
	optional bool cross = 3; //是否调用跨服协助
}

message S2C_ExecuteBattleBalanceTest {
  required uint32 ret = 1;
  repeated BattleBalance results = 2;
}

message S2C_RoadPointFlush {
  required uint32 point = 1;
  repeated RoadItem frag = 2;
  repeated RoadItem item = 3;
}

message C2S_FastExecuteStageOneKey {
  required uint32 frag_id = 1;
  repeated uint32 stage_ids = 2; //副本id
  required uint32 cnt = 3;
  optional bool auto_vit = 4; //体力丹
  optional bool auto_rebel = 5; //叛军
  optional bool auto_sell_white = 6; //出售白武将
}

message S2C_FastExecuteStageOneKey {
  required uint32 ret = 1;
  required uint32 frag_id = 2;
  repeated uint32 stage_ids = 3;
  required uint32 cnt = 4;
  optional uint32 cost_vit_items = 5;
  optional uint32 cost_battle_token = 6;
  repeated Award awards = 7;
  optional uint32 stage_money = 8;
  optional uint32 sell_money = 9;
  optional uint32 stage_exp = 10;
  optional uint64 rebel_exploit = 11;
  optional uint64 rebel_harm = 12;
  optional uint32 cret = 13;
  optional uint32 rebel_medal = 14;
  repeated Stage stages = 15;
}

message C2S_Hard_FastExecuteStageOneKey {
  required uint32 item_id = 1;
  repeated uint32 stage_ids = 2; //副本id
  required uint32 cnt = 3;
  optional bool auto_vit = 4; //体力丹
  optional bool auto_rebel = 5; //叛军
}

message S2C_Hard_FastExecuteStageOneKey {
  required uint32 ret = 1;
  required uint32 item_id = 2;
  repeated uint32 stage_ids = 3;
  required uint32 cnt = 4;
  optional uint32 cost_vit_items = 5;
  optional uint32 cost_battle_token = 6;
  repeated Award awards = 7;
  optional uint32 stage_money = 8;
  optional uint32 stage_exp = 9;
  optional uint64 rebel_exploit = 10;
  optional uint64 rebel_harm = 11;
  optional uint32 cret = 12;
  optional uint32 rebel_medal = 13;
  repeated Stage stages = 14;
}

message C2S_RoadGetHandbook {

}

message RoadHandbook {
  required uint32 id = 1;
  required uint32 exp = 2;
}

message S2C_RoadGetHandbook {
  required uint32 ret = 1;
  repeated RoadHandbook hb = 2;
}

//传奇之路扩展
//获取整体信息
message C2S_GetRoadExInfo {
}

message S2C_GetRoadExInfo {
	required uint32 ret = 1;
	repeated uint32 stages = 2;		//已通关关卡
	repeated uint32 rush_level = 3; //每一关的扫荡难度
	repeated uint32 stage_list = 4;	//当前关卡链
	optional uint32 challenge_count = 5;//剩余挑战次数
	optional uint32 purchase_count = 6;	//购买次数
	repeated uint32 award = 7;		//已经领取过的奖励
	optional bool is_playing = 8;
	optional uint32 point = 9;	//征战点
	optional uint32 level = 10;	//当前难度
	repeated uint32 max_level = 11; 	//关卡历史通关难度
}

//设置难度
message C2S_RoadExSelectLevel {
	required uint32 level = 1;
	required uint32 road_type = 2;	//road_stage_info表中的battle_id
}

message S2C_RoadExSelectLevel {
	required uint32 ret = 1;
	optional uint32 level = 2;
	optional uint32 road_type = 3;
}

//领取成就奖励
message C2S_RoadExCheckAward {
	required uint32 id = 1;
}

message S2C_RoadExCheckAward {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated Award awards = 3;		//具体奖励
	repeated uint32 award = 4;		//已经领取过的奖励
}

//扫荡
message C2S_RoadExRush {
	required uint32 story_id = 1;
	required uint32 level = 2;	//难度
	required uint32 road_type = 3;	//road_stage_info表中的battle_id
}

message S2C_RoadExRush {
  required uint32 ret = 1;
  required uint32 story_id = 2;
  repeated Award awards = 3;	//奖励列表
	optional uint32 challenge_count = 4;	//剩余挑战次数
	optional uint32 road_type = 5;
}

//挑战
message C2S_RoadExChallenge {
	required uint32 story_id = 1; //road_stage_info 的 story_id
	required uint32 level = 2;	//难度
}

message S2C_RoadExChallenge {
  required uint32 ret = 1;
  required uint32 id = 2;	//road_stage_info 的 id
	required uint32 level = 3;		//难度
	optional uint32 story_id = 4;	//关卡 road_stage_info 的 story_id
  optional uint32 challenge_count = 5;//挑战次数
  optional RoadGame game = 6;
}

//关卡重置
message C2S_RoadExResetStage {
	required uint32 stage_id = 1;
}

message S2C_RoadExResetStage {
	required uint32 ret = 1;
	repeated uint32 rush_level = 2; //每一关的扫荡难度
	repeated uint32 stage_list = 3;	//当前关卡链
}

//传奇之路-活动副本 4.5.0
//获取活动副本信息
message C2S_GetRoadActInfo {
}

message S2C_GetRoadActInfo {
	required uint32 ret = 1;
	optional uint32 id  = 2;	//road_timebattle_info.xml id, 0代表还未选择
	repeated uint32 story_id = 3;	//解锁的故事id
	optional bool complete = 4;		//最后一关时候完成
	optional uint32 open_time = 5;
	optional uint32 end_time = 6;
	optional uint32 challenge_count = 7;//剩余挑战次数
	optional bool is_playing = 8;
}

//选择章节
message C2S_RoadActSelectStory {
	required uint32 id = 1;		//road_timebattle_info.xml id
}

message S2C_RoadActSelectStory {
	required uint32 ret = 1;
	required uint32 id = 2;	//road_timebattle_info.xml id
}

//选择武将加入队伍
message C2S_RoadActKnightJoin {
	required uint32 monster_id = 1;	//chufa
	required uint32 pos = 2;
}

message S2C_RoadActKnightJoin {
	required uint32 ret = 1;
}

//传奇之路活动副本 红点
message RoadActRedHint {
	optional uint32 open_time = 1;
	optional uint32 end_time = 2;
	optional uint32 challenge_count = 3;//剩余挑战次数
}

//传奇之路联动副本--镇魂街
message C2S_GetRoadLDInfo {
}

message S2C_GetRoadLDInfo {
	required uint32 ret = 1;
	repeated uint32 story_id = 2;	//解锁的故事id
	repeated uint32 awarded_story_id = 3;//已领取首通奖励的故事id
	optional uint32 challenge_count = 5;//剩余挑战次数
	optional bool is_playing = 6;
}

//传奇之路联动副本 红点
message RoadLDRedHint {
	optional uint32 open_time = 1;
	optional uint32 end_time = 2;
	optional uint32 challenge_count = 3;//剩余挑战次数
	optional bool red_hint = 4;
}

//传奇之路-传记
message RoadBiStoryInfo {
  required uint32 id = 1;			//指向road_stage_info 前端用
  required uint32 story_id = 2;
  required uint32 rush_level = 3;	//可扫荡等级
  required uint32 completion = 4;		//完成度
  required bool perfect_award = 5;	//是否领取过完成度奖励
}

message C2S_RoadBiInfo {
}

message S2C_RoadBiInfo {
  required uint32 ret = 1;
  repeated RoadBiStoryInfo storys = 2; //玩家进度数据
  optional uint32 challenge_count = 3;//剩余挑战次数
  optional uint32 purchase_count = 4; //购买次数
  optional bool is_playing = 5;
  optional uint32 level = 6; //当前难度
	optional uint32 award_level = 7; //奖励段
}

message C2S_RoadBiPerfectAward {
  required uint32 story_id = 1; //road_stage_info 的story_id 同biography_chapter_info 的id
}

message S2C_RoadBiPerfectAward {
  required uint32 ret = 1;
  optional uint32 story_id = 2;
  repeated Award awards = 3;
}

message C2S_RoadBiSelectAward {
	required uint32 road_type = 1;	//列传10
	required uint32 level = 2;  	//1,2,3
}

message S2C_RoadBiSelectAward {
	required uint32 ret = 1;
	required uint32 road_type = 2;
	required uint32 level = 3;
}

//传奇之路传记 红点
message RoadBiRedHint {
	repeated uint32 has_award = 2;
	optional uint32 challenge_count = 3;//剩余挑战次数
}

//在外层界面拉的数据
message C2S_RoadBiMiniInfo {
}

message S2C_RoadBiMiniInfo {
	required uint32 ret = 1;
	optional RoadBiRedHint red_hint = 2;
}

//通知发生定时事件
message S2C_RoadTimedEvent {
	required uint32 ret = 1;
	required uint32 type = 2;
	repeated RoadGamePoint points = 3;
}


//王者殿堂-4.1.70
message C2S_GetKingPalaceInfo {
}

//排行榜押注信息
message KPRankBeton {
	required SidUid user = 1;
	required uint32 rank = 2;			//排名
	required uint32 rwdstate = 3;	//奖励状态(0-不可用领取，1-可领取 2-已领取, 3-押注失败)
	required uint32 ts = 4;	//押注时间
}
message S2C_GetKingPalaceInfo {
	required uint32 ret = 1;
	required uint32 rank_id = 2;		//榜id
	required uint32 start_time = 3;
	required uint32 end_time = 4;
	optional KPRankBeton beton = 5;	//自己的押注信息
}

message C2S_BetonKingPalace {
	required SidUid user = 1;
	//required uint32 rank = 1;	//押注排名(1~3)
}

message S2C_BetonKingPalace {
	required uint32 ret = 1;
	optional KPRankBeton beton = 2;
	optional Award award = 3;
}

message C2S_GetKingPalaceReward{
}

message S2C_GetKingPalaceReward{
	required uint32 ret = 1;
	optional KPRankBeton beton = 2;
	optional Award award = 3;
}

message IndieRechargeTask {
  required uint32 id = 1; //任务ID
  required uint32 money = 2; //充值额度
  required uint32 choosable = 3; //是否可选
  repeated Award awards = 4; //配置奖励
  required uint32 count = 5; //可充值次数
  required string product_id = 6; //充值商品ID
  optional uint32 direct_id = 7; //直冲ID
  optional string gift_name = 8; //推送礼包名称
  optional uint32 icon_type = 9; //推送礼包立绘类型
  optional uint32 icon_value = 10; //推送礼包立绘
}

message UserIndieRechargeTask {
  required uint32 id = 1; //任务ID
  optional uint32 recharge_count = 2; //充值次数
  optional uint32 award_count = 3; //奖励领取次数
}

message C2S_GetIndieRechargeInfo {
}

message S2C_GetIndieRechargeInfo {
  required uint32 ret = 1;
  optional IndieRechargeInfo info = 2; //活动数据
  repeated UserIndieRechargeTask user_tasks = 3; //玩家任务数据
}

message S2C_UpdateIndieRechargeInfo {
  required uint32 ret = 1;
  required IndieRechargeInfo info = 2; //活动数据
}

message S2C_UpdateUserIndieRechargeTask {
  required uint32 ret = 1;
  repeated UserIndieRechargeTask user_tasks = 2; //玩家任务数据
}

message IndieRechargeRedHint {
	required IndieRechargeInfo info = 1;
	repeated UserIndieRechargeTask user_tasks = 2;
}

message IndieRechargeInfo {
  required uint32 id = 1; //活动ID
  required uint32 start_time = 2; //开始时间
  required uint32 end_time = 3; //结束时间
  repeated IndieRechargeTask tasks = 4; //任务
  optional uint32 type = 5; //活动类型(0:直充活动 1:推送礼包)
}

message C2S_GetIndieRechargeAward {
  required uint32 id = 1; //任务ID
  optional uint32 index = 2; //可选奖励Index(从0开始)
}

message S2C_GetIndieRechargeAward {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 index = 3;
  repeated Award awards = 4; //获得奖励
}

message C2S_NewDailySignInfo{
}

message S2C_NewDailySignInfo{
   required uint32 ret = 1;
   optional DailySign daily_sign = 2;
}

message DailySign{
  required uint32 month = 1;   //返回签到数据的月份
  required string title = 2;   //签到主题文字
  required string comment = 3;   //签到主题描述
  //required string res = 4;   //签到立绘形象
  repeated SignInfo info = 5;   //返回签到的信息
  repeated SignInfo ext_info = 6;   //返回签到的累积信息
  required uint32 resign = 7;      //剩余补签次数
  required uint32 day = 8;         //签到当前日期
  required uint32 is_resign = 9;      //当天是否已经补签
  optional uint32 resign_score = 10;   //获得补签需要的积分
  optional uint32 res_type = 11; //立绘形象type
  optional uint32 res_value = 12; //立绘形象value
}

message SignInfo{
   required uint32 id = 1;    //签到的ID 等于日期 如果是连续签到的话，连续签到天数+10000
   required uint32 type = 2;   //
   required uint32 value = 3;
   required uint32 size = 4;
   required uint32 vip_level = 5;      //签到的VIP等级 达到对应的VIP等级 翻倍
   required uint32 is_lux = 6;         //签到是否是豪华礼品要流光设置
   required uint32 is_signed = 7;      //玩家是否已经签到过
}

message C2S_NewDailySign{
   required uint32 id = 1;
   required uint32 type = 2;  //签到类型 0-正常签到 1- 补签 2-累积签到
}

message S2C_NewDailySign{
   required uint32 ret = 1;
   optional uint32 id = 2;
   repeated Award awards = 3;
}

message C2S_ResetStageOneKey {
  required uint32 frag_id = 1;
  repeated uint32 stage_ids = 2; //副本id
}

message S2C_ResetStageOneKey {
  required uint32 ret = 1;
  required uint32 frag_id = 2;
  repeated uint32 stage_ids = 3; //副本id
  repeated Stage stages = 4;
}

message C2S_ResetHardStageOneKey {
  required uint32 item_id = 1;
  repeated uint32 stage_ids = 2; //副本id
}

message S2C_ResetHardStageOneKey {
  required uint32 ret = 1;
  required uint32 item_id = 2;
  repeated uint32 stage_ids = 3; //副本id
  repeated Stage stages = 4;
}

message C2S_SetPhoneNum {
  required string phone_num = 1;	// 手机号
}

message S2C_SetPhoneNum {
  required uint32 ret = 1;
}

 message C2S_UpStarWing {
    required uint32 id = 1;   //神翼id
}
message S2C_UpStarWing {
    required uint32 ret = 1;
    required uint32 id = 2;
		required uint32 star = 3;
}

// --- 吃鸡 ---
message ChickenObject {
  required uint32 id = 1;
  required uint32 type = 2; // 配置表中的类型：武器、装备、道具、战鹰
  required uint32 cfg_id = 3; // 对应配置表中的id
  optional uint32 value1 = 4; // 武器：附带箭数量 装备：剩余护甲 箭：数量
  optional uint32 value2 = 5; // 武器：已上膛数量
}

message ChickenSelfInfo {
  repeated ChickenObject items = 1; // 道具栏
  repeated ChickenObject weapons = 2; // 武器栏
  optional ChickenObject armor = 3; // 装备栏
  optional ChickenObject hawk = 4; // 战鹰栏
  optional int64 reload_cd = 5; // 上膛冷却，影响下次攻击、上膛
  optional uint32 buff_item_id = 6; // 使用的时效性道具id
  optional int64 buff_ts = 7; // 使用的时效性道具效果结束时间
  repeated int64 item_cd = 8; // 道具公共cd,依次为类型1、2
  optional ChickenObject horse = 9; // 战马栏
  optional int64 horse_cd = 10; // 战马cd
}

message Pos {
  required uint32 x = 1;
  required uint32 y = 2;
}

message ChickenTeam {	// 以后扩展成组队模式需要
  required uint32 id = 1;
  repeated CrossUser users = 2;
}

message ChickenToxin {
  required Pos pos = 1; // 毒中心
  required uint32 level = 2; // 等级
  required int64 ts = 3; // 产生时间戳
}

message ChickenArrow {
  required uint32 id = 1;
  required Pos pos = 2; // 发射点
  required Pos target = 3; // 目标点
  required uint32 speed = 4; // 格/秒
  required int64 ts = 5; // 生成时间戳
}

message C2S_ChickenMatch {
	optional uint32 mode = 1;
}

message S2C_ChickenMatch {
  required uint32 ret = 1;
	optional uint32 mode = 2;
}

message C2S_ChickenStopMatch {
}

message S2C_ChickenStopMatch {
  required uint32 ret = 1;
}

message C2S_ChickenInfo {
}

message S2C_ChickenInfo {
  required uint32 ret = 1;
  optional ChickenSelfInfo self_info = 2;
  repeated ChickenTeam teams = 3;
  repeated ChickenToxin toxins = 4; // 毒圈
  repeated Pos item_pos = 5; // 地图上有物品的坐标
  repeated ChickenArrow arrows = 6; // 飞行中的箭
  optional uint32 user_num = 7; // 参与的玩家总数
  optional uint32 user_num_alive = 8; // 活着的玩家总数
}

message C2S_ChickenTouch {
  required uint32 x = 1;
  required uint32 y = 2;
}

message S2C_ChickenTouch {
  required uint32 ret = 1;
  required uint32 x = 2;
  required uint32 y = 3;
  optional uint32 action = 4; // 实际执行动作: 1.移动 2.攻击
  optional ChickenArrow arrow = 5; // 如果是远程攻击，可能增加飞行中的箭
}

message C2S_ChickenCheckBox {
}

message S2C_ChickenCheckBox {
  required uint32 ret = 1;
  repeated ChickenObject objects = 2;
}

message C2S_ChickenPickUp {
  required uint32 id = 1; // 所在地图格箱子中物品的唯一id
}

message S2C_ChickenPickUp {
  required uint32 ret = 1;
  required uint32 id = 2; // 所在地图格箱子中物品的唯一id
  repeated ChickenObject objects = 3; // 增加的物品
  optional uint32 arrow_num = 4; // 因武器首次被拾取而且背包已有箭堆叠后增加的箭数量
}

message C2S_ChickenDiscard {
  required uint32 id = 1; // 丢弃的物品的唯一id
  optional uint32 num = 2; // 当丢弃的是箭时选择丢弃数量
}

message S2C_ChickenDiscard {
  required uint32 ret = 1;
  required uint32 id = 2; // 丢弃的物品的唯一id
  optional uint32 num = 3; // 当丢弃的是箭时选择丢弃数量
  optional ChickenObject object = 4; // 只丢弃部分箭时会创造新的object
  optional uint32 cfg_id = 5; // 物品配置id
}

message C2S_ChickenUseItem {
  required uint32 id = 1; // 使用的物品的唯一id
}

message S2C_ChickenUseItem {
  required uint32 ret = 1;
  required uint32 id = 2; // 使用的物品的唯一id
  optional uint32 cfg_id = 3; // 使用的物品的配置id
	optional uint32 uid = 4;	//使用者
	optional uint32 sid = 5;
}

message C2S_ChickenUseHorse {
}

message S2C_ChickenUseHorse {
  required uint32 ret = 1;
}

message C2S_ChickenSwitchWeapon {
}

message S2C_ChickenSwitchWeapon {
  required uint32 ret = 1;
}

message C2S_ChickenReload {
}

message S2C_ChickenReload {
  required uint32 ret = 1;
  optional uint32 num = 2; // 实际上膛数
}

message C2S_ChickenMatchStatus {
}

message S2C_ChickenMatchStatus {
  required uint32 ret = 1; // OK，跨服异常
  required uint32 status = 2; // 1:普通 2:在匹配 3:在战斗 4:匹配失败
  optional uint32 team_id = 3;	//房间号(默认0)
	optional bool is_leader = 4; //是否是队长
}

message S2C_ChickenNotifyMove {
  required uint32 uid = 1;
  required uint32 sid = 2;
  required Pos pos = 3; // 移动目标点
  required int64 ts = 4; // 当前时间点
}

message S2C_ChickenNotifyDamage {
  required uint32 uid = 1;
  required uint32 sid = 2;
  optional uint32 hp = 3; // 扣血量
  optional uint32 armor_point = 4; // 扣护甲值
  optional bool critical = 5; // 暴击
  optional uint32 attacker_uid = 6; // 攻击者uid
  optional uint32 attacker_sid = 7; // 攻击者sid
	optional uint32 status = 8;	//0-存活 1-濒死 2-死亡
}

message S2C_ChickenNotifyHeal {
  required uint32 uid = 1;
  required uint32 sid = 2;
  required uint32 hp = 3; // 回血量
	optional uint32 status = 8; //0-存活 1-濒死 2-死亡
}

message S2C_ChickenNotifyArmorPoint {
  required uint32 uid = 1;
  required uint32 sid = 2;
  optional uint32 max_armor_point = 3; // 新护甲值上限
  optional uint32 armor_point = 4; // 新护甲值
}

message S2C_ChickenNotifyDie {
  required uint32 uid = 1;
  required uint32 sid = 2;
  required uint32 num = 3; // 剩余人数
  optional uint32 attacker_uid = 4; // 攻击者uid
  optional uint32 attacker_sid = 5; // 攻击者sid
  optional uint32 attacker_kill_num = 6; // 攻击者杀人数
	optional uint32 die_tp = 7;	//死亡原因 1-火 2-掉血
}

message S2C_ChickenNotifyArrowAppear {
  required ChickenArrow arrow = 1;
  required uint32 uid = 2;
  required uint32 sid = 3;
}

message S2C_ChickenNotifyArrowDisappear {
  required uint32 id = 1; // 唯一id
  required uint32 reason = 2; // 1:打中人 2:打中障碍物 3:到达射程
}

message S2C_ChickenNotifyToxin {
  required ChickenToxin toxin = 1; // 毒圈
}

message S2C_ChickenNotifyItemAppear {
  required Pos pos = 1;
}

message S2C_ChickenNotifyItemDisappear {
  required Pos pos = 1;
}

message S2C_ChickenGameOver {
  required uint32 remainder_num = 1;	//剩余存活数
  required uint32 game_kill_num = 2;	//本场游戏杀人数
}

message C2S_ChickenTime {
}

message S2C_ChickenTime {
  required uint32 ret = 1;
  optional uint32 start_time = 2;
  optional uint32 end_time = 3;
  optional uint32 rank = 4;	// 单服排名
  optional uint32 rank_global = 5;	// 全服排名
  optional uint32 score = 6;	// 总积分
  optional uint32 eat_num = 7;	// 总吃鸡数
  optional uint32 kill_num = 8;	// 总杀人数
  optional uint32 play_num = 9;	// 总游戏场数
}

message C2S_ChickenStartUseItem {
  required uint32 id = 1;	// 道具id
}

message S2C_ChickenStartUseItem {
  required uint32 ret = 1;
  required uint32 id = 2;	// 道具id
}

// 4.4.50
message C2S_ChickenUseBagItem {
	required uint32 type = 1;
	required uint32 value = 2;
	optional uint32 op = 3;	//1-使用 2-取消
}

message S2C_ChickenUseBagItem {
	required uint32 ret = 1;
	required uint32 type = 2;
	required uint32 value = 3;
	optional uint32 op = 4;
	optional uint32 uid = 5;	//使用者
	optional uint64 sid = 6;
}

message C2S_ChickenInvite {
	required uint32 user_id = 1;
	optional uint32 mode = 2;	//1-单人 2-组队
}

message S2C_ChickenInvite {
	required uint32 ret = 1;
	required uint32 user_id = 2;
	optional uint32 mode = 3; //1-单人 2-组队
}

message S2C_ChickenInvited {
	required uint32 user_id = 1;
  optional CrossUser user = 2;
	optional uint32 mode = 3; //1-单人 2-组队
}

message C2S_ChickenResInvited {
	required uint32 user_id = 1;
	optional uint32 mode = 2;
}

message S2C_ChickenResInvited {
	required uint32 ret = 1;
  required uint32 user_id = 2;
	optional uint32 mode = 3;
}

message C2S_ChickenKick {
	required uint32 user_id = 1;//如果USERID是自己代表自己退队
	required uint64 sid = 2;
}

message S2C_ChickenKick {
	required uint32 ret = 1;
  optional uint32 user_id = 2;
	optional uint64 sid = 3;
}

message C2S_ChickenCreateTeam {
	required uint32 mode = 1; //1-单人 2-组队
}

message S2C_ChickenCreateTeam {
	required uint32 ret = 1;
	optional uint32 team_id = 2;
	optional bool open = 3;
	optional uint32 mode = 4; //1-单人 2-组队
}

message C2S_ChickenOpenTeam {
	required uint32 team_id = 1; //房间号
	required bool open = 2; //true-开放，false-不开放
}

message S2C_ChickenOpenTeam {
	required uint32 ret = 1;
	required bool open = 2;
}

message C2S_ChickenJoinTeam {
	required uint32 team_id = 1;  //房间号
	required uint32 mode = 2; //1-单人 2-组队
}

message S2C_ChickenJoinTeam {
	required uint32 ret = 1;
	required uint32 team_id = 2;  //房间号
	required uint32 mode = 3; //1-单人 2-组队
}

message C2S_ChickenTeamInfo {
}

message S2C_ChickenTeamInfo {
	required uint32 ret = 1;
	optional uint32 team_id = 2;	//房间号
	repeated CrossUser members = 3;
	optional bool is_leader = 4;
	optional uint32 mode = 5; //1-单人 2-组队
}

message C2S_ChickenRescue {
}

message S2C_ChickenRescue {
	required uint32 ret = 1;
	required uint32 uid = 2;	//施救
  required uint32 sid = 3;
  optional uint32 rescued_uid = 4;	//被救
  optional uint32 rescued_sid = 5;
	required uint32 op = 6;	//0-救援 1-取消(打断)
	optional uint32 start_ts = 7;	//开始时间
}

//魂阵
message AncientInfo {
  required uint32 id = 1;       //阵法ID
  optional uint32 isLock = 2;   //是否解锁
  optional uint32 level = 3;    //阵法等级
  optional uint32 tp = 4;       //阵法类型
  optional uint32 star = 5;     //星级信息
  optional uint32 progress = 6; //蕴魂进度
}

//阵旗信息
message AncientFlag{
  required uint32 id = 1;       //阵旗id 
  required uint32 level = 2;    //阵旗等级
}

//魂阵对应的6个阵旗
message AncientFlagInfo {
  required uint32 tp = 1;         //阵旗tp,判断属于哪个魂阵
  repeated AncientFlag flags = 2; //6个阵旗
}

//获取魂阵
message C2S_GetAncientInfo {
}

message S2C_GetAncientInfo {
  required uint32 ret = 1;
  repeated AncientInfo ancient_info = 2;   //阵法信息
  repeated AncientFlagInfo flag_info = 3;  //阵旗信息
}

//魂阵升级
message C2S_UpdateAncient {
  required uint32 id = 1;   //阵法ID
}

message S2C_UpdateAncient {
	required uint32 ret = 1;
	optional uint32 id = 2;   //阵法ID
}

//魂阵解锁
message C2S_UnlockAncient {
  required uint32 id = 1;   //阵法ID
  required AncientFlagInfo flag_info = 2;  //旗子信息
}

message S2C_UnlockAncient {
  required uint32 ret = 1;
  optional AncientInfo ancient_info = 2;
  optional AncientFlagInfo flag_info = 3;
}

//魂阵升星
message C2S_UpdateAncientStar {
  required uint32 id = 1;   
  required uint32 num = 2;
}

message S2C_UpdateAncientStar {
  required uint32 ret = 1;
  repeated uint32 info = 2;     //是否升星, 蕴魂次数, 进度值, 暴击值
  optional AncientInfo ancient_info = 3;   //魂阵信息
}

//改变旗子位置
message C2S_ChangeAncientFlag {
  required AncientFlagInfo flag_info = 1;  //旗子信息
}

message S2C_ChangeAncientFlag {
  required uint32 ret = 1;
  optional AncientFlagInfo flag_info = 2;  //旗子信息
}

//阵旗升级
message C2S_UpdateAncientFlag {
  required uint32 id = 1;   //魂阵id
  required uint32 tp = 2;   //升级材料
  required uint32 value = 3;   
}

message S2C_UpdateAncientFlag {
  required uint32 ret = 1;
  optional uint32 succ = 2;
  optional uint32 id = 3;
  optional AncientFlagInfo flag_info = 4;
}

//魂阵重置
message C2S_ResetAncient {
	required uint32 id = 1;	//阵法ID
}

message S2C_ResetAncient {
  required uint32 ret = 1;
  repeated AncientInfo ancient_info = 2;   //阵法信息
  repeated AncientFlagInfo flag_info = 3;  //阵旗信息
}

//获取重置消耗
message C2S_ResetAncientConsume {
  required uint32 id = 1;	//阵法ID
}

message S2C_ResetAncientConsume {
  required uint32 ret = 1;
  repeated Award consume = 2;
} 

//制霸骁勇榜

message BraveListInfo {
  optional uint32 status = 1; //活动开启标记   0关闭，1正常，2结算， 4维护
  optional uint32 open_time = 2; //开始时间
  optional uint32 end_time = 3; //结束时间
  optional uint32 clear_time = 4; //结算时间
}

message BraveListUserInfo {
  optional uint32 brave_level = 1;//骁勇等级
  optional uint32 local_rank = 2;     //本服排名
  optional uint32 room_rank = 3;    //全服排名
  optional uint32 challenge_all_cd = 4; //直升挑战cd
  optional uint32 medal = 5; //奖牌数
  optional uint32 gift_level = 6; //突破奖励领取段位
  optional uint32 change_cnt = 7; //更换房间次数
}

//拉取制霸骁勇榜活动信息
message C2S_BraveListInfo{

}

message S2C_BraveListInfo{
	required uint32 ret = 1;
	optional BraveListInfo info = 2; //活动数据
    //optional BraveListUserInfo user = 3; //玩家数据
	//required uint32 status = 2;        //活动开启标记	0关闭，1正常，2结算， 4维护
	//optional uint32 brave_level = 3;//骁勇等级
	//optional uint32 clear_time = 4;     //结算时间
	//optional uint32 open_time = 5;    //开始时间
	//optional uint32 end_time = 6;     //结束
	//optional uint32 local_rank = 7;		//本服排名
	//optional uint32 global_rank = 8;	//全服排名
	//optional uint32 challenge_all_cd = 9; //直升挑战cd
}

//拉取房间信息
message C2S_BraveListRoomInfo{
}

message S2C_BraveListRoomInfo{
  required uint32 ret = 1;
  repeated CrossUser users = 2;      //榜内玩家
  optional BraveListUserInfo self = 3; //玩家数据
}

//不再接收房间信息的推送
message C2S_BraveListRefuseRoomInfo{
}

message S2C_BraveListRefuseRoomInfo{
	required uint32 ret = 1;
}

message C2S_BraveListChangeRoom {
}

message S2C_BraveListChangeRoom {
  required uint32 ret = 1;
  optional uint32 change_cnt = 2; //更换房间次数
}


//挑战对手
message C2S_BraveListChallenge{
  required uint32 type = 1;  //0-普通挑战，1-巅峰榜玩家的便捷挑战
  optional uint32 uid = 2;    //对手ID
  optional uint64 sid = 3;    //对手Sid
}

//普通挑战结果
message S2C_BraveListChallenge{
  required uint32 ret = 1;
  optional uint64 report_id = 2;   //战报id
  optional BraveListUserInfo info = 3;
  optional uint32 no_opponent = 4;	//等于1时代表没有可获得勋章的对手，只在巅峰榜玩家便捷挑战中使用
}

message C2S_BraveListChallengeAll{
  optional uint32 uid = 1;    //对手ID
  optional uint64 sid = 2;    //对手Sid
}

//直升挑战结果
message S2C_BraveListChallengeAll{
  required uint32 ret = 1;
  optional uint32 uid = 2;
  optional uint64 sid = 3;
  optional bool result = 4;   //挑战结果 胜负
}

//获取直升录像
message C2S_BraveListVideo{
  required uint32 uid = 1;        //录像对手的uid
  required uint64 sid = 2;        //录像对手的sid
}

message S2C_BraveListVideo{
  required uint32 ret = 1;
  optional uint64 report_id = 2;  //录像战报
}

message C2S_BraveListVideoList{
}

message S2C_BraveListVideoList{
  required uint32 ret = 1;
  repeated CrossUser info = 2;  //胜利录像列表
	repeated CrossUser lose_info = 3; //失败录像
}

message C2S_BraveListChallengeAllList{

}

message S2C_BraveListChallengeAllList{
	required uint32 ret = 1;
	repeated CrossUser users = 2;     //对手列表
}

//直升挑战结束（完成、放弃）
message C2S_BraveListChallengeAllOver{
	 required uint32 type = 1;   //0,完成  1,放弃
}

message S2C_BraveListChallengeAllOver{
	 required uint32 ret = 1;
}

//查询段位变更，只有每日段位结算后才会被响应一次，其他时间无返回
message C2S_BraveListLevelChange{
}

//响应客户端的查询
message S2C_BraveListLevelChange{
  required uint32 ret = 1;
  optional bool show = 2;
  optional BraveListUserInfo old = 3;
  optional BraveListUserInfo new = 4;
  optional bool level_gift = 5;
  //optional uint32 old_level = 3;
  //optional uint32 old_medal = 4;
  //optional uint32 new_level = 5;
  //optional uint32 new_medal = 6;
  //optional uint32 rank = 7;
}

message C2S_GetBraveListRank {
  required uint32 rtype = 1;
  optional uint32 index = 2;
}

message S2C_GetBraveListRank {
  required uint32 ret = 1;
  required uint32 rtype = 2;
  optional uint32 self_rank = 3;
  repeated CrossUser users = 4;
  optional uint32 index = 5;
  optional uint32 total = 6;
}

//充值异常
message C2S_RechargeErrorMail {
}

message C2S_GetFormationSwitch {
}

message S2C_GetFormationSwitch {
  required uint32 ret = 1;
  optional bool form1 = 2;
  optional bool form2 = 3;
  optional uint32 pos = 4;
}

message C2S_SaveFormationSwitch {
  required uint32 pos = 1; // 1,2
}

message S2C_SaveFormationSwitch {
  required uint32 ret = 1;
  required uint32 pos = 2;
}

message C2S_SwitchFormation {
  required uint32 pos = 1;
}

message S2C_SwitchFormation {
  required uint32 ret = 1;
  required uint32 pos = 2;
  optional bool something_missing = 3;
}

message WorldWarCampInfo {
  required uint32 city_id = 1;
  optional uint32 defense = 2;
  optional bool finished = 3;
  optional CrossUser winner = 4;
  optional uint32 reborn_tm = 5;
  optional bool followed = 6; //是否关注，复活时会推送消息
}

message C2S_WorldWarGetCamp {
  required uint32 city_id = 1;
}

message S2C_WorldWarGetCamp { //这个消息会有多个，因为一个消息可能放不下城池里面的所有对象
  required uint32 ret = 1;
  required uint32 city_id = 2;
  repeated WorldWarMapCell cells = 3;
  optional uint32 user_cnt = 4;
  optional WorldWarCampInfo info = 5;
}

message S2C_WorldWarCampCellChange {
  required WorldWarMapCell cell = 1;
}

message S2C_WorldWarCampInfoChange {
  optional WorldWarCampInfo info = 1;
  repeated Award awards = 2;
}

message C2S_WorldWarListenCamp {
}

message S2C_WorldWarListenCamp {
}

message C2S_WorldWarQuitCamp {
}

message S2C_WorldWarQuitCamp {
}

message C2S_WorldWarMigrateToCamp {
  required uint32 city_id = 1; //城池id，0表示大地图, 1-9表示城池，101-109表示营寨
  required uint32 x = 2;
  required uint32 y = 3;
}

message S2C_WorldWarMigrateToCamp {
  required uint32 ret = 1;
  required uint32 city_id = 2;
  required uint32 x = 3;
  required uint32 y = 4;
  optional uint32 cd_end_tm = 5;
  optional uint32 migrate_point = 6;
  optional uint32 migrate_recover_tm = 7;
}

message C2S_WorldWarAttackCampMonster {
  required uint32 city_id = 1;
  required uint32 monster_x = 2;
  required uint32 monster_y = 3;
  required uint32 monster_id = 4;
  optional bool skip_battle = 5; //是否跳过战报
}

message S2C_WorldWarAttackCampMonster {
  required uint32 ret = 1;
  required uint32 city_id = 2;
  required uint32 monster_x = 3;
  required uint32 monster_y = 4;
  required uint32 monster_id = 5;
  optional uint64 report_id = 6;
  optional uint32 cd_end_tm = 7;
  optional uint32 robed = 8;
  optional uint32 left_defense = 9;
  optional bool skip_battle = 10; //是否跳过战报
  optional bool win = 11; //是否胜利
}

message C2S_WorldWarAttackCampUser {
  required uint32 city_id = 1;
  required uint32 enemy_x = 2;
  required uint32 enemy_y = 3;
  required uint64 enemy_sid = 4;
  required uint32 enemy_uid = 5;
  optional bool skip_battle = 6; //是否跳过战报
}

message S2C_WorldWarAttackCampUser {
  required uint32 ret = 1;
  required uint32 city_id = 2;
  required uint32 enemy_x = 3;
  required uint32 enemy_y = 4;
  required uint64 enemy_sid = 5;
  required uint32 enemy_uid = 6;
  optional uint64 report_id = 7;
  optional uint32 cd_end_tm = 8;
  optional CrossUser enemy = 9;
  optional uint32 robed = 10;
  optional uint32 left_defense = 11;
  optional uint32 tired_point = 12;
  optional uint32 tired_recover_tm = 13;
  optional uint32 rob_user_cnt = 14;
  optional uint32 camp_evil = 15;
  optional uint32 camp_evil_tm = 16;
  optional bool   protected = 17; //是否被召唤宠保护了
  optional bool skip_battle = 18; //是否跳过战报
  optional bool win = 19; //胜负结果
}

message C2S_WorldWarCampList {
}

message S2C_WorldWarCampList {
  required uint32 ret = 1;
  repeated WorldWarCampInfo camps = 2;
}

message WorldWarCampNotice {
  required uint32 city_id = 1;
  required CrossUser user = 2;
  repeated Award awards = 3;
  required uint32 tm = 4;
}

message C2S_WorldWarCampNotice {
}

message S2C_WorldWarCampNotice {
  required uint32 ret = 1;
  repeated WorldWarCampNotice notices = 2;
}

message C2S_WorldWarCampMyInfo {
}

message S2C_WorldWarCampMyInfo {
  required uint32 ret = 1;
  required uint32 used_award_cnt = 2;
  required uint32 buyed_award_cnt = 3;
}

message C2S_WorldWarCampBuyAwardCnt {
  required uint32 cnt = 1;
}

message S2C_WorldWarCampBuyAwardCnt {
  required uint32 ret = 1;
  required uint32 cnt = 2;
}

message S2C_WorldWarCampMonsterKilled {
  required uint32 camp_id = 1;
  required uint32 monster_id = 2;
  required uint32 monster_x = 3;
  required uint32 monster_y = 4;
  required uint32 defense = 5;
  required string monster_name = 6;
}

message C2S_WorldWarCampReviveWinner {
  required uint32 city_id = 1;
}

message S2C_WorldWarCampReviveWinner {
  required uint32 ret = 1;
  required uint32 city_id = 2;
}

message S2C_WorldWarCampWinnerKicked {
  required uint32 ret = 1;
  required uint32 city_id = 2;
  optional string kicker_name = 3;
  optional string kicker_sname = 4;
}

message C2S_WorldWarCampFollowRevive {
  required uint32 camp_id = 1;
  optional bool cancel = 2; //false表示关注，true表示取消关注
}

message S2C_WorldWarCampFollowRevive {
  required uint32 ret = 1;
  required uint32 camp_id = 2;
  optional bool cancel = 3;
}

message C2S_WorldWarCampBuyEvil { //异族购买善恶值
  required uint32 cnt = 1;
}

message S2C_WorldWarCampBuyEvil {
  required uint32 ret = 1;
  required uint32 cnt = 2;
  optional uint32 camp_evil = 3;
  optional uint32 camp_evil_tm = 4;
}

message C2S_WorldWarCampGetProtectedAward {
  required uint32 camp_id = 1;
}

message S2C_WorldWarCampGetProtectedAward {
  required uint32 ret = 1;
  required uint32 camp_id = 2;
  repeated Award  awards = 3;
}

message S2C_WorldWarCampUserKickedTimes {
  required uint32 ret = 1;
  required uint32 camp_id = 2;
  required uint32 kicked_times = 3;
}

//三国庆典
//活动基本信息
message C2S_CelebrationInfo{
}

message S2C_CelebrationInfo{
  required uint32 ret = 1;
	required bool is_open = 2;
  optional uint32 start_time = 3;           //开始时间
  optional uint32 end_time = 4;             //结束时间
  optional uint32 present_end = 5;          //最晚领奖时间
  optional uint32 activity_now = 6;         //当前期
  optional uint32 activity_start_time = 7;
  optional uint32 activity_end_time = 8;
}

//玩家超值单充信息
message C2S_CelebrationRechargeUserData{
}

message S2C_CelebrationRechargeUserData{
  required uint32 ret = 1;
  repeated CelebrationTaskCount data = 2;   //充值，领取记录
	repeated CelebrationTaskCount data2 = 3;  //特惠充值
}

//玩家商铺购买信息
message C2S_CelebrationShopUserData{
}

message S2C_CelebrationShopUserData{
  required uint32 ret = 1;
  repeated CelebrationCount data = 2;   //兑换记录
}

//玩家福利任务信息
message C2S_CelebrationTaskUserData{
}

message S2C_CelebrationTaskUserData{
  required uint32 ret = 1;
  repeated CelebrationTaskCount task = 2;   //任务记录
  repeated CelebrationCount area = 3;   //阵图记录
}

//超值单充,福利任务 领取
message C2S_CelebrationCheckReward{
  required uint32 type = 1;
  required uint32 id = 2;
	required uint32 select = 3;	//多选一 奖励选择 0没选择；1、2、3选择的奖励id
	optional bool is_sign = 4; //签到任务
}

message S2C_CelebrationCheckReward{
  required uint32 ret = 1;
	optional CelebrationTaskCount task = 2;
	optional uint32 select = 3;
}

//福利阵图奖励领取
message C2S_CelebrationCheckAreaReward{
	required uint32 area = 1;
	required uint32 id = 2;
}

message S2C_CelebrationCheckAreaReward{
	required uint32 ret = 1;
	optional CelebrationCount cell= 2;
}

//元宝商铺，庆典兑换 兑换
message C2S_CelebrationBuyGoods{
  required uint32 type = 1;
  required uint32 id = 2;
  required uint32 num = 3;
	required uint32 celebration_id = 4; //三国庆典期数id，用于校验
}

message S2C_CelebrationBuyGoods{
  required uint32 ret = 1;
	optional CelebrationCount goods = 2;
	optional uint32 num = 3;
}

message CelebrationTaskCount{
  required uint32 id = 1;
  required uint32 progress = 2; //进度
  required uint32 count = 3;    //数量
}

message CelebrationCount{
  required uint32 id = 1;
  required uint32 count = 2;
}

//三国庆典红点
message CelebrationRedHint{
  optional uint32 start_time = 1;           //开始时间
  optional uint32 end_time = 2;             //结束时间
  optional uint32 present_end = 3;          //最晚领奖时间
  optional uint32 activity_now = 4;         //当前期
	optional bool recharge = 5;
	optional bool area = 6;
	optional bool shop = 7;
}

message Resource {
  required uint32 id = 1;
  required uint32 num = 2;
  required uint32 up_time = 3;
  required uint32 act_time = 4;
}

message AutoUpdateFile {
	required uint32 id = 1;		//配置表id
	required string md5 = 2;	//配置表MD5
}

//通知客户端，服务器文件有变化
message S2C_ServerFileChanged {
}

message C2S_CheckFileChange {
	repeated AutoUpdateFile files = 1;
}

message S2C_CheckFileChange {
	required uint32 ret = 1;
	repeated uint32 changed_files = 2;	//MD5值不同的配置表id
}

//获取对应文件的协议
message C2S_UpdateFilesData{
	required uint32 id = 1;	//配置表id
}

message S2C_UpdateFilesData {
	required uint32 ret = 1;
	optional string md5 = 2;	//配置表MD5
	optional uint32 id = 3;		//配置表id
	repeated AUFCelebrationTime file1 = 4;	//celebration_time_info.xml
	repeated AUFCelebrationConfig file2 = 5;//celebration_config_info.xml
	repeated AUFCelebrationAction file3 = 6;//celebration_action_info.xml
	repeated AUFCelebrationArea file4 = 7;//celebration_area_info.xml
	repeated AUFCelebrationShop file5 = 8;//celebration_shop_info.xml
	repeated AUFItemAdd file6 = 9;				//item_info_added.xml
	repeated AUFItemBoxAdd file7 = 10;		//item_box_added.xml
	repeated AUFDropInfoAdd file8 = 11;	//drop_info_added.xml
	repeated AUFDropInfoAdd file9 = 12;	//drop_info_holiday_added.xml
	repeated ShopScoreInfo file10 = 13; //shop_score_info
	repeated CustomGiftInfo file11 = 14;//custom_gift_inf.xml
	repeated CustomGiftPackInfo file12 = 15;//custom_gift_pack_info.xml
}
message CustomGiftInfo {
	required uint32 direct_id = 1;
	required uint32 activity_id = 2;
	required string activity_name = 3;
	required string name = 4;
	required uint32 direct_name = 5;
	required uint32 pack_num = 6;
	required uint32 pack_1 = 7;
	required uint32 pack_2 = 8;
	required uint32 pack_3 = 9;
	required uint32 pack_4 = 10;
}
message CustomGiftPackInfo {
	required uint32 id = 1;
	required uint32 group_id = 2;
	required uint32 type = 3;
	required uint32 value = 4;
	required uint32 size = 5;
}


message AUFCelebrationTime {
 required uint32 id = 1;
 required string name = 2;
 required uint32 start_time = 3;
 required uint32 end_time = 4;
 required uint32 present_end = 5;
 required uint32 activity_sum = 6;
 required uint32 state = 7;
 required uint32 card_open = 8;
}

message AUFCelebrationConfig {
	required uint32 id = 1;
	required uint32 activity_id = 2;
	required uint32 start_time = 3;
	required uint32 end_time = 4;
	required string title = 5;
	required string res = 6;
	required string directions = 7;
	required uint32 ads_type = 8;
	required uint32 ads_value = 9;
}

message AUFCelebrationAction {
	required uint32 id = 1;
	required uint32 type = 2;
	required string directions = 3;
	required uint32 limit_activity = 4;
	required uint32 arrange = 5;
	required uint32 task_type = 6;
	required uint32 task_value1 = 7;
	required uint32 task_value2 = 8;
	required uint32 task_value3 = 9;
	required uint32 is_select = 10;
	required uint32 type_1 = 11;
	required uint32 value_1 = 12;
	required uint32 size_1 = 13;
	required uint32 type_2 = 14;
	required uint32 value_2 = 15;
	required uint32 size_2 = 16;
	required uint32 type_3 = 17;
	required uint32 value_3 = 18;
	required uint32 size_3 = 19;
	required uint32 type_4 = 20;
	required uint32 value_4 = 21;
	required uint32 size_4 = 22;
}

message AUFCelebrationArea {
	required uint32 id = 1;
	required uint32 area = 2;
	required uint32 grid = 3;
	required uint32 type = 4;
	required uint32 value = 5;
	required uint32 size = 6;
	required uint32 cost_type = 7;
	required uint32 cost_value = 8;
	required uint32 cost_size = 9;
}

message AUFCelebrationShop {
	required uint32 id = 1;
	required uint32 tags = 2;
	required string limit_time = 3;
	required uint32 type = 4;
	required uint32 value = 5;
	required uint32 size = 6;
	required uint32 price_type = 7;
	required uint32 price = 8;
	required uint32 extra_type = 9;
	required uint32 extra_value = 10;
	required uint32 extra_size = 11;
	required uint32 extra_type2 = 12;
	required uint32 extra_value2 = 13;
	required uint32 extra_size2 = 14;
	required uint32 extra_type3 = 15;
	required uint32 extra_value3 = 16;
	required uint32 extra_size3 = 17;
	required uint32 extra_type4 = 18;
	required uint32 extra_value4 = 19;
	required uint32 extra_size4 = 20;
	required uint32 extra_type5 = 21;
	required uint32 extra_value5 = 22;
	required uint32 extra_size5 = 23;
	required uint32 discount = 24;
	required uint32 arrange = 25;
	required uint32 level_min = 26;
	required uint32 level_max = 27;
	required uint32 time_self = 28;
}

message AUFItemAdd {
	required uint32 id = 1;
	required uint32 item_type = 2;
	required uint32 item_value = 3;
	required uint32 is_drop = 4;
	required uint32 destroy_time = 5;
	required uint32 batch_type = 6;
	required string name = 7;
	required uint32 sort_1 = 8;
	required uint32 sort_2 = 9;
	required uint32 res_id = 10;
	required uint32 quality = 11;
	required string directions = 12;
	required uint32 use_type = 13;
	required string tips = 14;
	required uint32 gm = 15;
	required uint32 is_holiday = 16;
	required uint32 is_test = 17;
	required uint32 use_level = 18;
  required uint32 if_open = 19;
}

message AUFItemBoxAdd {
	required uint32 id = 1;
	required uint32 item_id = 2;
	required uint32 num = 3;
	required uint32 choice_type_1 = 4;
	required uint32 choice_value_1 = 5;
	required uint32 choice_size_1 = 6;
	required uint32 choice_type_2 = 7;
	required uint32 choice_value_2 = 8;
	required uint32 choice_size_2 = 9;
	required uint32 choice_type_3 = 10;
	required uint32 choice_value_3 = 11;
	required uint32 choice_size_3 = 12;
	required uint32 choice_type_4 = 13;
	required uint32 choice_value_4 = 14;
	required uint32 choice_size_4 = 15;
    required uint32 choice_type_5 = 16;
	required uint32 choice_value_5 = 17;
	required uint32 choice_size_5 = 18;
    required uint32 choice_type_6 = 19;
	required uint32 choice_value_6 = 20;
	required uint32 choice_size_6 = 21;
    required uint32 choice_type_7 = 22;
	required uint32 choice_value_7 = 23;
	required uint32 choice_size_7 = 24;
    required uint32 choice_type_8 = 25;
	required uint32 choice_value_8 = 26;
	required uint32 choice_size_8 = 27;
}

message AUFDropInfoAdd {
	required uint32 id = 1;
	required string name = 2;
	required string directions = 3;
	required uint32 res_id = 4;
	required uint32 quality = 5;
	required uint32 big_type = 6;
	required uint32 type_1 = 7;
	required uint32 value_1 = 8;
	required uint32 min_num_1 = 9;
	required uint32 max_num_1 = 10;
	required uint32 probability_1 = 11;
	required uint32 type_2 = 12;
	required uint32 value_2 = 13;
	required uint32 min_num_2 = 14;
	required uint32 max_num_2 = 15;
	required uint32 probability_2 = 16;
	required uint32 type_3 = 17;
	required uint32 value_3 = 18;
	required uint32 min_num_3 = 19;
	required uint32 max_num_3 = 20;
	required uint32 probability_3 = 21;
	required uint32 type_4 = 22;
	required uint32 value_4 = 23;
	required uint32 min_num_4 = 24;
	required uint32 max_num_4 = 25;
	required uint32 probability_4 = 26;
	required uint32 type_5 = 27;
	required uint32 value_5 = 28;
	required uint32 min_num_5 = 29;
	required uint32 max_num_5 = 30;
	required uint32 probability_5 = 31;
	required uint32 config_min_num_1 = 32;
	required uint32 config_max_num_1 = 33;
	required uint32 config_min_num_2 = 34;
	required uint32 config_max_num_2 = 35;
	required uint32 config_min_num_3 = 36;
	required uint32 config_max_num_3 = 37;
	required uint32 config_min_num_4 = 38;
	required uint32 config_max_num_4 = 39;
	required uint32 config_min_num_5 = 40;
	required uint32 config_max_num_5 = 41;
	required uint32 show = 42;
}

message ShopScoreInfo {
  required uint32 id = 1;
  required string name = 2;
  required uint32 shop = 3;
  required uint32 tab = 4;
  required uint32 level = 5;
  required uint32 type = 6;
  required uint32 value = 7;
  required uint32 size = 8;
  required uint32 price_type = 9;
  required uint32 price = 10;
  required uint32 extra_type = 11;
  required uint32 extra_value = 12;
  required uint32 extra_size = 13;
  required uint32 extra_type2 = 14;
  required uint32 extra_value2 = 15;
  required uint32 extra_size2 = 16;
  required uint32 extra_type3 = 17;
  required uint32 extra_value3 = 18;
  required uint32 extra_size3 = 19;
  required uint32 num_ban_type = 20;
  required uint32 vip0_num = 21;
  required uint32 vip1_num = 22;
  required uint32 vip2_num = 23;
  required uint32 vip3_num = 24;
  required uint32 vip4_num = 25;
  required uint32 vip5_num = 26;
  required uint32 vip6_num = 27;
  required uint32 vip7_num = 28;
  required uint32 vip8_num = 29;
  required uint32 vip9_num = 30;
  required uint32 vip10_num = 31;
  required uint32 vip11_num = 32;
  required uint32 vip12_num = 33;
  required uint32 vip13_num = 34;
  required uint32 vip14_num = 35;
  required uint32 vip15_num = 36;
  required uint32 auction_id = 37;
  required uint32 price_add_id = 38;
  required uint32 arrange = 39;
  required uint32 is_true = 40;
  required uint32 show_ban_type = 41;
  required uint32 show_ban_value = 42;
  required uint32 buy_ban_type = 43;
  required uint32 buy_ban_value = 44;
  required string direction = 45;
  required uint32 pre_price = 46;
  required uint32 sell_open_time = 47;
  required uint32 sell_close_time = 48;
  required uint32 discount = 49;
}

message C2S_WorldWarQueryUserPos {
  required uint64 sid = 1;
  required uint32 uid = 2;
  required uint32 type = 3;
}

message S2C_WorldWarQueryUserPos {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  required uint32 type = 4;
  optional CrossUser user = 5;
  optional WorldWarDefense defense = 6;
  optional uint32 x = 7;
  optional uint32 y = 8;
  optional uint32 city_id = 9;
}

message C2S_QueryCorpAllianceInfo {
  required uint32 id = 1;
  required uint32 type = 2;
}

message S2C_QueryCorpAllianceInfo {
  required uint32 ret = 1;
  required uint32 type = 2;
  optional CorpAllianceInfo info = 3;
}

//留言板
message C2S_GetCorpAllianceForeignMsgBoard {
        required uint64 ts = 1; //毫秒时间戳, 0-全部 N-获取最新
}

message S2C_GetCorpAllianceForeignMsgBoard {
        required uint32 ret = 1;
        optional uint64 top = 2;        //置顶
        repeated AllianceMsgBoardContent contents = 3;
}

message C2S_CorpAllianceForeignMsgBoardOp {
        required uint32 op = 1;
        optional string content = 2;
        optional string voicemail_id = 3;
        optional uint32 voicemail_length = 4; //时长
        optional uint64 ts = 5;
        required uint32 alliance_id = 6;
}

message S2C_CorpAllianceForeignMsgBoardOp {
        required uint32 ret = 1;
        required uint32 op = 2;
        optional AllianceMsgBoardContent content = 3;
}

//广播最新的操作
message S2C_CorpAllianceForeignMsgBoardOpBroadCast {
        required uint32 op = 1;
        required AllianceMsgBoardContent content = 2;
}

message S2C_GetResource {
  repeated Resource resources = 1;
}

message C2S_GetViceFormationInfo {
}

message ViceFormationPos {
	required uint32 pos = 1;	//位置
	required uint32 kid = 2;
	required uint32 state = 3;	//0-未开启 1-开启
}
message S2C_GetViceFormationInfo {
	required uint32 ret = 1;
	repeated ViceFormationPos poss = 2;
}

message C2S_SetViceFormationPos {
	required uint32 pos = 1;
	required uint32 kid = 2;
}

message S2C_SetViceFormationPos {
	required uint32 ret = 1;
	required uint32 pos = 2;
	required uint32 kid = 3;
}

message WorldWarTeamTarget {
  required uint32 type = 1; //营帐:1，怪物:2，玩家:3。。。
  required uint32 x = 2;
  required uint32 y = 3;
  required uint64 id = 4;
  optional uint64 sid = 5; //如果目标是玩家的话，有sid
  optional uint32 level = 6; //如果是怪物的话，需要带等级
  optional CrossSingleUser user = 7; //如果是玩家，则需要发送crossuser
}

message WorldWarteamUserReport {
  required CrossUser    user = 1;
  required bytes        report = 2;
  optional uint32       battle_result = 3;
  optional uint32       robed = 4;
}

message WorldWarTeamReport {
  required uint64                   team_id = 1;
  repeated WorldWarteamUserReport   reports=2;
  required WorldWarTeamTarget       target = 3;
  optional uint32                   left_defense = 4;
}

message WorldWarTeamMember {
  required CrossUser user = 1;
  required uint32 pos = 2; //阵型里面的位置1-15
  optional bool is_leader = 3;
  optional bool is_npc = 4;
  optional uint32  x = 5;
  optional uint32  y = 6;
  optional bool is_ready = 7;
  optional uint32 unlock_level = 8;
}

message WorldWarTeam {
  required uint64 id = 1; //用创建时间戳纳秒做id
  required uint32 create_time = 2;
  optional WorldWarTeamTarget target = 3;
  repeated WorldWarTeamMember members = 4;
  required uint32 formation = 5; //阵型类型
  required uint32 formation_level = 6; //阵型等级
  optional uint32 update_time = 7;
  required uint32 leader_x = 8;
  required uint32 leader_y = 9;
  optional uint32 team_status = 10; //队伍状态，0 普通状态，1 副本
  optional uint32 open_state = 11;
  optional uint32 fight_limit = 12; //战力要求，单位：亿
}

message S2C_WorldWarTeamMove {
  optional uint64  team_id = 1;
  optional WorldWarMapCell target = 2;
  repeated WorldWarMapCell members = 3;
}

message C2S_WorldWarTeamReady {
  required uint64  team_id = 1;
  required bool    ready = 2;
}

message S2C_WorldWarTeamReady {
  required uint32 ret = 1;
}

message S2C_WorldWarTeamBossStart {
  required uint32 ret = 1;
}

message BossActPos {
  optional uint32 x = 1;
  optional uint32 y = 2;
  optional uint32 res = 3;
}

message TeamBossAct {
  optional uint32  id = 1;
  optional uint32  act_type = 2; //1 预伤害技能，2 伤害技能 3 预召唤  4 召唤小怪   6 变身
  optional uint32  act_value = 3; // 技能id   如果type==6，则value表示第几阶段
  repeated BossActPos pos_list = 4;
}

message TeamBossResult {
  optional uint64  sid       = 1;
  optional uint32  uid       = 2;
  optional uint32  cut_def    = 3; //打掉的boss血量
  optional uint32  drop_def   = 4; //累计承受的伤害
  optional uint32  repair_def = 5; //修复的数量
  optional uint32  reborn     = 6; //重生次数
  optional uint32  harm       = 7; //伤害百分比 * 100
}

message C2S_WorldWarTeamBossInfo {
  required uint64 team_id = 1;
}

message S2C_WorldWarTeamBossInfo {
  required uint32 ret = 1;
  required uint64 team_id = 2;
  repeated WorldWarMapCell cells = 3;
  repeated TeamBossAct boss_acts = 4;
  optional uint32 start_time = 5;
  repeated TeamBossResult results = 6;
  optional uint32 boss_state = 7;
}

message C2S_WorldWarTeamSetLestenState {
  required uint32 state = 1; // 0 不接收， 1 接收
}

message S2C_WorldWarTeamSetLestenState {
  required uint32 ret = 1;
  required uint32 state = 2;
}

message C2S_WorldWarTeamSetState {
  required uint32 state = 1; // 0 开放， 1 不开放，如果 state_type==2,则对应内容为限制战力
  required uint32 state_type = 2; //1  是否开放， 2， 战力限制
}

message S2C_WorldWarTeamSetState {
  required uint32 ret = 1;
  optional uint32 state = 2;
  optional uint32 state_type = 3;
}

message S2C_WorldWarTeamBossEnd {
  required uint32 ret = 1;
  repeated TeamBossResult results = 2;
  optional bool   win = 3;
  optional uint32 used_time = 4;
  repeated Award    awards = 5;
  optional bool   is_happy = 6;//是否暴双
}

message C2S_WorldWarTeamBossGetUserRank {
  required uint32 rank_type = 1;
  required uint32 boss_type = 2;
}

message S2C_WorldWarTeamBossGetUserRank {
  required uint32 ret = 1;
  optional uint32 rank_type = 2; //1 战区， 2， 全服
  optional uint32 boss_type = 3; //异兽类型
  repeated CrossUser users = 4; //sp1, sp2,sp3 分别表示 难度，用时，伤害输出
}

message C2S_WorldWarTeamAttactBoss {
  required uint32 boss_id = 1;
  required uint32 boss_list_id = 2; // boss唯一id
}

message S2C_WorldWarTeamAttactBoss {
  required uint32 ret = 1;
  required bool   result = 2;
  required uint32  dec_defense = 3;
  optional uint32 next_attact_time = 4;
}

message C2S_WorldWarTeamBossUserMove {
  required uint32 x = 1;
  required uint32 y = 2;
}

message S2C_WorldWarTeamBossUserMove {
  required uint32 ret = 1;
}

message S2C_WorldWarTeamBossCellChange {
  required uint32 ret = 1;
  repeated WorldWarMapCell cells = 2;
}


message S2C_WorldWarTeamBossAct {
  repeated TeamBossAct boss_acts = 1;
}

message C2S_WorldWarTeamStatus {
}

message S2C_WorldWarTeamStatus {
  required uint32 ret = 1;
  optional WorldWarTeam team = 2;
  optional bool left = 3; //之前有队伍，现在离开了
  optional uint32 leave_reason = 4;
  optional bool is_boss_start = 5;
  optional bool is_boss_end  = 6;
}

message C2S_WorldWarTeamCreate {
  optional WorldWarTeamTarget target = 1;
}

message S2C_WorldWarTeamCreate {
  required uint32 ret = 1;
}

message C2S_WorldWarTeamChangeTarget {
  required WorldWarTeamTarget target = 1;
}

message S2C_WorldWarTeamChangeTarget {
  required uint32 ret = 1;
}

message C2S_WorldWarTeamList {
}

message S2C_WorldWarTeamList {
  required uint32 ret = 1;
  repeated WorldWarTeam teams = 2;
}

message C2S_WorldWarTeamJoin {
  required uint64 team_id = 1;
  optional bool   is_invite = 2;
}

message S2C_WorldWarTeamJoin {
  required uint32 ret = 1;
  optional bool   is_invite = 2;
}

message C2S_WorldWarTeamInvite {
  required uint64 sid = 1;
  required uint32 uid = 2;
}

message S2C_WorldWarTeamInvite {
  required uint32 ret = 1;
  optional uint64 sid = 2;
  optional uint32 uid = 3;
}

message S2C_WorldWarTeamInvited {
  required WorldWarTeam team=1;
  required CrossUser invitor = 2;
}

message C2S_WorldWarTeamInviteAll {
}

message S2C_WorldWarTeamInviteAll {
  required uint32 ret = 1;
}

message C2S_WorldWarTeamKick {
  required uint64 sid = 1;
  required uint32 uid = 2;
}

message S2C_WorldWarTeamKick {
  required uint32 ret = 1;
}

message C2S_WorldWarTeamLeave {
}

message S2C_WorldWarTeamLeave {
  required uint32 ret = 1;
}

message C2S_WorldWarTeamChangeFormation {
  required uint32 formation = 1;
  required uint32 formation_level = 2;
}

message S2C_WorldWarTeamChangeFormation {
  required uint32 ret = 1;
}

message C2S_WorldWarTeamChangePos {
  required uint32 pos1 = 1;
  required uint32 pos2 = 2;
}

message S2C_WorldWarTeamChangePos {
  required uint32 ret = 1;
}

message TeamMemberAttactTentResult {
  optional  CrossUser               mem = 1;
  optional  uint32                  battle_result = 2;
  optional  uint32                  robed = 3;
  optional  uint64                  report_id = 4;
}

message C2S_WorldWarTeamAttackTent {
  required uint32  attack_type = 1; //1 单人挑战，2 队伍挑战，队伍挑战必须是队长
  optional WorldWarTeamTarget target=2;
}

message S2C_WorldWarTeamAttackTent {
  required uint32 ret = 1;
  optional uint32  attack_type = 2;
  optional WorldWarTeamTarget target=3;
  repeated TeamMemberAttactTentResult results = 4;
  optional uint64   report_id = 5;
  optional uint32   tent_attack_left_times = 6;  //剩余奖励次数
  optional uint32   unlock_tent_level  = 7;  //解锁营帐等级
  repeated Award    awards = 8;
  optional uint32   left_defense = 9;
  optional uint64   team_id = 10;
  optional uint32   tired_count = 11;
  optional uint32   tent_attack_total_times =12;
}

message WorldWarTeamLog {
  required CrossUser leader = 1; //队长
  required uint32 time = 2; //时间
  required uint32 type = 3; //类型，1创建，2加入，3退出，4被踢, 5解散, 6攻打营帐，7，攻打玩家
  optional string target_name = 4;
  optional string target_sname = 5;
  optional uint32 defense = 6; //攻打削掉的城防
  required uint64 team_id = 7;
  optional uint32 battle_result = 8;
  optional CrossUser target = 9;
}

message C2S_WorldWarTeamReport {
  required uint64 team_id = 1;
}
message S2C_WorldWarTeamReport {
  required uint64 team_id = 1;
  repeated TeamMemberAttactTentResult results = 2;
  optional WorldWarTeamTarget target=3;
  optional uint32   left_defense = 4;
  required uint32   ret = 5;
}

message C2S_WorldWarTeamUserReport {
  required uint64 team_id = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
}

message S2C_WorldWarTeamUserReport {
  required uint64 team_id = 1;
  required uint64 sid = 2;
  required uint32 uid = 3;
  required uint64 report_id = 4;
  required uint32 ret = 5;
}

message C2S_WorldWarTeamLog {
  required uint32 last_log_time = 1;
}

message S2C_WorldWarTeamLog {
  required uint32 ret = 1;
  repeated WorldWarTeamLog logs = 2;
}

message WWTBForGameHelperRedHit {
  optional uint32 gui_times = 1; //异兽-玄武-次数
  optional uint32 gui_level = 2; //异兽-玄武-最大通关等级
  optional uint32 kun_times = 3; //异兽-鲲-次数
  optional uint32 kun_level = 4; //异兽-鲲-最大通关等级
  optional uint32 zhu_times = 5; //异兽-烛龙-次数
  optional uint32 zhu_level = 6; //异兽-烛龙-最大通关等级
}

message C2S_WorldWarTeamBossAwardForGameHelper {
  required uint32 boss_id           = 1; //异兽副本的id
  required uint32 game_helper_id    = 2; //游戏助手ID
}

message S2C_WorldWarTeamBossAwardForGameHelper {
  required uint32  ret       = 1;
  required uint32  boss_id   = 2; //异兽副本的id
  repeated Award   awards    = 3; //奖励列表
  optional bool    is_happy  = 4; //是否暴双
}

message Formation {
  optional uint32  type = 1;
  optional uint32  id = 2;
}

message C2S_LoadFormationInfo {
}

message S2C_LoadFormationInfo {
  required uint32  ret = 1;
  repeated Formation  formations = 2;
}

message C2S_UpgradgeFormation {
  optional uint32  formation_id = 1;
}

message S2C_UpgradgeFormation {
  required uint32  ret = 1;
  optional uint32  formation_id = 2;
}

message Rune {
  required uint32 id = 1; //符文ID
  required uint32 num = 2;  //数量
}

message RuneBook {
  required uint32 id = 1; //符文书ID
  repeated uint32 runes = 2; //装备符文ID
}

message C2S_UpgrageRune {
  required uint32 id = 1; //符文ID
  required uint32 book_id = 2; //符文书ID
  required uint32 pos = 3; //孔位
}

message S2C_UpgrageRune {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 book_id = 3;
  required uint32 pos = 4;
}

message C2S_RebornRune {
  required uint32 id = 1; //符文ID
  required uint32 num = 2; //重生符文数量
}

message S2C_RebornRune {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 num = 3;
  repeated Award awards = 4;
}

message C2S_RecycleRune {
  repeated uint32 id = 1; //符文ID
  repeated uint32 num = 2; //分解符文数量
}

message S2C_RecycleRune {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  repeated uint32 num = 3;
  repeated Award awards = 4;
}

message C2S_UnlockRuneBook {
  required uint32 id = 1; //符文书ID
}

message S2C_UnlockRuneBook {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_EquipRune {
  required uint32 id = 1; //符文书ID
  required uint32 pos = 2; //符文书孔位
  required uint32 rune_id = 3; //符文ID(传0为卸载)
}

message S2C_EquipRune {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 pos = 3;
  required uint32 rune_id = 4;
}

message S2C_GetRune {
  repeated Rune runes = 1;
}

message S2C_GetRuneBook {
  repeated RuneBook rune_books = 1;
}

//4.5.0 新活动向导
//向导任务
message GuideTask {
	required uint32 id = 1;		//行为id
	required uint32 progress = 2;	//行为次数
}

//获取某一功能的任务信息
message C2S_GuideTaskInfo {
	required uint32 id = 1;		//玩法功能id
}

message S2C_GuideTaskInfo {
	required uint32 ret = 1;
	required uint32 id = 2;
	optional bool checked = 3;		//是否已领取
	repeated GuideTask info = 4;	//任务信息
}

//领取任务奖励
message C2S_GuideCheckTask {
	required uint32 id = 1;			//领取的任务(玩法功能id)
}

message S2C_GuideCheckTask {
	required uint32 ret = 1;
	required uint32 id = 2;			//返回客户端发来的id
}

//单独的红点信息
message C2S_GuideRedHint {
}

message S2C_GuideRedHint {
	required uint32 ret = 1;
	repeated uint32 red_hint = 2;
}

message TalkOverInfo {
	required uint32 uid = 1;
	optional uint32 time = 3;
	optional uint32 up = 4;
	optional string name = 5;
	optional string msg = 6;
}

//获取讨论板信息
message C2S_TalkOverBroadInfo {
	required uint32 id = 1;		//玩法功能ID
}

message S2C_TalkOverBroadInfo {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated TalkOverInfo info = 3;		//非热评玩家的发言
	repeated TalkOverInfo tops = 4;		//热评榜玩家的发言
	required uint32 count = 5;				//剩余点赞数
}

//玩家发布信息
message C2S_TalkOverBroadAdd {
	required uint32 id = 1;			//板块id 玩法功能id
	required string msg =2;
}

message S2C_TalkOverBroadAdd {
	required uint32 ret = 1;
	required uint32 id = 2;
}

//删除自己的发言
message C2S_TalkOverBroadDel {
	required uint32 id = 1;     //板块id 玩法功能id
}

message S2C_TalkOverBroadDel {
	required uint32 ret = 1;
	required uint32 id = 2;
}

//点赞
message C2S_TalkOverBroadUp {
	required uint32 id = 1;	     //板块id 玩法功能id
	required uint32 uid = 3;
}

message S2C_TalkOverBroadUp {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 uid = 3;
	required uint32 count = 4;
}

message FrameInfo {
  required uint32 id = 1;
  required uint32 time = 2;
}

message ChatBubbleInfo {
  required uint32 id = 1;
  required uint32 time = 2;
}

//获取叛军boss扩展信息
message C2S_RebelBossCrossInfo {
}

message RebelBossCrossUser {
 	required uint32 pos = 1;
 	required CrossUser user = 2;
	required uint32 cd = 3;
}
message S2C_RebelBossCrossInfo {
	required uint32 ret = 1;
 	repeated RebelBossCrossUser users = 2;			//台上的玩家
 	optional uint32 state = 3;                  //0:活动关闭 1:活动期间
	optional uint32 next_time = 4;              //下次结算时间
	repeated uint32 pos_cd = 5; 								//台子保护时间  时间戳
	optional uint32 cd = 6;											//玩家挑战CD 时间戳
}

//挑战
message C2S_RebelBossCrossChallenge {
 	required uint32 pos = 1;	//挑战位置
}

message S2C_RebelBossCrossChallenge {
	required uint32 ret = 1;
	optional uint32 pos = 2;	//挑战位置
	optional uint64 report_id = 3;//战报id
	optional uint32 cd = 4; //挑战cd时间戳
}

//是否监听房间信息
message C2S_RebelBossCrossListen {
 	required bool listen = 1;
}

message S2C_RebelBossCrossListen {
	required uint32 ret = 1;
}

//战报数据
message C2S_RebelBossCrossReport {
}

message RebelBossCrossReport {
	required uint32 tp = 1;		//1PVP,2PVE
	required uint32 time = 2;	//时间戳
	optional uint32 att_uid = 3;	//攻击发起者
	optional uint64 att_sid = 4;
	optional string att_name = 5;
	optional uint32 def_uid = 6;	//防御者
	optional uint64 def_sid = 7;
	optional string def_name = 8;
	optional uint32 win = 9;		//1发起者赢,0防御者赢
	optional uint64 harm = 10;		//对boss伤害
//	repeated StringKV kv = 11;
}

message S2C_RebelBossCrossReport {
	required uint32 ret = 1;
	repeated RebelBossCrossReport reports = 2;
}

message S2C_RebelBossCrossHarm {
	required uint32 ret = 1;
	required uint32 pos = 2;
	required uint64 harm = 3;
}
message S2C_RebelBossCrossChallengeCount {
	required uint32 count = 1;
}

message C2S_RebelBossCrossBattleTest {
	required uint32 group = 1;
}

message S2C_RebelBossCrossBattleTest {
	required uint32 ret = 1;
	optional uint64 id = 2;
}

message S2C_SendBattleReportBytes {
	 required uint64 unique_id = 1; //战报唯一id
	 required bytes report_bytes = 2;
	 optional uint32 max_section = 3; //战报分段数量
	 optional uint32 cur_section = 4; //当前分段编号
}

message WorldCupGameInfo {
  optional uint32 id = 1; //比赛ID
  optional uint32 team1 = 2; //主队
  optional uint32 team2 = 3; //客队
  optional uint32 score1 = 4; //主队进球
  optional uint32 score2 = 5; //客队进球
  optional uint32 over = 6; //是否完赛(1为完赛)
}

message WorldCupGuessInfo {
  optional uint32 stage_id = 1; //竞猜轮次
  optional uint32 team = 2; //竞猜球队
  repeated WorldCupGameGuessInfo games = 3; //单场竞猜数据
  repeated uint32 merit_awards = 4; //领取过的成就奖励
}

message WorldCupGameGuessInfo {
  optional uint32 id = 1; //比赛ID
  optional uint32 team = 2; //支持球队
  optional bool is_award = 3; //是否已领奖
}

message C2S_GetWorldCupInfo {
}

message S2C_GetWorldCupInfo {
  required uint32 ret = 1;
  repeated WorldCupGameInfo infos = 2; //比赛场次信息
  optional WorldCupGuessInfo guess_info = 3; //玩家竞猜数据
}

message C2S_WorldCupChampionGuess {
  required uint32 stage_id = 1; //轮次ID
  required uint32 team = 2; //竞猜球队
}

message S2C_WorldCupChampionGuess {
  required uint32 ret = 1;
  optional uint32 stage_id = 2;
  optional uint32 team = 3;
}

message C2S_WorldCupGameGuess {
  required uint32 game_id = 1; //场次ID
  required uint32 team = 2; //竞猜球队
}

message S2C_WorldCupGameGuess {
  required uint32 ret = 1;
  optional uint32 game_id = 2;
  optional uint32 team = 3;
}

message C2S_WorldCupGameAward {
  required uint32 game_id = 1; //场次ID
}

message S2C_WorldCupGameAward {
  required uint32 ret = 1;
  optional uint32 game_id = 2;
}

message C2S_WorldCupGuessMerit {
  required uint32 merit_id = 1; //成就ID
}

message S2C_WorldCupGuessMerit {
  required uint32 ret = 1;
  optional uint32 merit_id = 2;
}

//-- 4.7.0-修罗道场
message C2S_GetShuraFieldInfo {
  required uint32 game_type = 1;
}

message S2C_GetShuraFieldInfo {
	required uint32 ret = 1;
	optional uint32 score = 2; //积分
	optional uint32 rank = 3;	//排名
	optional uint32 rank_type = 4; //1-排名 2-百分比
	optional uint32 level = 5; //段位
	optional uint32 daily_play = 6; //挑战次数
	optional uint32 daily_win = 7; //胜利次数
	repeated uint32 awarded = 9; //每日活跃,已领取奖励
	optional uint32 refresh = 10; //剩余刷新次数
	optional CrossUser self = 11; //自己
	optional uint32 life = 12; //武运值（血量）
	repeated ShuraFieldGrid grids = 13; //格子中的数据
	optional ShuraFieldPK last = 14; //昨日对决
	optional ShuraFieldPK pk = 15; //精英对决
	optional uint32 max_level = 16;	//本赛季最高段位-决定了奖励领取
	repeated uint32 level_awarded = 17; //段位已领取奖励
  optional uint32 gameType = 18; //标识沃野战场和修罗战场
}

message ShuraFieldGrid {
	required uint32 index = 1; //1-4(逆时针)
	required uint32 pos = 2; //位置
	optional CrossUser user = 3; //用户数据
}

message ShuraFieldGridBuff {
	required uint32 index = 1; //1-4(逆时针)
	required uint32 pos = 2; //位置
	required uint32 buff = 3; //buff 
}

message ShuraFieldPKUser {
	optional uint32 index = 1;	//1,2对应左右
	optional CrossUser user = 2;
	optional uint32 beton_num = 3; //支持人数
	optional uint32 group = 4; //阵营 1~4-魏蜀吴群
}
message ShuraFieldPK {
	optional uint32 beton = 1; //0-未竞猜 1,2对应左右
	repeated ShuraFieldPKUser pk = 2; //对决的两个玩家
	optional uint32 win = 3; //赢方
}

message C2S_ShuraFieldChallenge {
	required uint32 index = 1; //1-4(逆时针)
	required uint32 pos = 2; //位置
    required uint32 game_type = 3;
    optional bool skip_battle = 4; //是否跳过战报
}

message S2C_ShuraFieldChallenge {
	required uint32 ret = 1;
	required uint32 index = 2; //1-4(逆时针)
	required uint32 pos = 3; //位置
	optional uint64 unique_id = 4; //战报id
	optional bool is_win = 5; //是否胜利
	optional uint32 life = 6; //武运值（血量）
	optional ShuraFieldGrid del = 7; //删除格子中的数据
	repeated ShuraFieldGrid moves = 8; //移动（更新npc位置）
	optional uint32 score = 9; //积分
	optional uint32 rank = 10;	//排名
	optional uint32 rank_type = 11; //1-排名 2-百分比
	optional uint32 level = 12; //段位
	optional uint32 max_level = 13;	//最高段位
	optional uint32 change_score = 14; //变化分数
	optional bool is_add = 15;	//是否增加 true-增加 false-减少
    optional uint32 self_buff = 16; //自己的buff 沃野战场
    required uint32 game_type = 17; //标识修罗战场和沃野战场
    repeated ShuraFieldGridBuff buffs = 18;
    optional bool skip_battle = 19; //是否跳过战报
}

message C2S_ShuraFieldRefresh {
	required uint32 refresh_type = 1;	//1-主动刷新 4-喝退
  required uint32 game_type = 2;
}

message S2C_ShuraFieldRefresh {
	required uint32 ret = 1;
	optional uint32 refresh_type = 2; //刷新类型 1-主动刷新（更换所有数据，位置不变） 2-挑战后刷新(新增格子npc) 3-系统刷新等同于主动刷新 4-喝退(位置重置，数据不变)
	optional uint32 refresh = 3; //剩余刷新次数
	repeated ShuraFieldGrid grids = 4;
  required uint32 game_type = 5; //标识修罗战场和沃野战场
}

message C2S_GetShuraFieldTaskAward {
	required uint32 id = 1;
  required uint32 game_type = 2;
}

message S2C_GetShuraFieldTaskAward {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated Award awards = 3;//奖励
  required uint32 game_type = 4; //标识修罗战场和沃野战场
}

message C2S_BetOnShuraFieldPK {
	required uint32 beton = 1; //1-左 2-右
}

message S2C_BetOnShuraFieldPK {
	required uint32 ret = 1;
	required uint32 beton = 2; //1-左 2-右
	optional ShuraFieldPK pk = 3;
}

message C2S_ViewShuraFieldPKReport {
}

message S2C_ViewShuraFieldPKReport {
	required uint32 ret = 1;
	optional uint64 unique_id = 2; //战报id
}

message ShuraFieldLog {
	required CrossUser enemy = 1;
	required uint64 time = 2;	//秒
	required bool active = 3;	//主动
	required bool win = 4;
	required int32 score = 5;
	required uint32 total_score = 6;
	optional uint32 title = 7;	//段位
  optional bool title_change = 8;	//段位变化
	optional uint64 battle_id = 9;
}

message C2S_GetShuraFieldLog {
	required uint64 last_log_battle_id = 1;
  required uint32 game_type = 2;
}

message S2C_GetShuraFieldLog {
	required uint32 ret = 1;
	repeated ShuraFieldLog logs = 2;
  required uint32 game_type = 3; //标识修罗战场和沃野战场
}

message C2S_GetShuraFieldLevelAward {
	required uint32 id = 1;
  required uint32 game_type = 2;
}

message S2C_GetShuraFieldLevelAward {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated Award awards = 3;//奖励
  required uint32 game_type = 4; //标识修罗战场和沃野战场
}

message C2S_GetShuraFieldBriefInfo {
}

message S2C_GetShuraFieldBriefInfo {
	required uint32 ret = 1;
	required uint32 life = 2;
	required bool award_flag = 3;	//true-有奖励可以领取
  required uint32 game_type = 4; //1:修罗战场 2:沃野战场
}

//4.7.50 联动拼图
message JigsawFrag {
	required uint32 static = 1;	//碎片状态 0 未激活， 1 激活未领奖， 2已领将
	required uint32 id = 2;	//碎片id
}

message C2S_JigsawInfo {

}

message S2C_JigsawInfo {
	required uint32 ret = 1;
	repeated uint32 share = 2;//已领取的分享奖励
	repeated JigsawFrag frags = 3; //碎片状态
}

message C2S_JigsawOp {
	required uint32 id = 1;
}

message S2C_JigsawOp {
	required uint32 ret = 1;
	optional uint32 id = 2;
	optional JigsawFrag frag = 3;
	repeated Award awards = 4;
}

message C2S_JigsawShare {
	required uint32 id = 1;
}

message S2C_JigsawShare {
	required uint32 ret = 1;
	optional uint32 id = 2;
	repeated Award awards = 3;
}

//4.8.0 无上秘境
message MysteryMonsterRecord {
	optional uint32 win = 1;
	optional uint32 sum = 2;
}

message MysteryStage {
  required uint32 id = 1;	//关卡id
  repeated uint32 pass = 2;	//通过的位置
	repeated MysteryMonsterRecord record = 3; //关卡中每个怪的胜负情况
}

message RandomMonsterTeam {
  required uint32 team_id = 1;
  repeated uint32 monster = 2;
  repeated uint32 horse = 3;
  repeated uint32 fameknight = 4;
  optional uint32 pet = 5;
	repeated uint32 Bingfu = 6;
	repeated uint32 Passive = 7;
	repeated uint32 Militarist = 8;
	optional uint32 is_knight = 9; //0--monster_info 1--knight_info  的 id
}

//拉取活动信息
message C2S_MysteryInfo {
}

message S2C_MysteryInfo {
	required uint32 ret = 1;
	optional uint32 next = 2;	//结束倒计时
	optional uint32 coin = 3;	//代币
	optional uint32 score = 4; 	//分数
	optional uint32 rank = 5; 	//排名
	repeated uint32 targets = 6;//已领取进度奖励
	optional uint32 chapter = 7;//当前章节
  optional uint32 challenge_count = 8; //剩余挑战次数
  optional uint32 purchase_count = 9;
	optional uint32 help_count = 10;
//	repeated MysteryStage stages = 11;//玩家关卡信息，只有最高关的数据
	optional uint32 max_stage = 12;
	optional uint32 static = 13;
	repeated uint32 watcher = 14; //守关人形象id
	optional uint32 id = 15; //活动第几期
	optional uint32 fast_challenge = 16; //0可以快速，非0，不能快速挑战
}

//挑战协议
message C2S_MysteryChallenge {
 	required uint32 stage_id = 1;	//关卡id，0代表守关人
 	required uint32 pos = 2;		//挑战位置0金，1水，2木，3火，4土
 	required uint32 type = 3; 		//0,自己打，1 本服好友，2跨服好友，3军团战友
 	optional uint64 sid = 4;		//助战者sid
 	optional uint32 uid = 5;		//助战者uid
	required bool isAward = 6;	//是否要奖励、扣次数
}

message S2C_MysteryChallenge {
 	required uint32 ret = 1;
 	optional uint32 stage_id = 2;
 	optional uint32 pos = 3;
	optional uint32 next = 4;	//结束倒计时
	optional uint32 coin = 5;	//代币
	optional uint32 score = 6; 	//分数
	optional uint32 rank = 7; 	//排名
	optional uint32 chapter = 8;//当前章节
//	repeated MysteryStage stages = 9;//玩家关卡信息
 	optional uint32 challenge_count = 10; //剩余挑战次数
	optional uint32 help_count = 11;
	optional uint64 report_id = 12;
	optional uint32 max_stage = 13;
	repeated Award compose_award = 14;
	optional bool isAward = 15;
	optional uint32 award_coin = 16;
	optional uint32 award_score = 17;
	optional bool pass = 18;
}

message C2S_MysteryChallengeFast {
 	required uint32 stage_id = 1;	//关卡id，251以后
 	required uint32 pos = 2;		//挑战位置0金，1水，2木，3火，4土
}

message S2C_MysteryChallengeFast {
 	required uint32 ret = 1;
 	optional uint32 stage_id = 2;
 	optional uint32 pos = 3;
	optional uint32 monster = 4;
	optional bool battle_win = 5;	//本次战斗胜负
	optional bool over = 6;				//true,快速挑战结束
	optional uint32 max_stage = 7; //已通关最大关
}

//进度奖励领取
message C2S_MysteryReward {
  required uint32 id = 1;
}

message S2C_MysteryReward {
  required uint32 ret = 1;
  optional uint32 id = 2;
  repeated Award awards = 3;
}

//进度奖励领取
message C2S_MysteryRewardOneKey {
}

message S2C_MysteryRewardOneKey {
  required uint32 ret = 1;
  repeated uint32 ids = 2;		//领取了哪些任务的奖励
  repeated Award awards = 3;	//获得的奖励
}

//购买次数
message C2S_MysteryPurchaseCount{
	required uint32 num = 1;
}

message S2C_MysteryPurchaseCount{
	required uint32 ret = 1;
	optional uint32 num = 2;
	optional uint32 challenge_count = 3;
	optional uint32 purchase_count = 4;
}

//查看怪物信息
message C2S_MysteryMonsterInfo {
  required uint32 id = 1;
}

message S2C_MysteryMonsterInfo {
  required uint32 ret = 1;
  required uint32 id = 2;
	optional MysteryStage stage = 3; //玩家挑战情况
  repeated RandomMonsterTeam team = 4;
}

message C2S_MysteryChapterMonsterInfo {
	required uint32 chapter_id = 1;
}

message S2C_MysteryChapterMonsterInfo {
	required uint32 ret = 1;
	optional uint32 chapter_id = 2;
	repeated uint32 monsters = 3;
}

message C2S_MysteryShopInfo {
}

message MysteryShop {
	required uint32 id = 1;
	required uint32 count = 2; 	//已购买次数
}
message S2C_MysteryShopInfo {
	required uint32 ret = 1;
	repeated MysteryShop data = 2;
}

message S2C_MysteryCoinInfo {
	required uint32 coin = 1;
}

message C2S_WorldWarAttackMonsterOneKey {
  required uint32 monster_id = 1;
  required uint32 monster_level = 2;
  required uint32 cnt = 3;
}

message S2C_WorldWarAttackMonsterOneKey {
  required uint32 ret = 1;
  optional uint32 campaign_point = 2;
  optional uint32 campaign_recover_tm = 3;
  optional uint32 daily_used_campaign_point = 4;
  repeated Award awards = 5;
  optional uint32 monster_id = 6;
  optional uint32 cost_campaign_point = 7; //消耗的总出征令
  optional uint32 cnt = 8;
  optional uint32 win_cnt = 9;
}

message C2S_WorldWarAttackSummonMonsterOneKey {
  required uint32 monster_x = 1;
  required uint32 monster_y = 2;
  required uint32 cnt = 3;
}

message S2C_WorldWarAttackSummonMonsterOneKey {
  required uint32 ret = 1;
  optional uint32 attack_summon_monster_cnt = 2; //今天还剩的攻打次数
  optional uint32 daily_used_campaign_point = 3; //今天已经使用的出征令
  repeated Award awards = 4;
  optional uint32 campaign_point = 5;
  optional uint32 campaign_recover_tm = 6;
  optional uint64 harm = 7;
  optional uint32 cnt = 8; //请求攻打的次数
  optional uint32 real_cnt = 9; //实际攻打的次数
}

message Martial {
  required uint32 id = 1; //武学ID
  required uint32 level = 2; //武学等级
}

message S2C_FlushMartialInfo {
  required uint32 ret = 1;
  repeated Martial martials = 2; //武学
  repeated uint32 talents = 3; //天赋
}

message C2S_UpgradeMartial {
  required uint32 id = 1; //武学ID
  required uint32 level = 2; //目标等级
}

message S2C_UpgradeMartial {
  required uint32 ret = 1;
  optional uint32 id = 2; //武学ID
  optional uint32 level = 3; //目标等级
}

message C2S_UpgradeMartialTalent {
  required uint32 id = 1; //天赋ID
}

message S2C_UpgradeMartialTalent {
  required uint32 ret = 1;
  optional uint32 id = 2; //天赋ID
}

message C2S_ResetMartialTalent {

}

message S2C_ResetMartialTalent {
  required uint32 ret = 1;
}

message C2S_ChangeKnightSkin {
  required uint32 kid = 1; //武将ID
  required uint32 skin_id = 2; //皮肤ID(传0为卸载)
}

message S2C_ChangeKnightSkin {
  required uint32 ret = 1;
  optional uint32 kid = 2;
  optional uint32 skin_id = 3;
}
message S2C_FlushKnightSkinInfo {
  required uint32 ret = 1;
  repeated KnightSkinBook books = 2; //图鉴
  repeated KnightSkin skins = 3; //出阵武将皮肤
}

message C2S_RenewSkin {
  required uint32 book_id = 1; //时装图鉴ID
  required uint32 item_id = 2; //延期道具ID
}

message S2C_RenewSkin {
  required uint32 ret = 1;
  optional uint32 book_id = 2;
  optional uint32 item_id = 3;
}

message C2S_ActiveSkinByItem{
  required uint32 book_id = 1; //时装图鉴ID
  required uint32 item_id = 2; //激活道具ID
}
message S2C_ActiveSkinByItem{
  required uint32 ret = 1;
  optional uint32 book_id = 2;
  optional uint32 item_id = 3;
  repeated Award awards = 4;
}
message  C2S_ChangeKnightVoice {
  required uint32 id = 1; // 音频id
  required uint32 knight_id =2; // 武将id
}
message S2C_ChangeKnightVoice {
  required  uint32 ret = 1;
  required  uint32 id = 2;
  required  uint32 knight_id = 3;
}
message KnightSkinBook {
  required uint32 id = 1; //皮肤图鉴Id
  required uint32 time = 2; //剩余可用时间
}

message KnightSkin {
  required uint32 id = 1; //皮肤图鉴ID
  required uint32 knight_id = 2; //武将ID(对应武将AdvanceCode)
  required uint32 expire_time = 3; //过期时间戳
}

message S2C_WeekUpdateCustomActivity {
  repeated WeekCustomActivity activity = 1;
  repeated CustomActivityQuest quest = 2;
}
message WeekCustomActivity {
  required uint32 act_id = 1; //活动ID
  required uint32 act_type = 2; //活动类型
  //required uint32 icon = 3; //活动图标
  required string title = 4; //活动标题
  required string sub_title = 5; //小标题
  required string desc = 6; //活动描述
  required uint32 preview_time = 7; //活动预览时间
  required uint32 start_time = 8; //活动开始时间
  required uint32 end_time = 9; //活动结束时间
  required uint32 award_time = 10; //活动奖励领取结束时间
  required uint32 vip_level = 11; //活动Vip等级限制
  optional uint32 icon_type = 12;
  optional uint32 icon_value = 13;
  optional uint32 role_icon = 14;
  optional uint32 lvl_min = 15;
  optional uint32 lvl_max = 16;
  optional uint32 cycle = 17;
  optional uint32 yyb = 18;
  optional uint32 ser_time = 19;
}
message C2S_ActiveHomeSkin {
  required uint32 skin_id = 1; //要激活的官邸皮肤ID
  required uint32 item_id = 2; //激活需要消耗的道具ID
}
message S2C_ActiveHomeSkin {
  required uint32 ret = 1;
  optional uint32 skin_id = 2;
  optional uint32 left_time = 3;
}
message C2S_ChangeHomeSkin {
  required uint32 skin_id = 1; //要激活的官邸皮肤ID
}
message S2C_ChangeHomeSkin {
  required uint32 ret = 1;
  optional uint32 skin_id = 2; //要换的官邸皮肤ID
  optional uint32 skin_ts = 3; //到期时间戳
}

message S2C_UpdateHomeSkin {
  required uint32 ret = 1;
  repeated HomeSkin skins = 2; //变化的图鉴信息
  optional uint32 skin_id = 3;  //正在使用的皮肤
  optional uint32 skin_tm = 4;  //正在使用的皮肤到期时间戳
}

//
//message AncientPvpSchedule {
//	repeated AncientPvpActivity activity = 1;
//}
//
//message AncientPvpActivity {
//	required AncientPvpInfo info = 1;
//	repeated AncientPvpDetail details = 2;
//}
//
// message AncientPvpDetail {
//	required uint32 round = 1;//1报名 2海选 3依次
//	required bool has_bet = 2;//是否有赌注
//	required uint32 start_time = 3;//总的开始时间
//	required uint32 view_time = 4;//预览结束时间
//	required uint32 pre_time = 5;//准备开始时间
//	required uint32 battle_time = 6;//战斗开始时间
//	required uint32 end_time = 7;//总的结束时间
//}
//
//message AncientPvpArena {
//	required uint32 flag = 1;	//坑位
//	optional uint64 sid = 2;    //sid
//	optional uint32 uid = 3;	//uid
//	optional string name = 4;	//名字
//	optional uint32 time = 5;	//玩家进入坑位的时间
//}
//
//message AncientPvpObInfo {
//	required uint32 stage = 1;//哪个场次
//	required uint32 round = 2;//哪轮 海选 OR 1024...
//	required uint32 room_id = 3;//房间IDe
//}

message C2S_GetAncientPvpSchedule {
}

message S2C_GetAncientPvpSchedule {
	required uint32 ret = 1;
	optional AncientPvpSchedule schedule = 2;
}

message C2S_GetAncientPvpBaseInfo {
}

message AncientBetRoleInfo {
	required uint64 sid = 1;
	required uint32 uid = 2;
	required uint32 stage = 3;
	required uint32 cnt = 4;   //投注的次数
    optional CrossUser role = 5;
}
message S2C_GetAncientPvpBaseInfo {
	required uint32 ret = 1;
	optional uint32 has_apply = 2;//0未报名,1报名,2晋级,3未晋级
	optional uint32 stage = 3;//报名的哪个 初级中级高级
    //optional uint32 state = 4;//状态 1报名 2报名完毕 3战斗准备 4战斗 5等待（可以投注），状态先不发,前端可以根据时间算的
    optional uint32 round = 5;//哪一轮 海选啥的
    optional uint32 time = 6;//拉取信息的时间点
	optional uint32 current_attack_buff = 9;
	optional uint32 current_defend_buff = 10;
    //optional bool is_bye = 11;//这个不发了,放在AncientPvpInfo中
    optional uint32 score = 12; //做缓存
    optional uint32 room = 13;  // >0 表示玩家所在的房间号
    optional uint32 pos = 14;  // >0 房间的位置
    optional uint32 ts = 15;  // >0 房间的位置
    optional bool ob = 16;    //是否有观战资格,只有battle状态值才为真
	optional uint32 eatk = 17;  //终极攻击buff鼓舞次数
	optional uint32 edef = 18;  //终极防御buff鼓舞次数
    optional AncientBetRoleInfo frole = 19;  //鲜花投给了谁
    optional AncientBetRoleInfo erole = 20;  //鸡蛋投给了谁
	optional uint32 flower = 21;  //自己收到的鲜花
	optional uint32 egg = 22;  //自己收到的鸡蛋
	optional uint32 field_rank = 23;  //战区排行
    optional uint32 award = 24;    //0表示无奖励领取,1表示已领取奖励,2表示可领参与奖励,3表示可领晋级奖励
    repeated AncientPvpInfo applys = 25;  //报名人数
}

message C2S_GetAncientPvpScheduleInfo {
    required uint32 stage = 1;
}

message S2C_GetAncientPvpScheduleInfo {
    required uint32 ret = 1;
    optional uint32 stage = 2;
	optional AncientPvpInfo info = 3;
}

message C2S_ApplyAncientPvp {
	required uint32 stage = 1; //战场的类型 1:低级 2:中级 3:高级 4:至尊
}

message S2C_ApplyAncientPvp {
	required uint32 ret = 1;
	required uint32 stage = 2;
	optional uint32 num = 3;
}

message C2S_GetAtcAndDefAncientPvp {
}

message S2C_GetAtcAndDefAncientPvp {
	required uint32 ret = 1;
	optional uint32 current_attack_buff = 2; //当前伤害加深
	optional uint32 current_defend_buff = 3; //当前伤害减免
}

message C2S_ApplyAtcAndDefAncientPvp {
	required uint32 apply_type = 1;//1是攻击 2防御
	optional uint32 count = 2;//预留字段 默认每次就+1
}

message S2C_ApplyAtcAndDefAncientPvp{
	required uint32 ret = 1;
	required uint32 apply_type = 2;//1 2 根据策划配置
	optional uint32 count = 3;//预留字段 默认每次就+1
	optional uint32 current = 4;//返回当前鼓舞次数
}

message C2S_GetAncientPvpRole {
}

message S2C_GetAncientPvpRole {
	required uint32 ret = 1;
	optional uint32 round = 2;//哪轮 海选 OR 1024...
	optional uint32 stage = 3;//哪个赛场
	optional uint32 room = 4;//房间ID
	optional uint32 score = 5;
}

message C2S_AncientWaitInit {
}

message S2C_AncientWaitInit {
	required uint32 ret = 1;
	optional uint32 stage = 2;			//战场
	optional uint32 rank = 3;			//排名
	optional uint32 score = 4;			//积分
	optional uint32 battle_count = 5;	//战斗次数
	optional uint32 win_count = 6;		//胜利次数
	optional bool has_award = 7;		//是否领取过晋级奖励
	optional CrossUser flower_award = 8;//是否领取过投注奖励
	optional CrossUser egg_award = 9;	//有就代表有奖励
	optional uint32 room_rank = 10;		//room stage rank 客户端通过这三个可以获取到奖励
}

message C2S_AncientWaitInitFlowerInfo {
}

message S2C_AncientWaitInitFlowerInfo {
	required uint32 ret = 1;
	repeated CrossUser ranks = 2;			//4个战场鲜花冠军
	optional uint32 flower_get = 3;			//得到的鲜花数量
	optional uint32 egg_get = 4;			//得到的鸡蛋数量
	optional CrossUser flower_receiver = 5;	//送花对象
	optional CrossUser egg_receiver = 6;	//送蛋对象
}

message C2S_AncientWaitRank {
	required uint32 stage = 1;
	required uint32 start = 2;//起始排名,从1开始
	required uint32 finish = 3;//终止排名
}

message S2C_AncientWaitRank {
	required uint32 ret = 1;
	optional uint32 stage = 3;
	optional uint32 start = 4;
	optional uint32 finish = 5;
	repeated CrossUser ranks = 6;
}

message C2S_AncientWaitFlower {
  required uint64 sid = 1;//对方sid
  required uint32 role_id = 2;//对方uid
  required uint32 stage = 3;//对方所在赛场
  required uint32 type = 4;//鲜花还是鸡蛋
  required uint32 count = 5;//鲜花/鸡蛋的数量
}

message S2C_AncientWaitFlower {
  required uint32 ret = 1;
  optional uint64 sid = 2;
  optional uint32 role_id = 3;
  optional uint32 stage = 4;
  optional uint32 type = 5;
  optional uint32 count = 6;
  optional CrossUser frole = 7;	//鲜花送给谁
  optional CrossUser erole = 8;	//鸡蛋送给谁
}

message C2S_AncientWaitFlowerRank {
  required uint32 type = 1;// 1代表鲜花 2代表砸蛋
  required uint32 stage = 2;
}

message S2C_AncientWaitFlowerRank {
  required uint32 ret = 1;
  required uint32 type = 2;// 1代表鲜花 2代表砸蛋
  required uint32 stage = 3;
  repeated CrossUser ranks = 4;
  optional uint32 self_rank = 5;
  optional uint32 self_flower = 6;
  optional uint32 self_egg = 7;
}

message C2S_AncientWaitFlowerAward {
	required uint32 type = 1;
}

message S2C_AncientWaitFlowerAward {
	required uint32 ret = 1;
	required uint32 type = 2;
	repeated Award awards = 3;
}

message C2S_GetAncientPvpArena {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //战场房间号
}

message S2C_GetAncientPvpArena {
	required uint32 ret = 1;
	repeated uint32 flags = 2;	//房间内的坑位号（全局唯一）
}


message S2C_FlushAncientPvpArena {
	required uint32 stage = 1;	//战场
	required uint32 room = 2;	//房间
	required CrossUser arena = 3;	//坑位信息
	optional uint32 type = 4;//坑位变化情况 1代表坑位时间到了自动下坑 2代表被人击败
}

message S2C_FlushAncientPvpSpecific {
	required uint32 stage = 1;	//战场
	required uint32 room = 2;	//房间
	required uint32 type = 3;//坑位变化情况 1代表坑位时间到了自动下坑 2代表被人击败
	optional CrossUser arena = 4;	//当前坑位信息
}

message C2S_GetAncientPvpRank {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //战场房间号
}

message S2C_GetAncientPvpRank {
	required uint32 ret = 1;
	repeated CrossUser ranks = 2;
}

message C2S_AncientPvpBattle {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //房间号
	required uint32 flag = 3;//坑位(据点id或者粮车id)
	required uint32 type = 4;//1攻打粮车,2攻打据点
}

message S2C_AncientPvpBattle {
	required uint32 ret = 1;
	optional uint32 method = 2;//战斗结果类型 1 轮空, 2胜利 3失败
	optional bool is_win = 3;
	required uint32 stage = 4;//战场
	required uint32 room = 5; //房间号
	required uint32 flag = 6;//坑位(据点id或者粮车id)
	required uint32 type = 7;//1攻打粮车,2攻打据点
	optional uint64 unique_id = 8;
    optional AncientRoomRole role = 9; //玩家在房间内的信息
}

message S2C_FlushAncientPvpScore {
	optional uint32 score = 1;
	optional uint32 method = 2;//获取积分的方式 1日了别人 2守护据点
}

message C2S_GetAncientPvpDetail {
}

message S2C_GetAncientPvpDetail {
	required uint32 ret = 1;
	optional uint32 battle_count = 2; //战斗次数
	optional uint32 win_count = 3; //胜利次数
}

message C2S_AncientPvpGetAward {
}

message S2C_AncientPvpGetAward {
	required uint32 ret = 1;
    optional uint32 state = 2;  //0无奖励可领取,1已领取奖励,2可领参与奖励,3可领晋级奖励
	repeated Award awards = 3;
}

message C2S_GetAncientPvpOb {
}

message S2C_GetAncientPvpOb {
	required uint32 ret = 1;
	required bool has_ob = 2;
	repeated CrossPvpObInfo rooms = 3;
}

message C2S_GetMGKnightHandbookInfo {
}

message MGKnightHandbook {
	required uint32 id = 1;	//图鉴advance_code 唯一标识
	required uint32 cfg_id = 2;	//图鉴配置id 0-未激活
	//required bool upgrade = 3; //true-可升级 false-不可升级
}

message S2C_GetMGKnightHandbookInfo {
	required uint32 ret = 1;
	repeated MGKnightHandbook hbs = 2;
	required uint32 equip_id = 3;
}

message C2S_UpgradeMGKnightHandbook {
	required uint32 id = 1;
}

message S2C_UpgradeMGKnightHandbook {
	required uint32 ret = 1;
	optional MGKnightHandbook hb = 2; //升级成功后，更新当前图鉴
}

message C2S_EquipMGKnightHandbook {
	required uint32 id = 1;
}

message S2C_EquipMGKnightHandbook {
	required uint32 ret = 1;
	required uint32 id = 2;
}

message S2C_UpdateKnightHandbook {
	repeated MGKnightHandbook hbs = 1;
}
message C2S_AncientMove {
	required uint32 from = 2;     //要移动到哪个位置
	required uint32 to = 3;     //要移动到哪个位置
}
message S2C_AncientMove {
	required uint32 ret = 1;  //返回结果
	optional uint32 from = 2;   //
	optional uint32 to = 3;   //要移动到哪个位置
	optional uint32 uid = 4;   //哪个玩家在移动
}

message C2S_GetAncientPvpRoomInfo {
}
message  AncientRoomRole {
  required string id = 1;//玩家id
  required string name = 2;//
  required uint32 rank = 3;// > 0表示第几名, =0表示未参与排行
  required uint64 fv = 4;//
  required uint32 pos = 5;//节点id
  required uint32 ts = 6;//进入此节点的时间
  required uint32 bts = 7;//主动挑战时间戳
  required uint32 dbts = 8;//被挑战时间戳
  required uint32 from = 9;//from->pos
  optional CrossUser info = 10;//一些显示信息
}
message RiceTrack {
  required uint32 id = 1;        //粮车id
  required uint32 st  = 2;       //粮车刷出时间
  required uint32 et  = 3;       //粮车消失时间
  optional string role  = 4;     //占据粮车的玩家
  optional uint32 cts  = 5;      //占据粮车的时间
  optional CrossUser info = 6;//一些显示信息
}
message S2C_GetAncientPvpRoomInfo {
	required uint32 ret = 1;
	optional uint32 stage = 2;
	optional uint32 roomid = 3;   //roomid
    repeated AncientRoomRole roles = 4; //房间内所有的玩家信息
    repeated RiceTrack  rices  = 5;     //房间内所有的粮车
    optional bool can_move = 6;
}
message S2C_AncientBroadRoomChange {
	optional uint32 stage = 1;
	optional uint32 roomid = 2;   //roomid
    repeated AncientRoomRole roles = 3; //房间内有变化的玩家
    repeated RiceTrack  rices  = 4;     //房间内有变化的粮车
    repeated CrossUser ranks = 5; //房间内排行榜,按照先后循序进行排行,只显示前6名,要定时通知给client
    optional bool can_move = 6;
}
message AncientPvpTop {
	required uint32 stage = 1;
	optional CrossUser top = 2;
}
message C2S_ReplayAncientPvpRole {
	required uint32 flag = 1;   //1代表获取的战斗回顾,2代表获取的是鲜花鸡蛋回顾
}
message S2C_ReplayAncientPvpRole {
	required uint32 ret = 1;
	required uint32 flag = 2;   //1代表获取的战斗回顾,2代表获取的是鲜花鸡蛋回顾
	optional uint32 stage = 3;
	optional uint32 rank = 4;   //未晋级,rank为0; 晋级,rank > 0
	optional uint32 score = 5;
	optional uint32 win_num = 6;
	optional uint32 all_num = 7;
    repeated AncientPvpTop tops = 8;   //如果没参见就这么显示
    optional uint32 award = 9;    //0表示无奖励领取,1表示已领取奖励,2表示可领参与奖励,3表示可领晋级奖励
    repeated AncientPvpTop ftops = 10;   //每个战场获取鲜花最多的玩家
    optional uint32 fnum = 11;   //得到鲜花数量
    optional uint32 enum = 12;   //得到鸡蛋数量
    optional CrossUser frole = 13;   //送花对象
    optional CrossUser erole = 14;   //送蛋对象
    repeated AncientPvpTop etops = 15;   //每个战场获取鸡蛋最多的玩家
    optional uint32 room_rank = 16;
}

message C2S_AncientFlowerEggBetRank {
}

message S2C_AncientFlowerEggBetRank {
  required uint32 ret = 1;
  repeated CrossUser ranks = 2; //sp1 flower, sp2 egg
  optional uint32 self_rank = 3;
  optional uint32 self_flower = 4;
  optional uint32 self_egg = 5;
}

message C2S_GetH5BindAuthCode {
  optional bool renew = 1;
}

message S2C_GetH5BindAuthCode {
  required uint32 ret = 1;
  optional string auth_code = 2;
  optional bool renew = 3;
}
//选择具体的观战房间, 每个战场只有一个房间,房间id不用穿
message C2S_AncientPvpObRoom {
  required uint32 stage = 1;  //0表示清除观战房间, >0表示要观战的战场
  required uint32 room = 2;   //0表示清除观战房间, >0表示要观战的房间
}
message S2C_AncientPvpObRoom {
  required uint32 ret = 1;
  optional uint32 stage = 2;
}
message C2S_SurfaceShopping {
  required uint32 id = 1;//货物id
  required uint32 surface_id = 2;//具体的surfaceId 多个档位区分
}
message S2C_SurfaceShopping {
  required uint32 ret = 1;
  optional uint32 id  =  2;//货物id
  optional uint32 surface_id = 3;//具体的surfaceId 多个档位区分
}
message C2S_SurfaceShopEquip{
}
message S2C_SurfaceShopEquip{
  required uint32 ret = 1;
  repeated SurfaceShopEquip list =2; //正在使用的外观列表
}
message SurfaceShopEquip{
  required uint32 type =1; //1主角,2官邸,3武将
  repeated SurfaceList list =2; //正在使用的外观id集合
}
message SurfaceList{
  required uint32 id = 1 ;//皮肤id
  required uint32 is_forever = 2;//是否永久,1永久,0非永久
  required uint32 expire_time = 3;//该皮肤过期时间,永久时间为0
}
message S2C_FlushSurfaceRMBInfo{
  required uint32 ret = 1;
  repeated Award  awards =2;
}

message S2C_AncientPvpNotifyBattle {
  required uint32 flag = 1;  //1成功,2失败
  optional CrossUser chanllege = 2;  //挑战者信息
}
message C2S_AncientPvpPlay {
  required uint32 flag = 1;  //1进入,0离开
}
message S2C_AncientPvpPlay {
  required uint32 ret = 1;
  optional uint32 flag = 2;  //1进入,0离开
}
message S2C_AncientPvpBroadState {
  required uint32 stage = 1;  //战场
  required uint32 round = 2;  //哪轮
  required uint32 state = 3;  //哪个阶段
}

//获取军师数据
message C2S_GetMilitarist {
}

message S2C_GetMilitarist {
  required uint32 ret = 1;
  repeated Militarist milits = 2;
}

//获取已激活的图鉴组
message C2S_GetMilitaristComposeGro {
}
message S2C_GetMilitaristComposeGro {
  required uint32 ret = 1;
  repeated MilitaristBook milit_books = 2;
}

//军师升星
message C2S_MilitaristStarUp {
  required uint32 id = 1;
}
message S2C_MilitaristStarUp {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 star_id = 3;
}

message C2S_MilitaristUp {
	required uint32 id = 1;	//id
	required uint32 lv = 2;	//升级到指定的等级
}

message S2C_MilitaristUp {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 lv = 3; //升级后的等级
}

message C2S_MilitaristMatrixUpgrade {
	required uint32 id = 1;	//id
	required uint32 lv = 2;	//升级到指定的等级
}

message S2C_MilitaristMatrixUpgrade {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 lv = 3; //升级后的等级
}

//军师重生
message C2S_MilitaristRebirth {
  required uint32 id = 1;
}
message S2C_MilitaristRebirth {
  required uint32 ret = 1;
  optional uint32 id = 2;
  repeated Award  awards = 3;
}

//军师变身(八卦镜)
message MilitTrasform {
  required uint32 sc_id = 1;  //军师服务器唯一id
  required uint32 tg_id = 2;  //军师advance_id
}

message C2S_MilitaristTrans {
  repeated MilitTrasform trans = 1; //转生目标id（advance_id）
  optional uint32 tp = 3;           //1表示元宝，默认不勾选 2表示使用八卦令
}

message S2C_MilitaristTrans {
  required uint32 ret = 1;
  repeated Militarist milits = 2; //纯表现，无需数据处理
  optional uint32 tp = 3;
}

//服务器主动推送图鉴评分信息（同时也可以给客户端用来做图鉴激活的通知）
message S2C_MilitaristBookScore {
  required uint32 id = 1;                //图鉴激活的id
  repeated MilitBookMaxScore scores = 2; //最大评分军师列表
}

//军师图鉴升星
message C2S_MilitaristBookStar {
  required uint32 id = 1;
  optional uint32 star = 2; //目标星级
}
message S2C_MilitaristBookStar {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 star = 3;
}

//军师图鉴升阶
message C2S_MilitaristBookLevelUp {
  required uint32 id = 1;
}
message S2C_MilitaristBookLevelUp {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 next_advance_id = 3;
}

//军师图鉴重铸
message C2S_MilitaristBookRebirth {
  required uint32 id = 1;
}
message S2C_MilitaristBookRebirth {
  required uint32 ret = 1;
  optional uint32 id = 2;
  repeated Award  awards = 3;
}

message CommonFormationBase {
  required uint32 id = 1;
  required uint32 pos = 2;
}

//获取通用阵型数据
message C2S_GetCommonFormation {
  required uint32 module_type = 1;  //0是战斗单位id
  required uint32 fmt_type = 2;     //0是主界面的布阵，1是战场的布阵
}
message S2C_GetCommonFormation {
  required uint32 ret = 1;
  required uint32 module_type = 2;  //0是战斗单位id
  required uint32 fmt_type = 3;     //0是主界面的布阵，1是战场的布阵
  repeated CommonFormationBase fmts = 4;
  repeated MilitaristProperty milit_prop = 5; //阵型位置对应数组的索引
}

//设置通用阵型
message C2S_SetCommonFormation {
  required uint32 module_type = 1;  //0是战斗单位id
  required uint32 fmt_type = 2;     //0是主界面的布阵，1是战场的布阵
  required uint32 id = 3;
  required uint32 pos = 4; // 阵型位置: 1-2  0表示下阵
}
message S2C_SetCommonFormation {
  required uint32 ret = 1;
  required uint32 module_type = 2;  //0是战斗单位id
  required uint32 fmt_type = 3;     //0是主界面的布阵，1是战场的布阵
  optional uint32 id = 4;
  optional uint32 old_pos = 5;
  optional uint32 new_pos = 6;
}

//5.0.0-少三之路
//活动基本信息
message C2S_AnniversaryInfo{
}
message S2C_AnniversaryInfo{
  required   uint32 ret = 1;
  required   bool is_open = 2;
  optional   uint32 time = 3;
  optional   uint32 start_time = 4;
  optional   uint32 end_time = 5;
  optional   string name1 = 6;
  optional   uint32 multiple1 = 7;
  optional   uint32 start_time1 = 8;
  optional   uint32 end_time1 = 9;
  optional   string name2 = 10;
  optional   uint32 multiple2 = 11;
  optional   uint32 start_time2 = 12;
  optional   uint32 end_time2 = 13;
  optional   uint32 reward_end_time = 14;
}
//移动请求
message C2S_AnniversaryMove{
}
message S2C_AnniversaryMove{
  required uint32 ret = 1;
  optional uint32 id = 2;
  repeated Award award = 3;//发放的奖品
  optional uint32 score = 4;//消耗积分
}
//玩家手动领奖(据点奖品)
message C2S_AnniversaryAward{
  required uint32 id = 1;//据点id
}
message S2C_AnniversaryAward{
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award award = 3;//发放的奖品
}
//激活小拼图
message C2S_AnniversaryJigsaw{
  required uint32 id = 1;//小拼图id
  required uint32 pic_id = 2;//大拼图id ->要用来校验数据合法性
}
message S2C_AnniversaryJigsaw{
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 pic_id = 3;
}
//领取大拼图奖励
message C2S_AnniversaryJigsawAwards{
  required uint32 pic_id = 1;//大拼图id
}
message S2C_AnniversaryJigsawAwards{
  required uint32 ret = 1;
  required uint32 pic_id = 2;
  repeated Award award = 3;//发放的奖品
}

//推送客户端据点信息和拼图信息
message C2S_AnniversaryData{
}
message S2C_AnniversaryData{
  required uint32 ret = 1;
  optional uint32 id =2; //当前据点
  optional uint32 score =3;//剩余积分
  repeated AnnPoint point =4;//已激活据点奖励领取状态
  repeated AnnJigsaw jigsaw =5;//已激活拼图下的小拼图集合
  repeated AnnJigsawReward jig_reward =6;//已激活大拼图的奖励领取状态
}

//推送玩家积分变化信息
message S2C_AnniversaryScoreChange{
  required uint32 ret = 1;
  required uint32 score =2;//增加积分
  required uint32 lave_score =3;//剩余积分
}

message AnnPoint{
   required uint32 id = 1;//据点id
   required uint32 is_reward = 2;//是否已经领奖（发奖）
}
message AnnJigsawReward{
   required uint32 id =1;//拼图id
   required uint32 is_reward =2;//是否发过奖
}
message AnnJigsaw{
   required uint32 id = 1;
   repeated uint32 ids = 2; //大拼图下激活的小拼图集合
}

//红点推送
message AnniversaryRedHint{
    required bool is_open =1;
    optional uint32 start =2;
    optional uint32 end = 3;
    optional uint32 reward_end_time =4;
}

//5.0.0 联盟驻地

message AllianceFarm {
  required uint32 uid = 1;
  required uint64 sid = 2;
  required uint32 cid = 3;
  repeated uint32 plan = 4;				//种植计划
  optional uint32 plan_time = 5;		//种植计划中排在0号位的开始时间
  optional uint32 sum_food = 6;			//可收获的总粮食
  optional uint32 sum_salary = 7;		//可收获的总官银
  optional uint32 robbed_count = 8;		//本轮粮田的抢夺次数
  optional uint32 robbed_food = 9;		//被抢的总粮食
  optional uint32 helped_count = 10;	//本轮粮田的除虫次数
  optional uint32 helped_food = 11;		//除虫增加的总粮食
	required CrossSingleUser user = 12;
}

message AllianceFarmLog {
	required uint32 type = 1;
	required uint32 seed = 2;
	required uint32 time = 3;
}

message AllianceFarmSpreadLog {
	required uint32 spread_lv = 1;	//施肥等级
	required uint32 exp = 2;				//增加的经验
	required CrossSingleUser user = 3;
	optional uint32 time = 4;
}

//获取农庄基本信息
message C2S_AllianceFarmInfo {
}
message S2C_AllianceFarmInfo {
	required uint32 ret = 1;
	optional uint32 level = 2;
	optional uint32 exp = 3;
	optional uint32 num = 4;	//总粮田数
	optional bool self = 5;		//是否有自己的田
}

message C2S_AllianceFarmDetailInfo {
}

message S2C_AllianceFarmDetailInfo {
	required uint32 ret = 1;
	repeated AllianceFarm farms = 2;
}

message C2S_AllianceFarmSelfInfo {
}

message S2C_AllianceFarmSelfInfo {
	required uint32 ret = 1;
	optional AllianceFarm farm = 2;		//自己粮田数据
	optional uint32 help_count = 3;		//除虫次数&天下抢粮次数
	optional uint32 farm_count = 4;		//已种田次数
	optional uint32 insect_count = 5;	//已浇水次数
	optional uint32 spread_type = 6;	//施肥类型
	optional uint32 battle_count = 7;	//已护卫次数
    optional bool   is_finsh    = 8;    //是否完成过佣兵级别任务 false:无 true：完成过 5.7.0
}

//农庄投入种子
message C2S_AllianceFarmSeedAdd {
	repeated uint32 seed = 1;
}
message S2C_AllianceFarmSeedAdd {
	required uint32 ret = 1;
	optional AllianceFarm info = 2;
}

//农庄收获
message C2S_AllianceFarmGather {
    optional uint32 type = 1;	// 5.7.0 
}
message S2C_AllianceFarmGather {
	required uint32 ret = 1;
	repeated Award food = 2;
	optional AllianceFarm info = 3;
}

//农庄日常
message C2S_AllianceFarmDaily {
	required uint32 type = 1;	//1,除虫；2，施肥；3，打架; 4, 游戏助手打架 5.7.0
	required uint32 value = 2;	//积分、档位，战斗目标
}
message S2C_AllianceFarmDaily {
	required uint32 ret = 1;
	optional uint32 type = 2;	//1,除虫；2，施肥；3，打架; 4, 游戏助手打架
	optional uint32 value = 3;	//积分、档位，战斗目标
	optional uint64 battle_id = 4; //战报
	repeated Award awards = 5; //奖励
}

//农庄除虫
message C2S_AllianceFarmHelp {
	required uint32 t_uid = 1; // 
	required uint64 t_sid = 2; //
}
message S2C_AllianceFarmHelp {
	required uint32 ret = 1;
	optional uint32 t_uid = 2; //
	optional uint64 t_sid = 3; //'
	repeated Award awards = 4;
}

//停止种田
message C2S_AllianceFarmStopPlant {
}

message S2C_AllianceFarmStopPlant {
	required uint32 ret = 1;
	repeated Award awards = 2;
	optional AllianceFarm info = 3;
}

//农庄日志
message C2S_AllianceFarmLog {
}

message S2C_AllianceFarmLog {
	required uint32 ret = 1;
	repeated AllianceFarmLog logs = 2;
}

//施肥日志
message C2S_AllianceFarmSpreadLog {
}

message S2C_AllianceFarmSpreadLog {
	required uint32 ret = 1;
	repeated AllianceFarmSpreadLog logs = 2;
}

message S2C_NotifyKnightInfo {
  repeated uint32 passive_skill = 1;//被动技能(突破)
}

message S2C_NotifyAntiIndulData {
  optional uint32 is_adult = 1;   //是否成年0:未成年 1:已成年 2:未实名认证
  optional bool is_parent_set = 2;//是否家长约定
  optional uint32 game_time = 3; //已经玩了多长时间
  optional uint32 total_time = 4;//总时间
  optional uint32 start_time = 5;
  optional uint32 end_time = 6;
  optional uint32 recharge_status = 7; //充值状态 1,可充值， 2不可充值
  optional uint32 forbid_status = 8;   //1表示已设置禁玩状态
  optional uint32 fcm_status = 9; //0.不在防沉迷状态  1.22~8点不可进入游戏  2.法定节假日到达最大游戏时长 3.非法定节假日达到最大游戏时长
}

message S2C_NotifyAntiIndulState {
  optional uint32 left_time = 1; //剩余时间即进入防沉迷状态
}

//通知延时踢号
message S2C_NotifyDelayKick {
}

message BuyHelperInfo {
  optional uint32 shop_type = 1; //商店类型
  optional uint32 goods_id = 2; //商品ID
  optional uint32 set_num = 3; //预购数量
  optional bool is_buy = 4; //是否购买(每日重置)
}

message C2S_BuyHelperInfo {
}

message S2C_BuyHelperInfo {
  required uint32 ret = 1;
  //optional uint32 day_time = 2; //有效日0点时间戳
  repeated BuyHelperInfo infos = 3; //更新配置
}

message C2S_AddBuyHelper {
  repeated uint32 shop_type = 1; //商店类型
  repeated uint32 goods_id = 2; //商品ID
  repeated uint32 set_num = 3; //预购数量
}

message S2C_AddBuyHelper {
  required uint32 ret = 1;
  repeated uint32 shop_type = 2;
  repeated uint32 goods_id = 3;
  repeated uint32 set_num = 4;
}

message C2S_DeleteBuyHelper {
  repeated uint32 shop_type = 1; //商店类型
  repeated uint32 goods_id = 2; //商品ID
}

message S2C_DeleteBuyHelper {
  required uint32 ret = 1;
  repeated uint32 shop_type = 2;
  repeated uint32 goods_id = 3;
}

message BuyHelperLog {
  optional uint32 shop_type = 1; //商店类型
  optional uint32 goods_id = 2; //商品ID
  optional uint32 buy_num = 3; //购买数量
  repeated Award consumes = 4; //消耗资源
  optional bool is_buy = 5; //是否购买
}

message C2S_RunBuyHelper {
  repeated uint32 indexs = 1; //购买商品索引
}

message S2C_RunBuyHelper {
  required uint32 ret = 1;
  repeated BuyHelperLog logs = 2; //购买日志
  repeated uint32 indexs = 3;
}

message C2S_ChangeBuyHelperIndex {
  repeated uint32 indexs = 1; //交换位置索引ID
}

message S2C_ChangeBuyHelperIndex {
  required uint32 ret = 1;
  repeated uint32 indexs = 2;
}

message C2S_AllianceBattleInfo {
}

message AllianceBattleAwards {
	required uint32 id = 1;
	repeated Award awards = 2;
}

message C2S_AllianceBattleOnekey {
}

message S2C_AllianceBattleOnekey {
	required uint32 ret = 1;
	repeated AllianceBattleAwards data = 2;
}

//目标奖励
message AllianceBattleAim {
  required uint32 awarded_id = 1; //已领取id
  required uint32 award_id = 2; //可领取id 0-不可领取
}

enum AWARD_STATUS {
  CANNOT_GET = 0; //不可领取
  CAN_GET = 1; //可领取
  HAS_GOTTEN = 2; //已领取
}

//合战奖励
message AllianceBattleAllianceReward {
  required uint32 id = 1;
  required uint32 status = 2; //0-不能领取 1-可领取 2-已领取
}

//关卡数据
message AllianceBattleStage {
  required uint32 id = 1;
  required uint32 challenged_num = 2; //已挑战次数
  required bool passed = 3; //是否通关 true-通关
}

//章节
message AllianceBattleChapter {
  required uint32 chapter_id = 1;
  repeated AllianceBattleStage stages = 2;
	required uint32 passed_num = 3;	//合战祝福数
}

message S2C_AllianceBattleInfo {
  required uint32 ret = 1;
  optional uint32 alliance_score = 2; //联盟积分
  optional uint32 score = 3; //个人积分
  optional uint32 challenge_num = 4; //可挑战次数
  optional AllianceBattleAim aim = 5; //目标奖励
  repeated AllianceBattleAllianceReward alliance_reward = 6; //合战奖励
  optional AllianceBattleChapter chapter = 7; //当前章
  optional uint32 help_num = 8; //可使用助战次数
}

message C2S_AllianceBattleChallenge {
  required uint32 stage_id = 1; //关卡id
  optional uint64 help_sid = 2; //助战玩家sid
  optional uint32 help_user_id = 3; //助战玩家user_id
}

message S2C_AllianceBattleChallenge {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  optional uint64 help_sid = 3;
  optional uint32 help_user_id = 4;
  optional AllianceBattleStage stage = 5; //更新当前关卡信息
  optional uint64 report_id = 6; //战斗id
  optional bool is_win = 7; //是否胜利
  optional uint32 score = 8;  //个人积分更新
	repeated Award awards = 9;	//掉落奖励
}

message C2S_AllianceBattleChapterInfo  {
  required uint32 chapter_id = 1;
}

message S2C_AllianceBattleChapterInfo {
  required uint32 ret = 1;
  optional AllianceBattleChapter chapter = 2;
}

message C2S_AllianceBattleGetAimAward {
}

message S2C_AllianceBattleGetAimAward {
  required uint32 ret = 1;
  optional AllianceBattleAim aim = 2;
  repeated Award awards = 3;
}

message C2S_AllianceBattleGetAllianceReward {
  required uint32 id = 1;
}

message S2C_AllianceBattleGetAllianceReward {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 status = 3; //状态更新
  repeated Award awards = 4;
}

message C2S_AllianceBattleRankInfo {
}

message S2C_AllianceBattleRankInfo {
  required uint32 ret = 1;
  optional uint32 self_rank = 2; //自身排名
  repeated CrossUser users = 3; //排行榜
  optional uint32 page = 4; //当前页 10个发一次
  optional uint32 max_page = 5; //最大页数
  optional uint32 score = 6; //今日积分
  optional uint32 chapter_id = 7; //最高章节
}

message C2S_AllianceBattleHelpList {
}

message S2C_AllianceBattleHelpList {
	required uint32 ret = 1;
	repeated CrossUser users = 2;	//玩家列表 最多15个
}

message C2S_AllianceBattleUpdate {
	required uint32 chapter_id = 1;
}

message S2C_AllianceBattleUpdate {
	required uint32 ret = 1;
	required uint32 chapter_id = 2;
	optional uint32 passed_num = 3; //合战祝福数 
	optional uint32 alliance_score = 4; //联盟总积分
	repeated AllianceBattleAllianceReward alliance_reward = 6; //合战奖励
}

message C2S_EquipQuench {
  optional uint32 equip_id = 1; //装备id，服务器id
  optional uint32 tg_lv = 2;    //目标星级，对应萃火表里的quench_step字段
  repeated uint32 chooses = 3;  //选择的槽位0-2,默认对淬火表里的三种碎片消耗
}

message S2C_EquipQuench {
  required uint32 ret = 1;
}

message C2S_EquipInherit {
  required uint32 sr_id = 1; //消耗的装备
  required uint32 tg_id = 2; //目标id
  optional bool need_recycle = 3; //是否需要分解
}

message S2C_EquipInherit {
  required uint32 ret = 1;
  required uint32 tg_id = 2;
  repeated Award awards = 3;
}

message ArtifactHandBook {
  required uint32 id = 1; //图鉴Id
  required uint32 level = 2; //图鉴等级
  required uint32 exp = 3;	//当前经验
  required uint32 count = 4;	//当前合成次数
}

//Flush协议
message C2S_FlushArtifactInfo {
}

message S2C_FlushArtifactInfo {
  required uint32 ret = 1;
  repeated ArtifactHandBook hand_book = 2;	//养成数据
  optional uint32 equip = 3;  //装备的神器
  optional uint32 request_count = 4; //已请求次数
  optional uint32 give_count = 5; //已赠与次数
}

//养成
message C2S_ArtifactCompose {
  required uint32 id = 1; //神器id
	required uint32 count = 2; //合成次数
}

message S2C_ArtifactCompose {
  required uint32 ret = 1;
  optional uint32 id = 2; //神器id
	optional uint32 count = 3; //合成次数
  optional ArtifactHandBook hand_book = 4;	//养成数据
}

//装备神器
message C2S_ArtifactEquip {
	required uint32 id = 1; //神器id
}
message S2C_ArtifactEquip {
  required uint32 ret = 1;
  optional uint32 id = 2; //神器id
}
//联盟互赠信息
message AllianceDonateRequest {
	required uint32 id = 1;
	required uint64 sid = 2;
	required uint32 uid = 3;
	required uint32 ts = 4;
	required Award item = 5;
	required uint32 num = 8;
	required string name = 9;
}

message C2S_FlushArtifactDonateInfo {
}

message S2C_FlushArtifactDonateInfo {
  required uint32 ret = 1;
  repeated AllianceDonateRequest data = 2;
}

//发起捐赠请求
message C2S_ArtifactDonateRequest {
	required uint32 id = 1; //神器碎片id
}
message S2C_ArtifactDonateRequest {
  required uint32 ret = 1;
  optional uint32 request_count = 4; //已请求次数
}
//赠与
message C2S_ArtifactDonateGive {
	required uint32 id = 1; //请求id
}
message S2C_ArtifactDonateGive {
  required uint32 ret = 1;
  optional uint32 id = 2; //请求id
  repeated Award awards = 3;	//奖励
  optional uint32 give_count = 4; //已赠与次数
}

//查找最近战宠
message C2S_WorldWarSearchSummonMonster {
  optional uint32 monster_type = 1;
  optional uint32 monster_id   = 2;
}
message S2C_WorldWarSearchSummonMonster {
  required uint32 ret = 1;
  optional uint32 x = 2;
  optional uint32 y = 3;
}

//取消宠物
message C2S_WorldWarCancleSummonMonster {
  optional uint32 monster_type = 1;
}

message S2C_WorldWarCancleSummonMonster {
  required uint32 ret = 1;
}

//记录玩家召唤宠物的坐标信息
message WorldWarSummonedInfo {
  optional uint32 city_id = 1;
  optional uint32 monster_type = 2;
  optional Pos pos = 3;
  optional uint32 id = 4;
}

//获取宠物信息
message C2S_WorldWarGetSummonMonster {  
}

message S2C_WorldWarGetSummonMonster {
  required uint32 ret = 1;
  repeated WorldWarSummonedInfo summons = 2;
}

message S2C_GetSimpleItem{
	repeated Award items = 1;
}

//军师图鉴一键升星升级
message C2S_MilitaristBookStarLevelUp {
  optional uint32 id = 1;
  optional uint32 tg_star = 2;
  optional uint32 tg_lv = 3;
}

message S2C_MilitaristBookStarLevelUp {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 tg_star = 3;
  optional uint32 tg_lv = 4;
}

//////////////////////////////////////////////////
//外面，副本信息
message RogueRegion {
	required uint32 id =1;
	required uint32 floor_id = 2;
	optional uint32 timestamp = 3;
}

message RogueBuff {
	optional uint32 id = 1; //buff info
	optional uint32 round = 2; //回合数
	optional uint32 age = 3; //经历过的回合数
	optional uint32 count = 4; //剩余生效次数
	optional bool effect = 5; //本回合是否生效 
	optional bool invalid = 6; //是否已失效
	optional uint32 uniquen_id = 7; //唯一id
}

message RogueEvent {
	optional uint32 source = 1;  //0直接，1道具，2buff，3怪的效果，不包含直接攻击
	optional uint32 id = 2;	// 具体指向，道具value，buff唯一id，怪的位置
	optional int32  val = 3; // 正数 回血 负数 伤害
}

message RogueBattleUnit {
	optional uint32 hp = 1;	
	optional uint32 max_hp = 2;
	optional uint32 att = 3;
	repeated RogueBuff buff = 4;
	optional uint32 def = 5;
	repeated RogueEvent event = 6;
}

message RoguePlayer {
	optional CrossUser player = 1;
	optional RogueBattleUnit rbu = 2; //战斗数据
	repeated Award bag = 3;	//游戏背包
	repeated Award reward_bag = 4; //奖励背包,游戏结束后带出去的奖励，不包括通关奖励
	optional bool isAI = 5;
	optional uint32 count = 6;
	optional bool isSuspend = 7;
}

//组队，房间信息
message RogueRoomInfo {
	optional uint32 id = 1;
	optional RoguePlayer player1 = 2;
	optional RoguePlayer player2 = 3;
	optional uint32 floor_id = 4;
}


message RogueGameShop {
	required uint32 id = 1;
	required uint32 num = 2;
}
//地面元素
message RogueGameObj {
	optional uint32 id = 1;
	optional RogueBattleUnit rbu = 2; //战斗数据
	optional uint32 quest_id = 3; //如果是答题怪，这是问题id
	repeated RogueGameShop item = 4; //如果是商人，这是可购买列表
	optional uint32 uniquen_id = 5; //唯一id
}

//格子信息
message RogueGameCell {
	required uint32 x = 1;
	required uint32 y = 2;
	optional uint32 static = 3; //格子状态 0初始，1激活，2翻开
	optional uint32 guarded = 4; //被怪看守
	optional RogueGameObj obj = 5; //格子元素	0无，
	optional uint32 light_up = 6; //被点亮
}

//用于客户端显示特效
//变量的具体解释看客户端
message RogueGameAction {
	optional uint32 tp = 1;
	optional uint32 x = 2;
	optional uint32 y = 3;
	optional uint32 id = 4;
	optional uint32 value  = 5;
	optional uint32 target = 6;
}

//外层信息
message C2S_RogueInfo{
}

message S2C_RogueInfo{
 required uint32 ret = 1;
 optional uint32 count = 2;		// 已挑战次数
 repeated RogueRegion region = 3;	//副本信息
 optional uint32 timestamp = 4;
 optional uint32 timestamp2 = 5;
}

//创建房间
message C2S_RogueGameCreate{
	required uint32 id =1;
	required uint32 floor_id = 2;
}

message S2C_RogueGameCreate{
 required uint32 ret = 1;
 optional RogueRoomInfo info = 2;
}

//邀请&喊人
message C2S_RogueGameInvite{
	required uint32 tp = 1; //类型 1，直接邀请人，2,发到聊天频道
	optional uint64 sid = 2;
	optional uint32 uid = 3;
}

message S2C_RogueGameInvite{
 required uint32 ret = 1;
 optional uint64 sid = 2;
 optional uint32 uid = 3;
}

//获取所有要求信息
message C2S_RogueGameInviteNotify{
}


message S2C_RogueGameInviteNotify{
	required uint32 ret = 1;
	optional CrossUser user = 2;//sp1副本id  sp2层id
}

//加入房间
message C2S_RogueGameJoin{
	required uint32 room_id = 1;
	required uint32 floor_id = 2;
}

message S2C_RogueGameJoin{
 required uint32 ret = 1;
 optional RogueRoomInfo info = 2;
}

//开始游戏
message C2S_RogueGameStart {
}

message S2C_RogueGameStart{
 required uint32 ret = 1;
}

//游戏内行动
message C2S_RogueGameAction{
	required uint32 type = 1;	//1,翻格子;2,拾取;3,下层;4,使用道具;5,回答问题;6,打怪
	optional uint32 x = 2;
	optional uint32 y = 3;
	optional uint32 id = 5; //type=4\5 道具value，问题id
	optional uint32 value = 6; // type=5 问题答案号
	optional uint32 target = 7; // type=4 代表道具目标，0自己，1队友，2怪物，根据道具具体类型决定是否需要xy值
}

message S2C_RogueGameAction{
 required uint32 ret = 1;
	optional uint32 type = 2; //1,翻格子;2,拾取;3,下层;4,使用道具;5,回答问题,6,打怪 
	optional uint32 x = 3;
	optional uint32 y = 4;
	optional uint32 id = 5; //type=4\5 道具value，问题id
	optional uint32 value = 6; // type=5 答案对非0，错0
	optional uint32 target = 7; // type=4 代表道具目标，0自己，1队友，2怪物，根据道具具体类型决定是否需要xy值
}

//每层的首次更新
message S2C_RogueGameInfo{
  required uint32 ret = 1;
	required uint32 floor_id = 2;
	repeated RogueGameCell cells = 3;
}


//地图内容更新
message S2C_RogueGameUpdate{
  required uint32 ret = 1;
	required uint32 floor_id = 2;
	repeated RogueGameCell cells = 3;
	optional RoguePlayer player1 = 4;
	optional RoguePlayer player2 = 5;
	optional uint32 end_time = 6;	//玩家操作结束时间戳 
	optional uint32 hand_player = 7; // p1=0  p2=1
	optional bool full = 8;  //是否是全量更新，一般为初次进入、下层
	optional RogueGameAction action = 9; //导致本次更新的，可能存在的操作
	optional uint32 round = 10; //当前回合
	optional bool all_turn = 11; //最后一个怪，全翻
	repeated RogueGameObj remove_objs = 13; //本回合被移除的obj
}

//通知交换行动者
message S2C_RogueGameInTurn{
 	required uint32 ret = 1;
	optional uint64 sid = 2;
	optional uint32 uid = 3;
}

message C2S_RogueGameLeave{
}

message S2C_RogueGameLeave{
 	required uint32 ret = 1;
	optional uint32 floor_id = 2;
	repeated Award awards = 3;
	optional uint32 type = 4;
}

message C2S_RogueGameKick{
	required uint64 sid = 1;
	required uint32 uid = 2;
}

message S2C_RogueGameKick{
 	required uint32 ret = 1;
	optional RogueRoomInfo info = 2;
	optional uint64 send_sid = 3;
	optional uint32 send_uid = 4;
	optional uint64 kick_sid = 5;
	optional uint32 kick_uid = 6;
}

message C2S_RogueGameBuy{
	required uint32 shop_id = 1;
	required uint32 item_id = 2;
	required uint32 x = 3;
	required uint32 y = 4;
	required uint32 num = 5;
}

message S2C_RogueGameBuy{
	required uint32 ret = 1;
	optional uint32 shop_id = 2;
	optional uint32 item_id = 3;
	optional uint32 x = 4;
	optional uint32 y = 5;
	optional uint32 num = 6;
	repeated Award awards= 7;
}

message C2S_RogueGameAddAI {
}

message S2C_RogueGameAddAI {
	required uint32 ret = 1;
	optional RogueRoomInfo info = 2;
}

message C2S_RogueGameReconnection {

}

message S2C_RogueGameReconnection {
	required uint32 ret = 1;
	optional uint32 type = 2;	//0,没房间，1，组队状态，2，战斗中
	optional RogueRoomInfo info = 3;
}

message C2S_RogueGameSelectFloor {
	required uint32 id =1;
	required uint32 floor_id = 2;
}

message S2C_RogueGameSelectFloor {
	required uint32 ret = 1;
	optional uint32 id = 2;
	optional uint32 floor_id = 3;
	optional RogueRoomInfo info = 4;
}

message C2S_RogueGamePoint {
	required uint32 x = 1;
	required uint32 y = 2;
}

message S2C_RogueGamePoint {
	required uint32 ret = 1;
	optional uint32 x = 2;
	optional uint32 y = 3;
	optional bool self = 4;
}


/////////////////////////////////////////////////////////
message S2C_SyncFarmPos {
  optional uint32 pos_x = 1;
  optional uint32 pos_y = 2;
}

message C2S_GetMilitaristViceFormationInfo {
}

message S2C_GetMilitaristViceFormationInfo {
	required uint32 ret = 1;
	repeated ViceFormationPos poss = 2;
}

message C2S_SetMilitaristViceFormationPos {
	required uint32 pos = 1;
	required uint32 kid = 2;
}

message S2C_SetMilitaristViceFormationPos {
  required uint32 ret = 1;
	required uint32 pos = 2;
	required uint32 kid = 3;
}


//藏经阁-获取信息 
message C2S_GetBookLibraryInfo {
}
message BookInfo {
	required uint32 book_id			= 1;	//经书ID
	required uint32 level			= 2;	//经书等级
	required uint32 read_start_time	= 3;	//研读开始时间戳(非0表示在研读中)
	required uint32 speedup_time	= 4;	//加速研读的时间
	required uint32 award_count		= 5;	//已经领取属性的次数
	required uint32 award_items_num = 6;	//待领取顿悟奖励的数量
}
message S2C_GetBookLibraryInfo {
	required uint32 ret 	= 1;
	repeated BookInfo books	= 2;	//经书列表
}

//藏经阁-红点相关
message BookLibraryRedHint {
	repeated BookInfo books			= 1;	//经书列表
}

//藏经阁-研读 
message C2S_ReadBook {
	required uint32 book_id	= 1;	//经书ID
}
message S2C_ReadBook {
	required uint32 ret 			= 1;
	required uint32 book_id			= 2;	//经书ID
	optional BookInfo book			= 3;	//经书数据
}

enum READ_BOOK_SPEED_UP_TYPE {
	JUNIOR_ID	=	1;	//初级加速
	MIDDLE_ID	=	2;	//中级加速
	SENIOR_ID	=	3;	//高级加速
}
message SpeedUpTypeNum {
	required uint32 type	= 1;	//加速类型（READ_BOOK_SPEED_UP_TYPE）
	required uint32 num		= 2;	//使用数量
}
//藏经阁-加速 
message C2S_ReadBookSpeedUp {
	required uint32 book_id			= 1;	//经书ID
	repeated SpeedUpTypeNum types 	= 2;	//加速列表请求信息
}
message S2C_ReadBookSpeedUp {
	required uint32 ret 				= 1;
	required uint32 book_id				= 2;	//经书ID
	repeated SpeedUpTypeNum types 		= 3;	//加速列表请求信息
	optional BookInfo book				= 4;	//经书数据
	optional uint32 gain_speedup_time	= 5;	//获得的加速研读的时间
}

//藏经阁-查询研读时间
message C2S_ReadBookTimeQuery {
	required uint32 book_id	= 1;	//经书ID
}
message S2C_ReadBookTimeQuery {
	required uint32 ret 				= 1;
	required uint32 book_id				= 2;	//经书ID
	optional BookInfo book				= 3;	//经书数据
	optional uint32 gain_award_count 	= 4;	//获得的领取属性次数(需要累加到BookInfo.award_count)
}

//藏经阁-领取研读顿悟奖励
message C2S_ReadBookTimeAward {
	required uint32 book_id	= 1;	//经书ID
}
message S2C_ReadBookTimeAward {
	required uint32 ret 		= 1;
	optional uint32 book_id		= 2;	//经书ID
	repeated Award award_items	= 3;	//顿悟获得的奖励
	optional BookInfo book		= 4;	//经书数据
}

////////////////////////////////////////////////////////////////////////////////
//鏖战英灵-信息
message WorldWarSpiritInfo {
	optional uint32 spirit_id	= 1;	//英灵ID
	optional uint32 open_time	= 2;	//开始时间戳
	optional uint32 close_time	= 3;	//结束时间戳
	optional uint32 state		= 4;	//活动状态(0关闭 1开启)
	optional uint32 group		= 5;	//阵营(0表示没有选择)
	optional uint32 left_count	= 6;	//剩余挑战次数
	optional uint32 buy_count	= 7;	//已经购买的挑战次数
	optional uint64 total_harm	= 8;	//累计伤害
}

//鏖战英灵-获取信息
message C2S_WorldWarSpiritGetInfo {
	optional uint32 client_type = 1;	//客户端请求类型
}
message S2C_WorldWarSpiritGetInfo {
	required uint32 ret 				= 1;
	optional uint32 client_type 		= 2;	//客户端请求类型
	optional WorldWarSpiritInfo info	= 3;
}

//鏖战英灵-选择阵营
message C2S_WorldWarSpiritSelectGroup {
	required uint32 group	= 1;	//阵营(1~4:魏蜀吴群)
}
message S2C_WorldWarSpiritSelectGroup {
	required uint32 ret 	= 1;
	optional uint32 group	= 2;	//阵营
}

//鏖战英灵-挑战英灵
message C2S_WorldWarSpiritChallenge {
	optional bool skip_report	= 1;	//跳过战斗
}
message S2C_WorldWarSpiritChallenge {
	required uint32 ret 		= 1;
	optional uint64 harm		= 2;	//伤害
	optional uint64 total_harm	= 3;	//累计伤害
	optional uint64 report_id 	= 4;	//战报ID
	optional bool is_win 		= 5;	//战斗结果
	repeated Award awards		= 6;	//攻打获得的奖励
	optional uint32 left_count	= 7;	//剩余挑战次数
} 

//鏖战英灵-获取伤害奖励信息
message C2S_WorldWarSpiritGetAwardInfo {
}
message S2C_WorldWarSpiritGetAwardInfo {
	required uint32 ret 		= 1;
	optional uint32 level 		= 2;	//活动开启时的等级
	optional uint64 harm 		= 3;	//活动的总伤害
	repeated uint32 awards		= 4;	//已经领取的奖励ID列表
}

//鏖战英灵-领取伤害奖励
message C2S_WorldWarSpiritAward {
	required uint32 award_id	= 1;	//奖励ID(0则表示一键领取)
}
message S2C_WorldWarSpiritAward {
	required uint32 ret 		= 1;
	optional uint32 award_id	= 2;	//奖励ID
	repeated Award awards		= 3;	//奖励
}

//鏖战英灵-购买奖励次数
message C2S_WorldWarSpiritBuyCount {
	optional uint32 count		= 1;	//购买的挑战次数
}
message S2C_WorldWarSpiritBuyCount {
	required uint32 ret 		= 1;
	optional uint32 count		= 2;	//购买的挑战次数
	optional uint32 buy_count	= 3;	//已经购买的挑战次数
	optional uint32 left_count	= 4;	//剩余挑战次数
}

//联盟分奖信息
message C2S_CorpAllianceSpiritAwardInfo {
}

message S2C_CorpAllianceSpiritAwardInfo {
	required uint32 ret = 1;
	required uint32 rank = 2;
	required uint32 num = 3;
	repeated AllianceCorp corps = 4;
	optional uint32 spirit_id = 6; 	//活动ID，当前奖励的开始时间
	optional uint64 totle_score = 7;	//总积分
	optional string top_corp_name = 8;	//最高伤害军团名
	optional string top_user_name = 9;	//最高玩家名
}

//联盟发奖
message C2S_CorpAllianceSpiritAward {
	required uint32 award_id = 1;
 	required uint64 corp_sid = 2;
 	required uint32 corp_id = 3;
}

message S2C_CorpAllianceSpiritAward {
	required uint32 ret = 1;
 	required uint32 award_id = 2;
 	required uint64 corp_sid = 3;
 	required uint32 corp_id = 4;
	optional AllianceCorp corp = 5;
}

message CorpSpiritAward {
  required uint32 id = 1;		//活动id
  required uint32 pos = 2;		//奖励在期礼包中的位置
  required Award award = 3;		//奖励
  optional uint32 uid = 4;		//目标玩家，用于发奖
}

//军团仓库信息
message C2S_CorpSpiritAwardInfo {
}

message S2C_CorpSpiritAwardInfo {
	required uint32 ret = 1;
	repeated CorpSpiritAward awards = 2;	//道具信息
 	optional uint32 id = 3;		//活动id
}

//军团发奖
message C2S_CorpSpiritAward {	
 	repeated CorpSpiritAward awards = 1;	//具体发奖
}

message S2C_CorpSpiritAward {
	required uint32 ret = 1;
	//	repeated CorpSpiritAward awards = 2;	
}

//拉取发奖成员列表
message C2S_CorpSpiritMemberList {
	required uint32 id = 1; //只传奖励中的期id就行
}

message S2C_CorpSpiritMemberList {
 	required uint32 ret = 1;
 	repeated CorpMember users = 2;
}


//远征
message AreaBattleTeamUser {
  optional CrossUser user = 1;
  optional int32    pos  = 2;
  repeated uint64    hp   = 3;
  optional uint64    id   = 4; //monstgroup id/ user compose id
  optional uint32    type = 5; //monster: 0 , user:1
  optional uint32    hp_rate = 6;
  optional uint32    sign_skill = 7;//使用技能标记
}

message UserBrave {
  optional uint64 sid = 1;
  optional uint32 uid = 2;
  optional uint32 tp  = 3;
  optional uint32 num = 4;
}
message AreaBattleTeam {
  optional uint64 team_id = 1;
  optional uint64 fight_value = 2;
  repeated uint64 formation = 3;
  repeated AreaBattleTeamUser members = 4;
  optional uint32 round_state = 5; //0-init 1-win, 2-fail
  optional uint32 use_skill = 6;
  optional uint32 brave = 7;
  optional uint32 battle_idx  = 8;//
  optional uint64 game_id    = 9;//game  id
  optional uint32  group      = 10; //分组  5.6.50
  optional UserBrave brave_info = 11; //对本战区队伍的鼓舞信息
}

message C2S_AreaBattleTeamCreate {
}

message S2C_AreaBattleTeamCreate {
  required uint32 ret = 1;
  optional AreaBattleTeam   team_info = 2;
}

message C2S_AreaBattleTeamInvite {
  optional uint64 sid = 1;
  optional uint32 uid = 2;
}

message S2C_AreaBattleTeamInvite {
  required uint32 ret = 1;
}

message S2C_AreaBattleTeamInviteNtf {
  optional uint64 team_id = 1;
  optional CrossUser inviter = 2;
}

message C2S_AreaBattleTeamKick {
  optional uint64 team_id = 1;
  optional uint64 kick_sid = 2;
  optional uint32 kick_uid = 3;
}

message S2C_AreaBattleTeamKick {
  required uint32 ret = 1;
}

message S2C_AreaBattleTeamKickNtf {
  optional uint64 team_id = 1;
  optional CrossUser kicker = 2;
}

message C2S_AreaBattleTeamEnter {
  optional uint64 team_id = 1;
}

message S2C_AreaBattleTeamEnter {
  required uint32 ret = 1;
  optional AreaBattleTeam team_info = 2;
}

message C2S_AreaBattleTeamApply {
  optional uint64 team_id = 1; 
}

message S2C_AreaBattleTeamApply {
  required uint32 ret = 1;
}

message C2S_AreaBattleTeamChangePos {
  optional int32 from = 1;
  optional int32 pos = 2;
  optional uint64 team_id = 3;
}

message S2C_AreaBattleTeamChangePos {
  required uint32 ret = 1;
}

message C2S_AreaBattleUseSkill {
  optional uint32  skill_id = 1;
}

message S2C_AreaBattleUseSkill {
  required uint32 ret = 1;
  optional uint32 skill_id = 2;
}

message C2S_AreaBattleTeamReady {
  optional uint32 ready_type = 1;  //0 进入战场， 1-准备战斗
  optional uint64 team_id  = 2;
}

message S2C_AreaBattleTeamReady {
  required uint32 ret = 1;
  optional uint32 ready_type = 2;
}

message C2S_AreaBattleInfo {
  optional uint64  act_id = 1; 
}

message BraveInfo {
  optional uint32 brave_times = 1; //鼓舞次数
  optional uint64 team_id     = 2; //队伍id
}

message AreaBattleBraveInfo {
  repeated AreaBattleTeam teams = 1; //我方队伍列表
  repeated BraveInfo      brave_infos = 2;  //5.6.50-暂时不用
}

message AreaGroup {
  optional uint32 id = 1;
  repeated AreaBattleTeam teams=2;
}

message AreaBattle {
  optional uint64 id = 1;
  optional uint32 rd = 2;  //回合类型:0 pve, 1:  组队， 2：战斗， 3：等待， 4：分组
  repeated uint64  group_teams = 3;
  optional uint64  state_st = 4; //rd开始时间
  optional uint64  state_et = 5; //rd结束时间
  optional uint32  group_cnt = 6;  //分组数
  optional uint32  battle_idx = 7;  //rd==2时，1:64强赛，2：32，3，16， 4：8， 5：4， 6：2， 7：1， 8：标记，冠军
}

message AreaBattleGame{
  optional uint64 id = 1;
  optional uint32 round = 2;
  optional AreaBattleTeam teamA = 3;
  optional AreaBattleTeam teamB = 4;
  optional uint32 game_type = 5; //pve:0  pvp: 1
  optional uint32 state  = 6;//状态0-等待，1-布阵 -2-左路战斗，3-中路战斗，4-右路战斗，5-回合结束，6-战斗结束
  optional uint32 hpA    = 7; //teama boos 血量
  optional uint32 hpB    = 8;//boss  血量
  optional uint32 time_stamp = 9;  // 状态结束时间，state
  optional uint32 boss_id_a  = 10; // boss id,
  optional uint32 boss_id_b  = 11;
  optional bool   is_end     = 12;
}

message C2S_AreaBattleTeamInfo {
  optional uint64  sid = 1;
  optional uint64  team_id = 2;
  optional uint32  uid = 3;
}
message S2C_AreaBattleTeamInfo {
  required uint32   ret = 1;
  optional uint64   sid = 2;
  optional uint64   team_id = 3;
  optional uint32   uid = 4;
  optional AreaBattleTeam  team_info = 6;
}

message C2S_AreaBattleGetRewards {
  optional uint32  reward_type = 1;
}

message RewardTimesInfo {
  optional uint32 reward_type = 1;
  optional uint32 reward_times = 2;
  optional uint32 max_times = 3;
}
message S2C_AreaBattleGetRewards {
  required uint32   ret = 1;
  optional uint32  reward_type = 2; //0 表示查询次数
  repeated Award   awards = 3; 
  repeated RewardTimesInfo reward_times = 4;
}

message S2C_AreaBattleInfo {
  required uint32 ret = 1;
  optional AreaBattle area_battle = 2;
  optional uint32  own_group = 3;
  optional uint64  own_game = 4;  //5.6.50-我的game
}

message C2S_AreaBattleGameInfo {
  optional uint64 game_id = 1;
}

message S2C_AreaBattleGameInfo {
  required uint32 ret = 1;
  optional AreaBattleGame game_info=2;
}

message C2S_AreaBattleGameList{
  optional uint32 group_id = 1;
}

message S2C_AreaBattleGameList {
  required uint32 ret = 1;
  optional AreaGroup group_info = 2;
  optional AreaBattleBraveInfo brave_info = 5;
}

message C2S_AreaBattleSendBrave {
  optional uint64 team_id = 1;
  optional uint32 brave_type = 2; //鼓励类型 1  win, 2   fai
  optional uint32 brave_num = 3;
}

message S2C_AreaBattleSendBrave {
  required uint32 ret = 1;
  optional uint64 team_id = 2;
  optional uint32 brave_num = 3;
  optional uint32 brave_type = 4;
}

message S2C_AreaBattleInfoNtf {
  optional AreaBattle area_battle = 1;
}

message S2C_AreaBattleGameInfoNtf {
  optional AreaBattleGame game_info=1;
  repeated Award          awards = 2;
  optional uint32         add_exp = 3;  //pve 增加经验值
  optional uint32         curr_exp = 4; //pve  当前经验值
}

message S2C_AreaBattleAreaGameBattleNtf {
  optional uint64      userA = 1;
  optional uint64      userB = 2;
  optional uint32      monster=3; //怪物，如果是跟怪物打，则userb == nil, monster != nil
  optional bool        is_a_win=4;
  optional uint32      index = 5;
  optional BattleBriefReport report = 6;
}

message S2C_AreaBattleAreaGameResultNtf {
  optional bool            is_end = 1;
  optional bool            is_win = 2;
  optional uint32          award_ret = 3;
  repeated Award           awards = 4;
  optional uint32          monster_level_id = 5;
  optional uint32          monster_exp = 6;
  optional uint32          battle_round = 7;
  optional uint32          battle_idx = 8;
}

message S2C_AreaBattleTeamInfoNtf {
  optional AreaBattleTeam team_info= 1;
}


//随机商店自动刷新购买
message C2S_AutoShopRefresh {
  required uint32 shop_type = 1; //刷新商店类型
  repeated Award  item_list = 2; //购买列表
  optional uint32 fresh_time = 3; //本轮刷新次数
  repeated uint32 permit_pricetype = 4; //允许使用的货币类型
}

message S2C_AutoShopRefresh {
  required uint32 ret = 1;  //购买结果
  optional uint32 fresh_time = 2; //本轮刷新次数
  repeated Award consumes = 3; //购买消耗
  repeated Award awards = 4; //购买所得
  optional uint32 shop_type = 5; //商店类型
  optional uint32 refresh_count = 6; //已用刷新次数
  optional uint32 free_refresh_count = 7; //剩余免费刷新次数
  optional uint32 end_reason = 8; //购买中断原因
}

message C2S_BuyBagSize {
}

message S2C_BuyBagSize {
	required uint32 ret = 1;
	optional uint32 bought_size = 2; //购买到的位置
	optional uint32 sum_size = 3; //总位置
}

//5.5.0 英雄远征
//奖励状态
enum AREAPVE_AWARD_STATUS {
  AREAPVE_CAN_NOT_GET = 1; //不能领取（未解锁）
  AREAPVE_CAN_GET = 2; //可领取
  AREAPVE_HAS_GOT = 3; //已领取
}

message C2S_AreapveCreateGame {
  optional uint32 challenge_id = 1; //挑战副本ID
}

message S2C_AreapveCreateGame {
  required uint32 ret = 1;
  optional uint64 game_id = 2; //创建的副本ID
  optional AreaBattleGame game_info = 3;
  optional uint32 monster_level_id = 4;
}

message C2S_AreapveChangeFormation {
  required uint64 id = 1;      
  optional uint32 from = 2;   //变阵原位置
  optional uint32 to = 3;  //变阵目标位置
}

message S2C_AreapveChangeFormation {
  required uint32 ret = 1;
}

message C2S_AreapveSelectSkill {
  required uint64 id = 1;   
  optional uint32 selected = 2; //选择的技能
}

message S2C_AreapveSelectSkill {
  required uint32 ret = 1;
}

message C2S_AreapveAttack {
  required uint64 id = 1; //游戏ID
}

message S2C_AreapveAttack {
  required uint32 ret = 1;   
}

message C2S_AreapveLoadMonsterPrepareInfo {
}

message S2C_AreapveLoadMonsterPrepareInfo {
  required uint32 ret = 1;
  optional uint32 challenge_time = 2; //剩余挑战次数
  optional uint32 max_challenge_id = 3; //副本最大通关ID
}

message C2S_AreapveLoadMonsterInfo {
}

message S2C_AreapveLoadMonsterInfo {
  required uint32 ret = 1;
  optional uint32 monster_id = 2;     //守护兽ID
  optional uint32 monster_level = 3;  //守护兽等级
  optional uint32 monster_exp = 4; //守护兽经验
  repeated uint32 awarded = 5;   //已领取奖励
  optional uint32 monster_exp_addition = 6; //经验值获取加成
}

message C2S_AreapveGetMonsterLevelAward {
  required uint32 id = 1;   //奖励ID
}

message S2C_AreapveGetMonsterLevelAward {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message C2S_AreapveCancelGame {
  required uint64 game_id = 1;
}

message S2C_AreapveCancelGame { 
  required uint32 ret = 1;
  optional uint64 game_id = 2;
}

message S2C_GetTimeItem {
	repeated TimeItem items = 1;	
}

message C2S_UseTimeItem {
	required uint64 id = 1;	
}

message S2C_UseTimeItem {
	required uint32 ret = 1;
	optional uint64 id  = 2;
	repeated Award awards = 3;
}

message C2S_UserEmoji{
}

message S2C_UserEmoji{
	required uint32 ret = 1;
	repeated uint32 emoji_pkgs = 2;
}

message KeyValueI64 {
	required int32 key = 1;
    required int64 value = 2;
}

//玩家身上的一些global标记
enum USER_FLAG {
  UPDATE_REWARD	= 0; //5.7.0换包奖励
  BATTLE_FINISH	= 1; //5.7.0联盟农庄完成护卫‘佣兵’级别或以上级别
	SPRING_CARD_ID	= 2; //新春贺卡是否领取过奖励 活动编号
  LOULAN_HONOR	= 3; //楼兰的个人荣耀值 loulanStartTime <<32 + honor
	WWTB_LEVEL_GUI 	= 4; //6.2.0-异兽副本最高通关等级-玄武
	WWTB_LEVEL_KUN 	= 5; //6.2.0-异兽副本最高通关等级-鲲
	WWTB_LEVEL_ZHU 	= 6; //6.2.0-异兽副本最高通关等级-烛龙
	BUY_BAG_SIZE	= 7; //6.3.50-玩家购买的背包空间
	ALLIANCE_BATTLE = 8; //6.3.50-联盟副本一键挑战
  WWTB_LEVEL_KUI = 9; //6.4.0-异兽副本最高通关等级-傀
}

//请求换包奖励
message C2S_GetUpdateReward {}

message S2C_GetUpdateReward {
	required uint32 ret = 1;
	repeated Award awards = 2;
}

//更新标志
message S2C_UpdateUserModuleFlags {
	repeated KeyValueI64 flags = 1;		
}

// 5.7.0 通行证
// 通行证活动时间
message BattlePassTime {
  optional uint32 time_begin = 1; // 活动开始时间
  optional uint32 time_end_mission = 2; // 活动任务结束时间
  optional uint32 time_end = 3; // 活动结束时间
}
// 通行证任务
message BattlePassMission {
  optional uint32 id = 1; // 任务id
  optional uint32 value = 2; // 任务进度
  optional uint32 complete_count = 3; // 任务完成次数
}

// 通行证信息
message C2S_BattlePassInfo {

}
message S2C_BattlePassInfo {
  required uint32 ret = 1;
  optional BattlePassTime battle_pass_time = 2; // 活动时间
  optional uint32 begin_user_level = 3; // 活动开始时的角色等级(用户获取配置中的所有可接任务的)
  optional bool has_buy_pass = 4; // 是否购买了通行证
  optional uint32 exp = 5; // 当前经验(因为是走的Resource的流程,所以)
  optional uint32 award_level_free = 6; // 当前免费奖励领取等级
  optional uint32 award_level_pay = 7; // 当前收费奖励领取等级
  repeated BattlePassMission sli_mission = 8; // 当前的任务状态(所有有数据的任务信息)
  repeated uint32 award_level_free_list = 9; //免费领取的等级列表
  repeated uint32 award_level_pay_list = 10;  //付费领取的等级列表
}

message S2C_BattlePassNtf {
  optional uint32 level = 1; //最新等级
}

// 领奖
message C2S_BattlePassGetAward {

}
message S2C_BattlePassGetAward {
  required uint32 ret = 1;
  repeated Award sli_award = 2;
  optional uint32 award_level_free = 3; // 当前免费奖励领取等级
  optional uint32 award_level_pay = 4; // 当前收费奖励领取等级
}

message C2S_BattlePassGetLevelAward {
  optional uint32 level = 1;
}

message S2C_BattlePassGetLevelAward {
 required uint32 ret = 1;
 repeated Award sli_award = 2;
 optional uint32 level = 3;
}

// 购买通行证
message S2C_BattlePassBuyPass {
  required uint32 ret = 1;
}

// 购买通行证经验
message S2C_BattlePassBuyExp {
  required uint32 ret = 1;
  optional uint32 buy_expId = 2; // 活动直充表格id
  optional uint32 exp = 3; // 获得的经验
}

// 客户端获配置表格
// 注:这个是通用版本,但是因为数据量太大,导致客户端响应时间过长,用户体验不好,最终还是决定使用特殊表格特殊处理的做法
enum EXCEL_DATA_TYPE {
  EXCEL_DATA_TYPE_SPECIAL_HOLIDAY_INFO = 1; // 欢庆任务信息
  EXCEL_DATA_TYPE_SPECIAL_HOLIDAY_SALE = 2; // 欢庆任务折扣
}

message C2S_GetExcelData {
  optional uint32 excel_data_type = 1; // 表格类型
  optional uint32 special_holiday_limit_time = 2; // 欢庆期数(0:至今为止的所有数据)
}

message S2C_GetExcelData {
  required uint32 ret = 1;
  optional bool is_finish = 2; // 数据传输是否完成
  optional string data = 3; // json格式数据
  optional uint32 excel_data_type = 4; // 表格类型
  optional uint32 special_holiday_limit_time = 5; // 欢庆期数(0:至今为止的所有数据)
}

message LouLanDefense {
  optional uint32 hp = 1;                                                                                                                                                   
  optional uint32 max_hp = 2;
  optional uint32 lock_time = 3;
}

message LouLanMonster {                                                                                                                                                     
  optional uint32 monster_id = 1;
  optional uint32 reborn_time = 2;
  optional uint32 reborn_cd = 3;
}

message LouLanCity {
  optional uint32 city_id = 1;
  optional uint32 state_tm  = 2; //状态更新时间 
  repeated uint32 war_group = 3; //宣战这个城市的势力
  optional uint32 state   = 4;  //状态
  optional uint32 day_award_tm = 5;//每日奖励发送时间
  optional uint32 belong_tm = 6;       //归属总时间
  optional uint32 belong_start_tm = 7; //归属开始计时时间
}

message LouLanCellMines {
  optional uint32 level  = 1;
  optional uint32 monster_id = 2;
  optional uint32 tp     = 3;                                                                                                                                               
}

message LouLanCellBase {
  optional uint32 monster_id = 1;
  optional uint32 level      = 2;
  optional uint32 group      = 3;
  optional bool   is_in_city = 4; //是否在城里
}

message LouLanMapUser {
  required uint64 sid = 1;
  optional string sname = 2;
  required uint32 id = 3;
  optional string name = 4;
  optional uint32 main_role = 5;
  optional uint32 dress_id = 6;
  optional uint32 fight_value = 7;
  optional uint32 fight_pet = 8;//战宠
  optional uint32 level = 9;//等级
  optional uint32 sp1 = 10; //attacker x, y
  optional uint32 sp2 = 11;
  optional uint32 fid = 12;//头像框
  optional uint32 vip = 13;//
  optional string cname =14;
  optional uint64 new_fight_value = 15;
  optional uint32 cid = 16;//军团id
  optional uint32 alliance_id = 17;   //联盟ID
  optional string alliance_name = 18; //联盟名称
  optional uint64 ssid = 19; //g_om_config.Sid
  optional uint32 city_id = 20; //是否在城中，非零表示在
  optional uint32 enter_tm = 21; //进入城的时间
  optional uint32 clone_x = 22; //分身
  optional uint32 clone_y = 23;
  optional uint32 iron = 24;   //铁矿
  optional uint32 agate = 25;  //玛瑙
  optional uint32 strength = 26; //体力
  optional uint32 strength_tm = 27; //上次回复时间
  optional uint32 strength_max = 28; //体力上限 
  optional uint32 hp_buy_count = 29; //生命值购买次数
  optional uint32 strength_buy_count = 30; //体力购买次数
  optional uint32 honour = 31; //荣耀
  optional uint32 final_award_tm = 32;//最终奖励领取时间
  optional uint32 offline_time = 35; //离线时间
  optional uint32 honour_time = 36; //荣誉(贡辎)最后变动时间
  optional uint32 minister_pos = 37; //丞相位置(1-4)
  optional uint32 online_time = 39; //上次活跃时间
}

message LouLanMapCell {
  optional uint32 x = 1;
  optional uint32 y = 2;
  optional uint32 type = 3;
  optional LouLanMapUser  user = 4;
  optional LouLanDefense defense = 5;
  optional LouLanMapUser  attacker = 6;
  optional LouLanMonster monster = 7;
  optional LouLanCity   city = 8;
  optional LouLanCellBase base = 9;  //type==empty时才有，
  optional LouLanCellMines mines = 10; //资源点
  optional uint32 group = 11; //0  无归属，1 魏国， 2 蜀国， 3 吴国
}

message C2S_LouLanEnterMap{
}

message S2C_LouLanEnterMap{
  required uint32 ret = 1;
  repeated LouLanMapCell cells = 2;
  optional LouLanMapCell own_cell = 3;
  repeated LouLanMapCell citys = 4;
}

message C2S_LouLanAttackUser {
  optional uint32 x = 1;
  optional uint32 y = 2;
}
message S2C_LouLanAttackUser {
  required uint32 ret = 1;
  optional bool   is_win = 2;
  optional uint32 cut_def = 3; //打掉的城防，
  optional uint32 cut_def_self = 4; //自己丢失的城防
  repeated Award   awards = 5;
}

message C2S_LouLanAttackMonster {
  optional uint32 x = 1;
  optional uint32 y = 2;
  optional uint32 monster_id = 3;
}

message S2C_LouLanAttackMonster {
  required uint32 ret = 1;
  optional bool   is_win = 2;
  optional uint32 cut_def = 3; //打掉的城防，
  optional uint32 cut_def_self = 4; //自己丢失的城防
  optional uint32 monster_id = 5;
  optional uint32 cell_tp = 6; //2 怪物点， 3 资源点
  repeated Award   awards = 7;
}

message C2S_LouLanAttackCity {
  optional uint32 x = 1;
  optional uint32 y = 2;
  optional uint32 city_id = 3;
}

message S2C_LouLanAttackCity {
  required uint32 ret = 1;
  optional bool   is_win = 2;
  optional uint32 cut_def = 3; //打掉的城防，
  optional uint32 cut_def_self = 4; //自己丢失的城防
  repeated Award   awards = 5;
}

message C2S_LouLanMigrate {
  optional uint32 to_x = 1;
  optional uint32 to_y = 2;
  optional uint32 migrate_type = 4; //0  迁移， 1 移动  3 驻防
}

message S2C_LouLanMigrate {
  required uint32 ret = 1;
  optional uint32 to_x = 2;
  optional uint32 to_y = 3;
  optional uint32 migrate_type = 4; //0  迁移， 1 移动  2 删除， 3 驻防
  optional uint32 strength = 5; 
}

message C2S_LouLanWarCity {
  optional uint32 city_id = 1;
  optional uint32 war_type = 2; //0 宣战， 1 标记, 2 取消标记
}

message S2C_LouLanWarCity {
  required uint32 ret = 1;
  optional uint32 city_id = 2;
  optional uint32 war_type = 3;
}

message C2S_LouLanReturnCity {
  optional uint32 city_id = 1;
}

message S2C_LouLanReturnCity {
  required uint32 ret = 1;
  optional uint32 strength = 2; //体力
  optional uint32 city_id = 3;
}

message C2S_LouLanGetRewards {
  optional uint32 tp = 1;    //0  -楼兰最终奖励   1-运镖奖励 2-劫镖奖励  3-帮助夺回奖励
  optional uint32 cart_id = 2;
  optional uint32 owner_uid = 3;
  optional uint64 owner_sid = 4; 
}
message S2C_LouLanGetRewards {
  required uint32 ret = 1;
  repeated Award  awards = 2;
  optional uint32 tp = 3;  //0  -楼兰最终奖励   1-运镖奖励 2-劫镖奖励  3-帮助夺回奖励
  optional uint32 cart_id = 4;
  optional uint32 owner_uid = 5;
  optional uint64 owner_sid = 6; 
}

message C2S_LouLanMapMove {
  optional uint32 x = 1;
  optional uint32 y = 2;
}

message S2C_LouLanMapMove {
  required uint32 ret = 1;
  optional uint32  center_x = 2;
  optional uint32  center_y = 3;
  repeated LouLanMapCell cells = 4;
}

message C2S_LouLanSetMigratePos  {
  optional uint32 x = 1;
  optional uint32 y = 2;
}

message S2C_LouLanSetMigratePos {
  required uint32 ret = 1;
  optional uint32 x = 2;
  optional uint32 y = 3;

}

message S2C_LouLanCellChangeNtf {
  optional LouLanMapCell  cell = 1;
}

message S2C_LouLanWarCityNtf {
}

message S2C_LouLanCityChangeNtf {
}

message S2C_LouLanAwardsNtf {
  repeated uint32  city_list = 1;
  repeated Award   awards = 2;
}

message C2S_LouLanMapListen  {
}

message S2C_LouLanMapListen  {
  required uint32 ret = 1; // 结果信息
}

message C2S_LouLanMapQuit  {
}

message S2C_LouLanMapQuit  {
}

message FailUserInfo {
  optional uint64 sid = 1;
  optional uint32 uid = 2;
  optional uint32 tm = 3; //最近失败时间                                                                                                                                    
}
//6.5.0 丝绸之路 start
message UserEscortInfo {
  optional EscortCart     escort_cart = 1;    //镖车信息
  repeated RobCartInfo    rob_carts  = 2;    //抢夺的镖车
  repeated BackCartInfo   back_carts = 3;   //夺回的镖车
  repeated BackRequest    back_request = 4; //夺回邀请
  optional uint32         rand_goods_id = 5; //当前随机获取的goods id
  optional uint32         daily_escort_cnt = 6; //每日运镖次数
  optional uint32         daily_rand_cnt   = 7; //每日随机镖车次数
  optional uint32         rob_cart_times  = 8;
  optional uint32         help_back_times = 9;
  repeated FailUserInfo   fail_user_info = 10;
}

message LouLanEscortUser {
  optional uint32  id = 1;
  optional uint64  sid = 2;
  optional string  name = 3;
  optional uint32  main_role = 4;
  optional uint64  new_fight_value = 5;
}

message EscortCartBaseInfo {
  optional uint32 cart_id = 1;
  optional uint32 start_tm = 2;
  optional uint32 owner_group = 3;
  optional uint32 goods_id = 4;
  optional uint32 rob_times = 5;
  optional LouLanEscortUser owner = 6;
  optional uint32 back_times = 7;
  optional uint32 end_tm = 8;
}

message EscortCart {
  optional uint32 cart_id = 1; //以接镖时间做id
  optional uint32 start_tm = 2;
  optional uint32 owner_group = 3; //镖车所有者的势力
  optional uint32 goods_id  = 4;//镖车商品
  optional uint32 goods_num = 5;
  repeated RobInfo  rob_infos = 6;//被夺信息
  optional LouLanMapUser owner = 7;
  repeated uint32 formation = 8; //镖车阵型
  optional uint32  state = 9; 
  repeated BackInfo back_infos = 10; //被夺回信息
  optional uint32 end_tm = 11;//镖车到达时间
}

message RobCartInfo {
  optional uint32 cart_id = 1;
  optional LouLanMapUser owner = 2;
  optional uint32 owner_group = 3;
  optional uint32 goods_id = 4;
  optional uint32 rob_tm = 5;
  repeated uint32 formation = 6; //夺镖阵型
  optional uint32 state = 7; //0 --正常   1-已经领奖  2-镖车被夺回
  optional uint32 rob_end_tm = 8; //销赃结束时间
}

message BackCartInfo {
  optional uint32 cart_id = 1;
  optional LouLanMapUser owner = 2;
  optional uint32 owner_group = 3;
  optional uint32 goods_id = 4;
  optional uint32 back_tm = 6;
}

message BackRequest {
  optional uint32 cart_id = 1;
  optional LouLanMapUser owner = 2;
  optional LouLanMapUser rober = 3;
  optional uint32 goods_id = 4;
  optional uint32 rob_tm = 5;
  optional uint32 state = 6;  //0 -正常   1-奖励已经领取， 2- 可领奖
  optional uint32 rober_group = 7; //夺镖者势力
  optional uint32 owner_group = 8;
  optional uint32 rob_end_tm = 9;
}

message RobInfo {
  optional LouLanMapUser rober = 1;
  optional uint32 rob_tm = 2;
  optional uint32 rob_id = 3;
  optional uint32 rober_group = 4;
  optional uint32 state = 5; // 非0 表示被夺回
}

message BackInfo {
  optional LouLanMapUser backer = 1;
  optional uint32 back_tm = 2;
  optional uint32 backer_group = 3;
}

message C2S_LouLanEscortCartList {  //镖车信息
  optional uint32 owner_uid = 1;  //非0 表示指定某人的镖车信息
  optional uint64 owner_sid = 2;
}

message S2C_LouLanEscortCartList {
  required uint32 ret = 1;
  repeated EscortCartBaseInfo escort_carts = 2;
  optional uint32 owner_uid = 3;
  optional uint64 owner_sid = 4;
  optional UserEscortInfo user_escort = 5;
}

message C2S_LouLanRobCart {   //抢夺镖车
  optional uint32 cart_id = 1;
  optional uint32 owner_uid = 2;
  optional uint64 owner_sid = 3;
  repeated uint32 formation = 4; //阵型
}

message S2C_LouLanRobCart {
  required uint32 ret = 1;
  optional RobCartInfo rob_cart_info = 2;
  optional uint64 report_id = 3;//战报id
  optional uint64 owner_sid = 4;
  optional uint32 owner_uid = 5;
}

message C2S_LouLanRandEscortCart {
}

message S2C_LouLanRandEscortCart {
  required uint32 ret = 1;
  optional uint32 goods_id = 2;
}

message C2S_LouLanGetEscortCart { //开始运镖
  optional uint32 goods_id = 1;
  repeated uint32 formation = 2; //阵型
}

message S2C_LouLanGetEscortCart {
  optional uint32 ret = 1;
  optional EscortCart escort_cart = 2;
}

message C2S_LouLanRequestBackCart { //请求夺回镖车
  optional uint32 to_uid = 1;
  optional uint64 to_sid = 2;
  optional uint32 rob_uid = 3;
  optional uint64 rob_sid = 4;
}

message S2C_LouLanRequestBackCart {
  optional uint32 ret = 1;
  optional uint32 to_uid = 2;
  optional uint64 to_sid = 3;
}

message S2C_LouLanRequestBackCartNtf { //请求夺回镖车通知
  optional BackRequest back_request = 1;
}

message C2S_LouLanHelpBackCart {  //帮助夺回镖车
  optional uint32 cart_id = 1;
  optional uint32 owner_uid = 2;
  optional uint64 owner_sid = 3;
  optional uint32 rob_uid = 4;
  optional uint64 rob_sid = 5;
  repeated uint32 formation = 6; //阵型
  optional uint32 help_tp = 7; //0-帮助夺回镖车，  1 -获取夺镖者位置
}

message S2C_LouLanHelpBackCart {
  optional uint32 ret = 1;
  optional uint64 report_id = 2; //战报id
  optional uint32 help_tp = 3;
  optional uint32 rober_x = 4;
  optional uint32 rober_y = 5;
}

message S2C_LouLanHelpBackCartNtf { //帮助夺回镖车通知
  optional BackInfo back_info = 1;
  optional uint32  rober_uid = 2;
  optional uint64  rober_sid = 3;
}

message S2C_LouLanCartInfoNtf { //镖车信息变更广播
  optional EscortCartBaseInfo cart_info = 1;
  optional EscortCart         owner_cart_info = 2;
}
//6.5.0 丝绸之路 end

message C2S_LouLanBaseInfo {
}
message S2C_LouLanBaseInfo {
  required uint32 ret = 1; // 结果信息
  optional uint32 id = 2; // 版本号(活动数据)
  optional uint32 time_begin = 3; // 活动开始时间(活动数据)
  optional uint32 time_join_end = 4; // 活动参与结束时间(活动数据)
  optional uint32 time_end = 5; // 活动结束时间(活动数据)
  optional uint32 group_id = 6; // 阵营id
  optional bool has_join_activity = 7; // 是否已经加入过活动
  optional bool  is_map_end = 8;      //活动是否已经提前结束
  optional uint32 final_award_tm = 9; //最后领奖时间
  optional uint32 award_end = 10; // 领奖结束时间(活动数据)
  optional uint32 my_honor  = 11; //自己的荣耀值
  optional uint32 wait1_tm = 12; //等待1 结束时间
  optional uint32 escort_tm = 13; //运镖结束时间
  optional uint32 wait2_tm = 14;   //等待2结束时间
}

message LouLanCorp {
  optional uint64 server_id = 1;
  optional uint32 corp_id = 2;
}
message LouLanAlliance {
  optional uint32 area_id = 1; // 战区id
  optional uint32 alliance_id = 2; // 联盟id
  repeated LouLanCorp sli_corp = 3; // 公会信息
  optional LouLanMapUser leader = 4; // 联盟长信息
}

message LouLanGroup {
  optional uint32 id = 1;
  optional LouLanMapUser leader = 2;
  repeated LouLanMapUser minister = 3;
  optional uint32 war_city_id  = 4;
  optional uint32 migrate_pos_x = 5;
  optional uint32 migrate_pos_y = 6;
  optional uint32 sign_city_id  = 7;
  optional uint64 honor       = 8;//荣耀值
  optional uint32 war_city_tm = 9; //上次宣战时间
  repeated uint32 city_list   = 10; //城池列表
}

message C2S_LouLanGroupInfo {
  optional uint32 group_id = 1; // 阵营id(目前暂时不限制查询的阵营是否不是自己所在的阵营)
}
message S2C_LouLanGroupInfo { // MARK:因为是一次拉取全部数据,所以根据协议的内容,要注意后面的扩充会不会导致协议超长
  required uint32 ret = 1;
  optional uint32 group_id = 2; // 阵营id
  optional LouLanGroup group_info = 3; //势力基本信息
}

message S2C_LouLanGroupJobChange {
  required uint32 ret = 1;
  //required uint32 job = 2; //(0:无/1:王/2:丞相)
  //optional LouLanMapUser user = 3;
}

message C2S_LouLanGroupJob {
  optional uint32 group_id = 1; // 阵营id // 暂时不限制是否可以查看其他阵营官职信息
}
message S2C_LouLanGroupJob {
  required uint32 ret = 1;
  optional uint32 group_id = 2; // 阵营id
  optional LouLanMapUser leader = 3; // 王
  repeated LouLanMapUser sli_minister = 4; // 丞相
}

message C2S_LouLanGroupCandidate {
  optional uint32 group_id = 1; // 阵营id
}
message S2C_LouLanGroupCandidate {
  required uint32 ret = 1;
  optional uint32 group_id = 2; // 阵营id
  repeated LouLanMapUser sli_candidate = 3; // 候选人(使用crossuser目前没有对应的职位标记)(这个列表不会对当前的王和丞相进行过滤,因为可能会有用)
}

message C2S_LouLanSetJobMinister {
  optional uint64 target_server_id = 1; // 目标角色的服务器id
  optional uint32 target_user_id = 2; // 目标角色的id
  optional bool is_recall = 3; // 是否是罢免
  optional uint32 pos = 4; // 丞相位(1~4)
}
message S2C_LouLanSetJobMinister {
  required uint32 ret = 1;
  optional uint64 target_server_id = 2; // 目标角色的服务器id
  optional uint32 target_user_id = 3; // 目标角色的id
  optional bool is_recall = 4; // 是否是罢免
  optional uint32 pos = 5; // 丞相位(1~4)
}

message C2S_LouLanSetJobLeader {
  optional uint64 target_server_id = 1; // 目标角色的服务器id
  optional uint32 target_user_id = 2; // 目标角色的id
}
message S2C_LouLanSetJobLeader {
  required uint32 ret = 1;
  optional uint64 target_server_id = 2; // 目标角色的服务器id
  optional uint32 target_user_id = 3; // 目标角色的id
}

message C2S_LouLanImpeachLeader {
  optional uint64 leader_server_id = 1; // 当前王的服务器id
  optional uint32 leader_user_id = 2; // 当前王的id
}
message S2C_LouLanImpeachLeader {
  required uint32 ret = 1;
  optional uint64 leader_server_id = 2; // 当前王的服务器id
  optional uint32 leader_user_id = 3; // 当前王的id
}

message C2S_LouLanGroupLeaderCandidate {
  optional uint32 group_id = 1; // 阵营id
}
message S2C_LouLanGroupLeaderCandidate {
  required uint32 ret = 1;
  optional uint32 group_id = 2; // 阵营id
  repeated LouLanMapUser sli_candidate = 3; // 候选人(使用crossuser目前没有对应的职位标记)(这个列表不会对当前的王和丞相进行过滤,因为可能会有用)
}

//科技信息
message LouLanTechInfo {
	required uint32 id = 1;	//科技id
	required uint32 level = 2; //等级
}

//道具信息
message LouLanItemInfo {
	required uint32 id = 1;	//道具id
	required uint32 num = 2; //数量
}

//获取科技信息
message C2S_LouLanGetTechInfos {
}
message S2C_LouLanGetTechInfos {
	required uint32 ret = 1; //返回值
	repeated LouLanTechInfo group_techs = 2; //势力科技列表
	repeated LouLanTechInfo user_techs = 3; //个人科技列表
}

//升级科技
message C2S_LouLanUplevelTech {
	optional uint32 type = 1; //升级类型(1:势力2:个人)
	optional uint32 tech_id = 2; //科技id
}
message S2C_LouLanUplevelTech {
	required uint32 ret = 1; //返回值
	optional uint32 type = 2; //升级类型(1:势力2:个人)
	optional uint32 tech_id = 3; //科技id
	optional uint32 level = 4; //等级
}

//重置科技
message C2S_LouLanResetTech {
	optional uint32 type = 1; //类型(1:势力2:个人)
}
message S2C_LouLanResetTech {
	required uint32 ret = 1; //返回值
	optional uint32 type = 2; //类型(1:势力2:个人)
	repeated LouLanTechInfo techs = 3; //科技列表
}

//获取道具信息
message C2S_LouLanGetItemInfos {
}
message S2C_LouLanGetItemInfos {
	required uint32 ret = 1; //返回值
	repeated LouLanItemInfo group_techs = 2; //势力道具列表
	repeated LouLanItemInfo user_techs = 3; //个人道具列表
}

//获得道具
message S2C_LouLanAddItem {
	optional uint32 type = 1; //类型(1:势力2:个人)
	optional uint32 item_id = 2; //道具id
	optional uint32 add_num = 3; //获得数量
	optional uint32 num = 4; //最新数量
}

//购买道具
message C2S_LouLanBuyItem {
	optional uint32 type = 1; //类型(1:势力2:个人)
	optional uint32 item_id = 2; //道具id
	optional uint32 buy_num = 3; //购买数量
}
message S2C_LouLanBuyItem {
	required uint32 ret = 1; //返回值
	optional uint32 type = 2; //类型(1:势力2:个人)
	optional uint32 item_id = 3; //道具id
	optional uint32 buy_num = 4; //购买数量
	optional uint32 num = 5; //最新数量
}

//使用道具
message C2S_LouLanUseItem {
	optional uint32 type = 1; //类型(1:势力2:个人)
	optional uint32 item_id = 2; //道具id
	optional uint32 use_num = 3; //使用数量
}
message S2C_LouLanUseItem {
	required uint32 ret = 1; //返回值
	optional uint32 type = 2; //类型(1:势力2:个人)
	optional uint32 item_id = 3; //道具id
	optional uint32 use_num = 4; //使用数量
	optional uint32 num = 5; //最新数量
}

//购买资源
message C2S_LouLanBuyRes {
	optional uint32 type = 1; //类型(1:生命值2:移动力)
	optional uint32 buy_num = 2; //购买数量
}
message S2C_LouLanBuyRes {
	required uint32 ret = 1; //返回值
	optional uint32 type = 2; //类型(1:生命值2:移动力)
	optional uint32 buy_num = 3; //购买数量
	optional uint32 num = 4; //最新数量
}

//留言板-信息
message LouLanGroupMsgBoardContent {
	required uint64 ts = 1;					//毫秒时间戳-唯一标识
	required uint64 sid = 2;				//服务器ID
	required string name = 3;				//发表人
	required uint32 position = 4;			//势力职务
	required string content = 5;			//内容
	optional string voicemail_id = 6;		//非0表示语音聊天
	optional uint32 voicemail_length = 7;	//时长
}

//势力留言板-获取信息
message C2S_LouLanGroupMsgBoardGet {
	required uint64 ts = 1;	//毫秒时间戳(0-全部 N-获取最新)
}
message S2C_LouLanGroupMsgBoardGet {
	required uint32 ret = 1;
	optional uint64 top = 2;	//置顶
	repeated LouLanGroupMsgBoardContent contents = 3;
}

enum LouLanGroupMsgBoardOp {
	AddNew  	= 1; //添加新留言
	SetTop  	= 2; //置顶
	CancelTop 	= 3; //取消置顶
	Delete 		= 4; //删除
}
//势力留言板-操作
message C2S_LouLanGroupMsgBoardOp {
	required uint32 op = 1;
	optional string content = 2;
	optional string voicemail_id = 3;
	optional uint32 voicemail_length = 4; //时长
	optional uint64 ts = 5;
}
message S2C_LouLanGroupMsgBoardOp {
	required uint32 ret = 1;
	required uint32 op = 2;
	optional LouLanGroupMsgBoardContent content = 3;
}

//势力留言板-广播
message S2C_LouLanGroupMsgBoardOpBroadCast {
	required uint32 op = 1;
	required LouLanGroupMsgBoardContent content = 2;
}

message C2S_GetSpringWordsAwards {
	required uint32 id  = 1;
}

message S2C_GetSpringWordsAwards {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated KeyValueT infos= 3; 
}

//6.2.0-南征北战
message C2S_WarFareInfo {
}

message AwardChapterInfo {
  optional uint32 battle_id = 1;
  optional uint32 chapter_id = 2;
  optional uint32 award_time = 3;
}

message S2C_WarFareInfo {
  required uint32   ret = 1;
  optional uint32   curr_battle = 2;
  optional uint32   curr_chapter = 3;
  optional uint32   curr_pos     = 4;
  optional uint32   curr_road    = 5;
  optional uint32   state        = 6;
  optional uint32   start_time    = 7;
  optional uint32   end_time      = 8;
  optional uint32   fail_times   = 9;
  optional uint32   reset_times   = 10;
  optional uint32   war_id = 11;
  repeated AwardChapterInfo   award_chapters = 12;
  optional uint32   fast_battle = 13;
  optional uint32   fast_chapter = 14;
  optional uint32   last_chapter = 15; //上赛季停留章节
  optional uint32   buy_reset_times = 16; //购买的重置次数
}

message C2S_WarFareBuyResetTimes {
  optional uint32   times = 1;
}

message S2C_WarFareBuyResetTimes {
  required uint32   ret = 1;
  optional uint32   reset_times = 2;
  optional uint32   buy_times = 3;  //总共购买了多少次
}

message C2S_GetChapterAwards {
  optional uint32  battle_id = 1;
  optional uint32  chapter_id = 2;
}

message S2C_GetChapterAwards {
  required uint32   ret = 1;
  optional uint32   battle_id = 2;
  optional uint32   chapter_id = 3;
  repeated Award    awards = 4;
}

message C2S_SelectChapterRoad {
  optional uint32 battle_id = 1;
  optional uint32 chapter_id = 2;
  optional uint32 road_id = 3;
}

message S2C_SelectChapterRoad {
  required uint32   ret = 1;
  optional uint32 battle_id = 2;
  optional uint32 chapter_id = 3;
  optional uint32 road_id = 4;
}

message C2S_WarFareChapterInfo {
  optional uint32 battle_id = 1;
  optional uint32 chapter_id = 2;
}

//message GateMessageInfo {
//  optional uint64  owner_sid = 1;
//  optional uint32  owner_uid = 2;
//  optional uint32  support_cnt = 3;
//  optional string  owner_name = 4;
//  optional string  msg = 5;
//  optional uint32  msg_id = 6;
//}

message WarFareUserGateInfo {
  optional uint64 sid = 1;
  optional uint32 uid = 2;
  optional uint32 gate_pos = 3;
  optional uint32 time = 4;
  optional uint32 battle_id = 5;
  optional uint32 chapter_id = 6;
}

message WarFarePassUser {
  optional uint64 sid = 1;
  optional string name = 2;
}

message GateInfo {
  optional uint32 gate_pos = 1;
  optional uint32 event_type = 2;
  optional uint32 event_sub_type = 3;
  optional RandomMonsterTeam  team_info = 4;
  optional WarFarePassUser  first_user = 5;
  optional WarFarePassUser  min_fv_user = 6;
}

message WarFareChapterInfo {
  optional uint32 battle_id = 1;
  optional uint32 chapter_id = 2;
  repeated GateInfo gate_infos = 3;
}

message S2C_WarFareChapterInfo {
  required uint32   ret = 1;
  optional WarFareChapterInfo chapter_info = 2;
  repeated WarFareUserGateInfo user_gate_infos = 3;
  repeated uint32   own_buffs = 4;
  repeated uint32   boss_buffs = 5;
  repeated uint32   pass_pos_list = 6;
  optional uint32   reset_times   = 7;
  optional uint32   fail_times   = 8;  
  optional RandomMonsterTeam  boss_info = 9;
  optional WarFarePassUser  boss_first_user = 10;
  optional WarFarePassUser  boss_min_fv_user = 11;
}

message C2S_StartBattle {
  optional uint32 monster_team_id = 1;  //怪物组id
  optional uint32 monstar_strength = 2; //怪物强度
  optional uint32 pet_strength = 3; //战马强度
  optional uint64 power = 4; //战力
}
message S2C_StartBattle {
  required uint32   ret = 1;
  optional uint32   win_times = 2;
  optional uint64   report_id = 3;
  repeated uint32   rounds  = 4;
}

message C2S_StepNext {
  optional uint32 battle_id = 1;  
  optional uint32 chapter_id = 2; //0 表示快速定位战役
  optional uint32 road_id = 3;    
  optional uint32 gate_pos = 4;   //19 表示快速定位战役内章节，0 表示进入下一个战役的章节
}

message S2C_StepNext {
  required uint32   ret = 1;
  optional uint32   battle_id = 2;
  optional uint32   chapter_id = 3;
  optional uint32   road_id = 4;
  optional uint32   gate_pos = 5;
  optional bool     is_battle_win = 6;
  optional uint64   report_id  = 7;
  repeated uint32   own_buffs = 8;
  repeated uint32   boss_buffs = 9;
  optional uint32   fail_times   = 10;
  optional uint32   last_battle_time = 11;//6.3.50-上次战斗时间
}

message C2S_GetUserListPos {
  repeated SidUid   user_list = 1;
}

message S2C_GetUserListPos {
  required uint32   ret = 1;
  repeated WarFareUserGateInfo user_gate_infos = 2;
}

message C2S_SupportMessage {
  optional uint32 battle_id = 1;
  optional uint32 chapter_id = 2;
  optional uint32 road_id = 3;
  optional uint32 gate_pos = 4;
  optional uint32 msg_id = 5;
}

message S2C_SupportMessage {
  required uint32   ret = 1;
  //optional GateMessageInfo msg_info = 2;
}

message C2S_ResetChapterRoad {
  optional uint32  battle_id = 1;
  optional uint32  chapter_id = 2;
}

message S2C_ResetChapterRoad {
  required uint32   ret = 1;
}

message S2C_WarFareAwardsNtf {
}

message S2C_WriteMessageNtf {
}

message S2C_SupportMessageNtf {
}

//6.3.0   老玩家召回
message OldPlayerTask {
  optional uint32 task_id = 1;
  optional uint32 task_value = 2;
  optional uint32 task_state = 3;
  optional uint32 task_type = 4;
}

message OldPlayerFund {
  optional uint32 fund_id = 1;
  optional uint32 start_tm = 2;
  repeated uint32 award_days = 3;
}

message OldPlayerShopItem {
  optional uint32 shop_item_id = 1;//商品id
  optional uint32 buy_times = 2;  //购买次数
}

message OldPlayerInfo {
  optional uint32 act_id =1;  //活动id
  optional uint32 off_days = 2;//流失天数
  repeated Award  login_awards = 3; //见面礼
  optional uint32 login_awards_tm = 4; //领取见面礼时间
  optional uint32 box_id = 5; //心愿礼盒
  repeated OldPlayerTask task_list = 6; //回归任务
  optional OldPlayerFund  fund = 7; //回归基金
  optional uint32 total_charge = 8; //累计充值
  repeated uint32 total_charge_awards = 9;//累充奖励领取列表
  repeated OldPlayerShopItem shop_items = 10; //贩售商店信息
  optional uint32 status   = 11;//状态，0 无，1: 仅见面礼， 2:仅心愿礼盒, 3：心愿礼盒跟见面礼
  repeated uint32 box_awards = 12; //心愿礼盒领取过的奖励
  optional uint32 add_exp = 13; //每日额外获得经验最大值
  optional uint32 rebel_boss_cnt = 14; //叛军boss加成次数
  optional uint32 start_day = 15; //回归时间
  optional uint32 task_day = 16; //
  optional uint32 back_score = 17;//回归积分
}

message C2S_OldPlayerInfo {
}
message S2C_OldPlayerInfo {
  required uint32   ret = 1;
  optional OldPlayerInfo info = 2;
}

message C2S_OldPlayerCompleteTask {
  optional uint32 task_type = 1; //1 每日签到任务  2：每日挑战任务   3：基金奖励   4：累充奖励  5: 心愿礼盒奖励
  optional uint32 task_id = 2;   // 任务id， 基金奖励对应的是奖励id， 累充奖励对应的是奖励id
}
message S2C_OldPlayerCompleteTask {
  required uint32   ret = 1;
  optional uint32 task_type = 2;
  optional uint32 task_id = 3;
  repeated Award  awards = 4; 
  optional uint32 back_score= 5; //回归积分
}

message C2S_OldPlayerGetGift {
}

message S2C_OldPlayerGetGift {
  required uint32   ret = 1;
  repeated Award    awards = 2;
}

message C2S_OldPlayerBuyItem {
  optional uint32 shop_item_id = 1;
  optional uint32 buy_cnt = 2;
}

message S2C_OldPlayerBuyItem {
  required uint32   ret = 1;
  optional uint32 shop_item_id = 2;
  optional uint32 buy_cnt = 3;
}

message C2S_OldPlayerSelectBox {
  optional uint32 box_id = 1;
}
message S2C_OldPlayerSelectBox {
  required uint32   ret = 1;
  optional uint32 box_id = 2;
}

message S2C_OldPlayerTaskNtf {
  optional uint32 task_id =1;
  optional uint32 task_value = 2;
  optional uint32 task_state = 3;
}

message S2C_OldPlayerDataNtf {
  optional uint32 data_type = 1; //1 叛军加成次数
  optional uint32 value   = 2;
}

//6.0.0-汉室秘宝
message RateTreasureRedHit {
	optional RateTreasureInfo info	= 1; //活动信息
	optional uint32 ticket_num      = 2; //奖券数量
	optional uint32 draw_count		= 3; //抽奖计数
}

message RateTreasureInfo {
	optional uint32 id 			= 1; //活动ID 
	optional uint32 start_time 	= 2; //活动开始时间
	optional uint32 end_time 	= 3; //活动结束时间
	optional uint32 config_id 	= 4; //活动配置ID
}

//奖励信息
message RateTreasureGiftInfo {
	optional uint32 gift_id		= 1; //奖品id(0表示未设置)
	optional uint32 state 		= 2; //奖品状态(0:未抽中1:抽中了)
	optional uint32 level		= 3; //奖品格的品质
}

//玩家活动信息
message RateTreasureUserInfo {
	optional uint32 ticket_num			= 1; //奖券数量
	optional uint32 draw_count			= 2; //抽奖计数
	repeated RateTreasureGiftInfo gifts = 3; //奖池信息
}

//获取信息
message C2S_RateTreasureGetInfo {
	
}
message S2C_RateTreasureGetInfo {
	required uint32 ret         			= 1; //返回值
	optional RateTreasureInfo info 			= 2; //活动信息 
	optional RateTreasureUserInfo user_info	= 3; //玩家的活动信息
}

//抽奖
message C2S_RateTreasureDraw {
	
}
message S2C_RateTreasureDraw {
	required uint32 ret         			= 1; //返回值
	optional uint32 gift_id					= 2; //抽中的奖品ID
	repeated Award awards					= 3; //奖励
	optional RateTreasureUserInfo user_info	= 4; //玩家的活动信息
}

//抽取全部
message C2S_RateTreasureDrawAll {
	
}
message S2C_RateTreasureDrawAll {
	required uint32 ret         			= 1; //返回值
	repeated uint32 gift_ids				= 2; //抽中的奖品ID列表
	repeated Award awards					= 3; //奖励
	optional RateTreasureUserInfo user_info	= 4; //玩家的活动信息
}

//重置奖池
message C2S_RateTreasureResetGifts {
	
}
message S2C_RateTreasureResetGifts {
	required uint32 ret         			= 1; //返回值
	optional RateTreasureUserInfo user_info	= 2; //玩家的活动信息
}

//选择奖池奖励
message C2S_RateTreasureSelectGift {
	optional uint32 index					= 1; //位置(1-10)
	optional uint32 gift_id					= 2; //奖励id
}
message S2C_RateTreasureSelectGift {
	required uint32 ret         			= 1; //返回值
	optional uint32 index					= 2; //位置(1-10)
	optional uint32 gift_id					= 3; //奖励id
	optional RateTreasureUserInfo user_info	= 4; //玩家的活动信息
}

message S2C_SpringFirecrackerShow {
	required uint32 ret = 1;
	required uint32 show_time = 2;	//特效截止时间
}

message S2C_TouristTimeOut{
}

//兵符赋能分支选择  
message C2S_SelectRunestoneEnhance {
	required  uint32 id = 1; //兵符id 
	required  uint32 tp = 2; //赋能分支类型
}
message S2C_SelectRunestoneEnhance {
	required  uint32 ret = 1;//状态码
	optional  uint32 id = 2;//兵符id 
	optional  uint32 tp = 3;//赋能分支类型
}
//兵符赋能赋能强化
message C2S_UpgradeRunestoneEnhance {
	required uint32 id = 1; //兵符id 
	required uint32 hole_type = 2;//灵力槽类型
	required uint32 level_span = 3; //灵力槽升级跨度(现阶段策划仅仅考虑0-1级，考虑后续多级强化)
}
message S2C_UpgradeRunestoneEnhance {
	required  uint32 ret = 1;//状态码
	optional uint32 id = 2 ;//兵符id 
	optional uint32 hole_type = 3;//强化的灵力槽类型
	optional uint32 level = 4;//灵力槽的等级
}
//兵符赋能重置
message C2S_ResetRunestoneEnhance {
	required uint32 id = 1;//兵符id
}

message S2C_ResetRunestoneEnhance {
	required uint32 ret = 1;//状态码
	optional uint32 id = 2;//兵符id
	repeated Award awards = 3;//兵符重置道具
}

//兵符 一键装备战魂
message C2S_OneKeyInstallRunestoneWarSoul {
    required uint32 id = 1 ;//兵符id  
    repeated uint32 warsoul_pos = 2;//战魂position数组
    repeated uint32 warsoul_ids = 3;//战魂id 数组
}
message S2C_OneKeyInstallRunestoneWarSoul {
    required uint32 ret = 1;
    optional uint32 id = 2;//兵符id 
    repeated uint32 warsoul_pos = 3;//装备战魂的postion
    repeated uint32 warsoul_ids = 4;//装备的战魂id array
}
 //一键卸下兵符上所有的战魂
message C2S_OneKeyUninstallRunestoneWarSoul {
	required uint32 id = 1;//兵符id 
}
message S2C_OneKeyUninstallRunestoneWarSoul {
	required uint32 ret = 1 ;
	optional uint32 id = 2 ;//兵符id 
	repeated uint32 warsoul_pos = 3;//兵符卸载下的战魂postion
	repeated uint32 warsoul_ids = 4;//卸载战魂的ids
}
//兵符重置赋能预览
message C2S_PreviewRunestoneEnhance {
	required uint32 id = 1;//兵符id 
	required uint32 enhance_tp = 2;//赋能分支类型
}
message S2C_PreviewRunestoneEnhance {
	required uint32 ret = 1;
	optional uint32 id = 2; 
	repeated Award awards = 3;//兵符重置预览道具
}


////////
//6.2.0-鎏金装备-器魂
//器灵信息
message EquipmentSpirit {
	required uint32 unique_id = 1;	//	唯一id
	required uint32 id = 2;			//配置id
	repeated uint32 property = 3;	//随机属性值，属性type看配置
	repeated uint32 skill = 4;		//随机技能id
	optional uint32 equip = 5;      //指向装备
}

//器灵技能书信息
message EquipmentSpiritBook {		
	required uint32 id = 1;			
	required uint32 size = 2;
}

//获取全部器灵信息
message C2S_FlushEquipmentSpirit {
}

message S2C_FlushEquipmentSpirit {
   required uint32 ret = 1;
   repeated EquipmentSpirit datas = 2;
}

//获取全部器灵书信息
message C2S_FlushEquipmentSpiritBooks {
}

message S2C_FlushEquipmentSpiritBooks {
   required uint32 ret = 1;
   repeated EquipmentSpiritBook datas = 2;
}

//鉴定
message C2S_CreateEquipmentSpirit{
	required uint32 value = 1;	//未鉴定的器灵书是type=3的道具，这里只要传value就行
	required uint32 size = 2;  //兼容批量操作
}

message S2C_CreateEquipmentSpirit{
	required uint32 ret = 1;
	optional uint32 value = 2;
	optional uint32 size = 3;
	repeated EquipmentSpirit datas = 4;
}

//融合
message C2S_MergeEquipmentSpirit{
	repeated uint32 unique_ids = 1;		//必须传2个器灵过来
}

message S2C_MergeEquipmentSpirit{
	required uint32 ret = 1;
	repeated uint32 remove_unique_ids = 2;
	optional EquipmentSpirit new = 3;
}

//领悟
message C2S_EquipmentSpiritLearnSkill{
	required uint32 unique_id = 1;		//器灵id
	required uint32 book = 2;			//技能书id
}

message S2C_EquipmentSpiritLearnSkill{
	required uint32 ret = 1;
	optional uint32 unique_id = 2;
	optional uint32 book = 3;
	optional EquipmentSpirit new = 4;
}

//6.2.50 推送礼包
// 客户端获取推送活动信息
message C2S_GetPropellingInfo {
}

enum ORDER_STATUS {
	STATUS_CAN_BUY = 1; //可购买
	STATUS_CAN_GET = 2; //已购买未领取
	STATUS_HAVE_GOT = 3; //已领取
}

message Propelling {
 	required uint32 id = 1;                   // 活动编号
 	required uint32 group_id = 2;             // 组编号
 	required uint32 startTime = 3;            // 触发活动开始的时间戳
 	required uint32 endTime = 4;              // 触发活动结束的时间戳
 	required uint32 status = 5;         // 订单状态	
}
 
message S2C_GetPropellingInfo {
 	required uint32     ret 	= 1;
	repeated Propelling group	= 2;	//活动列表
}

// 服务端推送客户端活动信息变化
message S2C_FlushPropellingInfo {
	repeated Propelling group	= 1;	//变动的活动信息
}

// 领取订单奖励
message C2S_GetPropellingRechargeAward {
  required uint32 id = 1; //礼包id
  optional uint32 index = 2; //可选奖励Index
}

message S2C_GetPropellingRechargeAward {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 index = 3;
  repeated Award awards = 4; //获得奖励
}

message	EquipmentSpiritShare {
	required EquipmentSpirit spirit = 1;
	required CrossUser user = 2;
} 

message LouLanSilkShare {
  optional RobInfo   rob_info = 1;
  optional LouLanMapUser owner = 2;
  optional uint32    owner_group = 3;
  optional uint32    cart_id = 4;
}

// 6.3.0 定制欢庆-九州巡礼
// 红点
message CustomFestivalActivityInfo {
	required uint32 id = 1; // 活动ID
	required uint32 progress = 2; // 活动进度
	required uint32 award_count = 3; // 领奖数量
	optional bool can_award = 4; // 是否可领奖
}

message CustomFestivalActRedHint {
	optional bool in_festival = 1; // C2S_GetCustomFestivalActivity
	optional uint32 start_time = 2; // 开始时间
	optional uint32 end_time = 3; // 结束时间
	repeated CustomFestivalActivityInfo infos = 4; // 欢庆信息
	optional uint32 now = 5; // 当前时间

	repeated uint32 shop_id = 6; // C2S_GetCustomFestivalSales
	repeated uint32 shop_buyed_cnt = 7; // 商店购买次数
	optional bool is_new = 8; // 是否为新
}

// 获取定制欢庆信息
message C2S_GetCustomFestivalActivity {
}

message S2C_GetCustomFestivalActivity {
	required bool in_festival = 1; // 是否活动中
	required uint32 start_time = 2; // 开始时间
	required uint32 end_time = 3; // 结束时间
	repeated CustomFestivalActivityInfo infos = 4; // 欢庆信息
	optional uint32 now = 5; // 当前时间
}

// 获取欢庆活动奖励
message C2S_GetCustomFestivalActivityReward {
	required uint32 id = 1; // 活动ID
	optional uint32 index = 2; // 奖励ID
}

message S2C_GetCustomFestivalActivityReward {
	required uint32 ret = 1;
	optional CustomFestivalActivityInfo info = 2; // 活动信息
	optional uint32 index = 3; // 奖励ID
}

// 获取欢庆兑换商店信息
message C2S_GetCustomFestivalSales {
}

message S2C_GetCustomFestivalSales {
    repeated uint32 id = 1; // 兑换ID
    repeated uint32 buyed_cnt = 2; // 当前兑换次数
}

// 购买欢庆商品
message C2S_BuyCustomFestivalSale {
    required uint32 id = 1; // 兑换ID
    required uint32 cnt = 2; // 兑换次数
}

message S2C_BuyCustomFestivalSale {
    required uint32 ret = 1;
    required uint32 id = 2; // 兑换ID
    required uint32 buyed_cnt = 3; // 当前兑换次数
}

// 获取客户端欢庆信息
message ExcelCustomFestival { // 欢庆表格配置
	optional uint32 id = 1; // 活动ID
	repeated Award sli_award = 2; // 活动奖励
}

message C2S_GetExcelCustomFestivalInfo {
	optional uint32 limit_time = 1; // 欢庆期数(0:至今为止的所有数据)
}
message S2C_GetExcelCustomFestivalInfo {
	optional uint32 ret = 1;
	repeated ExcelCustomFestival sli_data = 2; // 客户端活动数据
	required bool is_new = 3; // 是否是新表
	optional uint32 limit_time = 4; // 
}

// 获取客户端欢庆兑换商店
message C2S_GetExcelCustomFestivalSale {
	optional uint32 limit_time = 1; // 欢庆期数(0:至今为止的所有数据)
}
message S2C_GetExcelCustomFestivalSale {
	optional uint32 ret = 1;
	repeated ExcelCustomFestival sli_data = 2; // 客户端活动数据
	required bool is_new = 3; // 是否是新表
	optional uint32 limit_time = 4; // 
}

//6.3.0 H5预抽卡
// 绑定激活码
message C2S_BindLotteryCode {
    required string code = 1;                   //激活码ID
}


message UserPreLottery {
    optional PreLottery pre_lottery = 1;
    required bool is_bind = 2;
    required uint32 start_time = 3;
    required uint32 end_time = 4;
    required bool is_open = 5;
    required uint32 unfreeze_time = 6;
    required uint32 wrong_times = 7;
}

message PreLottery {
    required uint32 reward_id = 1;               // 奖励礼包ID
    required uint32 is_award1_get = 2;            // 奖励1领取状态
    required uint32 is_award2_get = 3;            // 奖励2领取状态
    optional uint32 online_days = 4;              // 累计登陆天数
}

message S2C_BindLotteryCode {
    required uint32 ret = 1;
    optional UserPreLottery lottery = 2; 
}

// 客户端获取预抽奖礼包情况
message C2S_GetPreLotteryInfo {
}

message S2C_GetPreLotteryInfo {
    required uint32 ret = 1;
    optional UserPreLottery lottery = 2;              // 奖励信息
}

// 客户端领取预抽奖奖励
message C2S_GetPreLotteryAward {
    required uint32 index = 1;
}

message S2C_GetPreLotteryAward {
    required uint32 ret = 1;
    required uint32 index = 2;
    repeated Award awards = 3;                   // 奖励信息
    optional UserPreLottery lottery = 4;   
}

// 绑定结果推送
message S2C_BindLotteryCodeResult {
    required uint32 ret = 1;
    optional UserPreLottery lottery = 2; 
}
//6.3.0-超级幸运星
//获取超级幸运星活动数据 
message C2S_LucklyLotteryActiviteData {
}
message S2C_LucklyLotteryActiviteData {
    required uint32 ret =1;
    optional bool is_open =2;//活动状态是否开启 
    optional uint32 start_time = 3;//活动开始时间
    optional uint32 end_time = 4;//活动结束时间
    optional uint32 present_end_time =5;//最晚领奖时间 
}

//超级幸运星抽奖 
message LucklyLotteryRecharge {
    required uint32 invest_id =1;
    optional uint32 rechargeCnt =2;
    optional uint32 exchangeCnt =3;
}
message C2S_LucklyLottery {
    required uint32 lottery_type =1;//抽奖次数类型
}
message S2C_LucklyLottery {
    required uint32 ret =1;
    optional uint32 lottery_type =2;//抽奖次数类型
    repeated Award awards = 3;//抽取的奖励 
    optional uint32 lottery_count = 4;//玩家抽奖次数
	optional uint32 total_lottery_count =5;//玩家抽奖总次数
}
//超级幸运抽奖指定战宠
message C2S_LucklyLotteryAppointPet {
    required uint32 id =1;//前端通过指定配置表中id获取战宠id 
}
message S2C_LucklyLotteryAppointPet {
    required uint32 ret = 1;
    optional uint32 id =2;
}
//获取玩家超级幸运数据 
message C2S_LucklyLotteryUserData {
}
message S2C_LucklyLotteryUserData {
    required uint32 ret =1;
    optional uint32 lottery_count =2;//玩家抽奖次数
    optional uint32 id =3; //通过id 去配置表找战宠id 
    repeated LucklyLotteryRecharge recharge_data =4;
    optional uint32 next_end_num = 5;//下一次可领奖进度
	optional uint32 total_lottery_count = 6;//玩家抽奖总次数
}
//兑换代币 
message C2S_LucklyLotteryExchangeCoin {
    required uint32 invest_id =1;
    required uint32 exchange_cnt =2;//兑换次数
}
message S2C_LucklyLotteryExchangeCoin {
    required uint32 ret =1;
    repeated Award awards =2;//兑换奖励 
    optional LucklyLotteryRecharge recharge_data = 3;//玩家兑换任务进度记录
}
//领取抽奖进度奖励 
message C2S_LucklyLotteryProgressAward {
    required uint32 end_num =1;//进度奖励保底次数 
}
message S2C_LucklyLotteryProgressAward {
    required uint32 ret =1;
    repeated Award awards =2;//进度奖励 
    optional uint32 next_end_num =3;
    optional uint32 lottery_count =4;
}
//获取超级幸运日志数据
message LucklyLotteryLog {
    required uint32 msces =1;//时间
    optional CrossUser cross_user =2;
    repeated Award awards =3;
}
message C2S_LucklyLotteryLogs {
}
message S2C_LucklyLotteryLogs {
    required uint32 ret =1;
    repeated LucklyLotteryLog logs =2;
}
    
//登录贺卡-获取信息 
message C2S_GetGreetingCardInfo {
}

message GreetingCard {
    required uint32 activity_id     = 1;    //活动ID
    required uint32 start_time      = 2;    //开始时间
    required uint32 end_time        = 3;    //结束时间
    repeated uint32 award_ids       = 4;    //已经领取的奖励列表
}

message S2C_GetGreetingCardInfo {
    required uint32 ret         = 1;
    optional GreetingCard card  = 2;    //贺卡信息
}

//登录贺卡-领取奖励
message C2S_AwardGreetingCard {
    required uint32 award_id    = 1;    //奖励ID
}

message S2C_AwardGreetingCard {
    required uint32 ret         = 1;
    optional uint32 award_id    = 2;    //奖励ID
    repeated Award award_items  = 3;    //获得的奖励
}

//6.3.0 通用活动数据拉取
enum ACT_TYPE {
	JUVENILE_GOD = 1;	
}
message C2S_Activity{
	repeated uint32 types = 1;		
}

message S2C_Activity{
	required uint32 ret = 1;
	repeated uint32 types = 2;
	optional JuvenileGodInfo god = 3; 
}

message JuvenileGodInfo {
	repeated uint32 buildAward = 1; //领取进度
	repeated uint64 godBuildValue = 2;  //神像的各个进度
	repeated ConstructJuvenileGodRecord records = 3;    //记录
}

//6.3.0-主线守关人 
message C2S_MainRoadDefender{
    required uint32 chid = 1;//章节id 
}

message S2C_MainRoadDefender{
    required uint32 ret =1;
    optional uint32 chid =2;//章节id 
    optional uint32 chapter_money =3;//章节金钱奖励
    optional uint32 chapter_exp =4;//章节经验奖励
    repeated Award awards = 5;//章节奖励
    optional bool is_win = 6;//是否胜利
    optional uint64 report_id = 7;//战报id 
}
//6.4.0-主角新养成
//选择职业
message C2S_MainRoleTransferJobSelect {
	required uint32 job_id =1;
}
message S2C_MainRoleTransferJobSelect {
	required uint32 ret =1;
	optional uint32 job_id =2;
}

//放弃试炼
message C2S_MainRoleTransferJobGiveUp{
}
message S2C_MainRoleTransferJobGiveUp{
	required uint32 ret =1;
	optional uint32 job_id =2;
	optional uint32 job_level =3;
	optional uint32 transfer_status =4;
}
//择职业完成确认
message C2S_MainRoleTransferJobComplete{
}
message S2C_MainRoleTransferJobComplete {
	required uint32 ret =1;
	optional uint32 job_id =2;
	optional uint32 job_level =3;
	optional uint32 transfer_status =4;
}
//玩家主角职业晋升
message C2S_MainRoleTransferJobUpgrade {
	required uint32 up_lvl = 1;//升的等级，现在默认1
}
message S2C_MainRoleTransferJobUpgrade {
	required uint32 ret =1;
	optional uint32 job_id =2;
	optional uint32 job_level =3;//玩家升级成功后的等级
}
//玩家主角书籍研习
message C2S_MainRoleTransferBookUpgrade{
	required uint32 group_id =1;//玩家研习书籍配置表group_id
	required uint32 up_lvl = 2;//升的等级，现在默认1
}
message S2C_MainRoleTransferBookUpgrade{
	required uint32 ret =1;
	optional uint32 group_id =2;
	optional uint32 book_lvl =3;//玩家研习书籍后等级
}
//玩家主角重新选择职业
message C2S_MainRoleTransferJobReselect {
	required uint32 job_id =1;//新职业id
}
message S2C_MainRoleTransferJobReselect {
	required uint32 ret =1;
	optional uint32 job_id =2; //重新选择后职业id
}
//研习书籍合成
message C2S_MainRoleTransferJobCompose{
	required uint32 group_id =1;// 配置表group_id
}
message S2C_MainRoleTransferJobCompose{
	required uint32 ret =1;
	optional uint32 group_id = 2;
}
message StudyBookCell {
	required uint32 group_id =1;//配置表group_id 
	required uint32 book_level =2;//书籍等级
}
// 6.4.0 新版月基金
// 月基金活动数据
message DirectMonthFundInfo {
	optional uint32 id = 1;  // 活动唯一ID
	optional uint32 fund_id = 2; // 基金ID
	optional uint32 start_time = 3; // 开始时间
	optional uint32 buy_time = 4; // 购买截止时间
	optional uint32 end_time = 5; // 领奖截至时间
	optional uint32 is_buy = 6; // 是否购买
    repeated uint32 award_ids = 7; // 已领奖励	
	optional uint32 pic_type = 8; // 立绘type
	optional uint32 pic_value = 9; // 立绘value
}

// 获取月基金信息
message C2S_GetDirectMonthFundInfo {
}

message S2C_GetDirectMonthFundInfo {
	required uint32 ret = 1;
	repeated DirectMonthFundInfo  info = 2;  // 当前基金活动信息
}

// 领取月基金奖励
message C2S_GetDirectMonthFundReward {
	required uint32 act_id = 1;
	required uint32 award_id = 2; // 奖励ID
	optional uint32 index = 3; // 选取index 多选1时有用
}

message S2C_GetDirectMonthFundReward {
	required uint32 ret = 1;
	optional uint32 act_id = 2;
	optional uint32 award_id = 3; // 奖励ID
	optional uint32 index = 4; // 奖励ID
	repeated uint32 awards = 5; // 已经领取的奖励ID 
}

message S2C_BuyDirectMonthFund {
	required uint32 act_id = 1;
}

// 6.4.50-镇魂街联动（大富翁）
// 大富翁信息
message C2S_GetChessInfo {
}

message S2C_GetChessInfo {
    required uint32 ret = 1;
    optional uint32 group = 2; // 当前棋盘的事件分组，对应 chess_liandong_info.xml 的 group 字段
    optional uint32 location = 3; // 当前玩家在棋盘的位置，对应 chess_liandong_info.xml 的 location 字段
    repeated uint32 paths = 4; // 玩家经过的位置
}

// 掷骰子
message C2S_ChessDice {
    required uint32 point = 1; // 0 = 使用普通龟甲; other = 使用文王龟甲
}

message S2C_ChessDice {
    required uint32 ret = 1;
    optional uint32 point = 2; // 掷点数
}

// 每日任务
message C2S_GetChessDailyMission {
}

message S2C_GetChessDailyMission {
    required uint32 ret = 1;
    repeated uint32 ids = 2; // 已领奖的任务Id，对应 task_liandong_info.xml 的 id 字段
    repeated KeyValueT progress = 3; // 任务完成进度，对应 task_liandong_info.xml 的 task_type : task_value
}

// 每日任务领奖
message C2S_GetChessDailyMissionAward {
    required uint32 id = 1; // 请求领奖的任务Id，对应 task_liandong_info.xml 的 id 字段
}

message S2C_GetChessDailyMissionAward {
    required uint32 ret = 1;
    required uint32 id = 2; // 请求领奖的任务Id，对应 task_liandong_info.xml 的 id 字段
    repeated Award awards = 3;
}


// 事件播放
message S2C_ChessEventPlay {
}

// 事件结束
message S2C_ChessEventEnd {
}

// 移动事件
message S2C_ChessEventMove {
    required uint32 location = 1; // 移动至目标位置
    repeated Award awards = 2;
}

// 问题事件
message S2C_ChessEventQuestion {
    required uint32 question_id = 1; // 对应 common_question_info.xml 的 id 字段
}

// 回答剧本问题
message C2S_ChessEventAnswer {
    required uint32 index = 1; // 选择回答的编号
}

message S2C_ChessEventAnswer {
    required uint32 ret = 1;
    optional bool right = 2; // 答题是否正确
    repeated Award awards = 3;
}

// 红点信息
message ChessDailyMissionRedHint {
  optional bool has_award = 1; // 是否存在未领取的奖励
  optional bool has_event = 2; // 是否存在未完成的事件
}

//6.4.50 主线战令
// 战令信息
message BattlePassDungeonInfo {
	optional uint32 id = 1; // 活动期数
	optional bool has_buy = 2; // 是否购买至尊版
	repeated uint32 award_chapter_free = 3; // 已领取的普通版奖励
	repeated uint32 award_chapter_pay = 4; // 已领取的至尊版奖励
	repeated uint32 award_server = 5; // 已领取的全服奖励
	optional uint32 start_time = 6; // 活动开始时间（初始化时间，客户端显示规则需要）
	repeated BattlePassDungeonMission mission_list = 7; // 任务列表
	optional uint32 buy_num = 8; // 全服已购买人数
}

// 战令任务进度
message BattlePassDungeonMission {
	optional uint32 id =1 ; // 任务Id
	optional uint32 type = 2; // 任务类型
	optional uint32 progress = 3; // 进度
	optional uint32 value = 4; // 完成需要值
}

// 查询战令信息（红点发同结构即可）
message C2S_GetBattlePassDungeonInfo {
}

message S2C_GetBattlePassDungeonInfo {
	required uint32 ret = 1;
	optional BattlePassDungeonInfo info = 2; // 玩家战令信息
}

// 领取战令奖励
message C2S_GetBattlePassDungeonAward {
	required uint32 index = 1; // 任务ID 0 领取全部
}

message S2C_GetBattlePassDungeonAward {
	required uint32 ret = 1;
	repeated uint32 award_chapter_free = 2; // 已领取的普通版奖励
	repeated uint32 award_chapter_pay = 3; // 已领取的至尊版奖励
	repeated Award  awards = 4;  // 本次领取奖励
}

// 领取全服奖励
message C2S_GetBattlePassDungeonServerAward {
	required uint32 index = 1; // 奖励ID 0 全部领取
}

message S2C_GetBattlePassDungeonServerAward {
	required uint32 ret = 1;
	repeated uint32 award_server = 2; // 已领取的全服奖励
	repeated Award  awards = 3;  // 本次领取奖励
}

// 购买至尊版成功通知
message S2C_BuyBattlePassPaySuccess {
	required uint32 ret = 1;
    optional uint32 buy_num = 2; // 玩家购买人数
}
//6.4.50-首充累登
//领取首充奖励 
message C2S_GetNewFirstRechargeDayAward {
	required uint32 id = 1;//领取某一天
}
message S2C_GetNewFirstRechargeDayAward {
	required uint32 ret =1;
	optional uint32 id = 2;//领取某一天
	optional uint32 group = 3;//期数
	repeated uint32 award_ids = 4; //已经领取的登录天奖励
	repeated Award awards = 5;//奖励
}

//6.5.0-鎏金神兵
message SacredwpBook {
    required uint32 tp = 1;                      // 神兵谱类型，对应 sacredwp_book_info.xml 的 type 字段，这是一个唯一值
    required uint32 star = 2;                    // 神兵谱星级，对应 sacredwp_book_info.xml 的 star 字段
    required uint32 sacredwp_star = 3;           // 激活的星级
    repeated uint32 sacredwp_ids = 4;            // 激活的神兵索引Id列表
    repeated KeyValue64 sacredwp_attrs = 5;      // 神兵谱属性养成
}

// 神兵谱列表信息
message C2S_GetSacredwpBooks {
}

message S2C_GetSacredwpBooks {
    required uint32 ret = 1;
    repeated SacredwpBook sacredwp_books = 2;    // 神兵谱列表
}

// 神兵谱激活
message C2S_SetSacredwpBook {
    required uint32 tp = 1;                      // 神兵谱类型
    required uint32 index = 2;                   // 神兵谱操作位置，对应sacredwp_ids下标
    required uint32 sacredwp_id = 3;             // 神兵索引Id，若为0则是移除
}

message S2C_SetSacredwpBook {
    required uint32 ret = 1;
    optional SacredwpBook sacredwp_book = 2;     // 神兵谱
}

// 神兵谱洗炼
message C2S_BaptizeSacredwpBook {
    required uint32 tp = 1;                      // 神兵谱类型
    repeated Award fragments = 2;                // 材料碎片，按顺序处理并消耗（消耗优先级由客户端决定）
}

message S2C_BaptizeSacredwpBook {
    required uint32 ret = 1;
    optional SacredwpBook sacredwp_book = 2;     // 神兵谱
    repeated Award fragments = 3;                // 未消耗的材料碎片
}

// 神兵谱升星
message C2S_UpStarSacredwpBook {
    required uint32 tp = 1;                      // 神兵谱类型
}

message S2C_UpStarSacredwpBook {
    required uint32 ret = 1;
    optional SacredwpBook sacredwp_book = 2;     // 神兵谱
}

// 神兵谱重生
message C2S_RebirthSacredwpBook {
    required uint32 tp = 1;                      // 神兵谱类型
    required bool is_preview = 2;                // 是否是预览，true:预览
}

message S2C_RebirthSacredwpBook {
    required uint32 ret = 1;
    required bool is_preview = 2;                // 是否是预览，true:预览
    optional uint32 tp = 3;                      // 神兵谱类型
    repeated Award awards = 4;                   // 返还的养成资源
}

//6.5.0-定制礼包
//选择礼包奖池奖励id 
message C2S_SelectCustomPack {
	required uint32 direct_id = 1;//直充id == 礼包id 
	repeated uint32 gift_ids = 2;//选择奖池奖励id 
}
message S2C_SelectCustomPack {
	required uint32 ret = 1;
}

//领取奖励 
message C2S_ObtainCustomPackAward {
	required uint32 direct_id = 1;//直充id 
}
message S2C_ObtainCustomPackAward {
	required uint32 ret = 1;
	optional uint32 direct_id = 2;//直充id 
	repeated Award awards = 3;//奖励
}
//获取玩家定制礼包数据 
message CustomPackCell {
	optional uint32 status = 1;//礼包数据状态[0:未充值,1:已充值,2:已领取]
	optional uint32 direct_id = 2;//直充id 
	repeated uint32 gift_ids = 3;//选择奖池奖励id[custom_gift_pack_info表中的id]
}
message C2S_ObtainUserCustomPackData {
}
message S2C_ObtainUserCustomPackData {
	required uint32 ret = 1;
	optional uint32 id = 2; //配置id关联ActivityId
	optional uint32 act_id = 3;//活动id[GM发送]==期数==配置表的活动组
	optional uint32 pic_type = 4;//图标type 
	optional uint32 pic_value = 5;//图标值
	repeated CustomPackCell custom_packs = 6;//定制礼包数据
}
//活动数据
message ObtainCustomPackAct {
	optional bool is_open = 1;//活动是否开启 
	optional bool can_receive = 2;//可领取
	optional bool can_buy = 3;//可购买 
	optional uint32 start_time = 4;//开始时间 
	optional uint32 end_time = 5;//结束时间
	optional uint32 award_end_time = 6;//活动最晚领奖时间
}

////////////////////////////////////////////////////////////
//6.5.0-新战斗-战报协议

message C2S_TestSrpgBattle {
	required uint32 own = 1;		//攻方	
	required uint32 enemy = 2;	//守方
	required uint32 tp = 3;			//1，pvp 上面的是uid；2，pve 上面的是uid和怪id
}

message S2C_TestSrpgBattle {
	required uint32 ret = 1;
	optional uint32 battle_ret = 2;	//战斗内部错误
	optional SrpgBattleReport report = 3;	//战报
}


//战斗单位
message SrpgBattleUnit {
	required uint32 tp = 1;			//类型，目前只有将灵1
	required uint32 id = 2;			//配置id
	required uint32 index = 3;	//整场战斗所有战斗单位的唯一索引
	required uint32 pos = 4;	//布阵位置
	optional uint64 hp = 5;			//血量
	optional uint64 max_hp = 6;	//血量上限
	optional uint32 anger = 7;	//怒气
	optional uint32 arms = 8;		//兵种
}

//队伍信息
message SrpgBattleTeam {
	repeated SrpgBattleUnit units = 1;	//战斗单位
	repeated uint32 formation = 2;			//布阵信息
}

//战报
message SrpgBattleReport {
	required uint32 tp = 1;		//战斗类型
	optional uint64 unique_id = 2; //战报唯一id
	repeated SrpgBattleTeam own_teams = 3;		//攻击方
	repeated SrpgBattleTeam enemy_teams = 4;	//防守方
	repeated SrpgBattleAttackBout bouts = 5;	//战斗过程
	required bool is_win = 6;									//胜负
}

message SrpgBattleFlag {
	required uint32 tp = 1;			//1-闪避 2-暴击
	optional uint64 value = 2; 
}

message SrpgDeadInfo {
	required uint32 index = 1;	//死者对应的唯一索引
	optional uint32 cause = 2;	//死因，源自哪个伤害，对应SrpgValueChange中的number
}

//数值变化通用结构
message SrpgValueChange {
	required uint32 index = 1;		//变化者
	required uint32 number = 2;		//本次SrpgBattleAttack 所有的SrpgInterChange的唯一编号
	optional uint32 tp =3;			//value类型 1-血量 2-怒气
	optional uint64 change_val = 4;	//变化值
	optional uint64 final_val = 5;	//最终值
	optional bool is_add = 6; //value增减
	repeated SrpgBattleFlag flags = 7;	//数值变动标签
}

//buff状态更新
message SrpgBuffState {
	required uint32 index = 1;    //变化者
	required uint32 buff_id = 2; //buff唯一id
	required uint32 count = 3; //剩余回合，0就直接移除
}

message SrpgBuffVictim {
	required uint32 index = 1; //目标
	required uint32 buff_id = 2; //buff唯一id
	required uint32 id = 3; //配置id
	optional uint32 remove_id = 4; //如果涉及顶替buff，这个就是被顶替的buff
	required uint32 count = 5; //剩余回合
}

//技能效果
message SrpgBattleSkillVictim {
	required uint32 index = 1;  //SrpgBattleUnitde 的唯一索引  目标
	repeated SrpgValueChange change = 2;	//技能自身导致数值变化
	repeated SrpgBattleFlag flags = 3;		//技能效果标签
}

//单次攻击
message SrpgBattleAttack {
	required uint32 index = 1;	//SrpgBattleUnitde 的唯一索引  技能发起者
	optional uint32 skill_id = 2;	//本次技能
	repeated SrpgBattleSkillVictim skill_victims = 3;//技能效果
	repeated SrpgValueChange change = 4; //本次攻击导致数值变化,与技能无关的
	repeated SrpgDeadInfo dead = 5;  //本次死亡信息	
	repeated SrpgBuffVictim add_buffs = 6; //增加buff
	repeated SrpgBuffState buff_state = 7; //更新buff
}

//回合信息
message SrpgBattleAttackRound {
	required uint32 round = 1;	//回合
	repeated SrpgBattleAttack attacks = 2;	//所有攻击
	repeated uint32 unit_list = 3;	//速度队列
}

//一局战斗
message SrpgBattleAttackBout {
	required uint32 own_team = 1; //0 第一队 
	required uint32 enemy_team = 2;
	repeated SrpgBattleAttackRound rounds = 3;	//回合信息
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//6.5.0 将军弈
// 养成
// 将领信息
message SrpgKnight {
	optional uint32 base_id = 1; // 基础ID
	optional uint32 id = 2; // 将领ID
	optional uint32 level = 3; // 等级
	optional uint32 arms = 4; // 玩家当前兵种（计算后的兵种类型）
}

// 位置信息
message SrpgLocate {
	optional uint32 locate = 1; // 位置
	optional SrpgStation station = 2; // 将领ID
}

// 阵位信息
message SrpgStation {
	optional uint32 knight_id = 1; // 将领ID
}
// 队列信息
message SrpgFormation {
	required uint32 index = 1; // 队伍ID
	repeated SrpgLocate locate = 2; // 位置信息
}

// 总消息
message SrpgInfo {
	repeated SrpgKnight srpg_knight = 1;
	repeated SrpgFormation srpg_formation = 2;
}

// 拉取将军弈信息
message C2S_SrpgGetInfo {
}

message S2C_SrpgGetInfo {
	required uint32 ret = 1;
	optional SrpgInfo srpg_info = 2;
}

// 将领升级
message C2S_SrpgKnightLevelUp {
	required uint32 id = 1; // 将领ID
	required uint32 up_level = 2 ; // 升级的等级
	required uint32 tp = 3; // 0 预览 1 升级
}

message S2C_SrpgKnightLevelUp {
	required uint32 ret = 1;
	optional SrpgKnight knight = 2;
	required uint32 tp = 3; // 0 预览 1 升级
	repeated uint64 attrs = 4; // 将领属性列,按枚举顺序排列		
	repeated uint64 add_attrs = 5; // 将领增加属性列
}

// 将领切换兵种
message C2S_SrpgKnightSaveArms {
	required uint32 id = 1; // 将领ID
	required uint32 arms = 2; // 兵种ID
}

message S2C_SrpgKnightSaveArms {
	required uint32 ret = 1;
	optional SrpgKnight knight = 2;
}

// 保存预置队列信息
message C2S_SrpgSaveFormation {
	required SrpgFormation formation = 1;
}

message S2C_SrpgSaveFormation {
	required uint32 ret = 1;
	optional  SrpgFormation formation = 2;
}

// 拉取将领属性
message C2S_SrpgGetKnightAttr {
	required uint32 id = 1; // 只允许拉取一个武将，ID不能为0
}

message S2C_SrpgGetKnightAttr {
	required uint32 ret = 1;
	required uint32 id = 2; // 将领ID
	repeated uint64 attrs = 3; // 将领基础属性列,按枚举顺序排列
	repeated uint64 add_attrs = 4; // 将领增加属性列,按枚举顺序排列
}

// PVE玩法
// 关卡结构
message SrpgPveStagePos {
	required uint32 battle_id = 1; // 战役ID
	required uint32 chapter_id = 2; // 章节ID
	required uint32 stage_id = 3; // 关卡ID
}

// 拉取将军弈PVE信息
message C2S_SrpgGetPveInfo {
}

message S2C_SrpgGetPveInfo {
	required uint32 ret = 1;
	optional SrpgPveStagePos pos = 2; // 当前战役
	optional SrpgFormation formation = 3; // 当前队伍
	optional uint32 last_battle_time = 4; // 上次战斗时间
}

// 将领简要信息
message SrpgBreifInfo {
	optional uint32 id = 1; // 将领ID
	optional uint32 index = 2; // 位置
	optional uint32 arms = 3; // 兵种
}

// 玩家SRPG简要信息（排行榜和战报相关显示）
message SrpgUserBreifInfo {
	optional uint64 sid = 1; // 服务器ID
	optional string name = 2;// 玩家昵称
	optional uint64 report_id = 3; // 战报ID
	optional uint32 main_role = 4; // 主角ID
	repeated SrpgBreifInfo breif = 5; // 玩家阵容
}

// pve关卡信息
message SrpgPveStageRecordInfo {
	optional SrpgUserBreifInfo firstUser = 1; // 一条最速通关玩家记录
	repeated SrpgUserBreifInfo lastUser = 2; // 三条最近通关玩家记录
	optional uint32  stage_id = 3; // 具体关卡
}

// 拉取将军弈PVE章节信息
message C2S_SrpgGetPveStageRecordInfo {
	required uint32 stage_id = 1; // 具体关卡
}

message S2C_SrpgGetPveStageRecordInfo {
	required uint32 ret = 1;
	optional SrpgPveStageRecordInfo stage_records = 2; // 本关卡相关存储信息
}

// 调整将军弈PVE队伍
message C2S_SrpgSavePveFormation {
	required SrpgFormation formation = 1; // 暂时PVE只能存一个阵容，index不去读即可
}

message S2C_SrpgSavePveFormation {
	required uint32 ret = 1;
	optional SrpgFormation formation = 2;
}

// 进行将军弈战斗
message C2S_SrpgPveBattle {
	required uint32 stage_id = 1; // 具体关卡
}

message S2C_SrpgPveBattle {
	required uint32 ret = 1; 
	optional SrpgPveStagePos pos = 2; // 具体关卡
	optional bool is_battle_win = 3; // 战斗结果
	optional uint64 report_id = 4; // 战报ID
	repeated Award awards = 5; // 奖励
}

message SrpgUserProgress {
	optional SrpgPveStagePos pos = 1; // 具体关卡
	optional uint64 SID = 2; // 服务器ID
	optional uint32 UID = 3; // 玩家ID
}
// 拉取玩家列表
message C2S_SrpgGetPveUserList {
	repeated SidUid user_list = 1;
}

message S2C_SrpgGetPveUserList {
	required uint32 ret = 1; 
	repeated SrpgUserProgress listInfo = 2;  // 所有查询对应玩家的将军弈PVE进度数据
}

enum REFUND_LIMIT_TIME_TYPE {
    REBEL_AWARD = 0; //叛军收益减半
    WORLD_WAR   = 1; //禁止进入天下
    GAME_HELPER = 2; //禁用游戏助手
    BAN_USER    = 3; //封号

    MAX         = 4; //最大值
}

//退款信息
message UserRefundInfo {
    optional bool warning       = 1; //警告状态
    repeated uint32 limit_times = 2; //限制行为的到期时间    
}

//更新退款相关信息
message S2C_UpdateUserRefundInfo {
    optional UserRefundInfo info = 1;
    optional bool kickByBanUser  = 2; //被封号踢下线
}

///////////////////////////////////////////////////////////////
