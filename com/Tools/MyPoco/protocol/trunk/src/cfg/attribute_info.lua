---@classdef record_attribute_info
local record_attribute_info = {}


record_attribute_info.id = 0--序号ID
record_attribute_info.name =  ""--属性名称
record_attribute_info.type = 0--属性分类
record_attribute_info.num = 0--属性排序
record_attribute_info.value_format = 0--属性格式（数值/百分比）
record_attribute_info.des =  ""--属性说明

local attribute_info = {
   _data = {   
    [1] = {1,"生命",1,1,1,"战斗中伤害扣除数据，用于武将生存判断，战斗中武将生命变为0以下即判定为阵亡",},  
    [2] = {2,"攻击",1,2,1,"攻击基础值，同时决定武将的物理攻击和法术攻击能力，同时也是合击伤害计算的基础值",},  
    [3] = {3,"物防",1,3,1,"防御基础值，用于抵抗物理攻击",},  
    [4] = {4,"法防",1,4,1,"防御基础值，用于抵抗法术攻击",},  
    [5] = {5,"防御",1,5,1,"物防和法防",},  
    [6] = {11,"生命",1,11,2,"最终生命（进入战斗前）=生命绝对值*（1+生命百分比求和）",},  
    [7] = {12,"攻击",1,12,2,"最终攻击（进入战斗前）=攻击绝对值*（1+攻击百分比求和）",},  
    [8] = {13,"物防",1,13,2,"最终物防（进入战斗前）=物防绝对值*（1+物防百分比求和）",},  
    [9] = {14,"法防",1,14,2,"最终法防（进入战斗前）=法防绝对值*（1+法防百分比求和）",},  
    [10] = {15,"防御",1,15,2,"物防和法防百分比",},  
    [11] = {16,"全属性",1,16,2,"攻击、生命、物防和法防百分比",},  
    [12] = {101,"命中率",2,101,2,"武将攻击是否命中（攻方命中率-守方闪避率）判断数据；",},  
    [13] = {102,"闪避率",2,102,2,"武将攻击是否命中（攻方命中率-守方闪避率）判断数据；",},  
    [14] = {103,"暴击率",2,103,2,"武将攻击/治疗是否暴击（攻方暴击率-守方抗暴率）判断数据；",},  
    [15] = {104,"抗暴率",2,104,2,"武将攻击是否暴击（攻方暴击率-守方抗暴率）判断数据；",},  
    [16] = {105,"格挡率",2,105,2,"武将被攻击是否格挡（守方格挡率-攻方破击率）判断数据；",},  
    [17] = {106,"破击率",2,106,2,"武将被攻击是否格挡（守方格挡率-攻方破击率）判断数据；",},  
    [18] = {201,"格挡强度",3,201,2,"武将格挡时，用于计算格挡效果（攻方格挡减免-守方格挡强度）；",},  
    [19] = {202,"格挡减免",3,202,2,"武将格挡时，用于计算格挡效果（攻方格挡减免-守方格挡强度）；",},  
    [20] = {203,"暴击强度",3,203,2,"武将暴击时，用于计算暴击效果（攻方暴击强度-守方暴击减免）；",},  
    [21] = {204,"暴击减免",3,204,2,"武将暴击时，用于计算暴击效果（攻方暴击强度-守方暴击减免）；",},  
    [22] = {205,"竞技增伤",3,205,2,"玩家竞技类战斗时增减伤计算，挑战怪物时无效；",},  
    [23] = {206,"竞技减伤",3,206,2,"玩家竞技类战斗时增减伤计算，挑战怪物时无效；",},  
    [24] = {207,"伤害增加",3,207,2,"所有战斗时增减伤计算；",},  
    [25] = {208,"伤害减免",3,208,2,"所有战斗时增减伤计算；",},  
    [26] = {209,"最终增伤",3,209,2,"所有战斗时最终增减伤计算；",},  
    [27] = {210,"最终减免",3,210,2,"所有战斗时最终增减伤计算；",},  
    [28] = {211,"治疗增益",3,211,2,"所有战斗时治疗增减计算；",},  
    [29] = {212,"治疗减益",3,212,2,"所有战斗时治疗增减计算；",},  
    [30] = {301,"抗魏",4,301,2,"所有战斗时根据武将阵营的增减伤计算；",},  
    [31] = {302,"抗蜀",4,302,2,"所有战斗时根据武将阵营的增减伤计算；",},  
    [32] = {303,"抗吴",4,303,2,"所有战斗时根据武将阵营的增减伤计算；",},  
    [33] = {304,"抗群",4,304,2,"所有战斗时根据武将阵营的增减伤计算；",},  
    [34] = {305,"灭魏",4,305,2,"所有战斗时根据武将阵营的增减伤计算；",},  
    [35] = {306,"灭蜀",4,306,2,"所有战斗时根据武将阵营的增减伤计算；",},  
    [36] = {307,"灭吴",4,307,2,"所有战斗时根据武将阵营的增减伤计算；",},  
    [37] = {308,"灭群",4,308,2,"所有战斗时根据武将阵营的增减伤计算；",},  
    [38] = {401,"武将初始怒气",5,401,1,"战斗开始时，武将带有的怒气值",},  
    [39] = {402,"怒气恢复",5,402,1,"武将每次行动（无论普攻、技能、眩晕等...状态都算行动）后，恢复的怒气值",},  
    [40] = {501,"无视防御",6,501,2,"战斗中无视防御效果计算（攻方无视防御-守方无视防御抵抗）；",},  
    [41] = {502,"无视防御抗性",6,502,2,"战斗中无视防御效果计算（攻方无视防御-守方无视防御抵抗）；",},  
    [42] = {503,"攻击吸血",6,503,2,"战斗吸血量计算；详见被动属性公式-吸血公式",},  
    [43] = {504,"吸血抵抗",6,504,2,"战斗吸血量计算；详见被动属性公式-吸血公式",},  
    [44] = {505,"受击回血概率",6,505,2,"武将被攻击回血概率判断，详见被动属性公式-受击回血概率判断",},  
    [45] = {506,"无视受击回血概率",6,506,2,"武将被攻击回血概率判断，详见被动属性公式-受击回血概率判断",},  
    [46] = {507,"受击回血百分比",6,507,2,"武将被攻击回血量计算，详见被动属性公式-受击回血量计算",},  
    [47] = {508,"抵抗受击回血百分比",6,508,2,"武将被攻击回血量计算，详见被动属性公式-受击回血量计算",},  
    [48] = {509,"物理反伤概率",6,509,2,"武将被攻击物理反伤概率判断，详见被动属性公式-受击物理攻击反伤概率判断",},  
    [49] = {510,"无视物理反伤概率",6,510,2,"武将被攻击物理反伤概率判断，详见被动属性公式-受击物理攻击反伤概率判断",},  
    [50] = {511,"物理反伤百分比",6,511,2,"武将被攻击物理反伤量计算，详见被动属性公式-受击物理攻击反伤量计算",},  
    [51] = {512,"抵抗物理反伤百分比",6,512,2,"武将被攻击物理反伤量计算，详见被动属性公式-受击物理攻击反伤量计算",},  
    [52] = {513,"法术反伤概率",6,513,2,"武将被攻击法术反伤概率判断，详见被动属性公式-受击法术攻击反伤概率判断",},  
    [53] = {514,"无视法术反伤概率",6,514,2,"武将被攻击法术反伤概率判断，详见被动属性公式-受击法术攻击反伤概率判断",},  
    [54] = {515,"法术反伤百分比",6,515,2,"武将被攻击法术反伤量计算，详见被动属性公式-受击法术攻击反伤量计算",},  
    [55] = {516,"抵抗法术反伤百分比",6,516,2,"武将被攻击法术反伤量计算，详见被动属性公式-受击法术攻击反伤量计算",},  
    [56] = {517,"减怒命中",6,517,2,"减怒攻击时，减怒命中判断，详见被动属性公式-减怒命中判断",},  
    [57] = {518,"减怒抗性",6,518,2,"减怒攻击时，减怒命中判断，详见被动属性公式-减怒命中判断",},  
    [58] = {519,"减益BUFF命中",6,519,2,"攻击时，减益类BUFF命中判断，详见被动属性公式-减益BUFF命中判断",},  
    [59] = {520,"减益BUFF闪避",6,520,2,"攻击时，减益类BUFF命中判断，详见被动属性公式-减益BUFF命中判断",},  
    [60] = {601,"初始合击值",7,601,1,"战斗开始时，初始的合击值",},  
    [61] = {602,"合击值上限",7,602,1,"战斗中，合击值拥有的最高上限，达到此上限后合击值不在恢复",},  
    [62] = {603,"行动合击回复",7,603,1,"武将每次行动（无论普攻、技能、眩晕等...状态都算行动）后，恢复的合击值",},  
    [63] = {604,"技能合击值回复",7,604,1,"武将释放技能时额外恢复的合击值",},  
    [64] = {605,"回合合击值回复",7,605,1,"大回合结束后恢复的合击值",},  
    [65] = {606,"合击暴击率",7,606,2,"释放合击技能时是否暴击判断",},  
    [66] = {607,"合击抗暴率",7,607,2,"释放合击技能时是否暴击判断",},  
    [67] = {608,"合击暴击强度",7,608,2,"合击技能暴击时暴击伤害加成计算",},  
    [68] = {609,"合击抗暴强度",7,609,2,"合击技能暴击时暴击伤害加成计算",},  
    [69] = {610,"合击增伤",7,610,2,"合击技能伤害加成计算",},  
    [70] = {611,"合击减伤",7,611,2,"合击技能伤害加成计算",},  
    [71] = {701,"继承生命值",8,701,1,"用于战斗结束存储值，下场战斗继承使用",},  
    [72] = {702,"继承怒气值",8,702,1,"用于战斗结束存储值，下场战斗继承使用",},  
    [73] = {703,"继承合击值",8,703,1,"用于战斗结束存储值，下场战斗继承使用",},  
    [74] = {801,"武将技能战斗力系数",9,801,2,"用于对武将技能战斗中强度的评估，用于战力公式计算。",},  
    [75] = {802,"合击技能战力系数a",9,802,2,"用于对合击技能战斗中强度的评估，用于战力公式计算。",},  
    [76] = {803,"合击技能战力系数b",9,803,1,"用于对合击技能战斗中强度的评估，用于战力公式计算。",},  
    [77] = {1001,"紫金品质压制系数",1,1001,2,"用于紫金品质压制系数",},
    }
}

local __index_id = {   
    [1] = 1,  
    [2] = 2,  
    [3] = 3,  
    [4] = 4,  
    [5] = 5,  
    [11] = 6,  
    [12] = 7,  
    [13] = 8,  
    [14] = 9,  
    [15] = 10,  
    [16] = 11,  
    [101] = 12,  
    [102] = 13,  
    [103] = 14,  
    [104] = 15,  
    [105] = 16,  
    [106] = 17,  
    [201] = 18,  
    [202] = 19,  
    [203] = 20,  
    [204] = 21,  
    [205] = 22,  
    [206] = 23,  
    [207] = 24,  
    [208] = 25,  
    [209] = 26,  
    [210] = 27,  
    [211] = 28,  
    [212] = 29,  
    [301] = 30,  
    [302] = 31,  
    [303] = 32,  
    [304] = 33,  
    [305] = 34,  
    [306] = 35,  
    [307] = 36,  
    [308] = 37,  
    [401] = 38,  
    [402] = 39,  
    [501] = 40,  
    [502] = 41,  
    [503] = 42,  
    [504] = 43,  
    [505] = 44,  
    [506] = 45,  
    [507] = 46,  
    [508] = 47,  
    [509] = 48,  
    [510] = 49,  
    [511] = 50,  
    [512] = 51,  
    [513] = 52,  
    [514] = 53,  
    [515] = 54,  
    [516] = 55,  
    [517] = 56,  
    [518] = 57,  
    [519] = 58,  
    [520] = 59,  
    [601] = 60,  
    [602] = 61,  
    [603] = 62,  
    [604] = 63,  
    [605] = 64,  
    [606] = 65,  
    [607] = 66,  
    [608] = 67,  
    [609] = 68,  
    [610] = 69,  
    [611] = 70,  
    [701] = 71,  
    [702] = 72,  
    [703] = 73,  
    [801] = 74,  
    [802] = 75,  
    [803] = 76,  
    [1001] = 77,
}

local __key_map = { 
    id = 1,
    name = 2,
    type = 3,
    num = 4,
    value_format = 5,
    des = 6,
}

local m = { 
    __index = function(t, k) 
        if k == "toObject" then
            return function()  
                local o = {}
                for key, v in pairs (__key_map) do 
                    o[key] = t._raw[v]
                end
                return o
            end 
        end
        
        assert(__key_map[k], "cannot find " .. k .. " in record_attribute_info")

        return t._raw[__key_map[k]]
    end
}


function attribute_info.getLength()
    return #attribute_info._data
end



function attribute_info.hasKey(k)
  if __key_map[k] == nil then
    return false
  else
    return true
  end
end


---
--@return @class record_attribute_info
function attribute_info.indexOf(index)
    if index == nil or not attribute_info._data[index] then
        return nil
    end
    return setmetatable({_raw = attribute_info._data[index]}, m)
end



---
--@return @class record_attribute_info
function attribute_info.get(id)
    
    return attribute_info.indexOf(__index_id[ id ])
     
end



function attribute_info.set(id, key, value)
    local record = attribute_info.get(id)
    if record then
        local keyIndex = __key_map[key]
        if keyIndex then
            record._raw[keyIndex] = value
        end
    end
end




function attribute_info.get_index_data()
    return __index_id 
end

return  attribute_info 