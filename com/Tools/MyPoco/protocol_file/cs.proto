syntax = "proto2";
import "out_base.proto";
import "bs.proto";
package cs;

enum ID {
	MSG_ENUM_DEFAULT = 0;
  MSG_BEGIN = 10099;//cs协议开始
  MSG_END = 20000;//cs协议结束
	//协议开始 最小值为10100
	MSG_C2S_Flush = 10100;//flush协议 刷新基础数据
	MSG_S2C_Flush = 10101;//返回原则：有定量的可以合并到该协议 会自增长的单独协议
	MSG_S2C_FlushRedPoint = 10103;//红点
	MSG_S2C_FlushKnight = 10104;
	MSG_S2C_FlushFragment = 10105;
	MSG_S2C_FlushItem = 10106;
	MSG_S2C_FlushUniteToken = 10107;
	MSG_S2C_FlushResource = 10108;
	MSG_S2C_FlushFormation = 10109;
	MSG_S2C_FlushAdvanceEquipment = 10110;
	MSG_S2C_FlushEquipment = 10111;
	MSG_S2C_FlushTreasure = 10112;
	MSG_S2C_FlushDress = 10113;
	MSG_S2C_FlushRedPacket = 10114;
	MSG_S2C_FlushRandomPlayer = 10115;
	MSG_S2C_FlushBiographyItem = 10116;
	MSG_S2C_FlushSkin = 10117;
	MSG_S2C_FlushPrivilege = 10118;
  MSG_S2C_FlushArtifact = 10119;
	MSG_S2C_FlushCard = 10120;
	MSG_S2C_FlushCardCompose=10121;
	MSG_S2C_FlushPet=10122;
	MSG_S2C_FlushPetEquipment=10123;
	MSG_S2C_FlushKSoul=10124;
	MSG_S2C_FlushMagic=10125;
	MSG_C2S_GetUserConfig = 10130;//玩家通用设置
	MSG_S2C_GetUserConfig = 10131;
	MSG_C2S_SetUserConfig = 10132;//设置玩家通用设置
	MSG_S2C_SetUserConfig = 10133;
	MSG_C2S_Test = 10140;	// 发放测试物品
	MSG_S2C_Test = 10141;
	MSG_C2S_Chat = 10142;//聊天
	MSG_S2C_Chat = 10143;
	MSG_S2C_ChatBroadcast = 10144;//聊天广播 消息接受
	MSG_C2S_SyncTime = 10145;//同步时间
	MSG_S2C_SyncTime = 10146;//同步时间
	MSG_C2S_Sell = 10147;	// 出售
	MSG_S2C_Sell = 10148;
  MSG_S2C_Notice = 10149; //走马灯
	MSG_S2C_OpObject = 10150;//身上状态变更
	MSG_S2C_CmdRet = 10151;//协议异常
	MSG_S2C_ActionStatusFlush = 10152;//各种行为类状态刷新协议
	MSG_C2S_Chat_LeftTimes = 10153;//世界聊天剩余可用次数
	MSG_S2C_Chat_LeftTimes = 10154;
  MSG_C2S_GetUserBattleTeam = 10155;
  MSG_S2C_GetUserBattleTeam = 10156;

  MSG_C2S_GetUserDetailInfo = 10158; //获取玩家详细信息
  MSG_S2C_GetUserDetailInfo = 10159;

	MSG_C2S_Formation_ChangePosition = 10160;//改变出战位置
	MSG_S2C_Formation_ChangePosition = 10161;
	MSG_C2S_Formation_ChangeFormation = 10162;//上阵其他
	MSG_S2C_Formation_ChangeFormation = 10163;

	MSG_C2S_RfreshResource = 10165;//刷新服务器最新资源信息
	MSG_S2C_RfreshResource = 10166;//

  MSG_C2S_GetCommonRankList = 10170;//获取通用排行榜信息
  MSG_S2C_GetCommonRankList = 10171;
  MSG_C2S_GetCommonPlayNum = 10172;//获取通用玩法次数信息
  MSG_S2C_GetCommonPlayNum = 10173;
  MSG_C2S_BuyCommonPlayNum = 10174;//购买通用玩法次数（包括重置类型）
  MSG_S2C_BuyCommonPlayNum = 10175;
  MSG_S2C_FlushCommonPlayNum = 10176;//刷新通用玩法次数信息给客户端
  MSG_C2S_GetBattleRecord = 10177; //获取战斗纪录
  MSG_S2C_GetBattleRecord = 10178;

  MSG_C2S_ModifyUserInfo = 10180;//修改玩家信息
  MSG_S2C_ModifyUserInfo = 10181;

  MSG_C2S_GetUserState = 10182;//根据模块获取玩家状态集
  MSG_S2C_GetUserState = 10183;

  MSG_C2S_GetModuleTaskInfo = 10185;//获取通用action模块信息
  MSG_S2C_GetModuleTaskInfo = 10186;
  MSG_C2S_GetModuleTaskAward = 10187;//获取通用action模块奖励
  MSG_S2C_GetModuleTaskAward = 10188;

  MSG_C2S_TestAsyncBattleBegin = 10190;//测试异步战斗
  MSG_S2C_TestAsyncBattleBegin = 10191;
  MSG_S2C_TestAsyncBattleFinish = 10192;

  MSG_C2S_GetBattleVideo = 10195; //获取战斗录像
  MSG_S2C_GetBattleVideo = 10196;

  MSG_C2S_UpdateRandomPlayer = 10197;
  MSG_S2C_UpdateRandomPlayer = 10198;

	//10200开始以后都是模块逻辑 注意id间隔符合readme中规范
  MSG_C2S_UniteToken_Awaken = 10200;//觉醒兵符
  MSG_S2C_UniteToken_Awaken = 10201;
  MSG_C2S_UniteToken_Upgrade = 10202;//升级兵符
  MSG_S2C_UniteToken_Upgrade = 10203;
  MSG_C2S_UniteToken_GetAttribute = 10204;//获取兵符属性
  MSG_S2C_UniteToken_GetAttribute = 10205;
  MSG_C2S_UniteToken_StarIncrease = 10206;//兵符升星
  MSG_S2C_UniteToken_StarIncrease = 10207;
  MSG_C2S_UniteToken_RunesActivate = 10208;//符石激活
  MSG_S2C_UniteToken_RunesActivate = 10209;
  MSG_C2S_UniteToken_StampsActivate = 10210; //刻印激活
  MSG_S2C_UniteToken_StampsActivate = 10211;
  MSG_C2S_UniteToken_OneKey_Upgrade = 10212;//一键升级兵符
  MSG_S2C_UniteToken_OneKey_Upgrade = 10213;

  MSG_C2S_Knight_Upgrade = 10250;//武将升级
  MSG_S2C_Knight_Upgrade = 10251;
  MSG_C2S_Knight_StarIncrease = 10252;	// 武将升星
  MSG_S2C_Knight_StarIncrease = 10253;
  MSG_C2S_Knight_StarTrain = 10254;	// 将星培养
  MSG_S2C_Knight_StarTrain = 10255;
  MSG_C2S_Knight_StarTrainConfirm = 10256;	// 将星确认、取消
  MSG_S2C_Knight_StarTrainConfirm = 10257;
  MSG_C2S_Knight_StarTrainUpgrade = 10258;	// 将星升级
  MSG_S2C_Knight_StarTrainUpgrade = 10259;
  MSG_C2S_Knight_AdvanceEquip = 10260;	// 进阶-装备
  MSG_S2C_Knight_AdvanceEquip = 10261;
  MSG_C2S_Knight_AdvanceUpgrade = 10262;	// 进阶-升级
  MSG_S2C_Knight_AdvanceUpgrade = 10263;
  MSG_C2S_Knight_AdvanceCompose = 10264;	// 进阶-合成装备
  MSG_S2C_Knight_AdvanceCompose = 10265;
  MSG_C2S_Knight_AdvanceComposeOneKey = 10266;	// 进阶-合成装备一键
  MSG_S2C_Knight_AdvanceComposeOneKey = 10267;
  MSG_C2S_Knight_UpgradeOneLevel = 10268;   //武將一鍵升一級
  MSG_S2C_Knight_UpgradeOneLevel = 10269;
  MSG_C2S_Knight_Awake_Next = 10270;   //武將觉醒下一步
  MSG_S2C_Knight_Awake_Next = 10271;
  MSG_C2S_Knight_Awake_Cancel = 10272;   //武將觉醒取消
  MSG_S2C_Knight_Awake_Cancel = 10273;
  MSG_C2S_Knight_Pendant_Up = 10274;   //武將饰品升级
  MSG_S2C_Knight_Pendant_Up = 10275;
  MSG_C2S_Knight_Adjutant_Op = 10276; //副将操作
  MSG_S2C_Knight_Adjutant_Op = 10277;
  MSG_C2S_Knight_Awake_Quick = 10278; //武将觉醒 快速
  MSG_S2C_Knight_Awake_Quick = 10279;

  MSG_C2S_Fragment_Compose = 10300;	// 合成碎片
  MSG_S2C_Fragment_Compose = 10301;

  MSG_C2S_Item_Use = 10350;	// 使用道具
  MSG_S2C_Item_Use = 10351;
  MSG_C2S_Item_Transform = 10352;	// 万能碎片转换
  MSG_S2C_Item_Transform = 10353;
  MSG_C2S_Item_BatchUse = 10354;	// 批量使用道具
  MSG_S2C_Item_BatchUse = 10355;

  MSG_C2S_Dungeon_GetChapterList = 10400;
  MSG_S2C_Dungeon_GetChapterList = 10401;
  MSG_C2S_Dungeon_ChallengeStageBegin = 10402;
  MSG_S2C_Dungeon_ChallengeStageBegin = 10403;
  MSG_S2C_Dungeon_ChallengeStageFinish = 10404;
  MSG_C2S_Dungeon_ResetChallengeCount = 10405;
  MSG_S2C_Dungeon_ResetChallengeCount = 10406;
  MSG_C2S_Dungeon_GetChapterChestAward = 10407;
  MSG_S2C_Dungeon_GetChapterChestAward = 10408;
  //MSG_C2S_Dungeon_GetStageRecord = 10409;
  //MSG_S2C_Dungeon_GetStageRecord = 10410;
  MSG_C2S_Dungeon_FastChallengeStage = 10411;
  MSG_S2C_Dungeon_FastChallengeStage = 10412;
  MSG_C2S_Dungeon_FinishAchievement = 10413; //星数成就领奖
  MSG_S2C_Dungeon_FinishAchievement = 10414;
  MSG_C2S_Dungeon_OneKey_GetChapterChestAward = 10415; // 主线副本星数/章节宝箱奖励一键领取
  MSG_S2C_Dungeon_OneKey_GetChapterChestAward = 10416;

  MSG_C2S_Shop_GetShopInfo = 10420;//获取通用商店信息
  MSG_S2C_Shop_GetShopInfo = 10421;
  MSG_C2S_Shop_Shopping = 10422;//商店购买
  MSG_S2C_Shop_Shopping = 10423;

  MSG_C2S_Recruit_Info = 10450;	// 招募信息
  MSG_S2C_Recruit_Info = 10451;
  MSG_C2S_Recruit_Recruit = 10452;	// 招募
  MSG_S2C_Recruit_Recruit = 10453;

  MSG_C2S_Arena_GetMainInfo = 10480;//主界面信息
  MSG_S2C_Arena_GetMainInfo = 10481;
  MSG_C2S_Arena_ChallengeBegin = 10482;//发起挑战
  MSG_S2C_Arena_ChallengeBegin = 10483;
  MSG_S2C_Arena_ChallengeFinish = 10484;//返回结算
  MSG_C2S_Arena_FastChallenge = 10485;//扫荡
  MSG_S2C_Arena_FastChallenge = 10486;
  MSG_C2S_Arena_GetTaskInfo = 10487;//任务信息
  MSG_S2C_Arena_GetTaskInfo = 10488;
  MSG_C2S_Arena_GetTaskAward = 10489;//任务奖励
  MSG_S2C_Arena_GetTaskAward = 10490;
  MSG_C2S_Arena_GetRanklist = 10491;//排行榜
  MSG_S2C_Arena_GetRanklist = 10492;
  MSG_C2S_Arena_ChallengeRecord = 10493; //挑战记录
  MSG_S2C_Arena_ChallengeRecord = 10494;
  MSG_C2S_Arena_OneKeyChallenge = 10495; //一键挑战
  MSG_S2C_Arena_OneKeyChallenge = 10496;

	MSG_C2S_DeadBattle_GetInfo = 10510;//信息
	MSG_S2C_DeadBattle_GetInfo = 10511;
	MSG_C2S_DeadBattle_PickBuff = 10512;//选择buff
	MSG_S2C_DeadBattle_PickBuff = 10513;
	MSG_C2S_DeadBattle_FastChallenge = 10515;//扫荡
	MSG_S2C_DeadBattle_FastChallenge = 10516;
	MSG_C2S_DeadBattle_Shopping = 10517;//限时商店购买
	MSG_S2C_DeadBattle_Shopping = 10518;
	MSG_C2S_DeadBattle_ChallengeBegin = 10519;//挑战
	MSG_S2C_DeadBattle_ChallengeBegin = 10520;
	MSG_S2C_DeadBattle_ChallengeFinish = 10521;
	MSG_C2S_DeadBattle_BoxAward = 10522;//宝箱
	MSG_S2C_DeadBattle_BoxAward = 10523;//宝箱
	MSG_C2S_DeadBattle_AllChallenge = 10524;//扫荡全部
	MSG_S2C_DeadBattle_AllChallenge = 10525;

  MSG_C2S_KnightBook_Info = 10550;	// 武将图鉴信息
  MSG_S2C_KnightBook_Info = 10551;
  MSG_C2S_KnightBook_Upgrade = 10552;	// 武将图鉴升级
  MSG_S2C_KnightBook_Upgrade = 10553;
  MSG_C2S_KnightBook_Activate = 10554;	// 武将图鉴激活成就
  MSG_S2C_KnightBook_Activate = 10555;

	MSG_C2S_Achievement_Info = 10570; //成就
	MSG_S2C_Achievement_Info = 10571;
	MSG_C2S_Achievement_Finish = 10572; //完成成就
	MSG_S2C_Achievement_Finish = 10573;
	MSG_C2S_Achievement_Reward = 10574; //完成成就奖励
	MSG_S2C_Achievement_Reward = 10575;

  MSG_C2S_Equipment_Upgrade = 10600;	// 装备升级
  MSG_S2C_Equipment_Upgrade = 10601;
  MSG_C2S_Equipment_Refining = 10602;	// 装备精炼
  MSG_S2C_Equipment_Refining = 10603;
  MSG_C2S_Equipment_Glyph = 10604;    //装备雕纹
  MSG_S2C_Equipment_Glyph = 10605;
  MSG_C2S_Equipment_Cast = 10606;    //装备铸灵
  MSG_S2C_Equipment_Cast = 10607;
  MSG_C2S_Equipment_RefiningOneLevel = 10608;	// 装备一键精炼
  MSG_S2C_Equipment_RefiningOneLevel = 10609;
  MSG_C2S_Equipment_Dot = 10610;    //装备点化
  MSG_S2C_Equipment_Dot = 10611;
  MSG_C2S_Equipment_OneKeyDot = 10612;  //装备一键点化
  MSG_S2C_Equipment_OneKeyDot = 10613;
  MSG_C2S_Equipment_Magic = 10618;	// 装备幻化
  MSG_S2C_Equipment_Magic = 10619;
  MSG_C2S_Equipment_MagicTranslation = 10620;	// 装备幻化平移
  MSG_S2C_Equipment_MagicTranslation = 10621;

  MSG_C2S_Mail_Info = 10650;	// 获取邮件
  MSG_S2C_Mail_Info = 10651;
  MSG_C2S_Mail_Award = 10652;	// 领取邮件奖励
  MSG_S2C_Mail_Award = 10653;
  MSG_C2S_Mail_Send = 10654;	// 发送玩家邮件
  MSG_S2C_Mail_Send = 10655;
  MSG_C2S_Mail_Del = 10656;	// 删除邮件
  MSG_S2C_Mail_Del = 10657;

	MSG_C2S_MainGrowth_GetInfo = 10690; //获取三国志命星信息
	MSG_S2C_MainGrowth_GetInfo = 10691;
	MSG_C2S_MainGrowth_Activate = 10692; //激活三国志命星
	MSG_S2C_MainGrowth_Activate = 10693;

	MSG_C2S_Scroll_Info = 10694;//获取三国志全部信息
	MSG_S2C_Scroll_Info = 10695;
	MSG_C2S_Scroll_Activate = 10696;//激活节点
	MSG_S2C_Scroll_Activate = 10697;

  MSG_C2S_Biography_GetMainInfo = 10700;       //获取主要信息
  MSG_S2C_Biography_GetMainInfo = 10701;
  MSG_C2S_Biography_ExecuteMission = 10702;  //执行任务
  MSG_S2C_Biography_ExecuteMission = 10703;
  MSG_S2C_Biography_ExecuteMissionBattle = 10704; //战斗任务返回
  MSG_C2S_Biography_FastExecuteMission = 10705;   //快速执行任务
  MSG_S2C_Biography_FastExecuteMission = 10706;
  MSG_C2S_Biography_GetMissionAward = 10707; //任务链奖励和支线任务进度奖励
  MSG_S2C_Biography_GetMissionAward = 10708;
  MSG_C2S_Biography_GetTeamList = 10711; //获取队伍列表
  MSG_S2C_Biography_GetTeamList = 10712;
  MSG_C2S_Biography_CreateTeam = 10713; //创建队伍
  MSG_S2C_Biography_CreateTeam = 10714;
  MSG_C2S_Biography_JoinTeam = 10715; //加入队伍
  MSG_S2C_Biography_JoinTeam = 10716;
  MSG_C2S_Biography_KickOutTeam = 10717; //踢出队伍
  MSG_S2C_Biography_KickOutTeam = 10718;
  MSG_C2S_Biography_LeaveTeam = 10719; //离开队伍
  MSG_S2C_Biography_LeaveTeam = 10720;
  MSG_C2S_Biography_PrepareBattle = 10721; //准备战斗
  MSG_S2C_Biography_PrepareBattle = 10722;
  MSG_C2S_Biography_AttackCampaignBegin = 10723; //开始战斗
  MSG_S2C_Biography_AttackCampaignBegin = 10724;
  MSG_S2C_Biography_AttackCampaignFinish = 10725;
  MSG_S2C_Biography_SyncTeamStatus = 10726; //同步队伍状态
  MSG_C2S_Biography_GetCampaignFirstAward = 10727; //获取战役首通奖励
  MSG_S2C_Biography_GetCampaignFirstAward = 10728;
  MSG_C2S_Biography_MoveMember = 10729; //移动队员
  MSG_S2C_Biography_MoveMember = 10730;
  MSG_C2S_Biography_GetInviteeList = 10731; //可邀请玩家列表
  MSG_S2C_Biography_GetInviteeList = 10732;
  MSG_C2S_Biography_InviteRobot = 10733; //邀请npc或机器人
  MSG_S2C_Biography_InviteRobot = 10734;
  MSG_C2S_Biography_InvitePlayer = 10735; //邀请在线玩家
  MSG_S2C_Biography_InvitePlayer = 10736;
  MSG_C2S_Biography_GetInvitation = 10737; //获取邀请函
  MSG_S2C_Biography_GetInvitation = 10738;
  MSG_C2S_Biography_ConfirmInvite = 10739; //处理邀请
  MSG_S2C_Biography_ConfirmInvite = 10740;
  MSG_C2S_Biography_ShieldInvite = 107341; //屏蔽邀请
  MSG_S2C_Biography_ShieldInvite = 10742;
  MSG_C2S_Biography_SetTeamLock = 10743; //队伍加锁
  MSG_S2C_Biography_SetTeamLock = 10744;
  MSG_S2C_Biography_NotifyInvitee = 10745; //通知被邀请人
  MSG_S2C_Biography_NotifyDismiss = 10746; //通知队伍解散
  MSG_C2S_Biography_ResetMissionCount = 10477; //重置任务次数(仅限战斗任务)
  MSG_S2C_Biography_ResetMissionCount = 10478;
  MSG_C2S_Biography_GetChapterAward = 10760; //获取通关奖励
  MSG_S2C_Biography_GetChapterAward = 10761;

	MSG_C2S_Biography_Boss_Info = 10747;//名将传BOSS信息
	MSG_S2C_Biography_Boss_Info = 10748;
	MSG_C2S_Biography_Boss_ChallengeBegin = 10749; //挑战名将传Boss
	MSG_S2C_Biography_Boss_ChallengeBegin = 10754;
	MSG_S2C_Biography_Boss_ChallengeFinish = 10755;


  MSG_C2S_Treasure_Upgrade = 10750;	// 宝物升级
  MSG_S2C_Treasure_Upgrade = 10751;
  MSG_C2S_Treasure_Refining = 10752;	// 宝物精炼
  MSG_S2C_Treasure_Refining = 10753;
  MSG_C2S_Treasure_Glyph = 10756;   //宝物雕纹
  MSG_S2C_Treasure_Glyph = 10757;
  MSG_C2S_Treasure_Upgrade_OneLevel = 10758; //宝物一键升一级
  MSG_S2C_Treasure_Upgrade_OneLevel = 10759;
	MSG_C2S_Treasure_Golden = 10762; //宝物升灵
	MSG_S2C_Treasure_Golden = 10763;

	// 夺宝
  MSG_C2S_ContendTreasure_GetList = 10800;	// 获取抢夺列表
  MSG_S2C_ContendTreasure_GetList = 10801;
  MSG_C2S_ContendTreasure_RobBegin = 10802;	// 抢夺-发起挑战
  MSG_S2C_ContendTreasure_RobBegin = 10803;
  MSG_S2C_ContendTreasure_RobFinish = 10804;	// 抢夺-返回结算
  MSG_C2S_ContendTreasure_Fast = 10805;//扫荡
  MSG_S2C_ContendTreasure_Fast = 10806;
  MSG_C2S_ContendTreasure_Info = 10807;//获取夺宝信息
  MSG_S2C_ContendTreasure_Info = 10808;
  MSG_C2S_ContendTreasure_AvengeBegin = 10809;	// 复仇-发起挑战
  MSG_S2C_ContendTreasure_AvengeBegin = 10810;
  MSG_S2C_ContendTreasure_AvengeFinish = 10811;	// 复仇-返回结算
  MSG_C2S_ContendTreasure_OneKeyFast = 10812;
  MSG_S2C_ContendTreasure_OneKeyFast = 10813;//一键夺宝
  //领地巡逻
  MSG_C2S_City_GetInfo = 10850; //获取信息
  MSG_S2C_City_GetInfo = 10851;
  MSG_C2S_City_StartPatrol = 10852; //开始巡逻
  MSG_S2C_City_StartPatrol = 10853;
  MSG_C2S_City_FinishPatrol = 10854; //结束巡逻
  MSG_S2C_City_FinishPatrol = 10855;
  MSG_C2S_City_GetFriendInfo = 10856; //获取好友
  MSG_S2C_City_GetFriendInfo = 10857;
  MSG_C2S_City_GetFriendCity = 10858; //好友城池
  MSG_S2C_City_GetFriendCity = 10859;
  MSG_C2S_City_HandleTrouble = 10860; //平定动乱
  MSG_S2C_City_HandleTrouble = 10861;
  MSG_C2S_City_GetTroubleFriend = 10862; //有动乱的好友
  MSG_S2C_City_GetTroubleFriend = 10863;
  MSG_C2S_City_OneKeyHandleTrouble = 10864; //一键平定动乱
  MSG_S2C_City_OneKeyHandleTrouble = 10865;
  MSG_C2S_City_OneKeyPatrol = 10866;    //一键巡逻
  MSG_S2C_City_OneKeyPatrol = 10867;
  MSG_C2S_City_OneKeyGetAward = 10868;  //一键领奖
  MSG_S2C_City_OneKeyGetAward = 10869;


  // 好友
  MSG_C2S_Friend_Info = 10900;	// 信息
  MSG_S2C_Friend_Info = 10901;
  MSG_C2S_Friend_FriendList = 10902;	// 获取好友列表
  MSG_S2C_Friend_FriendList = 10903;
  MSG_C2S_Friend_BlackList = 10904;	// 获取黑名单
  MSG_S2C_Friend_BlackList = 10905;
  MSG_C2S_Friend_RequestList = 10906;	// 获取好友请求列表
  MSG_S2C_Friend_RequestList = 10907;
  MSG_C2S_Friend_AddFriend = 10908;	// 请求添加好友
  MSG_S2C_Friend_AddFriend = 10909;
  MSG_C2S_Friend_DelFriend = 10910;	// 删除好友
  MSG_S2C_Friend_DelFriend = 10911;
  MSG_C2S_Friend_AddBlackList = 10912;	// 添加黑名单
  MSG_S2C_Friend_AddBlackList = 10913;
  MSG_C2S_Friend_DelBlackList = 10914;	// 删除黑名单
  MSG_S2C_Friend_DelBlackList = 10915;
  MSG_C2S_Friend_ConfirmFriend = 10916;	// 同意、拒绝添加好友
  MSG_S2C_Friend_ConfirmFriend = 10917;
  MSG_C2S_Friend_SendGift = 10918;	// 赠送礼物
  MSG_S2C_Friend_SendGift = 10919;
  MSG_C2S_Friend_ReceiveGift = 10920;	// 接收礼物
  MSG_S2C_Friend_ReceiveGift = 10921;
  MSG_C2S_Friend_GetRecommendList = 10922;	// 获取推荐好友
  MSG_S2C_Friend_GetRecommendList = 10923;
  MSG_C2S_Friend_GetSnapshot = 10924;	// 查找好友
  MSG_S2C_Friend_GetSnapshot = 10925;
  MSG_S2C_Friend_NotifyAddFriendRequest = 10926;	// 通知：对方请求添加你为好友
  MSG_S2C_Friend_NotifyAddFriend = 10927;	// 通知：对方添加你为好友
  MSG_S2C_Friend_NotifyDelFriend = 10928;	// 通知：对方将你删除
  MSG_S2C_Friend_NotifyTask = 10929;	// 通知：亲密度任务完成
  MSG_S2C_Friend_NotifyGift = 10930;	// 通知：对方给你赠送礼物
  MSG_C2S_Friend_Duel = 10931;	// 好友对战
  MSG_S2C_Friend_Duel = 10932;
  MSG_S2C_Friend_NotifyTask_All = 10933;	// 通知：所有好友亲密度任务完成
  MSG_C2S_Friend_SetRequestCond = 10934;   //好友申请条件
  MSG_S2C_Friend_SetRequestCond = 10935;
  MSG_C2S_Friend_RequestCondList = 10936;  //好友申请条件列表
  MSG_S2C_Friend_RequestCondList = 10937;

	//称号
	MSG_C2S_Title_Info = 10950;// 获取info 这条存在但是不需要 因为title信息在user里面了
	MSG_S2C_Title_Info = 10951;
	MSG_C2S_Title_Wear = 10952;// 穿戴title
	MSG_S2C_Title_Wear = 10953;

	MSG_C2S_Handbook_Info = 10960;//通用图鉴
	MSG_S2C_Handbook_Info = 10961;
  MSG_S2C_Handbook_Sync = 10962;

	//时装
	MSG_C2S_Dress_Enhance = 10972;//时装强化
	MSG_S2C_Dress_Enhance = 10973;
	MSG_C2S_Dress_Wear = 10974;//时装穿戴
	MSG_S2C_Dress_Wear = 10975;
	MSG_C2S_Dress_OneKey_Enhance = 10976;//时装强化
	MSG_S2C_Dress_OneKey_Enhance = 10977;
  //军团
  MSG_C2S_Guild_Recommend = 11000; //推荐军团
  MSG_S2C_Guild_Recommend = 11001;
  MSG_C2S_Guild_Search = 11002; //查找军团
  MSG_S2C_Guild_Search = 11003;
  MSG_C2S_Guild_GetInfo = 11004; //获取信息
  MSG_S2C_Guild_GetInfo = 11005;
  MSG_C2S_Guild_Create = 11006; //创建军团
  MSG_S2C_Guild_Create = 11007;
  MSG_C2S_Guild_ReqJoin = 11008; //请求加入
  MSG_S2C_Guild_ReqJoin = 11009;
  MSG_C2S_Guild_Confirm = 11010; //处理申请
  MSG_S2C_Guild_Confirm = 11011;
  MSG_C2S_Guild_KickOut = 11012; //踢出军团
  MSG_S2C_Guild_KickOut = 11013;
  MSG_C2S_Guild_Quit = 11014; //退出军团
  MSG_S2C_Guild_Quit = 11015;
  MSG_C2S_Guild_Dismiss = 11016; //解散军团
  MSG_S2C_Guild_Dismiss = 11017;
  MSG_C2S_Guild_Appoint = 11018; //任命官职
  MSG_S2C_Guild_Appoint = 11019;
  MSG_C2S_Guild_Impeach = 11020; //弹劾军团长
  MSG_S2C_Guild_Impeach = 11021;
  MSG_C2S_Guild_GetHistory = 11022; //军团动态
  MSG_S2C_Guild_GetHistory = 11023;
  MSG_C2S_Guild_ModifyInfo = 11024; //修改信息
  MSG_S2C_Guild_ModifyInfo = 11025;
  MSG_C2S_Guild_GetMessageBoard = 11026; //获取留言板
  MSG_S2C_Guild_GetMessageBoard = 11027;
  MSG_C2S_Guild_LeaveAMessage = 11028; //增加留言
  MSG_S2C_Guild_LeaveAMessage = 11029;
  MSG_C2S_Guild_OperateMessage = 11030; //删除,置顶,取消置顶
  MSG_S2C_Guild_OperateMessage = 11031;
  MSG_C2S_Guild_GetApplyList = 11032; //申请列表
  MSG_S2C_Guild_GetApplyList = 11033;
  MSG_C2S_Guild_GetApplyHistory = 11034; //申请历史
  MSG_S2C_Guild_GetApplyHistory = 11035;
  MSG_C2S_Guild_DeleteApply = 11036; //删除申请
  MSG_S2C_Guild_DeleteApply = 11037;
  MSG_C2S_Guild_GetWorshipInfo = 11038; //祭天信息
  MSG_S2C_Guild_GetWorshipInfo = 11039;
  MSG_C2S_Guild_DoWorship = 11040; //祭天
  MSG_S2C_Guild_DoWorship = 11041;
  MSG_C2S_Guild_GetWorshipAward = 11042; //祭天进度奖励
  MSG_S2C_Guild_GetWorshipAward = 11043;
  MSG_S2C_Guild_NotifyJoin = 11044; //加入军团通知
  MSG_S2C_Guild_NotifyLeave = 11045; //退出军团通知(包括被踢和解散)
  MSG_C2S_Guild_FastJoin = 11046; //快速加入
  MSG_S2C_Guild_FastJoin = 11047;
  MSG_C2S_Guild_SendGift = 11048; //送礼
  MSG_S2C_Guild_SendGift = 11049;

  //红包
  MSG_C2S_Guild_RedPacket_Info = 11050; //红包列表
  MSG_S2C_Guild_RedPacket_Info = 11051;
  MSG_C2S_Guild_RedPacket_Detail = 11052; //红包详情
  MSG_S2C_Guild_RedPacket_Detail = 11053;
  MSG_C2S_Guild_RedPacket_Pick = 11054; //领取红包
  MSG_S2C_Guild_RedPacket_Pick = 11055;
  MSG_C2S_Guild_RedPacket_Use = 11056; //使用红包
  MSG_S2C_Guild_RedPacket_Use = 11057;
  MSG_S2C_Guild_RedPacket_Flush = 11058;//刷新红包

  //军团祭天
  MSG_C2S_GuildWorship_GetInfo = 11060;//祭天信息
  MSG_S2C_GuildWorship_GetInfo = 11061;
  MSG_C2S_GuildWorship_FinishMission = 11062; //三种祭天
  MSG_S2C_GuildWorship_FinishMission = 11063;
  MSG_C2S_GuildWorship_GetProgressAward = 11064; //进度奖励
  MSG_S2C_GuildWorship_GetProgressAward = 11065;
  MSG_S2C_GuildWorship_PushMission = 11066; //推送完成的任务
  MSG_S2C_GuildWorship_PushHistory = 11067; //推送军团祭天动态
  MSG_C2S_GuildWorship_OneKey_FinishMission = 11068; //一键免费祭天
  MSG_S2C_GuildWorship_OneKey_FinishMission = 11069;

  //军团副本
  MSG_C2S_GuildDungeon_GetInfo = 11070; //获取信息
  MSG_S2C_GuildDungeon_GetInfo = 11071;
  MSG_C2S_GuildDungeon_GetChapter = 11072; //获取章节信息
  MSG_S2C_GuildDungeon_GetChapter = 11073;
  MSG_C2S_GuildDungeon_AttackBegin = 11074; //开始挑战
  MSG_S2C_GuildDungeon_AttackBegin = 11075;
  MSG_S2C_GuildDungeon_AttackFinish = 11076; //返回挑战结果
  MSG_C2S_GuildDungeon_GetSkillInfo = 11077; //技能信息
  MSG_S2C_GuildDungeon_GetSkillInfo = 11078;
  MSG_C2S_GuildDungeon_SkillLevelUp = 11079; //技能升级
  MSG_S2C_GuildDungeon_SkillLevelUp = 11080;
  MSG_C2S_GuildDungeon_GetFinishAward = 11081; //领取通关奖励
  MSG_S2C_GuildDungeon_GetFinishAward = 11082;
  MSG_C2S_GuildDungeon_GetTreasureBox = 11083; //领取关卡宝藏
  MSG_S2C_GuildDungeon_GetTreasureBox = 11084;
  MSG_C2S_GuildDungeon_GetStageMvpAward = 11085; //领取关卡mvp奖励
  MSG_S2C_GuildDungeon_GetStageMvpAward = 11086;
  MSG_S2C_GuildDungeon_BroadcastDamage = 11087; //广播成员伤害
  MSG_C2S_GuildDungeon_GetMemberDamage = 11088; //获取成员战绩
  MSG_S2C_GuildDungeon_GetMemberDamage = 11089;
  MSG_C2S_GuildDungeon_OneKeyGetFinishAward = 11090; //军团副本一键领取
  MSG_S2C_GuildDungeon_OneKeyGetFinishAward = 11091;

  MSG_C2S_Guild_OneKeySendGift = 11100; //军团一键送礼
  MSG_S2C_Guild_OneKeySendGift = 11101;

  // 叛军
  MSG_C2S_Rebel_Info = 11150; // 叛军信息
  MSG_S2C_Rebel_Info = 11151;
  MSG_C2S_Rebel_AttackBegin = 11152; // 攻击叛军
  MSG_S2C_Rebel_AttackBegin = 11153;
  MSG_S2C_Rebel_AttackFinish = 11154;
  MSG_C2S_Rebel_Share = 11155; // 分享叛军
  MSG_S2C_Rebel_Share = 11156;
  MSG_C2S_Rebel_Award = 11157; // 叛军奖励
  MSG_S2C_Rebel_Award = 11158;
  MSG_S2C_Rebel_NotifyCreate = 11159;	// 通知：叛军出现
  MSG_C2S_Rebel_One_Button_Award = 11161;	//一键领奖
  MSG_S2C_Rebel_One_Button_Award = 11162;
  MSG_C2S_Rebel_OneKeyAttackBegin = 11163;  //一键讨伐叛军
  MSG_S2C_Rebel_OneKeyAttackBegin = 11164;
  MSG_S2C_Rebel_OneKey_AttackFinish = 11165;;   //一键扫荡叛军的结果


  // 日常副本
  MSG_C2S_DailyDungeon_Info   = 11200;	// 日常副本-信息
  MSG_S2C_DailyDungeon_Info   = 11201;
  MSG_C2S_DailyDungeon_ChallengeBegin  = 11202;	// 日常副本-战斗
  MSG_S2C_DailyDungeon_ChallengeBegin  = 11203;
  MSG_S2C_DailyDungeon_ChallengeFinish  = 11204;
  MSG_C2S_DailyDungeon_Fast   = 11205;	// 日常副本-扫荡
  MSG_S2C_DailyDungeon_Fast   = 11206;
  MSG_C2S_DailyDungeon_OneKey_Fast   = 11207;  // 日常副本-一键扫荡
  MSG_S2C_DailyDungeon_OneKey_Fast   = 11208;

  // 刷新商店
  MSG_C2S_FlushShop_Info = 11250;	// 刷新商店-信息
  MSG_S2C_FlushShop_Info = 11251;
  MSG_C2S_FlushShop_Flush = 11252;	// 刷新商店-刷新
  MSG_S2C_FlushShop_Flush = 11253;
  MSG_C2S_FlushShop_Buy = 11254;	// 刷新商店-购买
  MSG_S2C_FlushShop_Buy = 11255;

  //日常任务
  MSG_C2S_DailyTask_GetInfo = 11280; //日常任务信息
  MSG_S2C_DailyTask_GetInfo = 11281;
  MSG_C2S_DailyTask_FinishAward = 11282; //领取完成任务奖励
  MSG_S2C_DailyTask_FinishAward = 11283;
  MSG_C2S_DailyTask_DegreeAward = 11284; //领取活跃度奖励
  MSG_S2C_DailyTask_DegreeAward = 11285;

  //重生系统
  MSG_C2S_Reborn_Preview = 11300; //预览
  MSG_S2C_Reborn_Preview = 11301;
  MSG_C2S_Reborn_Execute = 11302; //重生
  MSG_S2C_Reborn_Execute = 11303;

  //置换系统
  MSG_C2S_Switch_Execute = 11304; //置换
  MSG_S2C_Switch_Execute = 11305;

  // 领取体力
  MSG_C2S_GetStamina_Info = 11350;	//领取体力-信息
  MSG_S2C_GetStamina_Info = 11351;
  MSG_C2S_GetStamina_Get = 11352;	//领取体力-领取
  MSG_S2C_GetStamina_Get = 11353;

  // 签到
  MSG_C2S_SignIn_Info = 11400;	// 签到-信息
  MSG_S2C_SignIn_Info = 11401;
  MSG_C2S_SignIn_Sign = 11402;	// 签到-签到
  MSG_S2C_SignIn_Sign = 11403;
  MSG_C2S_SignIn_Award = 11404;	// 签到-礼包
  MSG_S2C_SignIn_Award = 11405;
  MSG_C2S_SignIn_Test = 11406;	// 签到-重置今日已签到状态(测试用)
  MSG_S2C_SignIn_Test = 11407;

  //名人堂
  MSG_C2S_HallOfFame_Rank = 11425; //获取排行
  MSG_S2C_HallOfFame_Rank = 11426;
  MSG_C2S_HallOfFame_Like = 11427; //点赞
  MSG_S2C_HallOfFame_Like = 11428;

  //新手引导
  MSG_C2S_Guide_Set = 11450;	//新手引导-设置id
  MSG_S2C_Guide_Set = 11451;
  MSG_C2S_Guide_Action = 11452;	//新手引导-执行特殊操作
  MSG_S2C_Guide_Action = 11453;
	//GM公告
	MSG_C2S_Announce_Info = 11454;
	MSG_S2C_Announce_Info = 11455;
	MSG_S2C_Announce_Flush = 11456;


  // 充值
  MSG_C2S_Recharge_GetRecharge = 11500;
  MSG_S2C_Recharge_GetRecharge = 11501;
  MSG_C2S_Recharge_UseMonthCard = 11502;
  MSG_S2C_Recharge_UseMonthCard = 11503;
  MSG_S2C_Recharge_NotifySuccess = 11504;
  MSG_C2S_Recharge_UseSubRecharge = 11505;
  MSG_S2C_Recharge_UseSubRecharge = 11506;

  //可配置活动
  MSG_C2S_CustomActivity_GetInfo = 11550;
  MSG_S2C_CustomActivity_GetInfo = 11551;
  MSG_C2S_CustomActivity_GetAward = 11552;
  MSG_S2C_CustomActivity_GetAward = 11553;
  MSG_C2S_CustomActivity_Exchange = 11554;
  MSG_S2C_CustomActivity_Exchange = 11555;
  MSG_S2C_CustomActivity_SyncTask = 11556;
  MSG_S2C_CustomActivity_UpdateInfo = 11557;
  MSG_C2S_CustomActivity_ReqInfo = 11558;
  MSG_S2C_CustomActivity_ReqInfo = 11559;
  MSG_C2S_CustomActivity_Collection = 11560;
  MSG_S2C_CustomActivity_Collection = 11561;




	//测试用协议
	MSG_C2S_Proto_Test = 11580;//测试uint64的协议
	MSG_S2C_Proto_Test = 11581;
	MSG_C2S_SyncProto = 11582;//同步客户端协议
	MSG_S2C_SyncProto = 11583;

  // 战力竞赛
  MSG_C2S_FightingCapacity_Info = 11600;	// 活动信息
  MSG_S2C_FightingCapacity_Info = 11601;
  MSG_C2S_FightingCapacity_Award = 11602;	// 领取战力奖励
  MSG_S2C_FightingCapacity_Award = 11603;
  MSG_C2S_FightingCapacity_Rank = 11604;	// 战力竞赛排行榜缓存(活动结束后才有数据)
  MSG_S2C_FightingCapacity_Rank = 11605;

  //问卷调查
  MSG_C2S_Questionnaire_GetInfo = 11650; //问卷配置
  MSG_S2C_Questionnaire_GetInfo = 11651;
  MSG_S2C_Questionnaire_Notify = 11652; //通知有新问卷

	// 礼包码
	MSG_S2C_GiftNotify = 11700;

    // 防沉迷
    MSG_S2C_AntiAddictionNotify = 11710;

    // 七日活动
    MSG_C2S_Sevendays_Info = 11800;	// 七日活动-信息
    MSG_S2C_Sevendays_Info = 11801;
    MSG_C2S_Sevendays_Award = 11802;	// 七日活动-领奖
    MSG_S2C_Sevendays_Award = 11803;
    MSG_C2S_Sevendays_Clear = 11804;	// 七日活动-清除迷雾
    MSG_S2C_Sevendays_Clear = 11805;
    MSG_C2S_Sevendays_Break = 11806;	// 七日活动-破坏障碍
    MSG_S2C_Sevendays_Break = 11807;
    MSG_C2S_Sevendays_Activate = 11808;	// 七日活动-激活事件/奖励
    MSG_S2C_Sevendays_Activate = 11809;
    MSG_C2S_Sevendays_Login_Award = 11810;	// 七日活动-登录任务领奖
    MSG_S2C_Sevendays_Login_Award = 11811;

    //升级奖励
    MSG_C2S_LevelUp_Info = 11820;
    MSG_S2C_LevelUp_Info = 11821;
    MSG_C2S_LevelUp_Award = 11822;
    MSG_S2C_LevelUp_Award = 11823;

    //绑定手机
    MSG_C2S_Phone_Info = 11830;
    MSG_S2C_Phone_Info = 11831;
    MSG_C2S_Phone_Bind = 11832;
    MSG_S2C_Phone_Bind = 11833;
    MSG_C2S_Phone_Award = 11834;
    MSG_S2C_Phone_Award = 11835;

    // 抽将返利
    MSG_C2S_RecruitRebate_Info = 11900;	// 抽将返利-信息
    MSG_S2C_RecruitRebate_Info = 11901;
    MSG_C2S_RecruitRebate_Award = 11902;	// 抽将返利-领奖
    MSG_S2C_RecruitRebate_Award = 11903;

    //军团竞赛
    MSG_C2S_GuildCompetition_GetInfo = 11950; //军团竞赛信息
    MSG_S2C_GuildCompetition_GetInfo = 11951;
    MSG_C2S_GuildCompetition_GetAward = 11952; //军团竞赛任务奖励
    MSG_S2C_GuildCompetition_GetAward = 11953;
    MSG_S2C_GuildCompetition_SyncTask = 11954;

    // 登录送礼
    MSG_C2S_LoginReward_Info = 12000;	// 登录送礼-信息
    MSG_S2C_LoginReward_Info = 12001;
    MSG_C2S_LoginReward_Award = 12002;	// 登录送礼-领奖
    MSG_S2C_LoginReward_Award = 12003;

    //军团神像
    MSG_C2S_GuildStatue_GetInfo = 12150; //铸神像-信息
    MSG_S2C_GuildStatue_GetInfo = 12151;
    MSG_C2S_GuildStatue_DoCast = 12152; //铸神像-铸造
    MSG_S2C_GuildStatue_DoCast = 12153;
    MSG_C2S_GuildStatue_GetStageAward = 12154; //铸神像-进度宝箱
    MSG_S2C_GuildStatue_GetStageAward = 12155;
    MSG_C2S_GuildStatue_GetFinalAward = 12156; //铸神像-显灵宝箱
    MSG_S2C_GuildStatue_GetFinalAward = 12157;
    MSG_S2C_GuildStatue_Push = 12158; //铸神像-广播铸造
    MSG_C2S_GuildStatue_OneKeyStageAward = 12159; //铸神像-一键领奖
    MSG_S2C_GuildStatue_OneKeyStageAward = 12160;

    // 功能引导
    MSG_C2S_GuideTask_Info = 12050;	// 功能引导-信息
    MSG_S2C_GuideTask_Info = 12051;
    MSG_C2S_GuideTask_Award = 12052;	// 功能引导-领奖
    MSG_S2C_GuideTask_Award = 12053;

    //变装
    MSG_C2S_Skin_Wear = 12100;//变装穿戴
    MSG_S2C_Skin_Wear = 12101;
    MSG_C2S_Skin_TakeOff = 12102;//变装脱卸
    MSG_S2C_Skin_TakeOff = 12103;
    MSG_C2S_Skin_Expire_Ntf = 12104;//变装过期
    MSG_S2C_Skin_Expire_Ntf = 12105;

    //收集活动
    MSG_C2S_Collect_GetInfo = 12200; //获取信息
    MSG_S2C_Collect_GetInfo = 12201;
    MSG_C2S_Collect_GetAward = 12202; //收集领奖
    MSG_S2C_Collect_GetAward = 12203;

    //聊天分享
    MSG_C2S_GetChatShare = 12204;
    MSG_S2C_GetChatShare = 12205;

    //头像框激活信息
    MSG_C2S_FrameInfo = 12210;
    MSG_S2C_FrameInfo = 12211;

    //领取礼品码
    MSG_C2S_GiftCode = 12220;
    MSG_S2C_GiftCode = 12221;
    MSG_C2S_New_GiftCode = 12222;
    MSG_S2C_New_GiftCode = 12223;

    //领取首充阶段奖励
    MSG_C2S_Recharge_GetFirstRechargeAward = 12226;
    MSG_S2C_Recharge_GetFirstRechargeAward = 12227;

    //领取基金奖励
    MSG_C2S_Recharge_GetFundRechargeAward = 12228;
    MSG_S2C_Recharge_GetFundRechargeAward = 12229;
    MSG_S2C_Recharge_OpRecharge = 12230;
    MSG_C2S_Recharge_GetFundRecharge = 12231;
    MSG_S2C_Recharge_GetFundRecharge = 12232;
    MSG_C2S_Recharge_GetDayRechargeAward = 12233;
    MSG_S2C_Recharge_GetDayRechargeAward = 12234;
    MSG_C2S_Recharge_GetDayRechargeInfo = 12235;
    MSG_S2C_Recharge_GetDayRechargeInfo = 12236;
    MSG_C2S_Recharge_GetTotalRechargeAward = 12237;
    MSG_S2C_Recharge_GetTotalRechargeAward = 12238;
    MSG_S2C_Recharge_FundBuyNotify = 12239;

    //攻城略地
    MSG_C2S_Storm_Info = 12300;	// 攻城略地-信息
    MSG_S2C_Storm_Info = 12301;
    MSG_C2S_Storm_StormInfo = 12302;	// 攻城略地-关隘信息
    MSG_S2C_Storm_StormInfo = 12303;
    MSG_C2S_Storm_ChallengeBegin = 12304;	// 攻城略地-挑战怪物事件
    MSG_S2C_Storm_ChallengeBegin = 12305;
    MSG_S2C_Storm_ChallengeFinish = 12306;
    MSG_C2S_Storm_Award = 12307;	// 攻城略地-领取宝箱事件
    MSG_S2C_Storm_Award = 12308;
    MSG_C2S_Storm_Break = 12309;	// 攻城略地-清除障碍事件
    MSG_S2C_Storm_Break = 12310;
    MSG_C2S_Storm_Clear = 12311;	// 攻城略地-重置并扫荡
    MSG_S2C_Storm_Clear = 12312;
    MSG_C2S_Storm_Reset = 12313;	// 攻城略地-重置
    MSG_S2C_Storm_Reset = 12314;
    MSG_C2S_Storm_GetEnemy = 12315;	// 攻城略地-更新事件敌人
    MSG_S2C_Storm_GetEnemy = 12316;
    MSG_S2C_Storm_NotifyFinishStorm = 12317;	// 攻城略地-通关关隘
    MSG_C2S_Storm_GetBattleUser = 12318;	// 攻城略地-获取事件对应的BattleUser结构
    MSG_S2C_Storm_GetBattleUser = 12319;

    //技能树
    MSG_C2S_Storm_SkillLvUp = 12325; //技能树升级
    MSG_S2C_Storm_SkillLvUp = 12326;
    MSG_C2S_Storm_SkillReset = 12327; //技能书手动重置
    MSG_S2C_Storm_SkillReset = 12328;
    MSG_C2S_Storm_GetSkillInfo = 12329; //获取技能树信息
    MSG_S2C_Storm_GetSkillInfo = 12330;

    //图鉴竞赛
    MSG_C2S_KnightBook_GetInfo = 12340;
    MSG_S2C_KnightBook_GetInfo = 12241;
    MSG_C2S_KnightBook_GetAward = 12242;
    MSG_S2C_KnightBook_GetAward = 12243;
    MSG_S2C_KnightBook_SyncTask = 12245;

    //限时商人
    MSG_C2S_Recharge_GetOpenPurchaseAward = 12246;
    MSG_S2C_Recharge_GetOpenPurchaseAward = 12247;
    MSG_C2S_Recharge_GetOpenPurchaseInfo = 12248;
    MSG_S2C_Recharge_GetOpenPurchaseInfo = 12249;

    //限时神将
    MSG_C2S_Recruit_RecruitKnight = 12250;
    MSG_S2C_Recruit_RecruitKnight = 12251;
    MSG_C2S_Recruit_GetRecruitKnightInfo = 12252;
    MSG_S2C_Recruit_GetRecruitKnightInfo = 12253;
    MSG_C2S_Recruit_GetRecruitKnightAward = 12254;
    MSG_S2C_Recruit_GetRecruitKnightAward = 12255;
    MSG_S2C_Recruit_NotifyRank = 12256;

    //攻城掠地-城主抢夺
    MSG_C2S_StormCity_Info = 12400;
    MSG_S2C_StormCity_Info = 12401;
    MSG_C2S_StormCity_ChallengeBegin = 12402;
    MSG_S2C_StormCity_ChallengeBegin = 12403;
    MSG_S2C_StormCity_ChallengeFinish= 12404;
    MSG_C2S_StormCity_GetLordAward = 12405;
    MSG_S2C_StormCity_GetLordAward = 12406;
    MSG_C2S_StormCity_GetRanklist = 12407;
    MSG_S2C_StormCity_GetRanklist = 12408;

    // 公测返利
    MSG_C2S_ReturnPay_GetInfo = 12450;
    MSG_S2C_ReturnPay_GetInfo = 12451;
    MSG_C2S_ReturnPay_GetAward = 12452;
    MSG_S2C_ReturnPay_GetAward = 12453;

    // 在线好礼
    MSG_C2S_OnlineGift_GetInfo = 12470;
    MSG_S2C_OnlineGift_GetInfo = 12471;
    MSG_C2S_OnlineGift_GetAward = 12472;
    MSG_S2C_OnlineGift_GetAward = 12473;

    // 每日直冲
    MSG_C2S_Recharge_GetDayBoxAward = 12500;
    MSG_S2C_Recharge_GetDayBoxAward = 12501;
    MSG_C2S_Recharge_GetDayBoxInfo = 12502;
    MSG_S2C_Recharge_GetDayBoxInfo = 12503;

    //等级礼包
    MSG_C2S_GodBox_GetInfo = 12520;
    MSG_S2C_GodBox_GetInfo = 12521;
    MSG_S2C_GodBox_Triggle = 12522;
    MSG_C2S_GodBox_Shopping = 12523;
    MSG_S2C_GodBox_Shopping = 12524;

    //神器
    MSG_C2S_Artifact_LevelUp = 12600;   //神器强化
    MSG_S2C_Artifact_LevelUp = 12601;
    MSG_C2S_Artifact_Star = 12602;      //神器升星
    MSG_S2C_Artifact_Star = 12603;
    MSG_C2S_Artifact_Draw = 12607;      //抽取神器
    MSG_S2C_Artifact_Draw = 12608;
    MSG_C2S_Artifact_GetDraw = 12609;       //获取神器轮盘信息
    MSG_S2C_Artifact_GetDraw = 12610;
    MSG_C2S_Artifact_DrawRefresh = 12611;    //神器轮盘刷新
    MSG_S2C_Artifact_DrawRefresh = 12612;
    MSG_C2S_Artifact_DrawAward = 12613;  //领取神器积分宝箱
    MSG_S2C_Artifact_DrawAward = 12614;
    MSG_C2S_Artifact_GetContinuePurify = 12615;	//获取连续洗炼条件
    MSG_S2C_Artifact_GetContinuePurify = 12616;	
    MSG_C2S_Artifact_SetContinuePurify = 12617;	//设置连续洗炼条件
    MSG_S2C_Artifact_SetContinuePurify = 12618;	
    MSG_C2S_Artifact_PurifyHoleLock = 12619;	//请求对孔位进行上锁或者解锁
    MSG_S2C_Artifact_PurifyHoleLock = 12620;
    MSG_C2S_Artifact_Purify = 12621;	//请求洗炼
    MSG_S2C_Artifact_Purify = 12622;
    MSG_C2S_Artifact_SpecialPurify = 12623;	//特殊洗炼
    MSG_S2C_Artifact_SpecialPurify = 12624;	
    MSG_C2S_Artifact_PurifyResultConfirm = 12625;	//洗炼结果确认
    MSG_S2C_Artifact_PurifyResultConfirm = 12626;	
    MSG_C2S_Artifact_PurifyResultCancle = 12627;	//洗炼结果取消
    MSG_S2C_Artifact_PurifyResultCancle = 12628;	
	MSG_C2S_Artifact_SpecialPurifySelect = 12631;	//神兵特殊洗炼孔位选择
	MSG_S2C_Artifact_SpecialPurifySelect = 12632;
    MSG_C2S_Artifact_HelpUp = 12633; //神兵协战-上阵
    MSG_S2C_Artifact_HelpUp = 12634;
    MSG_C2S_Artifact_HelpDown = 12635; //神兵协战-下阵
    MSG_S2C_Artifact_HelpDown = 12636;

    // 拍卖行
    MSG_C2S_Auction_GetInfo = 12650; // 查询信息
    MSG_S2C_Auction_GetInfo = 12651;
    MSG_C2S_Auction_BidPrice = 12652; // 竞价
    MSG_S2C_Auction_BidPrice = 12653;
    MSG_C2S_Auction_GetRecord = 12654; // 拍卖记录
    MSG_S2C_Auction_GetRecord = 12655;
    MSG_C2S_Auction_ClickTab = 12656; // 点击页签
    MSG_S2C_Auction_ClickTab = 12657;
    MSG_C2S_Auction_Quit = 12658; // 退出玩法
    MSG_S2C_Auction_Quit = 12659;
    MSG_S2C_Auction_GoodsNotify = 12660; // 竞价推送
    MSG_S2C_Auction_CreateNotify = 12661; // 创建活动推送

    //金装活动
    MSG_C2S_GoldEquip_GetInfo = 12700; //获取金装活动信息(客戶端打开活动界面就请求，客户端自己要算哪些活动开启了)
    MSG_S2C_GoldEquip_GetInfo = 12701;
    MSG_C2S_GoldEquip_Draw = 12702; //金装活动抽
    MSG_S2C_GoldEquip_Draw = 12703;
    MSG_C2S_GoldEquip_TaskAward = 12704; //获取任务奖励
    MSG_S2C_GoldEquip_TaskAward = 12705;
    MSG_S2C_GoldEquip_SyncTask = 12706; //同步变化的任务数据
    MSG_S2C_GoldEquip_BroadcastDrawInfo = 12707; //广播抽取的信息

    //号令天下
    MSG_C2S_OrderWorld_Info = 12710; //获取活动信息
    MSG_S2C_OrderWorld_Info = 12711;
    MSG_C2S_OrderWorld_Donate = 12712; //捐赠
    MSG_S2C_OrderWorld_Donate = 12713;
    MSG_C2S_OrderWorld_OpTabUser = 12714; //更新活动页面的玩家
    MSG_S2C_OrderWorld_OpTabUser = 12715;
    MSG_C2S_OrderWorld_GuildLevelAward = 12716; //领取公会积分等级奖励
    MSG_S2C_OrderWorld_GuildLevelAward = 12717;
    MSG_S2C_OrderWorld_Record_Broadcast = 12718; //推送捐赠记录
    MSG_C2S_OrderWorld_TaskAward = 12719; //任务领奖
    MSG_S2C_OrderWorld_TaskAward = 12720;
    MSG_C2S_OrderWorld_ShopBuy = 12721;	//商店购买
    MSG_S2C_OrderWorld_ShopBuy = 12722;
    MSG_S2C_OrderWorld_RechargeNotify = 12723; //充值推送
    MSG_C2S_OrderWorld_RechargeAward = 12724;	//商店购买
    MSG_S2C_OrderWorld_RechargeAward = 12725;
    MSG_C2S_OrderWorld_MarsAward = 12726;//战神奖励
    MSG_S2C_OrderWorld_MarsAward = 12727;
    MSG_S2C_OrderWorld_GuildNotify = 12728; //公会捐赠数据推送
    MSG_C2S_OrderWorld_GuildAllAward = 12729; //一键领取公会积分等级奖励
    MSG_S2C_OrderWorld_GuildAllAward = 12730;
    MSG_S2C_OrderWorld_NotifyRank = 12731; //排行榜数据推送

    //军团boss(12750~12799)
    MSG_C2S_GuildBoss_GetInfo = 12750; //获取军团boss信息
    MSG_S2C_GuildBoss_GetInfo = 12751;
    MSG_C2S_GuildBoss_ChallengeBossBegin = 12752; //挑战军团boss
    MSG_S2C_GuildBoss_ChallengeBossBegin = 12753;
    MSG_S2C_GuildBoss_ChallengeBossFinish = 12754;
    MSG_C2S_GuildBoss_RobUserBegin = 12755; //抢夺玩家
    MSG_S2C_GuildBoss_RobUserBegin = 12756;
    MSG_S2C_GuildBoss_RobUserFinish = 12757;
    MSG_C2S_GuildBoss_GetRobUserList = 12758; //获得抢夺列表
    MSG_S2C_GuildBoss_GetRobUserList = 12759;
    MSG_C2S_GuildBoss_UserJoin = 12760; //玩家进入
    MSG_S2C_GuildBoss_UserJoin = 12761;
    MSG_S2C_GuildBoss_Broadcast = 12762; //弹幕

    //获取正在开启的开服类活动
    MSG_C2S_Activity_Common_GetInfoServer = 12798;//获取当天已经开启的开服类活动info
    MSG_S2C_Activity_Common_GetInfoServer = 12799;

    //条件类活动
    MSG_C2S_Condition_GetInfo = 12800; //获取条件类活动信息
    MSG_S2C_Condition_GetInfo = 12801;
    MSG_C2S_Condition_TaskAward = 12802; //获取条件类活动任务奖励
    MSG_S2C_Condition_TaskAward = 12803;
    MSG_S2C_Condition_SyncTask = 12804; //同步变化的任务数据

    //获取活动通用记录
    MSG_C2S_Activity_Common_Record_Get = 12805;
    MSG_S2C_Activity_Common_Record_Get = 12806;

    //活动通用任务
    MSG_C2S_Activity_Common_Task_Get = 12810; //获取活动通用任务信息
    MSG_S2C_Activity_Common_Task_Get = 12811;
    MSG_C2S_Activity_Common_Task_Award = 12812; //领取活动通用任务奖励
    MSG_S2C_Activity_Common_Task_Award = 12813;
    MSG_S2C_Activity_Common_Task_Update  = 12814; //更新活动通用任务信息

    //活动通用记录
    MSG_S2C_Activity_Common_Record_Broadcast = 12815; //广播活动通用记录

    //活动通用抽卡
    MSG_C2S_Activity_Common_Draw = 12816; //活动抽卡
    MSG_S2C_Activity_Common_Draw = 12817;

    //节日掉落
    MSG_C2S_Holiday_Drop_Info = 12818;
    MSG_S2C_Holiday_Drop_Info = 12819;

    //傲视天下(12820-12860)
    MSG_C2S_Mine_GetInfo = 12820;//获取主界面信息
    MSG_S2C_Mine_GetInfo = 12821;
    MSG_C2S_Mine_GetGold = 12822;//领取当前元宝收益
    MSG_S2C_Mine_GetGold = 12823;
    MSG_C2S_Mine_GetCityInfo = 12824;//获取城池详细信息
    MSG_S2C_Mine_GetCityInfo = 12825;
    MSG_C2S_Mine_MoveCity = 12826;//迁入城池
    MSG_S2C_Mine_MoveCity = 12827;
    MSG_C2S_Mine_AttackUserBegin = 12828;//攻击城池内其他玩家
    MSG_S2C_Mine_AttackUserBegin = 12829;
    MSG_S2C_Mine_AttackUserFinish = 12830;
    MSG_S2C_Mine_CaptureNotify = 12831;//占城状态通知
    MSG_C2S_Mine_BuyPower = 12832;//补充兵力
    MSG_S2C_Mine_BuyPower = 12833;
    MSG_C2S_Mine_GetLeagueStatus = 12834;//查看赛区状态
    MSG_S2C_Mine_GetLeagueStatus = 12835;
    MSG_C2S_Mine_Leave = 12836;//离开傲视天下玩法页面
    MSG_S2C_Mine_Leave = 12837;
    MSG_S2C_Mine_EventNotify = 12838;//事件刷新通知
    MSG_C2S_Mine_GetRecord = 12839;//获取战报
    MSG_S2C_Mine_GetRecord = 12840;
    MSG_S2C_Mine_PlayerDieNotify = 12841;//玩家死亡
    MSG_S2C_Mine_PlayerPowerNotify = 12842;//兵力变化通知
    MSG_C2S_Mine_GetMission = 12843;//获取赛季任务数据
    MSG_S2C_Mine_GetMission = 12844;
    MSG_C2S_Mine_GetMissionReward = 12845;//领取赛季任务奖励
    MSG_S2C_Mine_GetMissionReward = 12846;
    MSG_C2S_Mine_GetAchieveReward = 12847;//领取赛季成就奖励
    MSG_S2C_Mine_GetAchieveReward = 12848;
    MSG_C2S_Mine_GetEnemyUser = 12849;//获取仇人列表
    MSG_S2C_Mine_GetEnemyUser = 12850;
    MSG_C2S_Mine_GetEnemyGuild = 12851;//获取敌对军团列表
    MSG_S2C_Mine_GetEnemyGuild = 12852;
    MSG_C2S_Mine_DeleteEnemyUser= 12853;//移除仇人
    MSG_S2C_Mine_DeleteEnemyUser = 12854;
    MSG_C2S_Mine_Mass = 12855;//集结&取消集结
    MSG_S2C_Mine_Mass = 12856;
    MSG_C2S_Mine_GetMassInfo = 12857;//获取集结信息
    MSG_S2C_Mine_GetMassInfo = 12858;
    MSG_S2C_Mine_MassNotify = 12859;




    //玩法滲透率
    MSG_C2S_IconClick = 12900;
    MSG_S2C_IconClick = 12901;

    //红包雨
    MSG_C2S_RpRain_Info = 12920;//获取信息
    MSG_S2C_RpRain_Info = 12921;
    MSG_C2S_RpRain_AwardRedpacket = 12922;//领取红包
    MSG_S2C_RpRain_AwardRedpacket = 12923;
    MSG_C2S_RpRain_AwardFish = 12924;//领取锦鲤
    MSG_S2C_RpRain_AwardFish = 12925;

    // 渠道公测返利
    MSG_C2S_ReturnPayOperator_GetInfo = 12950;
    MSG_S2C_ReturnPayOperator_GetInfo = 12951;
    MSG_C2S_ReturnPayOperator_GetAward = 12952;
    MSG_S2C_ReturnPayOperator_GetAward = 12953;

    //微信分享
    MSG_C2S_WeChat_Share_Get = 12970;
    MSG_S2C_WeChat_Share_Get = 12971;
    MSG_C2S_WeChat_Share = 12972;
    MSG_S2C_WeChat_Share = 12973;

    //风物志
    MSG_C2S_Reel_Get = 12980;
    MSG_S2C_Reel_Get = 12981;
    MSG_C2S_Reel_Active = 12982;
    MSG_S2C_Reel_Active = 12983;

    //聊天气泡和表情
    MSG_C2S_TalkShow_Get = 13000;
    MSG_S2C_TalkShow_Get = 13001;
    MSG_C2S_TalkShow_Active = 13002;
    MSG_S2C_TalkShow_Active = 13003;

    //化身卡
    MSG_C2S_Card_Activate = 13050;
    MSG_S2C_Card_Activate =13051;
    MSG_C2S_Card_Magically = 13052;
    MSG_S2C_Card_Magically = 13053;
    MSG_C2S_Card_Compose = 13054;
    MSG_S2C_Card_Compose =13055;

    // 心愿商店
    MSG_C2S_WishShop_GetInfo = 13100; // 获取信息
    MSG_S2C_WishShop_GetInfo = 13101;
    MSG_C2S_WishShop_DailyWishAward = 13102;// 每日心愿领奖
    MSG_S2C_WishShop_DailyWishAward = 13103;
    MSG_C2S_WishShop_TaskAward = 13104;// 心愿任务领奖
    MSG_S2C_WishShop_TaskAward = 13105;
    MSG_C2S_WishShop_GiftAward = 13106;// 心愿礼包领奖
    MSG_S2C_WishShop_GiftAward = 13107;
    MSG_S2C_WishShop_GiftBuyNotify = 13108; // 购买礼包的通知
    MSG_C2S_WishShop_DailyWishChoseAward = 13109;// 每日心愿选择奖励
    MSG_S2C_WishShop_DailyWishChoseAward = 13110;
    MSG_S2C_WishShop_TaskNotify = 13111; // 活动推送

    //过关斩将霸主相关
    MSG_C2S_StormCity_GetLord = 13120;
    MSG_S2C_StormCity_GetLord = 13121;
    MSG_C2S_StormCity_LordHistorys = 13122;
    MSG_S2C_StormCity_LordHistorys = 13123;
    MSG_S2C_StormCity_LordAchiveChange = 13124;
    MSG_C2S_StormCity_GetLordAchive = 13125;
    MSG_S2C_StormCity_GetLordAchive = 13126;
    MSG_C2S_StormCity_GetLordAchiveAward = 13127;
    MSG_S2C_StormCity_GetLordAchiveAward = 13128;
    MSG_C2S_StormCity_GetMaxLordAward = 13129;
    MSG_S2C_StormCity_GetMaxLordAward = 13130;

    //欢庆佳节
    MSG_C2S_Holiday_Info = 13200;	// 信息
    MSG_S2C_Holiday_Info = 13201;
    MSG_C2S_Holiday_Award = 13202;	// 领取任务奖励
    MSG_S2C_Holiday_Award = 13203;
    MSG_C2S_Holiday_Buy = 13204;	// 商店购买
    MSG_S2C_Holiday_Buy = 13205;
    MSG_S2C_Holiday_NotifyTask = 13206;	// 任务状态推送

    //資源找回
    MSG_C2S_Retrieve_GetInfo = 13250;//找回資源詳細信息
    MSG_S2C_Retrieve_GetInfo = 13251;
    MSG_C2S_Retrieve_Res = 13252;//找回資源請求
    MSG_S2C_Retrieve_Res = 13253;
    MSG_S2C_Retrieve_OpRetrieveRes =13254;//同步客戶端

    //超级vip
    MSG_C2S_SuperVip_Get = 13260; //超级vip
    MSG_S2C_SuperVip_Get = 13261;

    //跨服玩法聊天+弹幕
    MSG_C2S_BulletScreen_GetInfo = 13265;//获取聊天+弹幕内容
    MSG_S2C_BulletScreen_GetInfo = 13266;
    MSG_C2S_BulletScreen_Send = 13267;//发送聊天
    MSG_S2C_BulletScreen_Send = 13268;
    MSG_S2C_BulletScreen_Notify = 13269;  //接受弹幕和聊天notify

    //翅膀及精炼
    MSG_C2S_Wing_Compose = 13300;
    MSG_S2C_Wing_Compose =13301;
    MSG_C2S_Wing_Refine = 13302;
    MSG_S2C_Wing_Refine = 13303;
    MSG_C2S_Wing_Wear = 13304;
    MSG_S2C_Wing_Wear =13305;
    MSG_S2C_FlushWing = 13306;

    //广告页
    MSG_C2S_AbvertPage_GetInfo = 13350;
    MSG_S2C_AbvertPage_GetInfo = 13351;
    MSG_S2C_AbvertPage_UpdateInfo = 13352;

    //完成action
    MSG_C2S_Action_Finish = 13360;
    MSG_S2C_Action_Finish = 13361;

    //神兽秘境
    MSG_C2S_Mystery_Info = 13400;	// 信息
    MSG_S2C_Mystery_Info = 13401;
    MSG_C2S_Mystery_GetRoomList = 13402;	// 获取指定秘境的房间列表
    MSG_S2C_Mystery_GetRoomList = 13403;
    MSG_C2S_Mystery_Enter = 13404;	// 进入秘境
    MSG_S2C_Mystery_Enter = 13405;
    MSG_C2S_Mystery_Exit = 13406;	// 离开秘境
    MSG_S2C_Mystery_Exit = 13407;
    MSG_C2S_Mystery_ChangeRoom = 13408;	// 切换房间
    MSG_S2C_Mystery_ChangeRoom = 13409;
    MSG_C2S_Mystery_Move = 13410;	// 移动
    MSG_S2C_Mystery_Move = 13411;
    MSG_C2S_Mystery_ChallengeBegin = 13412;	// 挑战小怪/守将
    MSG_S2C_Mystery_ChallengeBegin = 13413;
    MSG_S2C_Mystery_ChallengeFinish = 13414;
    MSG_C2S_Mystery_Attack = 13415;	// 攻击小怪
    MSG_S2C_Mystery_Attack = 13416;
    MSG_C2S_Mystery_AcceptTask = 13417;	// 接取日常任务
    MSG_S2C_Mystery_AcceptTask = 13418;
    MSG_C2S_Mystery_GiveUpTask = 13419;	// 放弃日常任务
    MSG_S2C_Mystery_GiveUpTask = 13420;
    MSG_C2S_Mystery_Award = 13421;	// 领取任务奖励
    MSG_S2C_Mystery_Award = 13422;
    MSG_S2C_Mystery_NotifyMove = 13423;	// 通知:移动
    MSG_S2C_Mystery_NotifyAttack = 13424;	// 通知:攻击小怪
    MSG_S2C_Mystery_NotifyTask = 13425;	// 通知:任务状态改变
    MSG_S2C_Mystery_NotifyExit = 13426;	// 通知:离开
    MSG_S2C_Mystery_NotifyDrop = 13427;	// 通知:掉落
    MSG_C2S_Mystery_OneKey_Attack = 13428;	// 一键扫荡小怪
    MSG_S2C_Mystery_OneKey_Attack = 13429;

    // 神兽养成
    MSG_C2S_Pet_LevelUp = 13500; // 使用道具升级
    MSG_S2C_Pet_LevelUp = 13501;
    MSG_C2S_Pet_OneKey_LevelUp = 13502; // 一键升级
    MSG_S2C_Pet_OneKey_LevelUp = 13503;
    MSG_C2S_Pet_StarUp = 13504; // 升星
    MSG_S2C_Pet_StarUp = 13505;
    MSG_C2S_Pet_Help = 13506;    // 宠物协战
    MSG_S2C_Pet_Help = 13507;

    // 神兽装备
    MSG_C2S_Pet_Equipment_Upgrade = 13510;	// 神兽装备强化
    MSG_S2C_Pet_Equipment_Upgrade = 13511;
    MSG_C2S_Pet_Equipment_FastUpgrade = 13512;	// 神兽装备一键强化
    MSG_S2C_Pet_Equipment_FastUpgrade = 13513;
    MSG_C2S_Pet_Equipment_Lock = 13514;   //神兽装备加解锁
    MSG_S2C_Pet_Equipment_Lock = 13515;

    //秘境boss
    MSG_C2S_MysteryBoss_Care = 13520;       //请求获取关注的秘境bossId
    MSG_S2C_MysteryBoss_Care = 13521;
    MSG_C2S_MysteryBoss_GetInfo = 13522;    //请求获取boss列表信息
    MSG_S2C_MysteryBoss_GetInfo = 13523;
    MSG_C2S_MysteryBoss_EnterRoom = 13524;  //请求进入boss房间
    MSG_S2C_MysteryBoss_EnterRoom = 13525;
    MSG_C2S_MysteryBoss_LeaveRoom = 13526;  //请求离开boss房间
    MSG_S2C_MysteryBoss_LeaveRoom = 13527;
    MSG_C2S_MysteryBoss_PosChallengeBegin = 13528; //请求挑战挑战位上的玩家
    MSG_S2C_MysteryBoss_PosChallengeBegin = 13529;
    MSG_S2C_MysteryBoss_PosChallengeFinish = 13530; //挑战结束结果
    MSG_S2C_MysteryBoss_NotifyPosChallenge = 13531; //挑战成功广播通知
    MSG_C2S_MysteryBoss_BossChallengeBegin = 13532; //攻击boss-站到挑战位上后，客户端需要立刻发送这个协议
    MSG_S2C_MysteryBoss_BossChallengeBegin = 13533;
    MSG_S2C_MysteryBoss_BossChallengeFinish = 13534;
    MSG_S2C_MysteryBoss_NotifyBossChallenge = 13535; //通知房间内玩家某玩家攻击了boss
    MSG_S2C_MysteryBoss_NotifyBossDead = 13536; //通知房间内玩家和关注了该boss的玩家boss死亡信息(客户端需要注意重复通知的情况)
    MSG_S2C_MysteryBoss_NotifyBossReborn = 13537; //通知boss复活-给关注boss的玩家
    MSG_S2C_MysteryBoss_NotifyLeave = 13538; //玩家从离开房间（当玩家在榜上前六名的时候才会推送该协议）（特殊boss也需要）
    MSG_S2C_MysteryBoss_NotifyAwards = 13539; //通知排行榜前六名或者击杀者奖励
    MSG_S2C_MysteryBoss_NotifyEnter = 13540; //通知玩家进入房间（特殊boss观战列表用）

    //月基金
    MSG_C2S_Recharge_GetMonthFundInfo = 13550;
    MSG_S2C_Recharge_GetMonthFundInfo = 13551;
    MSG_C2S_Recharge_GetMonthFundAward = 13552;
    MSG_S2C_Recharge_GetMonthFundAward = 13553;

    // 老玩家回归
    MSG_C2S_BackReward_Info = 13600;	// 老玩家回归-信息
    MSG_S2C_BackReward_Info = 13601;
    MSG_C2S_BackReward_Award = 13602;	// 老玩家回归-奖励
    MSG_S2C_BackReward_Award = 13603;

    //开服兑换活动
    MSG_C2S_Activity_GetExchangeInfo = 13620;
    MSG_S2C_Activity_GetExchangeInfo = 13621;

    //新累计充值
    MSG_C2S_Recharge_GetNewTotalRechargeInfo = 13622;
    MSG_S2C_Recharge_GetNewTotalRechargeInfo = 13623;
    MSG_C2S_Recharge_GetNewTotalRechargeAward = 13624;
    MSG_S2C_Recharge_GetNewTotalRechargeAward = 13625;

    //富甲天下
    MSG_C2S_Richest_GetInfo = 13630; //获取活动信息
    MSG_S2C_Richest_GetInfo = 13631;
    MSG_C2S_Richest_Draw = 13632; //活动抽卡
    MSG_S2C_Richest_Draw = 13633;
    MSG_S2C_Richest_NotifyRank = 13634; //推送排行榜变化

    //活动通用事件
    MSG_C2S_ActivityCommon_EventList = 13640; //事件列表
    MSG_S2C_ActivityCommon_EventList = 13641;
    MSG_C2S_ActivityCommon_FinishEvent = 13642; //完成事件
    MSG_S2C_ActivityCommon_FinishEvent = 13643;
    MSG_C2S_ActivityCommon_FastFinishEvent = 13644; //一键完成事件
    MSG_S2C_ActivityCommon_FastFinishEvent = 13645;

    //流失数据
    MSG_C2S_Activity_GetLosts = 13650;
    MSG_S2C_Activity_GetLosts = 13651;
    MSG_C2S_Activity_GetLostAward = 13652;
    MSG_S2C_Activity_GetLostAward = 13653;

    // 王者荣耀
    MSG_C2S_GroupBattle_Enter = 13700; // 进入玩法
    MSG_S2C_GroupBattle_Enter = 13701;
    MSG_C2S_GroupBattle_CreateRoom = 13702; // 创建队伍
    MSG_S2C_GroupBattle_CreateRoom = 13703;
    MSG_C2S_GroupBattle_QuickJoin = 13704; // 快速队伍
    MSG_S2C_GroupBattle_QuickJoin = 13705;
    MSG_C2S_GroupBattle_Invite = 13706; // 邀请
    MSG_S2C_GroupBattle_Invite = 13707;
    MSG_C2S_GroupBattle_ConfirmInvite = 13708; // 处理加入
    MSG_S2C_GroupBattle_ConfirmInvite = 13709;
    MSG_C2S_GroupBattle_QuitRoom = 13710; // 退出房间
    MSG_S2C_GroupBattle_QuitRoom = 13711;
    MSG_C2S_GroupBattle_Kick = 13712; // 踢人
    MSG_S2C_GroupBattle_Kick = 13713;
    MSG_C2S_GroupBattle_Ready = 13714; // 准备
    MSG_S2C_GroupBattle_Ready = 13715;
    MSG_C2S_GroupBattle_Setting = 13716; // 设置
    MSG_S2C_GroupBattle_Setting = 13717;
    MSG_C2S_GroupBattle_LineUp = 13718; // 布阵
    MSG_S2C_GroupBattle_LineUp = 13719;
    MSG_C2S_GroupBattle_Match = 13720; // 匹配战斗队伍
    MSG_S2C_GroupBattle_Match = 13721;
    MSG_S2C_GroupBattle_NotifyRoomChange = 13722;// 通知：房间变化
    MSG_S2C_GroupBattle_NotifyMatch = 13723;// 通知：匹配推送
    MSG_S2C_GroupBattle_NotifyMatchFinish = 13724;// 通知：匹配推送
    MSG_S2C_GroupBattle_NotifyBeKick = 13725;// 通知：被踢推送
    MSG_S2C_GroupBattle_NotifyInvite = 13726; // 通知：邀请推送
    MSG_C2S_GroupBattle_InviteRobot = 13727; // 邀请机器人
    MSG_S2C_GroupBattle_InviteRobot = 13728;
    MSG_C2S_GroupBattle_InviteeList = 13729; // 可邀请列表
    MSG_S2C_GroupBattle_InviteeList = 13730;
    MSG_C2S_GroupBattle_GetInvitation = 13731; // 邀请函列表
    MSG_S2C_GroupBattle_GetInvitation = 13732;
    MSG_C2S_GroupBattle_JoinRoom = 13733; // 加入房间
    MSG_S2C_GroupBattle_JoinRoom = 13734;
    MSG_S2C_GroupBattle_NotifyFightReport = 13735;// 通知：战报数据
    MSG_C2S_GroupBattle_QueryRoom = 13736; // 查询房间
    MSG_S2C_GroupBattle_QueryRoom = 13737;
    MSG_S2C_GroupBattle_NotifyDisbandRoom = 13738; // 通知：解散房间
    MSG_C2S_GroupBattle_RefreshBattleUser = 13739; // 刷新玩家阵容信息
    MSG_S2C_GroupBattle_RefreshBattleUser = 13740;
    MSG_S2C_GroupBattle_NotifyMapChange = 13741;// 通知：推送地图变化

    // 噩梦副本
    MSG_C2S_SpaceTimeDungeon_Enter = 13750;         //进入玩法
    MSG_S2C_SpaceTimeDungeon_Enter = 13751;
    MSG_C2S_SpaceTimeDungeon_EnterChapter = 13752;  //进入关卡
    MSG_S2C_SpaceTimeDungeon_EnterChapter = 13753;
    MSG_C2S_SpaceTimeDungeon_Move = 13754;          //移动
    MSG_S2C_SpaceTimeDungeon_Move = 13755;
    MSG_C2S_SpaceTimeDungeon_BattleStart = 13756;   //战斗开始
    MSG_S2C_SpaceTimeDungeon_BattleStart = 13757;
    MSG_S2C_SpaceTimeDungeon_BattleFinish = 13758;  //战斗完成
    MSG_C2S_SpaceTimeDungeon_BoxAward = 13759;      //领取宝箱
    MSG_S2C_SpaceTimeDungeon_BoxAward = 13760;
    MSG_C2S_SpaceTimeDungeon_RestoreHp = 13761;     //泉水加血
    MSG_S2C_SpaceTimeDungeon_RestoreHp = 13762;
    MSG_C2S_SpaceTimeDungeon_Revive = 13763;        //复活
    MSG_S2C_SpaceTimeDungeon_Revive = 13764;
    MSG_C2S_SpaceTimeDungeon_ItemList = 13765;      //时光之力背包
    MSG_S2C_SpaceTimeDungeon_ItemList = 13766;
    MSG_C2S_SpaceTimeDungeon_SelectItem = 13767;    //选择时光之力
    MSG_S2C_SpaceTimeDungeon_SelectItem = 13768;
    MSG_C2S_SpaceTimeDungeon_ResetChapter = 13769;  //重置关卡
    MSG_S2C_SpaceTimeDungeon_ResetChapter = 13770;
    MSG_C2S_SpaceTimeDungeon_TriggerGear = 13771;   //触发机关
    MSG_S2C_SpaceTimeDungeon_TriggerGear = 13772;
    MSG_C2S_SpaceTimeDungeon_TriggerControl = 13773;   //触发控制台
    MSG_S2C_SpaceTimeDungeon_TriggerControl = 13774;

    // 熔炉
    MSG_C2S_Furnace_Exchange = 13800; // 熔炼
    MSG_S2C_Furnace_Exchange = 13801;
    MSG_C2S_Furnace_GetInfo = 13802; // 查询熔炼剩余经验
    MSG_S2C_Furnace_GetInfo = 13803;

    // 通用action模块
    MSG_C2S_GetModuleOneKeyTaskAward = 13810;//一键获取通用action模块奖励
    MSG_S2C_GetModuleOneKeyTaskAward = 13811;

    //王者竞技
    MSG_C2S_PeakArena_GetActivityInfo = 13850;      //获取活动信息
    MSG_S2C_PeakArena_GetActivityInfo = 13851;
    MSG_C2S_PeakArena_GetUserInfo = 13852;          //获取玩家自己的信息
    MSG_S2C_PeakArena_GetUserInfo = 13853;
    MSG_C2S_PeakArena_GetRecords = 13854;           //获取战报数据
    MSG_S2C_PeakArena_GetRecords = 13855;
    MSG_C2S_PeakArena_GetHistorys = 13856;          //获取历代王者
    MSG_S2C_PeakArena_GetHistorys = 13857;
    MSG_C2S_PeakArena_ChangeFormation = 13858;      //上下阵合击兵符
    MSG_S2C_PeakArena_ChangeFormation = 13859;
    MSG_C2S_PeakArena_Match = 13860;                //匹配
    MSG_S2C_PeakArena_Match = 13861;
    MSG_C2S_PeakArena_ChallengeBegin = 13862;       //开始战斗
    MSG_S2C_PeakArena_ChallengeBegin = 13863;
    MSG_S2C_PeakArena_ChallengeFinish = 13864;
    MSG_C2S_PeakArena_GetBattleVideo = 13865;       //获取战斗录像
    MSG_S2C_PeakArena_GetBattleVideo = 13866;

    //获取屏蔽的活动列表
    MSG_C2S_BlockedActivity_GetList = 13870;
    MSG_S2C_BlockedActivity_GetList = 13871;
    MSG_S2C_BlockedActivity_ChangeNotify = 13872;

    //攻城略地新赛季
    MSG_C2S_Wrest_GetInfo = 13900;//获取主界面信息
    MSG_S2C_Wrest_GetInfo = 13901;
    MSG_C2S_Wrest_GetCityInfo = 13902; //获取城池详细信息
    MSG_S2C_Wrest_GetCityInfo = 13903;
    MSG_C2S_Wrest_MoveCity = 13904;//迁入城池
    MSG_S2C_Wrest_MoveCity = 13905;
    MSG_C2S_Wrest_AttackUserBegin = 13906;//攻击城池内其他玩家
    MSG_S2C_Wrest_AttackUserBegin = 13907;
    MSG_S2C_Wrest_AttackUserFinish = 13908;
    MSG_S2C_Wrest_PlayerDieNotify = 13909;//玩家死亡
    MSG_S2C_Wrest_PlayerPowerNotify = 13910;//兵力变化通知
    MSG_C2S_Wrest_BuyPower = 13911;//补充兵力
    MSG_S2C_Wrest_BuyPower = 13912;
    MSG_C2S_Wrest_InnerCity = 13913;//进出内城
    MSG_S2C_Wrest_InnerCity = 13914;
    MSG_C2S_Wrest_GetGold = 13915;//领取当前元宝收益
    MSG_S2C_Wrest_GetGold = 13916;
    MSG_C2S_Wrest_Leave = 13917;//离开玩法页面
    MSG_S2C_Wrest_Leave = 13918;
    MSG_C2S_Wrest_GetEnemyUser = 13919;//获取仇人列表
    MSG_S2C_Wrest_GetEnemyUser = 13920;
    MSG_C2S_Wrest_GetEnemyGuild = 13921;//获取敌对军团列表
    MSG_S2C_Wrest_GetEnemyGuild = 13922;
    MSG_C2S_Wrest_DeleteEnemyUser= 13923;//移除仇人
    MSG_S2C_Wrest_DeleteEnemyUser = 13924;
    MSG_C2S_Wrest_GetMission = 13925;//获取赛季任务数据
    MSG_S2C_Wrest_GetMission = 13926;
    MSG_C2S_Wrest_GetMissionAward = 13927;//领取赛季任务奖励
    MSG_S2C_Wrest_GetMissionAward = 13928;
    MSG_C2S_Wrest_GetAchieveAward = 13929;//领取赛季成就奖励
    MSG_S2C_Wrest_GetAchieveAward = 13930;
    MSG_S2C_Wrest_CaptureNotify = 13931;//占城状态通知
    MSG_C2S_Wrest_GetRecord = 13932;//获取战报
    MSG_S2C_Wrest_GetRecord = 13933;
    MSG_C2S_Wrest_GetLeagueStatus = 13934;//查看赛区状态
    MSG_S2C_Wrest_GetLeagueStatus = 13935;
    MSG_C2S_Wrest_GetUnionRank = 13936;//查看联盟排行榜信息
    MSG_S2C_Wrest_GetUnionRank = 13937;
    MSG_C2S_Wrest_GuildMemberInfo = 13938;// 军团成员信息
    MSG_S2C_Wrest_GuildMemberInfo = 13939;
    MSG_C2S_Wrest_UnionServerInfo = 13940;// 联盟服务器信息
    MSG_S2C_Wrest_UnionServerInfo = 13941;
    MSG_C2S_Wrest_GetGmAct = 13942;// 获取gm开启时间
    MSG_S2C_Wrest_GetGmAct = 13943;

    //周礼包
    MSG_C2S_Recharge_GetWeekGiftInfo = 14000;
    MSG_S2C_Recharge_GetWeekGiftInfo = 14001;
    MSG_C2S_Recharge_GetWeekGiftAward = 14002;
    MSG_S2C_Recharge_GetWeekGiftAward = 14003;
    MSG_C2S_WeekGift_PurchaseWithGold = 14004;
    MSG_S2C_WeekGift_PurchaseWithGold = 14005;

    //将灵
    MSG_C2S_KSoul_Info = 14010;      //主界信息
    MSG_S2C_KSoul_Info = 14011;
    MSG_C2S_KSoul_ChapterInfo = 14012; //章节信息
    MSG_S2C_KSoul_ChapterInfo = 14013;
    MSG_C2S_KSoul_BookActivate = 14014; // 图鉴激活
    MSG_S2C_KSoul_BookActivate = 14015;
    MSG_C2S_KSoul_BookUpgrade  = 14016; // 图鉴升星
    MSG_S2C_KSoul_BookUpgrade  = 14017;
    MSG_C2S_KSoul_HonorAdvance = 14018; // 荣誉成就进阶
    MSG_S2C_KSoul_HonorAdvance = 14019;
    MSG_C2S_KSoul_DrawInfo     = 14020; // 抽卡信息
    MSG_S2C_KSoul_DrawInfo     = 14021;
    MSG_C2S_KSoul_Draw         = 14022; // 抽卡
    MSG_S2C_KSoul_Draw         = 14023;

    //少年节
    MSG_C2S_YoungAct_GetInfo = 14060; //获取少年节活动信息
    MSG_S2C_YoungAct_GetInfo = 14061;
    MSG_C2S_YoungAct_SignIn = 14062; //签到
    MSG_S2C_YoungAct_SignIn = 14063;
    MSG_C2S_YoungAct_ReceiveStageReward = 14064; //领取节点奖励
    MSG_S2C_YoungAct_ReceiveStageReward = 14065;
    MSG_S2C_YoungAct_UpdateInfo = 14067; //推送活动更新
    MSG_C2S_YoungAct_TokenExchange = 14068; //代币兑换
    MSG_S2C_YoungAct_TokenExchange = 14069;
    MSG_C2S_YoungAct_ReceiveTimerGift = 14070; //领取定时礼盒
    MSG_S2C_YoungAct_ReceiveTimerGift = 14071;
    MSG_S2C_YoungAct_NotifyTask = 14072; // 任务状态推送
    MSG_C2S_YoungAct_GetRechargeAward = 14073; //领取充值奖励
    MSG_S2C_YoungAct_GetRechargeAward = 14074;
    MSG_C2S_YoungAct_ReceiveTaskReward = 14076;
    MSG_S2C_YoungAct_ReceiveTaskReward = 14077;

  //军团支柱玩法
  MSG_C2S_GuildBattle_GetInfo = 14080;        //请求玩法数据
  MSG_S2C_GuildBattle_GetInfo = 14081;
  MSG_C2S_GuildBattle_BeginChallenge = 14082; //请求战斗
  MSG_S2C_GuildBattle_BeginChallenge = 14083;
  MSG_S2C_GuildBattle_FinishChallenge = 14084;
  MSG_C2S_GuildBattle_Award = 14085;          //请求领取段位奖励
  MSG_S2C_GuildBattle_Award = 14086;
  MSG_S2C_GuildBattle_NoticeNewChariot = 14087; //当战车被摧毁，服务器会主动推送新匹配的战车(或者首次匹配成功也会下发)
  MSG_C2S_GuildBattle_GetRecords = 14088;     //获取战报
  MSG_S2C_GuildBattle_GetRecords = 14089;
  MSG_S2C_GuildBattle_NoticeScore = 14090;    //广播新解锁的宝箱
  MSG_S2C_GuildBattle_NoticeUser = 14091;     //通知玩家信息变化

  //精英副本
  MSG_C2S_EliteDungeon_GetInfo = 14150;       //请求副本信息
  MSG_S2C_EliteDungeon_GetInfo = 14151;
  MSG_C2S_EliteDungeon_GetRecords = 14152;    //请求某个关卡对应难度的录像
  MSG_S2C_EliteDungeon_GetRecords = 14153;
  MSG_C2S_EliteDungeon_BeginChallenge = 14154; //请求战斗
  MSG_S2C_EliteDungeon_BeginChallenge = 14155;
  MSG_S2C_EliteDungeon_FinishChallenge  = 14156;
  MSG_C2S_EliteDungeon_FastChallenge = 14157; //请求扫荡
  MSG_S2C_EliteDungeon_FastChallenge = 14158;
  MSG_C2S_EliteDungeon_GetChapterAward = 14159; //请求领取章节宝箱奖励
  MSG_S2C_EliteDungeon_GetChapterAward = 14160;
  MSG_C2S_EliteDungeon_GetAchievementAward = 14161; //请求领取成就奖励
  MSG_S2C_EliteDungeon_GetAchievementAward = 14162;
  MSG_C2S_EliteDungeon_GetStageInfo = 14163;   //请求关卡信息
  MSG_S2C_EliteDungeon_GetStageInfo = 14164;
  MSG_C2S_EliteDungeon_GetVideo = 14165;       //请求录像数据
  MSG_S2C_EliteDungeon_GetVideo = 14166;

  //讨伐魔将
  MSG_C2S_DemonBoss_GetInfo = 14200; // 获取信息
  MSG_S2C_DemonBoss_GetInfo = 14201;
  MSG_C2S_DemonBoss_ChoseTeam = 14202; // 选择阵营
  MSG_S2C_DemonBoss_ChoseTeam = 14203;
  MSG_C2S_DemonBoss_BeginChallenge = 14204; //请求战斗
  MSG_S2C_DemonBoss_BeginChallenge = 14205;
  MSG_S2C_DemonBoss_FinishChallenge = 14206;
  MSG_C2S_DemonBoss_GetReport = 14207; // 获取战报
  MSG_S2C_DemonBoss_GetReport = 14208;
  MSG_C2S_DemonBoss_UserJoin = 14209; // 玩家进入
  MSG_S2C_DemonBoss_UserJoin = 14210;
  MSG_S2C_DemonBoss_Notify = 14211; // 推送
  MSG_C2S_DemonBoss_TaskAward = 14212; // 任务领奖
  MSG_S2C_DemonBoss_TaskAward = 14213;
  MSG_C2S_DemonBoss_OneKeyTaskAward = 14214; // 任务一键领奖
  MSG_S2C_DemonBoss_OneKeyTaskAward = 14215;

  //无双地牢
  MSG_C2S_DeadTower_EnterInfo = 14230;  //进入玩法
  MSG_S2C_DeadTower_EnterInfo = 14231;
  MSG_C2S_DeadTower_BattleStart = 14232; //请求战斗
  MSG_S2C_DeadTower_BattleStart = 14233;
  MSG_S2C_DeadTower_BattleFinish = 14234;
  MSG_C2S_DeadTower_GetCard = 14235;     //获取卡片
  MSG_S2C_DeadTower_GetCard = 14236;
  MSG_C2S_DeadTower_Treasure = 14237;    //寻宝
  MSG_S2C_DeadTower_Treasure = 14238;
  MSG_C2S_DeadTower_FriendProgress = 14239; // 好友进度
  MSG_S2C_DeadTower_FriendProgress = 14240;

  // 幸运翻牌
  MSG_C2S_LuckyDraw_GetInfo = 14250; // 获取信息
  MSG_S2C_LuckyDraw_GetInfo = 14251;
  MSG_C2S_LuckyDraw_Exec = 14252; // 翻牌
  MSG_S2C_LuckyDraw_Exec = 14253;
  MSG_C2S_LuckyDraw_Refresh = 14254; // 刷新
  MSG_S2C_LuckyDraw_Refresh = 14255;

  // 一键领取红包
  MSG_C2S_Guild_RedPacket_OneKey_Pick = 14260;
  MSG_S2C_Guild_RedPacket_OneKey_Pick = 14261;

  //时空召唤
  MSG_C2S_Recruit_RecruitAuKnight = 14270;        //请求抽卡
  MSG_S2C_Recruit_RecruitAuKnight = 14271;
  MSG_C2S_Recruit_GetRecruitAuKnightInfo = 14272; //获取活动信息
  MSG_S2C_Recruit_GetRecruitAuKnightInfo = 14273;
  MSG_C2S_Recruit_GetRecruitAuKnightAward = 14274; //请求领取阶段奖励
  MSG_S2C_Recruit_GetRecruitAuKnightAward = 14275;
  MSG_C2S_Recruit_GetRechargeAward = 14276;       //领取充值奖励
  MSG_S2C_Recruit_GetRechargeAward = 14277;

  //乱世英杰活动
  MSG_C2S_WarLord_GetInfo = 14280; //乱世英杰活动获取信息
  MSG_S2C_WarLord_GetInfo = 14281;
  MSG_C2S_WarLord_GetAchievementInfo = 14282; //乱世英杰活动获取成就信息
  MSG_S2C_WarLord_GetAchievementInfo = 14283;
  MSG_C2S_WarLord_GetAchievementAward = 14284; //乱世英杰活动获取成就奖励
  MSG_S2C_WarLord_GetAchievementAward = 14285;
  MSG_C2S_WarLord_Enter = 14286; //乱世英杰活动 进入玩法
  MSG_S2C_WarLord_Enter = 14287;
  MSG_C2S_WarLord_Finish = 14288; //乱世英杰活动 结束玩法
  MSG_S2C_WarLord_Finish = 14289;

  // 一键屏蔽聊天
  MSG_C2S_BlockedChat_GetInfo = 14300; // 获取聊天屏蔽时间
  MSG_S2C_BlockedChat_GetInfo = 14301;
  MSG_S2C_BlockedChat_ChangeNotify = 14302; // 同步修改

  // 月卡强化
  MSG_C2S_Recharge_MonthCard_GetInfo = 14310;// 获取已领取活跃节点id
  MSG_S2C_Recharge_MonthCard_GetInfo = 14311;
  MSG_C2S_Recharge_MonthCard_Award = 14312; // 请求获取月卡活跃宝箱奖励
  MSG_S2C_Recharge_MonthCard_Award = 14313;

  MSG_C2S_Knight_Purplize = 14318; //武将幻紫
  MSG_S2C_Knight_Purplize = 14319;

  // 军团图腾
  MSG_C2S_GuildTotem_GetInfo = 14320; // 获取图腾信息
  MSG_S2C_GuildTotem_GetInfo = 14321;
  MSG_C2S_GuildTotem_NodeUpgrade = 14322; // 节点升级
  MSG_S2C_GuildTotem_NodeUpgrade = 14323;
  MSG_C2S_GuildTotem_Upgrade = 14324; // 图腾品质提升
  MSG_S2C_GuildTotem_Upgrade = 14325;
  
  // 烽火连城
  MSG_C2S_FlameCity_GetInfo = 14400; // 获取信息
  MSG_S2C_FlameCity_GetInfo = 14401;
  MSG_C2S_FlameCity_EnterChapter = 14402; // 进入章节
  MSG_S2C_FlameCity_EnterChapter = 14403;
  MSG_C2S_FlameCity_AttackBegin = 14404; // 攻击
  MSG_S2C_FlameCity_AttackBegin = 14405;
  MSG_S2C_FlameCity_AttackFinish = 14406;
  MSG_C2S_FlameCity_ChoseTarget = 14407; // 设置目标
  MSG_S2C_FlameCity_ChoseTarget = 14408;
  MSG_C2S_FlameCity_GetReport = 14409; // 查询战报
  MSG_S2C_FlameCity_GetReport = 14410;
  MSG_C2S_FlameCity_GetChapterAward = 14411; // 领取章节奖励
  MSG_S2C_FlameCity_GetChapterAward = 14412;
  MSG_C2S_FlameCity_GetBoxAward = 14413; // 领取宝箱奖励
  MSG_S2C_FlameCity_GetBoxAward = 14414;
  MSG_C2S_FlameCity_GetTreasureAward = 14415; // 领取宝藏奖励
  MSG_S2C_FlameCity_GetTreasureAward = 14416;
  MSG_C2S_FlameCity_GetCostHpRank = 14417; // 消耗血量排行榜
  MSG_S2C_FlameCity_GetCostHpRank = 14418;
  MSG_S2C_FlameCity_AttackNotify = 14419; // 攻击推送
  MSG_C2S_FlameCity_FastAttack = 14420; // 快速挑战
  MSG_S2C_FlameCity_FastAttack = 14421;
  MSG_C2S_FlameCity_UserJoin = 14422; // 进出地图
  MSG_S2C_FlameCity_UserJoin = 14423;
  MSG_C2S_FlameCity_GetTreasureList = 14424; // 获取宝藏奖励领取情况
  MSG_S2C_FlameCity_GetTreasureList = 14425;
  MSG_S2C_FlameCity_ChapterNotify = 14426; // 章节信息推送
  MSG_C2S_FlameCity_OneKeyBoxAward = 14427; // 一键领取宝箱奖励
  MSG_S2C_FlameCity_OneKeyBoxAward = 14428;
  MSG_S2C_FlameCity_TargetNotify = 14429; // 攻击目标推送

  // 军团战
  MSG_C2S_GVG_GetInfo = 14430; //获取军团战信息
  MSG_S2C_GVG_GetInfo = 14431;
  MSG_C2S_GVG_GetAdvanceMatches = 14432; //获取淘汰赛以后的比赛信息
  MSG_S2C_GVG_GetAdvanceMatches = 14433;
  MSG_C2S_GVG_Join = 14434; //参战
  MSG_S2C_GVG_Join = 14435;
  MSG_C2S_GVG_GetAchieve = 14436;//获取赛季成就信息
  MSG_S2C_GVG_GetAchieve = 14437;
  MSG_C2S_GVG_GetAchieveAward = 14438;//领取赛季成就奖励
  MSG_S2C_GVG_GetAchieveAward = 14439;
  MSG_C2S_GVG_GetSeasonHistory = 14440; //获取历史赛季
  MSG_S2C_GVG_GetSeasonHistory = 14441;
  MSG_C2S_GVG_EnterMatch = 14442; //进入比赛
  MSG_S2C_GVG_EnterMatch = 14443;
  MSG_S2C_GVG_NotifyUserEnter = 14444; //玩家进入比赛推送
  MSG_C2S_GVG_LeaveMatch = 14445; //离开比赛
  MSG_S2C_GVG_LeaveMatch = 14446;
  MSG_S2C_GVG_NotifyUserLeave = 14447; //玩家离开比赛推送
  MSG_C2S_GVG_Move = 14448; //玩家移动
  MSG_S2C_GVG_Move = 14449;
  MSG_S2C_GVG_NotifyMove = 14450; //玩家移动推送
  MSG_C2S_GVG_AttackUser = 14451; //攻击玩家
  MSG_S2C_GVG_AttackUser = 14452;
  MSG_S2C_GVG_NotifyAttackUser = 14453; //攻击玩家推送
  MSG_C2S_GVG_AttackGate = 14454; //攻击城门
  MSG_S2C_GVG_AttackGate = 14455;
  MSG_S2C_GVG_NotifyAttackGate = 14456; //攻击城门推送
  MSG_C2S_GVG_Revive = 14457; //复活
  MSG_S2C_GVG_Revive = 14458;
  MSG_S2C_GVG_NotifyRevive = 14459; //玩家复活
  MSG_C2S_GVG_AddBuff = 14460; //获取Buff
  MSG_S2C_GVG_AddBuff = 14461;
  MSG_S2C_GVG_NotifyAddBuff = 14462; //获取Buff推送
  MSG_S2C_GVG_NotifyRemoveBuff = 14463; //移除Buff推送
  MSG_S2C_GVG_NotifyNewBuff = 14464; //刷新Buff推送
  MSG_S2C_GVG_NotifyTowerAttack = 14465; //炮台攻击推送
  MSG_C2S_GVG_GetUserSnapshots = 14466; //获取比赛中的指定玩家的快照
  MSG_S2C_GVG_GetUserSnapshots = 14467;
  MSG_C2S_GVG_GetGuildRankList = 14468; //获取军团排行榜
  MSG_S2C_GVG_GetGuildRankList = 14469;
  MSG_S2C_GVG_NotifyMatchEnd = 14470; //比赛结束通知

  // 18加信息
  MSG_C2S_EighteenPlus_Info = 14500;  // 18加信息
  MSG_S2C_EighteenPlus_Info = 14501;
  MSG_S2C_EighteenPlus_Notify = 14502; // 18加推送

  // 学宫论战
  MSG_C2S_Debate_EnterInfo = 14550;    // 进入玩法
  MSG_S2C_Debate_EnterInfo = 14551;
  MSG_C2S_Debate_LineUp = 14552;       // 学宫布阵
  MSG_S2C_Debate_LineUp = 14553;
  MSG_C2S_Debate_BattleStart = 14554;  // 战斗
  MSG_S2C_Debate_BattleStart = 14555;
  MSG_S2C_Debate_BattleFinish = 14556; // 战斗完成
  MSG_C2S_Debate_RefreshMatch = 14557; // 手动匹配
  MSG_S2C_Debate_RefreshMatch = 14558;
  MSG_C2S_Debate_DoctorReward = 14559; // 领取五经博士奖励
  MSG_S2C_Debate_DoctorReward = 14560;
  MSG_C2S_Debate_TestLineUp = 14561;   //获取测试玩家阵位
  MSG_S2C_Debate_TestLineUp = 14562;

  // 战法
  MSG_C2S_Magic_Upgrade = 14600;	// 战法升级
  MSG_S2C_Magic_Upgrade = 14601;
  MSG_C2S_Magic_Advance = 14602;	// 战法升阶
  MSG_S2C_Magic_Advance = 14603;
  
  // 军团头像框
  MSG_C2S_Guild_FrameInfo = 14650;  // 军团头像框
  MSG_S2C_Guild_FrameInfo = 14651;

  //预抽卡
  MSG_C2S_PreDraw_GetInfo = 14660;//获取活动详情
  MSG_S2C_PreDraw_GetInfo = 14661;
  MSG_C2S_PreDraw_ReceiveLoginAward = 14662;//领取直登奖励
  MSG_S2C_PreDraw_ReceiveLoginAward = 14663;
  MSG_C2S_PreDraw_ReceiveFinalAward = 14664;//领取最终奖励
  MSG_S2C_PreDraw_ReceiveFinalAward = 14665;
  MSG_S2C_PreDraw_ChangeNotify = 14666;
}

//跨服玩法聊天+弹幕
message C2S_BulletScreen_GetInfo{
    optional uint32 type = 1;//玩法类型 1 傲视天下
}

message S2C_BulletScreen_GetInfo{
    optional uint32 ret = 1;
    optional uint32 type = 2;//玩法类型 1 傲视天下
    repeated out_base.BulletScreenMessage messages = 3;//聊天信息
}

message C2S_BulletScreen_Send{
    optional uint32 type = 1;//玩法类型 1 傲视天下
    optional string content = 2;//内容
}

message S2C_BulletScreen_Send{
    optional uint32 ret = 1;
    optional uint32 type = 2;//玩法类型 1 傲视天下
    optional out_base.BulletScreenMessage message =3;
}

message S2C_BulletScreen_Notify{
    optional uint32 type = 1;//玩法类型 1 傲视天下
    optional out_base.BulletScreenMessage message =2;
}

//傲视天下message相关
//删除仇人
message C2S_Mine_DeleteEnemyUser{
    optional uint64 userId = 1;//仇人id
}
message S2C_Mine_DeleteEnemyUser{
    optional uint32 ret = 1;
    optional uint64 userId = 2;//仇人id
}

//获取集结信息
message C2S_Mine_GetMassInfo{

}

message S2C_Mine_GetMassInfo{
    optional uint32 ret = 1;
    optional uint32 cityId = 2;//集结的城池
    optional uint32 stamp = 3;//cd结束时间戳
}

//集结
message C2S_Mine_Mass{
    optional uint32 type = 1;// 1 集结 2 取消集结
    optional uint32 cityId = 2;//集结的城池 type为1 生效
}

message S2C_Mine_Mass{
    optional uint32 ret = 1;
    optional uint32 type = 2;// 1 集结 2 取消集结
    optional uint32 cityId = 3;//集结的城池 type为1 生效
    optional uint32 stamp = 4;//cd结束时间戳
}

message S2C_Mine_MassNotify{
    optional uint32 type = 1;// 1 集结 2 取消集结
    optional uint32 cityId = 2;//集结的城池 type为1 生效
}

//获取仇人
message C2S_Mine_GetEnemyUser{

}

message S2C_Mine_GetEnemyUser{
    optional uint32 ret = 1;
    repeated out_base.MineEnemyUser mineEnemyUser = 2;//傲视仇人
}

//获取敌对军团
message C2S_Mine_GetEnemyGuild{
}

message S2C_Mine_GetEnemyGuild{
    optional uint32 ret = 1;
    repeated out_base.MineEnemyGuild mineEnemyGuild = 2;//傲视仇人
}

//获取赛季任务信息
message C2S_Mine_GetMission{
}

message S2C_Mine_GetMission{
    repeated out_base.MineAction mineActions = 1;//傲视赛季任务
    repeated out_base.MineAchieve mineAchieves = 2;//傲视赛季成就
}

//领取赛季任务奖励
message C2S_Mine_GetMissionReward{
    required uint32 id = 1;
}

message S2C_Mine_GetMissionReward{
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award award = 3;//返回award结构
}

//领取成就奖励
message C2S_Mine_GetAchieveReward{
    required uint32 id = 1;
}

message S2C_Mine_GetAchieveReward{
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award award = 3;//返回award结构
}

//玩家兵力变化通知
message S2C_Mine_PlayerPowerNotify{
    required uint32 power = 1;//当前玩家的兵力
}

//玩家死亡
message S2C_Mine_PlayerDieNotify{
    required uint32 nowCityId = 1;//玩家复活的城池id
}

//获取战报
message C2S_Mine_GetRecord {
}

message S2C_Mine_GetRecord {
    required uint32 ret = 1;
    repeated out_base.MineRecord records = 2;
}

//事件刷新通知
message S2C_Mine_EventNotify{
    repeated out_base.MineEventInfo event  =1;//事件通知数据
}

//离开傲视天下玩法页面
message C2S_Mine_Leave{
}

message S2C_Mine_Leave{
    required uint32 ret = 1;
}

//查看赛区状态
message C2S_Mine_GetLeagueStatus{
}

message S2C_Mine_GetLeagueStatus{
    optional uint32 ret = 1;
    repeated out_base.ServerInfo serverInfo = 2;//赛季匹配到的区服列表
}

//补充兵力
message C2S_Mine_BuyPower{
    required uint32 num = 1;//购买多少兵力
}

message S2C_Mine_BuyPower{
    required uint32 ret = 1;
    optional uint32 power = 2;//当前兵力
    optional uint32 num = 3;//购买多少兵力
}

//占城状态通知
message S2C_Mine_CaptureNotify{
    optional out_base.MineCityStatusInfo cityStatusInfo  = 1;//状态信息
}

//攻击城池内其他玩家
message C2S_Mine_AttackUserBegin{
    required uint64 user_id = 1;//玩家id
    optional bool skip_battle = 2; // 是否跳过战斗显示(透传参数)
}

message S2C_Mine_AttackUserBegin{
    required uint32 ret = 1;
    optional uint64 battle_id = 2; //战斗id
    optional bool skip_battle = 3; // 是否跳过战斗显示(透传参数)
}

message S2C_Mine_AttackUserFinish{
    required uint32 ret = 1;
    optional uint64 user_id = 2; //攻击的玩家id
    optional bool skip_battle = 3;
    optional bool is_win = 4; //是否胜利
    optional out_base.MineCityStatusInfo cityStatusInfo = 5;//状态信息
    optional out_base.MineBattleResult myBattleResult = 6;//我方战斗数据
    optional out_base.MineBattleResult enemyBattleResult = 7;//敌方战斗数据
    optional uint32 win_time = 8;//胜场
    optional uint32 win_rate = 9;//胜率
    optional out_base.UserSnapshot enemy= 10;//被攻击方的玩家快照
    repeated out_base.Award awards = 11;//节日掉落展示
}

//迁入城池
message C2S_Mine_MoveCity{
    repeated uint32 cityId = 1;//城池id 行进城池路径
}
message S2C_Mine_MoveCity{
    required uint32 ret = 1;
    optional out_base.MineCityStatusInfo cityStatusInfo  = 2;//状态信息
    optional uint32 nowGold = 3;//当前可获得元宝
    optional uint32 nowGoldSpeed = 4;//当前元宝产出的速度 单位 s/个
    repeated uint32 cityId = 5;//城池id 行进城池路径原样返回客户端
}

//获取城池详细信息
message C2S_Mine_GetCityInfo{
    required uint32 cityId = 1;//城池id
    optional uint32 page = 2;//请求的当前页 默认1
    optional uint32 filterType = 3;//1 过滤可以攻击的玩家 2 过滤仇人
}

message S2C_Mine_GetCityInfo{
    required uint32 ret = 1;
    optional uint32 eventId = 2;//事件id
    optional out_base.MineCityStatusInfo cityStatusInfo = 3;//状态信息 包括占城信息 当前人数
    repeated out_base.MineCityUserInfo users = 4;//玩家数据
    optional uint32 cityId = 5;//城池id
    optional uint32 page = 6;//请求的当前页
    optional uint32 totalPage = 7;//总的页数
    optional uint32 filterType = 8;//1 过滤可以攻击的玩家 2 过滤仇人
}

//领取当前元宝
message C2S_Mine_GetGold{
}
message S2C_Mine_GetGold{
    required uint32 ret = 1;
    repeated out_base.Award award = 2;//返回award结构
    optional uint32 goldAcc  = 3; //当前累计的元宝
}

//获取主界面信息
message C2S_Mine_GetInfo{
}
message S2C_Mine_GetInfo{
    required uint32 ret = 1;
    optional uint32 status = 2;//当前阶段：0未开启 1 交战阶段 2 全面战争 3  赛季结算或者休赛期
    optional uint32 newLeagueLeftTime = 3;//新赛季倒计时 时间戳
    optional uint32 winTime = 4;//当前胜场
    optional uint32 winRate= 5;//当前胜率 100%胜率传1000
    optional uint32 goldAcc = 6;//累计领取的元宝
    optional uint32 leagueLeftTime = 7;//赛季结算剩余时间 时间戳
    //当status为1 2时读取
    optional uint32 nowGold = 8;//当前可获得元宝
    optional uint32 nowCityId = 9;//当前停留的城池id
    optional uint32 nowGoldSpeed = 10;//当前元宝产出的速度 单位 s/个 方便客户端
    repeated out_base.MineCityInfo mineCityInfo = 11;//城池数据
    optional uint32 mineActivityType = 12;//当前玩法类型 1 本服 2跨服
    optional uint32 power = 13;//当前兵力
    repeated out_base.MineEnemyUser  mineEnemyUser = 14;//仇人
    repeated out_base.MineEnemyGuild  mineEnemyGuild = 15;//敌对军团
    optional uint32 massCityId = 16;//集结城池id 0 没有集结
    //status为3时读取MineCityInfo
}

message C2S_Test {
    repeated out_base.Award awards = 1;
    repeated out_base.Award consumes = 2;
    optional uint32 total_login_days = 3;	// 设置累计登录天数
    optional bool loop = 4;	// 一键死机(容灾测试)
}

message S2C_Test {
    required uint32 ret = 1;
}

message C2S_GuildBoss_GetInfo {
}

message S2C_GuildBoss_GetInfo {
    required uint32 ret = 1;
    optional out_base.GuildBossActivity info = 2; //活动信息
    optional out_base.UserGuildBoss user_info = 3; //玩家活动数据(活动开放时才存在)
    optional out_base.GuildBossInfo guild_info = 4; //军团信息(活动开放时才存在)
}

//军团boss-挑战boss-战斗相关协议
message C2S_GuildBoss_ChallengeBossBegin {
    required uint32 id = 1; //军团boss活动ID
}

message S2C_GuildBoss_ChallengeBossBegin  {
    required uint32 ret = 1;
    optional uint32 id = 2; //军团boss活动ID
    optional uint64 battle_id = 3; //战斗id
}

message S2C_GuildBoss_ChallengeBossFinish {
    required uint32 ret = 1;
    optional uint32 id = 2; //军团boss活动ID
    optional bool is_win = 3; //是否胜利
    optional uint64 damage = 4;  // 本次伤害
    optional uint32 score = 5;  // 本次获得积分
    optional out_base.UserGuildBoss user_info = 6; //玩家活动数据
    repeated out_base.Award awards = 7; //活动奖励
}

//军团boss-获得抢夺列表
message C2S_GuildBoss_GetRobUserList {
    required uint32 id = 1; //军团boss活动ID
}

message S2C_GuildBoss_GetRobUserList {
    required uint32 ret = 1;
    repeated out_base.RankUnit list = 2; //匹配玩家列表
}

//军团boss-抢夺玩家-战斗相关协议
message C2S_GuildBoss_RobUserBegin {
    required uint32 id = 1; //军团boss活动ID
    required uint64 user_id = 2; //准备抢夺的玩家id
}

message S2C_GuildBoss_RobUserBegin  {
    required uint32 ret = 1;
    optional uint32 id = 2; //军团boss活动ID
    optional uint64 user_id = 3; //准备抢夺的玩家id
    optional uint64 battle_id = 4; //战斗id
}

message S2C_GuildBoss_RobUserFinish {
    required uint32 ret = 1;
    optional uint32 id = 2; //军团boss活动ID
    optional uint64 user_id = 3; //准备抢夺的玩家id
    optional bool is_win = 4; //是否胜利
    optional uint32 score = 5;  // 本次获得积分
    optional out_base.UserGuildBoss user_info = 6; //玩家活动数据
    repeated out_base.Award awards = 7; //活动奖励
}

//军团boss-玩家进入/退出场景
message C2S_GuildBoss_UserJoin {
    required uint32 id = 1; //军团boss活动ID
    optional bool exit = 2; //是否退出，默认进入
}

message S2C_GuildBoss_UserJoin {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional bool exit = 3; //是否退出，默认进入
}

//军团boss-弹幕
message S2C_GuildBoss_Broadcast {
    repeated out_base.GuildBossBroadcast msgs = 1;
}

//天公赐福信息
message C2S_GodBox_GetInfo {
}
message S2C_GodBox_GetInfo {
    required uint32 ret = 1;
    repeated out_base.GodBoxInfo box_info = 2; //宝箱信息
    repeated out_base.StaticGmGodBoxInfo statics = 3; //GM配置信息
}

//天公赐福-当有宝箱被触发时，主动通知客户端
message S2C_GodBox_Triggle {
    repeated out_base.GodBoxInfo box_info = 1; //宝箱信息
}

//天公赐福购买
message C2S_GodBox_Shopping {
    required uint32 box_id = 1;//宝箱唯一id
}
message S2C_GodBox_Shopping {
    required uint32 ret = 1;
    required uint32 box_id = 2;
    repeated out_base.Award  awards = 3;
}


message Empty_Message {
}

message C2S_Flush {
    optional bool user = 1;
    optional bool red_point = 2;
    optional bool knight = 3;
    optional bool fragment = 4;
    optional bool item = 5;
    optional bool resource = 6;
    optional bool formation = 7;
    optional bool unite_token = 8;
    optional bool advance_equipment = 9;
    optional bool equipment = 10;
    optional bool treasure = 11;
    optional bool dress = 12;
    optional bool red_packet = 13;
    optional bool random_player = 14;	// 随机玩家
    optional bool biography_item = 15; // 名将传道具
    optional bool skin = 16;
    optional bool privilege = 17;//特权
    optional bool artifact = 18; //神器
    optional bool card = 19; //化身卡
    optional bool cardcompos = 20; //化身組合
    optional bool wing = 21; //翅膀
    optional bool wing_refines = 22; //翅膀精炼
    optional bool pet = 23; // 宠物
    optional bool pet_equipment = 24; // 宠物装备
    optional bool kSoul = 25; // 将灵
	optional bool magic = 26; // 战法

}

message S2C_Flush {
    required uint32 ret = 1;
    optional bool user = 2;//这条放到opobject里面去了
    optional bool red_point = 3;
    optional bool knight = 4;
    optional bool fragment = 5;
    optional bool item = 6;
    optional bool resource = 7;
    optional bool formation = 8;
    optional bool unite_token = 9;
    optional bool advance_equipment = 10;
    optional bool equipment = 11;
    optional bool treasure = 12;
    optional bool dress = 13;
    optional bool red_packet = 14;
    optional bool random_player = 15;	// 随机玩家
    optional bool biography_item = 16; //名将传道具
    optional bool skin = 17;
    optional bool privilege = 18;//特权
    optional bool artifact = 19;
    optional bool card = 20; //化身卡
    optional bool cardcompose = 21; //化身組合
    optional bool wing = 22; //翅膀
    optional bool wing_refine = 23; //翅膀精炼
    optional bool pet = 24; // 宠物
    optional bool pet_equipment = 25; // 宠物装备
    optional bool kSoul = 26; // 将灵
	optional bool magic = 27; // 战法

    repeated out_base.Knight knights = 104;
    repeated out_base.KV fragments = 105;
    repeated out_base.KV items = 106;
    repeated out_base.Resource resources = 107;
    optional out_base.Formation formations = 108;
    repeated out_base.UniteToken unite_tokens = 109;
    repeated out_base.KV advance_equipments = 110;
    repeated out_base.Equipment equipments = 111;
    repeated out_base.Treasure treasures = 112;
    repeated out_base.Dress dresses = 113;
    repeated out_base.KV red_packets = 114;
    repeated out_base.UserSnapshot random_players = 115;	// 随机玩家
    repeated out_base.KV biography_items = 116; //名将传道具
    repeated out_base.Skin skins = 117;	// 变装
    repeated out_base.Card cards = 118;	// 化身卡
    repeated out_base.CardCompose cardcomposes = 119;	// 化身組合
    repeated out_base.Wing wings = 120;	// 翅膀
    repeated out_base.WingRefine wing_refines = 121;	// 翅膀精炼
	repeated out_base.Magic magics = 122;	// 战法
}


message S2C_FlushRedPoint {
    optional out_base.RedPoint red_point = 1;
}

message S2C_FlushKnight {
    repeated out_base.Knight knights = 1;
}

message S2C_FlushEquipment {
    repeated out_base.Equipment equipments = 1;
}

message S2C_FlushTreasure {
    repeated out_base.Treasure treasures = 1;
}

message S2C_FlushFragment {
    repeated out_base.KV fragments = 1;
}

message S2C_FlushResource {
    repeated out_base.Resource resources = 1;
}

message S2C_FlushFormation {
    optional out_base.Formation formations = 1;
}

message S2C_FlushItem {
    repeated out_base.KV items = 1;
}

message S2C_FlushAdvanceEquipment {
    repeated out_base.KV advance_equipments = 1;
}

message S2C_FlushUniteToken {
    repeated out_base.UniteToken unite_tokens = 1;
}

message S2C_FlushDress {
    repeated out_base.Dress dresses = 1;
}

message S2C_FlushSkin {
    repeated out_base.Skin skins = 1;
}

message S2C_FlushRedPacket {
    repeated out_base.KV red_packets = 1;
}

message S2C_FlushRandomPlayer {
    repeated out_base.UserSnapshot random_players = 1;	// 随机玩家
}

message S2C_FlushBiographyItem {
    repeated out_base.KV biography_items = 1; //名将传道具
}

message S2C_FlushPrivilege {
    repeated uint32 ids = 1;
}

message S2C_FlushArtifact {
    repeated out_base.Artifact artifacts = 1;
}

message S2C_FlushPet {
    repeated out_base.Pet pets = 1;
}

message S2C_FlushPetEquipment {
    repeated out_base.PetEquipment petEquipments = 1;
}

message S2C_FlushKSoul {
    repeated out_base.KV kSouls = 1;
}

message S2C_FlushMagic {
    repeated out_base.Magic magics = 1;
}


message S2C_OpObject {
    optional out_base.OpKnight knight = 2;
    optional out_base.OpKV item = 3;
    optional out_base.OpKV fragment = 4;
    optional out_base.OpResource resource = 5;
    optional out_base.OpUniteToken unite_token = 6;
    optional out_base.OpKV advance_equipment = 7;
    optional out_base.OpEquipment equipment = 8;
    optional out_base.OpTreasure treasure = 9;
    optional out_base.OpDress dress = 10;
    optional out_base.OpKV red_packet = 11;
    optional out_base.User user = 12;
    optional out_base.OpKV biography_item = 13;
    optional out_base.OpSkin skin = 14;
    optional out_base.OpRecruitKnight recruit_knight = 15;
    optional out_base.OpArtifact artifact = 16;
    optional out_base.OpRecruitEquip recruit_equip = 17;
    optional out_base.OpConditionAct condition_act = 18;
    optional out_base.OpCard card = 19;
    optional out_base.OpCardCompose cardcompose = 20;
    optional out_base.OpWing wing = 21;
    optional out_base.OpWingRefine refines = 22;
    optional out_base.OpPet pet = 23;
    optional out_base.OpPetEquipment pet_equipment = 24;
    optional out_base.OpKV kSoul = 25;
    optional out_base.OpRecruitAuKnight recruit_au_knight = 26;
	optional out_base.OpMagic magic = 27;
}

message C2S_ModifyUserInfo {
    required uint64 type = 1; //类型，见enums.proto/USER_INFO_TYPE
    optional uint32 frame = 2; //头像框或聊天框
    optional string name = 3; //角色名
}

message S2C_ModifyUserInfo {
    required uint32 ret = 1;
    required uint64 type = 2;
    optional uint32 frame = 3;
    optional string name = 4;
}

message C2S_GetUserState {
    required uint32 module = 1;//自定义模块类型(1:名将传)
}

message S2C_GetUserState {
    required uint32 ret = 1;
    required uint32 module = 2;
    repeated out_base.KV states = 3;
}

message C2S_GetModuleTaskInfo {
    required uint32 module_id = 1;
}

message S2C_GetModuleTaskInfo {
    required uint32 ret = 1;
    required uint32 module_id = 2;
    repeated uint64 common_awards = 3; //终生已领奖励id
    repeated uint64 daily_awards = 4; //每日已领奖id
    repeated uint64 weekly_awards = 5; //每周已领奖id
    optional out_base.ActionTaskInfo common_tasks = 6; //终生任务信息
    optional out_base.ActionTaskInfo daily_tasks = 7; //每日任务信息
    optional out_base.ActionTaskInfo weekly_tasks = 8; //每周任务信息
}

message C2S_GetModuleTaskAward {
    required uint32 task_id = 1;
    optional uint32 index = 2;//1234
}

message S2C_GetModuleTaskAward {
    required uint32 ret = 1;
    required uint32 task_id = 2;
    repeated out_base.Award awards = 3;
    optional uint32 index = 4;
}

message C2S_TestAsyncBattleBegin {
    required uint32 enemy_id = 1;
}

message S2C_TestAsyncBattleBegin {
    required uint32 ret = 1;
    optional uint64 battle_id = 2;
}

message S2C_TestAsyncBattleFinish {
    required uint32 ret = 1;
    optional bs.CheckResult result = 2;
}

message C2S_UniteToken_Awaken {
    required uint32 id = 1;
}

message S2C_UniteToken_Awaken {
    required uint32 ret = 1;
    required uint32 id = 2;
}

message C2S_UniteToken_Upgrade {
    required uint32 id = 1;
}

message S2C_UniteToken_Upgrade {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional out_base.UniteToken token = 3;
}

message C2S_UniteToken_GetAttribute {
}

message S2C_UniteToken_GetAttribute {
    required uint32 ret = 1;
    repeated bs.Attr addition_attribute = 2;
    repeated bs.Attr combo_attribute = 3;
}

message C2S_UniteToken_StarIncrease {
    required uint32 id = 1;
}

message S2C_UniteToken_StarIncrease {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional out_base.UniteToken token = 3;
}

message C2S_UniteToken_RunesActivate {
    required uint32 advance_id = 1;  //兵符唯一id
    required uint32 hole_id = 2;     //符石孔位id
}

message S2C_UniteToken_RunesActivate {
    required uint32 ret = 1;
    required uint32 advance_id = 2;
    required uint32 hole_id = 3;
    optional out_base.UniteToken token = 4;
}

message C2S_UniteToken_StampsActivate {
    required uint32 advance_id = 1;
    required uint32 order_id = 2;
}

message S2C_UniteToken_StampsActivate {
    required uint32 ret = 1;
    required uint32 advance_id = 2;
    required uint32 order_id = 3;
}

message C2S_UniteToken_OneKey_Upgrade {
    required uint32 id = 1; // 配置id
    required uint32 level = 2; // 增加的等级
}

message S2C_UniteToken_OneKey_Upgrade {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 level = 3;
}

message C2S_Knight_Upgrade {
    required uint64 id = 1;	//武将id
    required uint32 item_id = 2;	//消耗道具id
    required uint32 item_num = 3;	//道具数量
}

message S2C_Knight_Upgrade {
    required uint32 ret = 1;
    required uint64 id = 2;	//武将id
    required uint32 item_id = 3;	//消耗道具id
    required uint32 item_num = 4;	//道具数量
}

message C2S_Knight_StarIncrease {
    required uint64 id = 1;	//武将id
    optional uint32 all_purpose_frag_num = 2;	//使用万能碎片数量
}

message S2C_Knight_StarIncrease {
    required uint32 ret = 1;
    required uint64 id = 2;	//武将id
    optional uint32 all_purpose_frag_num = 3;	//使用万能碎片数量
}

message C2S_Knight_StarTrain {
    required uint64 id = 1;	//武将id
    required uint32 num = 2;	//次数
}

message S2C_Knight_StarTrain {
    required uint32 ret = 1;
    required uint64 id = 2;	//武将id
    optional uint32 num = 3;	//实际次数
}

message C2S_Knight_StarTrainConfirm {
    required uint64 id = 1;	//武将id
    required bool confirm = 2;	//true确认、false取消
}

message S2C_Knight_StarTrainConfirm {
    required uint32 ret = 1;
    required uint64 id = 2;	//武将id
    required bool confirm = 3;	//true确认、false取消
}

message C2S_Knight_StarTrainUpgrade {
    required uint64 id = 1;	//武将id
}

message S2C_Knight_StarTrainUpgrade {
    required uint32 ret = 1;
    required uint64 id = 2;	//武将id
}

message C2S_Knight_AdvanceEquip {	// 进阶-装备
    required uint64 id = 1;	//武将id
    repeated uint32 pos = 2; //装备位置
}

message S2C_Knight_AdvanceEquip {
    required uint32 ret = 1;
    required uint64 id = 2;	//武将id
    repeated uint32 pos = 3; //装备位置
}

message C2S_Knight_AdvanceUpgrade {	// 进阶-升级
    required uint64 id = 1;	//武将id
}

message S2C_Knight_AdvanceUpgrade {
    required uint32 ret = 1;
    required uint64 id = 2;	//武将id
}

message C2S_Knight_AdvanceCompose {	// 进阶-合成装备
    required uint32 id = 1;	//进阶装备id
    optional uint32 num = 2;//数量
    optional uint32 path_id = 3;//合成渠道id 如果为0代表一键合成
}

message S2C_Knight_AdvanceCompose {
    required uint32 ret = 1;
    required uint32 id = 2;	//进阶装备id
    optional uint32 num = 3;//数量
    optional uint32 path_id = 4;
}

message C2S_Knight_AdvanceComposeOneKey {	// 进阶-合成装备-一键
    repeated C2S_Knight_AdvanceCompose compose = 1;//进阶请求
    optional C2S_Knight_AdvanceEquip equip = 2;//装备请求
}

message S2C_Knight_AdvanceComposeOneKey {
    required uint32 ret = 1;
    repeated C2S_Knight_AdvanceCompose compose = 2;//进阶请求
    optional C2S_Knight_AdvanceEquip equip = 3;//装备请求
}

message C2S_Knight_UpgradeOneLevel {
    required uint64 id = 1;	//武将id
}

message S2C_Knight_UpgradeOneLevel {
    required uint32 ret = 1;
    required uint64 id = 2;	//武将id
}

message C2S_Formation_ChangePosition {
    repeated uint32  position = 1;
}

message S2C_Formation_ChangePosition {
    required uint32 ret = 1;
    optional out_base.Formation formation = 2;
}

message C2S_Formation_ChangeFormation {
    required uint32 tp = 1;//1武将 3装备 4宝物 6 神兽 7 神兽装备
    required uint32 pos = 2;
    required uint64 id = 3;//标识ID
}

message S2C_Formation_ChangeFormation {
    required uint32 ret = 1;
    optional out_base.Formation formation = 2;
    required uint32 tp = 3;
    required uint32 pos = 4;
    required uint64 id = 5;
}

message C2S_Fragment_Compose {
    required uint32 id = 1;	// 合成id
    optional uint32 num = 2;	// 合成数量
}

message S2C_Fragment_Compose {
    required uint32 ret = 1;
    required uint32 id = 2;	// 合成id
    optional uint32 num = 3;	// 合成数量
}

message S2C_CmdRet {
    required uint32 ret = 1;
    required uint32 cmd = 2;
}

message C2S_GetUserDetailInfo {
    required uint32 tp = 1;//0根据userid 1根据name
    optional uint64 player_id = 2;
    optional string player_name = 3;
}

message S2C_GetUserDetailInfo {
    required uint32 ret = 1;
    optional uint32 tp = 2;
    optional uint64 player_id = 3;
    optional string player_name = 4;
    optional out_base.BattleUser player = 5;
    optional out_base.UserGrowData grow = 6;
}

message C2S_Dungeon_GetChapterList {
}

message S2C_Dungeon_GetChapterList {
    required uint32 ret = 1;
    repeated out_base.Chapter chapters = 2;
    repeated out_base.Stage stages = 3;
    repeated uint32 flags = 4; //星数成就已领取标记 flag=id*10+index
}

message C2S_Dungeon_ChallengeStageBegin {
    required uint32 id = 1;
}

message S2C_Dungeon_ChallengeStageBegin {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional uint64 battle_id = 3;
}

message S2C_Dungeon_ChallengeStageFinish {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional bool is_win = 3;
    optional out_base.Stage stage = 4;
    optional out_base.FinishResult result = 5;
    optional uint64 knight_exp = 6;
    optional bool is_first = 7;
}

message C2S_Dungeon_ResetChallengeCount {
    required uint32 id = 1;
}

message S2C_Dungeon_ResetChallengeCount {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional out_base.Stage stage = 3;
}

message C2S_Dungeon_GetChapterChestAward {
    required uint32 id = 1;
    required uint32 tp = 2; //1星数宝箱2关卡宝箱
    required uint32 pos = 3; //宝箱位置 从1开始
}

message S2C_Dungeon_GetChapterChestAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 tp = 3;
    required uint32 pos = 4;
    repeated out_base.Award awards = 5;
    optional out_base.Chapter chapter = 6;
}


//message C2S_Dungeon_GetStageRecord {
//  required uint32 id = 1;
//  required uint32 tp = 2;
//}
//
//message S2C_Dungeon_GetStageRecord {
//  required uint32 ret = 1;
//  required uint32 id = 2;
//  required uint32 tp = 3;
//}

message C2S_Dungeon_FastChallengeStage {
    required uint32 id = 1;
    required uint32 num = 2; //1次或10次
    optional out_base.Award award = 3; //需要的进阶材料
    optional bool use_items = 4;   //是否使用体力丹
}

message S2C_Dungeon_FastChallengeStage {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 num = 3; //实际扫荡次数
    repeated out_base.FinishResult results = 4; //扫荡结果
    optional uint32 knight_add_exp = 5; //武将增加经验
}

message C2S_Dungeon_FinishAchievement {
    required uint32 id = 1; //第几段
    required uint32 index = 2;//第几个
}

message S2C_Dungeon_FinishAchievement {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 index = 3;
    repeated out_base.Award awards = 4; //本次成就奖励
    repeated uint32 flags = 5; //已领取的成就标记
}

// 主线副本-星数/章节宝箱一键领奖
message C2S_Dungeon_OneKey_GetChapterChestAward {
}

message S2C_Dungeon_OneKey_GetChapterChestAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    repeated out_base.Chapter chapters = 3;
}

message C2S_Item_Use {
    required uint32 id = 1;	// id
    optional uint32 num = 2;	// 数量
    optional uint32 index = 3;  // 可选道具用于选择位置 非可选道具没用
    optional string extra = 4; //模拟直冲参数activityId taskId的json
}

message S2C_Item_Use {
    required uint32 ret = 1;
    required uint32 id = 2;	// id
    optional uint32 num = 3;	// 数量
    optional uint32 index = 4;  // 可选道具用于选择位置 非可选道具没用
    repeated out_base.Award awards = 5;	// 获得物品
}

message C2S_Item_Transform {
    required uint32 id = 1;//framentid
    required uint32 size = 2;
}

message S2C_Item_Transform {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
}

message C2S_Item_BatchUse {
    repeated out_base.UseItem items = 1;
}

message S2C_Item_BatchUse {
    required uint32 ret = 1;
    repeated out_base.UseItem items = 2;
    repeated out_base.Award awards = 3;	// 获得物品
}

message BattleResShareTitle {
    optional string own_name = 1;
    optional string enemy_name = 2;
    optional uint64 own_id = 3;
}

message BattleResShareInfo {
    required BattleResShareTitle share_title = 1;
    optional bool is_win = 2;
    repeated bs.BattleUnitResult own_teams = 3;
    repeated bs.BattleUnitResult enemy_teams = 4;
}

message ChatShare {
    required uint32 share_type = 1; //分享类型
    optional uint64 id = 2;
    optional BattleResShareTitle battle_res_share_title = 3;//分享数据
    optional BattleResShareInfo battle_res_share_info = 4; //分享数据(需缓存)
}

message C2S_Chat {
    required uint32 channel = 1;
    optional string content = 2;
    optional string name = 3;//if use username
    optional uint32 invite_id = 4;//invite 表里id
    optional uint64 unique_id = 5;//invite相关模块里里面唯一id，跟模块相关
    optional uint32 param1 = 6;//透传字段 客户端自己用
    optional ChatShare share = 7; //分享信息
    optional uint32 sub_type = 8;
    optional string voice_path = 9;
    optional uint32 voice_time = 10;
    optional string voice_param = 11;
    optional uint32 look = 12; //发送的聊天表情
}

message S2C_Chat {
    required uint32 ret = 1;
    optional uint32 forbid_time = 2; //禁言结束时间
    optional uint32 world_left_time = 3;//世界聊天剩余次数
    optional ChatShare share = 4; //分享信息
}

message S2C_ChatBroadcast {
    required uint32 channel = 1;
    optional string content = 2;
    optional out_base.UserSnapshot user = 3;
    optional uint32 invite_id = 4;
    optional uint64 unique_id = 5;
    optional uint32 param1 = 6;
    optional uint32 special_id = 7;//军团动态id
    repeated out_base.StringMap special_params = 8; //军团动态参数
    optional ChatShare share = 9; //分享信息
    optional bool clear = 10;	// 清空该玩家的聊天记录
    optional uint32 sub_type = 11;
    optional string voice_path = 12;
    optional uint32 voice_time = 13;
    optional string voice_param = 14;
    optional uint32 look = 15; //发送的聊天表情
    optional uint32 talk = 16; //使用的聊天框
}

message C2S_GetCommonRankList {
    required uint32 id = 1;   //排行榜id
    required uint32 size = 2; //排行长度
}

message S2C_GetCommonRankList {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 size = 3;
    optional uint32 self_rank = 4;
    repeated out_base.RankUnit rank_units = 5;
}


message C2S_Recruit_Info {	// 招募信息
}

message S2C_Recruit_Info {	// 招募信息
    required uint32 ret = 1;
    repeated uint32 free_count = 2;  // 今日已使用免费次数(依次为普通、高级招募)
    repeated uint32 free_time = 3; // 上次免费抽取的时间戳(依次为普通、高级招募)
    repeated uint32 total_count = 4;  // 总招募次数(依次为普通、高级招募)
    repeated uint32 daily_count = 5;  // 每日招募次数(依次为普通、高级招募、阵营招将)
    repeated uint32 group_count = 6; //阵营招募次数(暂时只有高级)
}

message C2S_Recruit_Recruit {	// 招募
    required uint32 recruit_type = 1;   // 1 普通 2 高级 3456 阵营抽奖
    required uint32 consume_type = 2;   // 0 免费 1 配置表字段1 2 配置表字段2
    required uint32 num = 3;  // 数量1、10
    optional bool quick = 4;  // 是否一键免费抽卡
}

message S2C_Recruit_Recruit {	// 招募
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    required uint32 recruit_type = 3;   // 1 普通 2 高级
    required uint32 consume_type = 4;   // 0 免费 1 配置表字段1 2 配置表字段2
    required uint32 num = 5;  // 数量1、10
    optional uint32 daily_num = 6; //抽将每日次数 (根据抽将类型来区分数据源)
    optional bool quick = 7;
}

message C2S_Shop_GetShopInfo {
}

message S2C_Shop_GetShopInfo {
    required uint32 ret = 1;
    repeated out_base.KV infos = 2;
    repeated out_base.TaskInfo tasks = 3; //购买限制信息
}

message C2S_Shop_Shopping {
    optional out_base.KV info = 1;
}

message S2C_Shop_Shopping {
    required uint32 ret = 1;
    optional out_base.KV info = 2;
}

message C2S_KnightBook_Info {	// 武将图鉴信息
}

message S2C_KnightBook_Info {
    required uint32 ret = 1;
    repeated uint32 id = 2;	// advance id
    repeated uint32 level = 3;	// 等级
    required uint32 award_id = 4;	// 当前已激活奖励配置(knight_book_award_info)id
}

message C2S_KnightBook_Upgrade {	// 武将图鉴升级
    required uint32 id = 1;	// advance id
}

message S2C_KnightBook_Upgrade {
    required uint32 ret = 1;
    required uint32 id = 2;	// advance id
}

message C2S_KnightBook_Activate {	// 武将图鉴激活成就
}

message S2C_KnightBook_Activate {
    required uint32 ret = 1;
    optional uint32 target_id = 2;	// 配置id
}

message C2S_SyncTime {
    required uint32 client_time = 1;
}

message S2C_SyncTime {
    required uint32 ret = 1;
    optional uint32 client_time = 2;
    optional uint32 server_time = 3;
    optional uint32 zone = 4;
    optional uint32 open = 5;
}

message C2S_Sell {
    repeated out_base.Award consumes = 1;	// 出售的物品 *Award的Value字段填唯一id
}

message S2C_Sell {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;	// 获得的物品
}


message C2S_Arena_GetMainInfo {
}

message S2C_Arena_GetMainInfo {
    required uint32 ret = 1;
    optional uint32 rank = 2;//自己排名
    optional uint32 max_rank = 3;//最高排名
    optional uint32 challenge_count = 4;//可挑战次数
    repeated out_base.ArenaUnit arena_units = 5;//可显示的玩家
    optional out_base.ArenaUnit guide_robot = 6;//引导机器人
    optional uint32 already_challenge_count = 7; // 已挑战次数
}

message C2S_Arena_ChallengeBegin {
    required uint32 rank = 1;
}

message S2C_Arena_ChallengeBegin {
    required uint32 ret = 1;
    required uint32 rank = 2;
    optional uint64 battle_id = 3;
}

message S2C_Arena_ChallengeFinish {
    required uint32 ret = 1;
    required uint32 rank = 2;
    optional bool is_win = 3;
    optional uint32 cur_rank = 4;
    optional out_base.ArenaAward awards = 5;
    repeated out_base.Award max_rank_awards = 6;
    optional out_base.UserSnapshot guard_snapshot = 7;
}

message C2S_Arena_FastChallenge {
    required uint32 num = 1;
    required uint32 rank = 2;
}

message S2C_Arena_FastChallenge {
    required uint32 ret = 1;
    required uint32 num = 2;
    required uint32 rank = 3;
    repeated out_base.ArenaAward awards = 4;
    optional uint32 challenge_count = 5; //剩余挑战次数
    optional uint32 already_challenge_count = 6; // 已挑战次数
}

message C2S_Arena_GetTaskInfo {
}

message S2C_Arena_GetTaskInfo {
    required uint32 ret = 1;
    repeated uint64 daily_awards = 2; //每日已领奖id
    repeated uint64 weekly_awards = 3; //每周已领奖id
    optional out_base.ActionTaskInfo daily_tasks = 4; //每日任务信息
    optional out_base.ActionTaskInfo weekly_tasks = 5; //每周任务信息
}

message C2S_Arena_GetTaskAward {
    required uint32 id = 1;
}

message S2C_Arena_GetTaskAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
}

message C2S_Arena_GetRanklist {
}

message S2C_Arena_GetRanklist {
    required uint32 ret = 1;
    repeated out_base.ArenaUnit users = 2;
}

message C2S_Arena_ChallengeRecord {
    required uint32 type = 1; //1:global 2:self
}

message S2C_Arena_ChallengeRecord {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated out_base.ArenaRecord records = 3;
}

message C2S_Equipment_Upgrade {	// 装备升级
    //required uint64 id = 1;	// 唯一id
    //required uint32 times = 2;	// 次数
    repeated uint64 id = 3;	// 唯一id
    repeated uint32 times = 4;	// 次数
}

message S2C_Equipment_Upgrade {
    required uint32 ret = 1;
    //required uint64 id = 2;	// 唯一id
    //required uint32 times = 3;	// 次数
    optional uint32 upgrade_times = 4;	// 实际执行次数
    optional uint32 cri_times = 5;	// 暴击次数
    optional uint32 break_reason = 6;	// 中断原因 1资源不足 2等级达到上限
    //optional uint32 level = 7;	// 强化后等级
    repeated uint64 id = 8;	// 唯一id
    repeated uint32 times = 9;	// 次数
    repeated uint32 level = 10;	// 强化后等级
}

message C2S_Equipment_Refining {	// 装备精炼
    required uint64 id = 1;	// 唯一id
    required uint32 item_id = 2;	// 道具id
    required uint32 num = 3;	// 数量
}

message S2C_Equipment_Refining {
    required uint32 ret = 1;
    required uint64 id = 2;	// 唯一id
    required uint32 item_id = 3;	// 道具id
    required uint32 num = 4;	// 数量
}

message C2S_Equipment_Glyph {
    required uint64 id = 1;
}

message S2C_Equipment_Glyph {
    required uint32 ret = 1;
    required uint64 id = 2;
}

//铸灵
message C2S_Equipment_Cast {
    required uint32 cast_type = 1;  // 类型, 装备:0;神器:1
    required uint64 id = 2; // 唯一id
    required uint32 item_id = 3;	// 消耗道具id
    required uint32 cost_num = 4;	// 消耗道具数目
}

message S2C_Equipment_Cast {
    required uint32 ret = 1;
    required uint32 cast_type = 2; // 类型, 装备:0;神器:1
    required uint64 id = 3; // 唯一id
    optional uint32 cast_level = 4;	// 铸灵等级
    optional uint32 cast_exp = 5;	// 铸灵经验
    optional uint32 item_id = 6;
    optional uint32 cost_num = 7;
}

message C2S_Equipment_RefiningOneLevel {	// 装备一键精炼
    required uint64 id = 1;	// 唯一id
}

message S2C_Equipment_RefiningOneLevel {
    required uint32 ret = 1;
    required uint64 id = 2;	// 唯一id
}

//装备幻化
message C2S_Equipment_Magic {
    required uint64 id = 1; //装备唯一ID
    required uint32 route = 2; //幻化路线, 1:火，2:水
}

message S2C_Equipment_Magic {
    required uint32 ret = 1;
    required uint64 id = 2; // 装备唯一ID
    required uint32 route = 3; //幻化路线
}

//装备幻化平移
message C2S_Equipment_MagicTranslation {
    required uint64 id = 1; //装备唯一ID
}

message S2C_Equipment_MagicTranslation {
    required uint32 ret = 1;
    required uint64 id = 2; // 装备唯一ID
}

message C2S_Equipment_Dot {
    required uint64 id = 1; // 唯一id
    required uint32 node_id = 2;  //属性点id
}

message S2C_Equipment_Dot {
    required uint32 ret = 1;
    required uint64 id = 2; // 唯一id
    optional uint32 stage_id = 3; //阶数id
    required uint32 node_id = 4;  //属性点id
}

message C2S_Equipment_OneKeyDot {
    required uint64 id = 1; // 唯一id
}

message S2C_Equipment_OneKeyDot {
    required uint32 ret = 1;
    required uint64 id = 2; // 唯一id
    optional uint32 stage_id = 3; //阶数id
}

message C2S_Mail_Info {	// 获取邮件
    required uint32 mail_type = 1;	// 1-奖励邮件 2-系统邮件 3-好友邮件
}

message S2C_Mail_Info {
    required uint32 ret = 1;
    required uint32 mail_type = 2;	// 1-奖励邮件 2-系统邮件 3-好友邮件
    repeated out_base.Mail mails = 3;
    optional bool stranger = 4;	// 屏蔽陌生人邮件
}

message C2S_Mail_Award {	// 领取邮件奖励
     required uint32 mail_type = 1;	// 1-奖励邮件 2-系统邮件 3-好友邮件
     required uint32 id = 2;	// 邮件id
}

message S2C_Mail_Award {
    required uint32 ret = 1;
    required uint32 mail_type = 2;	// 1-奖励邮件 2-系统邮件 3-好友邮件
    required uint32 id = 3;	// 邮件id
}

message C2S_Mail_Send {	// 发送玩家邮件
    required string content = 1;	// 邮件内容
    required uint64 uid = 2;	// 玩家id
    optional string name = 3;//名字
    optional uint32 sub_type = 4;
    optional string voice_path = 5;
    optional uint32 voice_time = 6;
    optional string voice_param = 7;
    optional uint32 look = 8; //使用的聊天表情
}

message S2C_Mail_Send {
    required uint32 ret = 1;
    required string content = 2;	// 邮件内容
    required uint64 uid = 3;	// 玩家id
    optional string name = 4;
}

message C2S_Mail_Del {	// 删除邮件
    repeated uint32 mail_type = 1;	// 1-奖励邮件 2-系统邮件 3-好友邮件
    repeated uint32 id = 2;	// 邮件id
}

message S2C_Mail_Del {
    required uint32 ret = 1;
    repeated uint32 mail_type = 2;	// 1-奖励邮件 2-系统邮件 3-好友邮件
    repeated uint32 id = 3;	// 邮件id
}

message C2S_GetCommonPlayNum {

}

message S2C_GetCommonPlayNum {
    required uint32 ret = 1;
    repeated out_base.CommonPlayNum infos = 2;//所有通用次数信息
}

message C2S_BuyCommonPlayNum {
    required uint32 id = 1;//通用次数id
    required uint64 num = 2;//购买的次数数量
}

message S2C_BuyCommonPlayNum {
    required uint32 ret = 1;
    optional out_base.CommonPlayNum info = 2;//这个id相应的次数信息
}

message S2C_FlushCommonPlayNum {
    required uint32 ret = 1;
    optional out_base.CommonPlayNum info = 2;//使用后有变化的次数信息
    optional bool is_add = 3; // 是否增加次数
}

message C2S_DeadBattle_GetInfo {
}

message S2C_DeadBattle_GetInfo {
    required uint32 ret = 1;
    optional out_base.DeadBattle dbattle = 2;
    repeated out_base.DeadBattleShop shops = 3;
}

message C2S_DeadBattle_ChallengeBegin {
    required uint32 index = 1;//位置 0 1 2
}

message S2C_DeadBattle_ChallengeBegin {
    required uint32 ret = 1;
    optional uint32 index = 2;//位置 0 1 2
    optional uint64 battle_id = 3;
}

message S2C_DeadBattle_ChallengeFinish {
    required uint32 ret = 1;
    optional uint32 index = 2;
    optional bool is_win = 3;
    optional out_base.DeadBattle dbattle = 4;
    optional out_base.DeadBattleShop shop = 5;//失败以及打到最后一关的时候也会刷
    repeated out_base.Award awards = 6;
    optional uint32 drop_type = 7;//暴击1 2 3
    optional uint32 result = 8; //评价用战斗结果
    optional uint32 origin_rank = 9;//原来排名
    optional uint32 new_rank = 10;//现有排名
    optional uint32 max_floor = 11;//历史最高层
}

message C2S_DeadBattle_PickBuff {
    required uint32 id = 1;
}

message S2C_DeadBattle_PickBuff {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional out_base.DeadBattle dbattle = 3;
}

message C2S_DeadBattle_FastChallenge {

}

message S2C_DeadBattle_FastChallenge {
    required uint32 ret = 1;
    optional out_base.DeadBattle dbattle = 2;
    repeated out_base.DeadBattleAward awards = 3;
    repeated out_base.Award box_awards = 4;
    repeated uint32 drop_type = 5;
    optional uint32 add_star = 6;
    optional out_base.DeadBattleShop shop = 7;//需要监听 扫荡组后一关也会刷
}

message C2S_DeadBattle_AllChallenge {

}

message S2C_DeadBattle_AllChallenge {
    required uint32 ret = 1;
    optional out_base.DeadBattle dbattle = 2;
    repeated out_base.DeadBattleAward awards = 3;
    repeated out_base.Award box_awards = 4;
    repeated uint32 drop_type = 5;
    optional uint32 add_star = 6;
    optional out_base.DeadBattleShop shop = 7;//需要监听 扫荡组后一关也会刷
}

message C2S_DeadBattle_Shopping {
    required uint32 shop_id = 1;
    required uint32 item_id = 2;
}

message S2C_DeadBattle_Shopping {
    required uint32 ret = 1;
    optional out_base.DeadBattleShop shop = 2;
    repeated out_base.Award awards = 3;
}

message C2S_DeadBattle_BoxAward {
}

message S2C_DeadBattle_BoxAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    optional out_base.DeadBattle dbattle = 3;
}

message C2S_Scroll_Info {
}

message S2C_Scroll_Info {
    required uint32 ret = 1;
    repeated uint32 main_ids = 2; //主线节点激活情况
    repeated uint32 hero_ids = 3; //名将节点激活情况
    repeated uint32 nightmare_ids = 4; // 噩梦节点激活情况
    repeated uint32 town_soul_ids = 5; //镇魂节点激活情况
    repeated uint32 elite_ids = 6; //精英副本节点激活情况
}

message C2S_Scroll_Activate {
    required uint32 id = 1;//节点
    required uint32 type = 2;//见enums的SCROLL_TYPE
}

message S2C_Scroll_Activate {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 type = 3;//主线或者名将
    repeated uint32 ids = 4;
    repeated out_base.Award awards = 5;
}
//*************************************
message C2S_MainGrowth_GetInfo {
}

message S2C_MainGrowth_GetInfo {
    required uint32 ret = 1;
    repeated uint32 active_ids = 2;
}

message C2S_MainGrowth_Activate {
    required uint32 id = 1;
}

message S2C_MainGrowth_Activate {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
    repeated uint32 active_ids = 4;
}
//**************************************

message C2S_Biography_GetMainInfo {
}

message S2C_Biography_GetMainInfo {
    required uint32 ret = 1;
    repeated out_base.BioMission missions = 2; //任务信息
    repeated out_base.BioCampaign campaigns = 3; //完成战役
    repeated uint64 mission_chain_awarded = 4; //任务链奖励
    repeated uint64 mission_progress_awarded = 5;//支线任务进度奖励
    repeated out_base.KV mission_preset_condition = 6;//判断战役信息的前置条件，id为表id，num为对应要求的状态
    repeated uint64 chapter_awarded = 7;//章节通关奖励标记
}

message C2S_Biography_ExecuteMission {
    required uint32 id = 1; //任务id
}

message S2C_Biography_ExecuteMission {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional uint64 battle_id = 3;
    optional out_base.BioMission mission = 4;
    optional out_base.BioMissionAward award = 5;
}

message S2C_Biography_ExecuteMissionBattle {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional bool is_win = 3;
    optional out_base.BioMission mission = 4;
    optional out_base.BioMissionAward award = 5;
}

message C2S_Biography_FastExecuteMission {
    required uint32 id = 1;
    required uint32 num = 2;
}

message S2C_Biography_FastExecuteMission {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 num = 3;
    optional out_base.BioMission mission = 4;
    repeated out_base.BioMissionAward awards = 5;
}

message C2S_Biography_GetMissionAward {
    required uint32 id = 1;
    required uint32 tp = 2; //1:任务链奖励2:支线任务进度奖励
}

message S2C_Biography_GetMissionAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 tp = 3;
    repeated uint64 awarded = 4;
    repeated out_base.Award awards = 5;
}

message C2S_Biography_GetTeamList {
    required uint32 id = 1;
}

message S2C_Biography_GetTeamList {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.CampaignTeam teams= 3;
}

message C2S_Biography_CreateTeam {
    required uint32 id = 1;
}

message S2C_Biography_CreateTeam {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional out_base.CampaignTeam team = 3;
}

message C2S_Biography_JoinTeam {
    required uint32 id = 1;
    required uint64 teamId = 2;
}

message S2C_Biography_JoinTeam {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint64 teamId = 3;
    optional out_base.CampaignTeam team = 4;
}

message C2S_Biography_KickOutTeam {
    required uint32 id = 1; //战役id
    required uint64 kick_id = 2; //玩家id
}

message S2C_Biography_KickOutTeam {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint64 kick_id = 3;
}

message C2S_Biography_LeaveTeam {
    required uint32 id = 1; //战役id
}

message S2C_Biography_LeaveTeam {
    required uint32 ret = 1;
    required uint32 id = 2;
}

message C2S_Biography_PrepareBattle {
    required uint32 id = 1; //战役id
    required bool prepare = 2;
}

message S2C_Biography_PrepareBattle {
    required uint32 ret = 1;
    required uint32 id = 2;
    required bool prepare = 3;
}

message C2S_Biography_AttackCampaignBegin {
    required uint32 id = 1;
    optional bool sweep = 2;//是否一键扫荡 （客户端透传参数，广播给队伍其他人）
}

message S2C_Biography_AttackCampaignBegin {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional uint64 battle_id = 3;
    optional bool sweep = 4;//是否一键扫荡 （客户端透传参数，广播给队伍其他人）
}

message S2C_Biography_AttackCampaignFinish {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional bool is_win = 3;
    optional out_base.CampaignAward result = 4; //不管发不发奖都会有
    optional bool is_award = 5; //次数不足时不发奖，标记为false
}

message S2C_Biography_SyncTeamStatus {
    required out_base.CampaignTeam team = 1;
}

message C2S_Biography_GetCampaignFirstAward {
    required uint32 id = 1;
}

message S2C_Biography_GetCampaignFirstAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
    repeated out_base.BioCampaign campaigns = 4;
}

message C2S_Biography_MoveMember {
    required uint32 position_a = 1;
    required uint32 position_b = 2;
}

message S2C_Biography_MoveMember {
    required uint32 ret = 1;
    required uint32 position_a = 2;
    required uint32 position_b = 3;
}

message C2S_Biography_GetInviteeList {
    required uint32 id = 1; //战役id
}

message S2C_Biography_GetInviteeList {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional out_base.UserSnapshot npc_robot = 3; //npc机器人
    repeated out_base.UserSnapshot friends = 4; //好友
    repeated out_base.UserSnapshot guild_members = 5; //军团成员
}

message C2S_Biography_InviteRobot {
    required uint32 id = 1; //战役id
    optional bool npc = 2;
}

message S2C_Biography_InviteRobot {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional bool npc = 3;
}

message C2S_Biography_InvitePlayer {
    required uint64 invitee_id = 1;
    required uint32 campaign_id = 2;
}

message S2C_Biography_InvitePlayer {
    required uint32 ret = 1;
    required uint64 invitee_id = 2;
    required uint32 campaign_id = 3;
}

message C2S_Biography_GetInvitation {
}

message S2C_Biography_GetInvitation {
    required uint32 ret = 1;
    repeated out_base.CampaignInvitation invitations = 2;
    optional bool shield = 3; //是否屏蔽邀请
}

message C2S_Biography_ConfirmInvite {
    required uint64 team_id = 1;
    required bool join = 2;
    optional uint32 campaign_id = 3;
}

message S2C_Biography_ConfirmInvite {
    required uint32 ret = 1;
    required uint64 team_id = 2;
    required bool join = 3;
    optional uint32 campaign_id = 4;
}

message C2S_Biography_ShieldInvite {
    required bool shield = 1; //false 取消屏蔽 true 设置屏蔽
}

message S2C_Biography_ShieldInvite {
    required uint32 ret = 1;
    required bool shield = 2;
}

message C2S_Biography_SetTeamLock {
    required bool lock = 1;
}

message S2C_Biography_SetTeamLock {
    required uint32 ret = 1;
    required bool lock = 2;
}

message S2C_Biography_NotifyInvitee {
    required out_base.CampaignInvitation invitation = 1;
}

message S2C_Biography_NotifyDismiss {
    required uint64 team_id = 1;
}

message C2S_Biography_ResetMissionCount {
    required uint32 id = 1;
}

message S2C_Biography_ResetMissionCount {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional out_base.BioMission mission = 3;
}

message C2S_Biography_GetChapterAward {
    required uint32 id = 1;
}

message S2C_Biography_GetChapterAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
    repeated uint64 awarded_id = 4;
}

message C2S_Biography_Boss_Info {

}

message S2C_Biography_Boss_Info {
    required uint32 ret = 1;
    optional out_base.BioBoss boss = 2;
    repeated uint64 damage = 3; //每次攻击伤害，长度即为攻击次数
}

message C2S_Biography_Boss_ChallengeBegin {
    required uint32 id = 1;//叛军id,也是表id
}

message S2C_Biography_Boss_ChallengeBegin {
    required uint32 ret = 1;
    required uint32 id = 2;//叛军id,也是表id
    optional uint64 battle_id = 3;//战斗id
}

message S2C_Biography_Boss_ChallengeFinish {
    required uint32 ret = 1;
    optional bool is_kill = 2; //是否击杀
    repeated out_base.Award awards = 4;//击杀奖励（普通）
    optional out_base.BioBoss boss = 5;//BOSS信息
    repeated out_base.Award rare = 6;//击杀奖励（稀有）
    repeated uint64 damage = 7;//每次攻击伤害，长度即为攻击次数
}

message C2S_Treasure_Upgrade {	// 宝物升级
    required uint64 id = 1;	// 唯一id
    repeated uint64 consume_list = 2;	// 消耗的宝物唯一id
}

message S2C_Treasure_Upgrade {
    required uint32 ret = 1;
    required uint64 id = 2;	// 唯一id
    repeated uint64 consume_list = 3;	// 消耗的宝物唯一id
}

message C2S_Treasure_Upgrade_OneLevel {
    required uint64 id = 1; //宝物唯一id
    required bool cost_red = 2; //是否消耗红色宝物(没有强化，精炼雕纹过的宝物)
    required uint32 level = 3; //需要升级X级-默认最低传1
}

message S2C_Treasure_Upgrade_OneLevel {
    required uint32 ret = 1;
    required uint64 id = 2; //宝物唯一id
    required bool cost_red = 3; //是否消耗红色宝物(没有强化，精炼雕纹过的宝物)
    required uint32 level = 4; //需要升级X级
}

message C2S_Treasure_Refining {	// 宝物精炼
    required uint64 id = 1;	// 唯一id
    repeated uint64 consume_list = 2;	// 消耗的宝物唯一id
}

message S2C_Treasure_Refining {
    required uint32 ret = 1;
    required uint64 id = 2;	// 唯一id
    repeated uint64 consume_list = 3;	// 消耗的宝物唯一id
}

//宝石雕纹
message C2S_Treasure_Glyph {
    required uint64 id = 1;
}

message S2C_Treasure_Glyph {
    required uint32 ret = 1;
    required uint64 id = 2;
}

//宝物升金
message C2S_Treasure_Golden {
    required uint64 id = 1;
}

message S2C_Treasure_Golden {
    required uint32 ret = 1;
    required uint64 id = 2;
    optional uint32 base_id = 3;
}

// --------- 夺宝 ---------
//获取抢夺列表
message C2S_ContendTreasure_GetList {
    required uint32 base_id = 1; //碎片ID
}

message S2C_ContendTreasure_GetList {
    required uint32 ret = 1;
    required uint32 base_id = 2;
    repeated out_base.UserSnapshot rob_users = 3;
}

//抢夺
message C2S_ContendTreasure_RobBegin {
    required uint64 id = 1;	// 抢夺列表中的玩家id
    required uint32 base_id = 2; //碎片ID
    optional bool skip_battle = 3;	// 是否跳过战斗显示(透传参数)
}

message S2C_ContendTreasure_RobBegin {
    required uint32 ret = 1;
    required uint64 id = 2;
    required uint32 base_id = 3; //碎片ID
    optional uint64 battle_id = 4;
    optional bool skip_battle = 5;	// 是否跳过战斗显示(透传参数)
}

message S2C_ContendTreasure_RobFinish {
    required uint32 ret = 1;
    optional bool rob_result = 2;	// 是否成功抢夺
    optional out_base.ContendTreasureAward awards = 3;	// 奖励
    optional uint32 base_id = 4;
    optional bool is_win = 5;	// 是否胜利
    optional string name = 6;	// 敌方名字
    optional uint32 target_base_id = 7;	// 敌方base id
    optional bool skip_battle = 8;	// 是否跳过战斗显示(透传参数)
    optional bs.BriefReport brief_report = 9;	// 战斗简报
}

message C2S_ContendTreasure_Fast {
    required uint32 num = 1;	// 次数
    required uint32 id = 2;	// 抢夺列表中的玩家id
    required uint32 base_id = 3; //碎片ID
}

message S2C_ContendTreasure_Fast {
    required uint32 ret = 1;
    required uint32 num = 2;
    required uint32 id = 3;	// 抢夺列表中的玩家id
    required uint32 base_id = 4; //碎片ID
    repeated out_base.ContendTreasureAward awards = 5;
    repeated bool rob_result = 6;	//是否抢夺成功
}

message C2S_ContendTreasure_Info {
}

message S2C_ContendTreasure_Info {
    required uint32 ret = 1;
    optional uint32 armistice = 2;	// 免战时间戳
    repeated uint32 avenge_mail_ids = 3;	// 已复仇的邮件id
    optional uint32 avenge_times = 4;	// 今日已复仇次数
}

//复仇
message C2S_ContendTreasure_AvengeBegin {
    required uint32 id = 1;	// 复仇的邮件id
    optional bool buff = 2;	// 是否花钱买buff
}

message S2C_ContendTreasure_AvengeBegin {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional bool buff = 3;	// 是否花钱买buff
    optional uint64 battle_id = 4;
}

message S2C_ContendTreasure_AvengeFinish {
    required uint32 ret = 1;
    required uint32 id = 2;	// 复仇的邮件id
    optional uint32 base_id = 3;	// 碎片配置id
    optional bool is_win = 4;	// 是否胜利
    optional out_base.ContendTreasureAward awards = 5;	// 奖励
    optional string name = 6;	// 敌方名字
    optional uint32 target_base_id = 7;	// 敌方base id
}

message C2S_ContendTreasure_OneKeyFast {
    required uint32 id = 1; // 要合成的宝物id
    optional uint32 is_use_item = 2; // 是否使用夺宝令 0:不使用; 1:使用
}

message S2C_ContendTreasure_OneKeyFast {
    required uint32 ret = 1;
    required uint32 id = 2;  // 要合成的宝物id
    optional uint32 is_use_item = 3; // 是否使用夺宝令 0:不使用; 1:使用
    repeated out_base.ContendTreasureAward awards = 4;
    repeated uint32 rob_result = 5;  //抢夺到的碎片id，0为抢夺失败
}

message C2S_City_GetInfo {
}

message S2C_City_GetInfo {
    required uint32 ret = 1;
    repeated out_base.City cities = 2;
    repeated out_base.CityRecommendKnight knights = 3;
}

message C2S_City_StartPatrol {
    required uint32 id = 1;
    required uint64 knight_id = 2; //武将唯一id
    required uint32 model_id = 3;
}

message S2C_City_StartPatrol {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint64 knight_id = 3;
    required uint32 model_id = 4;
    optional out_base.City city = 5;
}

message C2S_City_FinishPatrol {
    required uint32 id = 1;
}

message S2C_City_FinishPatrol {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award recommend_award = 3;
    repeated out_base.Award common_award = 4;
    repeated out_base.Award surprise_award = 5;
    repeated out_base.Award trouble_award = 6;
}

message C2S_City_GetFriendInfo {
}

message S2C_City_GetFriendInfo {
    required uint32 ret = 1;
    repeated out_base.UserSnapshot friends = 2;
}

message C2S_City_GetFriendCity {
    required uint64 friend_id = 1;
}

message S2C_City_GetFriendCity {
    required uint32 ret = 1;
    required uint64 friend_id = 2;
    repeated out_base.City citys = 3;
}

message C2S_City_HandleTrouble {
    required uint64 friend_id = 1;
    required uint32 city_id = 2;
    required uint32 trouble_id = 3;
    required uint32 start_time = 4;
}

message S2C_City_HandleTrouble {
    required uint32 ret = 1;
    required uint64 friend_id = 2;
    required uint32 city_id = 3;
    required uint32 trouble_id = 4;
    required uint32 start_time = 5;
    repeated out_base.Award awards = 6;
}

message C2S_City_GetTroubleFriend {
}

message S2C_City_GetTroubleFriend {
    required uint32 ret = 1;
    repeated uint64 trouble_friends= 2; //存在动乱的好友
}

message C2S_City_OneKeyHandleTrouble {
}

message S2C_City_OneKeyHandleTrouble {
    required uint32 ret = 1;
    repeated out_base.CityTroubleFriend trouble_friends = 2; // 被平叛的好友
    repeated out_base.Award awards = 3;
    optional uint64 handle_num = 4; //平叛次数
}

message C2S_City_OneKeyPatrol {
    repeated out_base.CityOneKeyPatrol patrol_configs = 1;    //开始一键巡逻
}

message S2C_City_OneKeyPatrol {
    required uint32 ret = 1;
    repeated out_base.CityOneKeyPatrol patrol_configs = 2;
}

message C2S_City_OneKeyGetAward {
}

message S2C_City_OneKeyGetAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    repeated uint32 city_ids = 3;
}

// ----- 好友 -----
// 信息
message C2S_Friend_Info {
}
message S2C_Friend_Info {
    required uint32 ret = 1;
    optional uint32 receive_gift_count = 2;	// 今日已领取礼物次数
    repeated uint64 friend_id = 3;	// 好友id(可能包含已删除的好友)
    repeated uint32 intimate = 4;	// 今日已增加亲密度(与friend_id对应)
    repeated bool send_gift = 5;	// 今日是否赠送礼物(与friend_id对应)
    repeated bool receive_gift = 6;	// 今日是否接受礼物(与friend_id对应)
}

// 获取好友列表
message C2S_Friend_FriendList {
}
message S2C_Friend_FriendList {
    required uint32 ret = 1;
    repeated out_base.Friend friend  = 2;
}

// 获取黑名单
message C2S_Friend_BlackList {
}
message S2C_Friend_BlackList {
    required uint32 ret = 1;
    repeated out_base.UserSnapshot user = 2;
}

// 获取好友请求列表
message C2S_Friend_RequestList {
}
message S2C_Friend_RequestList {
    required uint32 ret = 1;
    repeated out_base.UserSnapshot user = 2;
}

// 请求添加好友
message C2S_Friend_AddFriend {
    required string name = 1;	// 玩家名字
}
message S2C_Friend_AddFriend {
    required uint32 ret = 1;
}

// 删除好友
message C2S_Friend_DelFriend {
    required uint64 id = 1;	// 玩家id
}
message S2C_Friend_DelFriend {
    required uint32 ret = 1;
    required uint64 id = 2;	// 玩家id
}

// 添加黑名单
message C2S_Friend_AddBlackList {
    required uint64 id = 1;	// 玩家id
}
message S2C_Friend_AddBlackList {
    required uint32 ret = 1;
    required uint64 id = 2;	// 玩家id
}

// 删除黑名单
message C2S_Friend_DelBlackList {
    required uint64 id = 1;	// 玩家id
}
message S2C_Friend_DelBlackList {
    required uint32 ret = 1;
    required uint64 id = 2;	// 玩家id
}

// 同意、拒绝添加好友
message C2S_Friend_ConfirmFriend {
    required uint64 id = 1;	// 玩家id 传0是全部同意或拒绝
    required bool accept = 2;	// 是否同意
}
message S2C_Friend_ConfirmFriend {
    required uint32 ret = 1;
    required uint64 id = 2;	// 玩家id
    required bool accept = 3;	// 是否同意
    repeated uint64 ids = 4;	// 实际添加成功的玩家id
}

// 赠送礼物
message C2S_Friend_SendGift {
    required uint64 id = 1;	// 玩家id 传0是给所有好友赠送
}
message S2C_Friend_SendGift {
    required uint32 ret = 1;
    required uint64 id = 2;	// 玩家id
}

// 接收礼物
message C2S_Friend_ReceiveGift {
    repeated uint64 id = 1;	// 玩家id
}
message S2C_Friend_ReceiveGift {
    required uint32 ret = 1;
    repeated uint64 id = 2;	// 玩家id
    repeated out_base.Award awards = 3;
}

// 获取推荐好友
message C2S_Friend_GetRecommendList {
}
message S2C_Friend_GetRecommendList {
    required uint32 ret = 1;
    repeated out_base.UserSnapshot user = 2;
}

// 查找好友
message C2S_Friend_GetSnapshot {
    required string name = 1;	// 玩家名字
}
message S2C_Friend_GetSnapshot {
    required uint32 ret = 1;
    optional out_base.UserSnapshot user = 2;
}


// 通知：对方请求添加你为好友
message S2C_Friend_NotifyAddFriendRequest {
    optional uint64 id = 1;	// 玩家id
}

// 通知：对方通过好友请求
message S2C_Friend_NotifyAddFriend {
    optional uint64 id = 1;	// 玩家id
}

// 通知：对方将你删除
message S2C_Friend_NotifyDelFriend {
    required uint64 id = 1;	// 玩家id
}

// 通知：亲密度任务完成
//*完成任务后双方都会收到该通知，所以id和friend_id字段可能是自己的id也可能是好友的
message S2C_Friend_NotifyTask {
    required uint64 id = 1;	// 完成任务玩家的id
    required uint64 friend_id = 2;	// 好友的id
    required uint32 task_id = 3;	// 任务id
}

message S2C_Friend_NotifyTask_All {
    repeated S2C_Friend_NotifyTask notifytasks =1;
}

// 通知：对方给你赠送礼物
message S2C_Friend_NotifyGift {
    required uint64 id = 1;	// 玩家id
    required uint32 gift_id = 2;	// 礼物id
}

// 好友对战
message C2S_Friend_Duel {
    required uint64 id = 1;	// 玩家id
}
message S2C_Friend_Duel {
    required uint32 ret = 1;
    required uint64 id = 2;	// 玩家id
    optional bs.BattleTeam self = 3;
    optional bs.BattleTeam enemy = 4;
}

//设置好友申请条件
message C2S_Friend_SetRequestCond {
    required uint32 cond_type = 1; //条件类型: 1-等级
    required uint32 value = 2;
}

message S2C_Friend_SetRequestCond {
    required uint32 ret = 1;
    required uint32 cond_type = 2; //条件类型: 1-等级
    required uint32 value = 3;
}

//获取好友申请条件列表
message C2S_Friend_RequestCondList {

}

message S2C_Friend_RequestCondList {
    required uint32 ret = 1;
    optional uint32 cond_type = 2; //条件类型: 1-等级
    optional uint32 value = 3;
}

message C2S_Title_Info {
}

message S2C_Title_Info {
    required uint32 ret = 1;
    optional uint32 title_id = 2;
    repeated out_base.Status titles = 3;//称号id 过期时间status
}

message C2S_Title_Wear {
    required uint32 title_id = 1;//穿戴id
}

message S2C_Title_Wear {
    required uint32 ret = 1;
    optional uint32 title_id = 2;
}

message C2S_Guild_GetInfo {
}

message S2C_Guild_GetInfo {
    required uint32 ret = 1;
    optional out_base.GuildSnapshot guild = 2;
    repeated out_base.GuildMember members = 3;
    optional uint32 join_guild_cool_time = 4; //加入军团冷却时间
    optional uint32 zero_hour_level = 5; //军团0点时间
}

message C2S_Guild_Create {
    required string name = 1; //军团名
    required uint32 icon = 2; //军团头像
    required bool confirm = 3; //是否需要审核
    required uint32 level = 4; //限制加入等级
}

message S2C_Guild_Create {
    required uint32 ret = 1;
    required string name = 2;
    required uint32 icon = 3;
    required bool confirm = 4;
    required uint32 level = 5;
    optional out_base.GuildSnapshot guild = 6;
}

message C2S_Guild_ReqJoin {
    required uint64 guild_id = 1;
}

message S2C_Guild_ReqJoin {
    required uint32 ret = 1;
    required uint64 guild_id = 2;
    optional bool join = 3;
    optional string guild_name = 4;
}

message C2S_Guild_Confirm {
    repeated uint64 apply_id = 1;
    required bool accept = 2;
}

message S2C_Guild_Confirm {
    required uint32 ret = 1;
    required bool accept = 2;
    repeated uint64 apply_id = 3;
    repeated out_base.GuildMember member = 4;
    repeated uint64 remain_member = 5;
}

message C2S_Guild_KickOut {
    required uint64 kick_id = 1;
}

message S2C_Guild_KickOut {
    required uint32 ret = 1;
    required uint64 kick_id = 2;
}

message C2S_Guild_Quit {
}

message S2C_Guild_Quit {
    required uint32 ret = 1;
}

message C2S_Guild_Dismiss {
}

message S2C_Guild_Dismiss {
    required uint32 ret = 1;
}

message C2S_Guild_Appoint {
    required uint64 member_id = 1;
    required uint32 position = 2;
}

message S2C_Guild_Appoint {
    required uint32 ret = 1;
    required uint64 member_id = 2;
    required uint32 position = 3;
}

message C2S_Guild_Impeach {
}

message S2C_Guild_Impeach {
    required uint32 ret = 1;
}

message C2S_Guild_GetHistory {
    required uint32 start = 1;
}

message S2C_Guild_GetHistory {
    required uint32 ret = 1;
    required uint32 start = 2;
    repeated out_base.GuildHistory historys = 3;
}

message C2S_Guild_ModifyInfo {
    required uint32 type = 1; //类型
    optional string name = 2; //军团名 type = 1
    optional uint32 icon = 3; //军团头像 type = 2
    optional uint32 frame = 4; //军团边框 type = 4
    optional uint32 apply_level = 5; //申请等级 type = 8
    optional string declaration = 6; //宣言 type = 16
    optional string announcement = 7; //公告(内部成员可见) type = 32
    optional uint32 confirm = 8; //1设置审核 2 取消审核 type = 64
}

message S2C_Guild_ModifyInfo {
    required uint32 ret = 1;
    required uint32 type = 2;
    optional string name = 3;
    optional uint32 icon = 4;
    optional uint32 frame = 5;
    optional uint32 apply_level = 6;
    optional string declaration = 7;
    optional string announcement = 8;
    optional uint32 confirm = 9;
}

message C2S_Guild_GetMessageBoard {
}

message S2C_Guild_GetMessageBoard {
    required uint32 ret = 1;
    repeated out_base.GuildMessage messages = 2;
}

message C2S_Guild_LeaveAMessage {
    required string message = 1;
}

message S2C_Guild_LeaveAMessage {
    required uint32 ret = 1;
    required string message = 2;
    optional out_base.GuildMessage guild_message = 3;
}

message C2S_Guild_OperateMessage {
    required uint32 id = 1; //留言id
    required uint32 type = 2; //1 删除 2 置顶 3 取消置顶
}

message S2C_Guild_OperateMessage {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 type = 3;
}

message C2S_Guild_Recommend {
    required uint32 index = 1; //从1开始 表示第几批 一批50个军团
}

message S2C_Guild_Recommend {
    required uint32 ret = 1;
    required uint32 index = 2;
    repeated out_base.GuildSnapshot guilds = 3;
    required uint32 start_join_time = 4; //加军团时间点
}

message C2S_Guild_Search {
    required string key = 1;
}

message S2C_Guild_Search {
    required uint32 ret = 1;
    required string key = 2;
    repeated out_base.GuildSnapshot guilds = 3;
}

message C2S_Guild_GetApplyList {
}

message S2C_Guild_GetApplyList {
    required uint32 ret = 1;
    repeated out_base.UserSnapshot users = 2;
}

message C2S_Guild_GetApplyHistory {
}

message S2C_Guild_GetApplyHistory {
    required uint32 ret = 1;
    repeated out_base.GuildSnapshot guilds = 2;
}

message C2S_Guild_DeleteApply {
    required uint64 guild_id = 1;
}

message S2C_Guild_DeleteApply {
    required uint32 ret = 1;
    required uint64 guild_id = 2;
}

message C2S_Guild_GetWorshipInfo {
}

message S2C_Guild_GetWorshipInfo {
    required uint32 ret = 1;
    optional uint32 progress = 2; //捐献进度
    repeated uint32 worship_id = 3; //已捐献id
    repeated uint32 awarded_id = 4; //已领取进度奖励
    optional uint32 zero_hour_level = 5; //每日0点军团等级
    optional uint32 worship_num = 6; //已祭天人数
}

message C2S_Guild_DoWorship {
    required uint32 id = 1;
}

message S2C_Guild_DoWorship {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional bool crit = 3;
    optional uint32 worship_num = 4; //已祭天人数
}

message C2S_Guild_GetWorshipAward {
    required uint32 index = 1;
}

message S2C_Guild_GetWorshipAward {
    required uint32 ret = 1;
    required uint32 index = 2;
    repeated out_base.Award awards = 3;
}

message S2C_Guild_NotifyJoin {
    required out_base.GuildSnapshot guild = 1;
}

message S2C_Guild_NotifyLeave {
    required uint32 type = 1; //2 表示被踢 3 表示军团被解散
}

message C2S_Guild_FastJoin {
}

message S2C_Guild_FastJoin {
    required uint32 ret = 1;
    optional out_base.GuildSnapshot guild = 2;
}

message C2S_Guild_SendGift {
    required uint64 member_id = 1;
}

message S2C_Guild_SendGift {
    required uint32 ret = 1;
    required uint64 member_id = 2;
    repeated out_base.Award awards = 3;
    optional uint32 guild_receive_count = 4; //对方收礼次数
    optional uint32 guild_send_count = 5; //自己送礼次数
}

message C2S_Guild_OneKeySendGift {
    repeated uint64 member_ids = 1;
}

message S2C_Guild_OneKeySendGift {
    required uint32 ret = 1;
    repeated uint64 member_ids = 2;
    repeated out_base.Award awards = 3;
    optional uint32 guild_send_count = 4; //自己送礼次数
}

//理论上如果激活图鉴不是手动的 都可以客户端自己做 不用服务器来维护
//服务器只要计算属性时候会计算就ok了
message C2S_Handbook_Info {
    required uint32 id = 1;//1武将 2时装 3名将传BOSS
}

message S2C_Handbook_Info {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated out_base.Handbook hb = 3;
    repeated uint32 pass_ids = 4; //曾经拥有的advanceId
}

message S2C_Handbook_Sync {
    required uint32 id = 1;   //图鉴id
    required uint32 hb_id = 2; //激活的图鉴配置id
}

message C2S_Dress_Enhance {
    required uint32 id = 1;//advance code
}

message S2C_Dress_Enhance {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional out_base.Dress dress = 3;
}

message C2S_Dress_OneKey_Enhance {
    required uint32 id = 1;//advance code
    required uint32 level = 2; // 强化的等级
}

message S2C_Dress_OneKey_Enhance {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 level = 3;
}

message C2S_Dress_Wear {
    required uint32 id = 1;//advance code
}

message S2C_Dress_Wear {
    required uint32 ret = 1;
    optional uint32 id = 2;
}


message C2S_Rebel_Info { // 叛军信息
}
message S2C_Rebel_Info {
    required uint32 ret = 1;
    optional uint32 level = 2;	// 今日0点前最高击杀叛军等级
    repeated out_base.Rebel self_rebel = 3;	// 自己的叛军
    repeated out_base.Rebel friend_rebel = 4;	// 好友的叛军
    repeated uint64 award_ids = 5;	// 今日已领取的奖励配置id
    optional uint64 total_damage = 6;	// 今日累计伤害
    optional uint64 max_damage = 7;	// 今日最高伤害
}

message C2S_Rebel_AttackBegin { // 攻击叛军
    required uint64 uid = 1;	// 叛军所属的玩家id
                                required uint32 id = 2;	// 叛军id
                                required uint32 attack_type = 3;	// 1:普通攻击 2:全力一击
}
message S2C_Rebel_AttackBegin {
    required uint32 ret = 1;
    required uint64 uid = 2;	// 叛军所属的玩家id
    required uint32 id = 3;	// 叛军id
    required uint32 attack_type = 4;	// 1:普通攻击 2:全力一击
    optional uint64 battle_id = 5;	// 战斗id
}

message C2S_Rebel_OneKeyAttackBegin {
    required uint32 id = 1;	// 叛军id
    required uint32 count = 2;    //挑战次数
    required bool use_item = 3;   //是否使用道具
    optional uint32 attack_type = 4;	// 1:普通攻击 2:全力一击
}

message S2C_Rebel_OneKeyAttackBegin {
    required uint32 ret = 1;
    required uint32 id = 2;	// 叛军id
    required uint32 count = 3;    //挑战次数
    required bool use_item = 4;   //是否使用道具
    optional uint64 battle_id = 5;	// 战斗id
    optional uint32 attack_type = 6;	// 1:普通攻击 2:全力一击
}

message S2C_Rebel_AttackFinish {
    required uint32 ret = 1;
    optional bool is_win = 2;	// 是否胜利(最后一击)
    optional uint32 old_rank_total = 3;	// 旧排名-总伤害
    optional uint32 new_rank_total = 4;	// 新排名-总伤害
    optional uint32 old_rank_max = 5;	// 旧排名-最大伤害
    optional uint32 new_rank_max = 6;	// 新排名-最大伤害
    optional uint32 attack_type = 7;	// 1:普通攻击 2:全力一击
    optional uint64 total_damage = 8;	// 今日累计伤害
    optional uint64 max_damage = 9;	// 今日最高伤害
    optional uint64 damage = 10;	// 本次伤害
    repeated out_base.Award awards = 11;
    optional uint32 rebel_base_id = 12;	// 叛军配置表id
}

message S2C_Rebel_OneKey_AttackFinish {
    required uint32 ret = 1;
    optional bool is_win = 2;	// 是否胜利(最后一击)
    optional uint32 old_rank_total = 3;	// 旧排名-总伤害
    optional uint32 new_rank_total = 4;	// 新排名-总伤害
    optional uint32 old_rank_max = 5;	// 旧排名-最大伤害
    optional uint32 new_rank_max = 6;	// 新排名-最大伤害
    optional uint32 attack_type = 7;	// 1:普通攻击 2:全力一击
    optional uint64 total_damage = 8;	// 今日累计伤害
    optional uint64 max_damage = 9;	// 今日最高伤害
    optional uint64 damage = 10;	// 本次伤害
    repeated out_base.Award awards = 11;
    optional uint32 rebel_base_id = 12;	// 叛军配置表id
    repeated out_base.SingleAttackData multi_atk_data = 13;//多次攻击的数据
}

message C2S_Rebel_Share { // 分享叛军
                          required uint32 id = 1;	// 叛军id
}
message S2C_Rebel_Share {
    required uint32 ret = 1;
    required uint32 id = 2;	// 叛军id
}

message C2S_Rebel_Award { // 叛军奖励
                          required uint32 id = 1;	// 配置表id
}
message S2C_Rebel_Award {
    required uint32 ret = 1;
    required uint32 id = 2;	// 配置表id
}

message C2S_Rebel_One_Button_Award { // 一键领奖
}
message S2C_Rebel_One_Button_Award {
    required uint32 ret = 1;
    repeated uint32 ids = 2;	// 配置表id
}

message S2C_Rebel_NotifyCreate {	// 通知：叛军出现
    repeated out_base.Rebel rebel = 1;	// 叛军
}

message C2S_Guild_RedPacket_Info {
}

message S2C_Guild_RedPacket_Info {
    required uint32 ret = 1;
    repeated out_base.GuildRedPacket rp = 2;
    optional uint32 use_time = 3;//使用次数
    repeated uint32 pick_time = 4;//各种领取的剩余次数 依次为parameter_info表中4005-4007
    repeated uint32 guild_pick_time = 5;//军团红包已经领取的位置值 redpacket_gm_info position
    optional uint32 point = 6;//财神点
    optional uint32 luck = 7;//手气
}

message C2S_Guild_RedPacket_Detail {
    required uint64 id = 1;
}

message S2C_Guild_RedPacket_Detail {
    required uint32 ret = 1;
    optional uint64 id = 2;
    optional out_base.GuildRedPacket rp = 3;
    repeated uint64 pick = 4;//所有pick的军团成员
    repeated uint32 distribute = 5;//他们相应领取的数量
    repeated uint32 lucky = 6;//幸运值
}

message C2S_Guild_RedPacket_Pick {
    required uint64 id = 1;
}

message S2C_Guild_RedPacket_Pick {
    required uint32 ret = 1;
    optional uint64 id = 2;
    repeated out_base.Award awards = 3;
    optional out_base.GuildRedPacket rp = 4;
    repeated uint32 pick_time = 5;
    repeated uint32 guild_pick_time = 6;
    optional uint32 luck = 7;
}

message C2S_Guild_RedPacket_Use {
    required uint32 id = 1;
}

message S2C_Guild_RedPacket_Use {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional out_base.GuildRedPacket rp = 3;
    optional uint32 use_time = 4;
    optional uint32 point = 5;//财神
}

message C2S_DailyDungeon_Info {	// 日常副本-信息
}

message S2C_DailyDungeon_Info {
    required uint32 ret = 1;
    repeated uint32 ids = 2;	// 副本id
    repeated uint32 records = 3;	// 对应副本id的战斗记录(如坚持X回合等)
    repeated bool clears = 4;	// 对应副本id的通关纪录
    optional uint32 yesterday_level = 5;	// 昨日的最高等级
}

message C2S_DailyDungeon_ChallengeBegin {	// 日常副本-战斗
    required uint32 id = 1;	// 副本id
}

message S2C_DailyDungeon_ChallengeBegin {
    required uint32 ret = 1;
    required uint32 id = 2;	// 副本id
    optional uint64 battle_id = 3;	// 战斗id
}

message S2C_DailyDungeon_ChallengeFinish {
    required uint32 ret = 1;
    required uint32 id = 2;	// 副本id
    optional bool is_win = 3;	// 是否胜利
    optional uint32 record = 4;	// 战斗记录(如坚持X回合等)
    repeated out_base.Award awards = 5;
    optional uint32 old_record = 6;	// 之前的战斗记录(如坚持X回合等)
}

message C2S_DailyDungeon_Fast {
    required uint32 id = 1;	// 副本id
}

message S2C_DailyDungeon_Fast {
    required uint32 ret = 1;
    required uint32 id = 2;	// 副本id
    repeated out_base.Award awards = 3;
}

message C2S_DailyDungeon_OneKey_Fast {
    repeated uint32 tps = 1; // 副本类型
}

message S2C_DailyDungeon_OneKey_Fast {
    required uint32 ret = 1;
    repeated uint32 tps = 2; // 副本类型
    repeated out_base.Award awards = 3;
}

message S2C_Guild_RedPacket_Flush {
    optional out_base.GuildRedPacket rp = 1;
}

message C2S_GuildWorship_GetInfo {
}

message S2C_GuildWorship_GetInfo {
    required uint32 ret = 1;
    optional uint32 progress = 2; //捐献进度
    optional uint32 zero_hour_level = 3; //每日0点军团等级
    optional uint32 worship_num = 4; //已祭天人数
    optional out_base.GuildWorship worship = 5; //祭天信息
    repeated out_base.Task missions = 6; //当前任务 (任务类型=>任务进度)
}

message C2S_GuildWorship_FinishMission {
    required uint32 id = 1; //祭天id
    optional uint32 num = 2; //祭天次数
}

message S2C_GuildWorship_FinishMission {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
    optional out_base.GuildWorship worship = 4;
    optional uint32 num = 5;
}

message C2S_GuildWorship_OneKey_FinishMission {
}

message S2C_GuildWorship_OneKey_FinishMission {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    optional out_base.GuildWorship worship = 3;
}

message  C2S_GuildWorship_GetProgressAward {
    required uint32 index = 1;
}

message  S2C_GuildWorship_GetProgressAward {
    required uint32 ret = 1;
    required uint32 index = 2;
    repeated out_base.Award awards = 3;
}

message S2C_GuildWorship_PushMission {
    required out_base.Task task = 1;
}

message S2C_GuildWorship_PushHistory {
    required out_base.GuildHistory history = 1;
}

message C2S_GuildDungeon_GetInfo {
}

message S2C_GuildDungeon_GetInfo {
    required uint32 ret = 1;
    optional uint32 current_chapter_id = 2; //当前章节id
    optional uint64 current_chapter_hp = 3; //当前章节扣除血量
    repeated uint32 first_finish_chapter = 4; //已领取首通奖励章节
    optional uint32 rollback_chapter_id = 5; //本次回滚到哪一章，之前的章节不可查看
}

message C2S_GuildDungeon_GetChapter {
    required uint32 chapter_id = 1;
}

message S2C_GuildDungeon_GetChapter {
    required uint32 ret = 1;
    required uint32 chapter_id = 2;
    repeated out_base.GuildDungeonStage stages = 3; //关卡信息
    repeated uint64 awarded_stage = 4;
}

message C2S_GuildDungeon_AttackBegin {
    required uint32 stage_id = 1;
}

message S2C_GuildDungeon_AttackBegin {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    optional uint64 battle_id = 3;
}

message S2C_GuildDungeon_AttackFinish {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    repeated out_base.Award awards = 3;
    optional uint64 damage = 4;
    optional uint64 total_damage = 5;
    optional uint32 pre_rank = 6;
    optional uint32 cur_rank = 7;
}

message C2S_GuildDungeon_GetHarmRecord {
    required uint32 stage_id = 1;
}

message S2C_GuildDungeon_GetHarmRecord {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    repeated uint64 harms = 3;
    repeated out_base.UserSnapshot members = 4;
    optional uint64 mvp_award = 5;
}

message C2S_GuildDungeon_GetSkillInfo {
}

message S2C_GuildDungeon_GetSkillInfo {
    required uint32 ret = 1;
    repeated out_base.KV skills = 2; // id=>type num=> current exp
}

message C2S_GuildDungeon_SkillLevelUp {
    required uint32 type = 1;
    required uint32 score = 2;
}

message S2C_GuildDungeon_SkillLevelUp {
    required uint32 ret = 1;
    required uint32 type = 2;
    required uint32 score = 3;
    optional uint32 pre_skill_id = 4;
    optional uint32 cur_skill_id = 5;
    repeated out_base.KV skills = 6;
}

message C2S_GuildDungeon_GetFinishAward {
    required uint32 chapter_id = 1;
}

message S2C_GuildDungeon_GetFinishAward {
    required uint32 ret = 1;
    required uint32 chapter_id = 2;
    repeated out_base.Award awards = 3;
}

message C2S_GuildDungeon_GetTreasureBox {
    required uint32 position = 1;
    required uint32 stage_id = 2;
}

message S2C_GuildDungeon_GetTreasureBox {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    required uint32 position = 3;
    repeated out_base.Award awards = 4;
    repeated uint32 award_id = 5;
}

message C2S_GuildDungeon_GetStageMvpAward {
    required uint32 stage_id = 1;
}

message S2C_GuildDungeon_GetStageMvpAward {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    repeated out_base.Award awards = 3;
}

message S2C_GuildDungeon_BroadcastDamage {
    required uint32 stage_id = 1; //关卡id
    required uint64 member_id = 2; //攻击者id
    required uint64 damage = 3; //本次伤害
    optional bool is_win = 4; //关卡是否通关
}

message C2S_GuildDungeon_GetMemberDamage {
    required uint32 stage_id = 1;
}

message S2C_GuildDungeon_GetMemberDamage{
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    repeated uint64 member_id = 3;
    repeated uint64 damages = 4;
    repeated out_base.UserSnapshot members = 5;
}


message C2S_GuildDungeon_OneKeyGetFinishAward {
}

message S2C_GuildDungeon_OneKeyGetFinishAward {
    required uint32 ret = 1;
    repeated out_base.GuildDungeonStageAward stageAwards = 2;
    repeated uint32 stageFinished = 3;
    repeated uint32 stageAwarded = 4;
}

message C2S_Achievement_Info {

}

message S2C_Achievement_Info {
    required uint32 ret = 1;
    repeated out_base.Status status = 2;
    repeated uint64 finish = 3;
    repeated uint64 reward = 4;
}

message C2S_Achievement_Finish {
    required uint32 id = 1;
}

message S2C_Achievement_Finish {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated uint64 finish = 3;
    repeated out_base.Award awards = 4;
}

message C2S_Achievement_Reward {
    required uint32 id = 1;
}

message S2C_Achievement_Reward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated uint64 reward = 3;
    repeated out_base.Award awards = 4;
}

message C2S_FlushShop_Info {	// 刷新商店-信息
    required uint32 shop_id = 1;
}
message S2C_FlushShop_Info {
    required uint32 ret = 1;
    optional out_base.Shop shop = 2;
    required uint32 shop_id = 3;
}

message C2S_FlushShop_Flush {	// 刷新商店-刷新
     required uint32 shop_id = 1;
     required uint32 flush_type = 2;	// 对应flush_cost_type 1~3，没有就填0
}
message S2C_FlushShop_Flush {
    required uint32 ret = 1;
    required uint32 shop_id = 2;
    required uint32 flush_type = 3;
    optional out_base.Shop shop = 4;
}

message C2S_FlushShop_Buy {	// 刷新商店-购买
    required uint32 shop_id = 1;
    required uint32 goods_type = 2;	// 1普通货架 2特殊货架
    required uint32 index = 3;	// 从1开始 第几个货物
    required uint32 num = 4;	// 数量
}
message S2C_FlushShop_Buy {
    required uint32 ret = 1;
    required uint32 shop_id = 2;
    required uint32 goods_type = 3;	// 1普通货架 2特殊货架
    required uint32 index = 4;
    required uint32 num = 5;	// 数量
    optional out_base.Shop shop = 6;
}

message C2S_DailyTask_GetInfo {
}

message S2C_DailyTask_GetInfo {
    required uint32 ret = 1;
    optional uint32 cur_degree = 2; //当前活跃度
    optional uint32 degree_level = 3; //活跃度解锁等级
    optional uint32 surprise_task_id = 4; //惊喜任务id
    repeated uint64 finish_rewards = 5; //当前已领取奖励的任务id
    repeated uint64 degree_rewards = 6; //当前已领取奖励的活跃度id
    repeated out_base.TaskInfo tasks = 7; //当前所有任务状态(type:任务类型 value:完成进度)
}

message C2S_DailyTask_FinishAward {
    required uint32 id = 1; //任务id
}

message S2C_DailyTask_FinishAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional uint32 cur_degree = 3; //当前活跃度
    optional uint32 degree_level = 4; //活跃度解锁等级
    repeated uint64 finish_rewards = 5; //当前已领取奖励的任务id
    repeated out_base.Award awards = 6; //本次领取的奖励
}

message C2S_DailyTask_DegreeAward {
    required uint32 id = 1; //活跃度id
}

message S2C_DailyTask_DegreeAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated uint64 degree_rewards = 3; //当前已领取奖励的活跃度id
    repeated out_base.Award awards = 4; //本次领取的奖励
}

message S2C_ActionStatusFlush {
    required uint32 tp = 1;//参考enums.ACTION_TYPE
    optional out_base.Status status = 2;
}

message C2S_Chat_LeftTimes{

}

message S2C_Chat_LeftTimes{
    required uint32 ret = 1;
    required uint32 times = 2;
}

message C2S_Reborn_Preview {
    required uint32 sys_type = 1; //模块类型1:武将 2:兵符 3:装备 4:宝物 5:时装 6:神器 9:将灵图鉴 10:军团图腾
    required uint32 op_type = 2; //操作类型 1重生 2分解
    repeated uint64 ids = 3; //对应重生对象id
}

message S2C_Reborn_Preview {
    required uint32 ret = 1;
    required uint32 sys_type = 2;
    required uint32 op_type = 3;
    repeated uint64 ids = 4;
    repeated out_base.Award awards = 5; //重生或者分解返回资源
}

message C2S_Reborn_Execute {
    required uint32 sys_type = 1;
    required uint32 op_type = 2;
    repeated uint64 ids = 3;
}

message S2C_Reborn_Execute {
    required uint32 ret = 1;
    required uint32 sys_type = 2;
    required uint32 op_type = 3;
    repeated uint64 ids = 4;
    repeated out_base.Award awards = 5; //重生或者分解返回资源
    optional out_base.Knight knight = 6; //重生后的武将
    optional out_base.UniteToken unite_token = 7; //重生后的兵符
    optional out_base.Equipment equipment = 8; //重生后的装备
    optional out_base.Treasure treasure = 9; //重生后的宝物
    optional out_base.Dress dress = 10; //重生后的时装
    optional out_base.PetEquipment pe = 11; //重生后的神兽装备
    optional out_base.KSoulBook kb = 12; //重生后的将灵图鉴
}

message C2S_GetStamina_Info {	//领取体力-信息
}
message S2C_GetStamina_Info {
    required uint32 ret = 1;
    repeated uint64 ids = 2;	// 今日已领取的id
}

message C2S_GetStamina_Get {	//领取体力-领取
    optional uint64 id = 1;	// 要补领的id,非补领的情况可以不填
}
message S2C_GetStamina_Get {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    optional uint64 id = 3;	// 实际领取的id
}


message C2S_SignIn_Info	{	// 签到-信息
}
message S2C_SignIn_Info {
    required uint32 ret = 1;
    required uint32 total = 2; // 已签到次数
    required uint32 signed = 3;  // 今日已签到倍数
    repeated uint64 ids = 4;	// 已领取的礼包id
}

message C2S_SignIn_Sign	{	// 签到-签到
}
message S2C_SignIn_Sign {
    required uint32 ret = 1;
    optional uint32 signed = 2;  // 今日已签到倍数
}

message C2S_SignIn_Award	{	// 签到-礼包
    required uint64 id = 1;
}
message S2C_SignIn_Award {
    required uint32 ret = 1;
    required uint64 id = 2;
}

message C2S_SignIn_Test	{	// 签到-重置今日已签到状态(测试用)
}
message S2C_SignIn_Test {
    required uint32 ret = 1;
}

message C2S_HallOfFame_Rank {
    required uint32 type = 1; //1:战力榜 2:等级榜 3:攻城略地总榜
}

message S2C_HallOfFame_Rank {
    required uint32 ret = 1;
    required uint32 type = 2;
    optional uint32 self_rank = 3;
    repeated out_base.UserSnapshot users = 4;
    optional uint32 liked_num = 5;
}

message C2S_HallOfFame_Like {
    required uint32 type = 1; //点赞排行 1:战力榜 2:等级榜 3:攻城略地总榜
    required uint64 like_id = 2; //点赞对象id
    required uint32 like_num = 3; //点赞次数
}

message S2C_HallOfFame_Like {
    required uint32 ret = 1;
    required uint32 type = 2;
    required uint64 like_id = 3;
    required uint32 like_num = 4; //实际点赞次数
    repeated out_base.Award awards = 5; //点赞奖励
    optional out_base.UserSnapshot user = 6; //被点赞人
    optional uint32 liked_num = 7; //已点赞次数
}

message C2S_GetUserConfig{
}

message S2C_GetUserConfig{
    required uint32 ret = 1;
    optional out_base.UserConfig config = 2;
}

message C2S_SetUserConfig {
    required uint32 tp = 1;//1代表chat
    optional out_base.UserConfig config = 2;
}

message S2C_SetUserConfig {
    required uint32 ret = 1;
    optional out_base.UserConfig config = 2;
}

message S2C_Notice {
    required uint32 id = 1; //模板id
    repeated out_base.StringMap params = 2; //富文本参数key=>value
    repeated out_base.Award awards = 3; //掉落奖励显示
}


//新手引导
message C2S_Guide_Set { 	//新手引导-设置id
                           required uint32 id = 1;
                           optional uint32 msg_id = 2;
                           optional bytes msg = 3;
}
message S2C_Guide_Set {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 msg_id = 3;
}

message C2S_Guide_Action { 	//新手引导-执行特殊操作
                              required uint32 id = 1;	// 1:觉醒并上阵指定合击兵符
}
message S2C_Guide_Action {
    required uint32 ret = 1;
    required uint32 id = 2;
}

message C2S_Announce_Info {
}

message S2C_Announce_Info {
    required uint32 ret = 1;
    repeated out_base.Announce announces = 2;
}

message S2C_Announce_Flush {
    repeated out_base.Announce announces = 1;
}

message C2S_GetBattleVideo {
    required uint64 battle_id = 1;
}

message S2C_GetBattleVideo {
    required uint32 ret = 1;
    required uint64 battle_id = 2;
    optional bs.BattleVideo battle_video = 3;
}

message C2S_GetBattleRecord {
    required uint32 function_id = 1;	// function id
    required uint64 record_id = 2;	// record id, 填0是返回所有
}
message S2C_GetBattleRecord {
    required uint32 ret = 1;
    required uint32 function_id = 2;	// function id
    required uint64 record_id = 3;	// record id, 填0是返回所有
    repeated out_base.BattleRecord records = 4;
}


message C2S_Recharge_GetRecharge{
}

message S2C_Recharge_GetRecharge{
    required uint32 ret = 1;
    repeated uint32 recharge_ids = 2;
    repeated uint32 show_ids = 3;
    repeated out_base.MonthCard mc = 4;//月卡
    repeated out_base.MonthCard subs = 5;//订阅//公用一个结构体
    optional out_base.FirstRecharge first_recharge = 6;
    repeated out_base.FundRecharge  fund_recharge = 7;
    repeated out_base.DayRecharge   day_recharge = 8;
    optional out_base.TotalRecharge   total_recharge = 9;
    repeated out_base.RechargeNotify recharges = 10;
    repeated out_base.OpenPurchase open_purchase = 11;
    repeated out_base.DayBox day_box = 12;
    repeated out_base.MonthFund month_fund = 13;
    repeated out_base.NewTotalRecharge new_total_recharge = 14;
    repeated out_base.WeekGiftHistory week_gift_history = 15;
    repeated out_base.YoungStoreHistory young_store_history = 16;
}

//月卡/订阅
message C2S_Recharge_UseMonthCard {
    required uint32 id = 1;	// id
}

message S2C_Recharge_UseMonthCard {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
}

message C2S_Recharge_UseSubRecharge {
    required uint32 id = 1;	// id
}

message S2C_Recharge_UseSubRecharge {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
}

message S2C_Recharge_NotifySuccess {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional string order_id = 3;
}

//message C2S_Activity_Info {
//}
//
//message S2C_Activity_Info {
//	required uint32 ret = 1;
//	optional out_base.Activity activitys = 2;
//}
//
//message C2S_Activity_Condition_Complete {
//	required uint64 activity_id = 1;
//	required uint64 condition_id = 2;
//	optional uint32 drop_type = 3;
//}
//
//message S2C_Activity_Condition_Complete {
//	required uint32 ret = 1;
//	optional uint64 id = 2;
//	optional uint64 list_id = 3;
//	optional out_base.Award awards = 4;
//}
//
//message C2S_Activity_Exchange {
//	required uint64 activity_id = 1;
//	required uint64 exchange_id = 2;
//}
//
//message S2C_Activity_Exchange {
//	required uint32 ret = 1;
//	optional uint64 id = 2;
//	optional uint64 ex_id = 3;
//  optional out_base.Award awards = 4;
//}

//开服类活动获取当天已经开启的活动info
message C2S_Activity_Common_GetInfoServer{

}

message S2C_Activity_Common_GetInfoServer{
    required uint32 ret = 1;
    repeated out_base.ServerTypeActivityInfo activityInfo = 2 ;
}

message C2S_CustomActivity_GetInfo {
}

message S2C_CustomActivity_GetInfo {
    required uint32 ret = 1;
    repeated out_base.CustomActivityInfo infos = 2; //可显示活动信息
    repeated out_base.CustomActivity activitys = 3; //玩家数据
    repeated out_base.CustomActivityHideInfo hides = 4; //隐藏活动信息
    repeated out_base.CustomCollection collections = 5; //收集活动玩家信息
}

message C2S_CustomActivity_GetAward {
    required uint32 id = 1; //对应任务id
    optional uint32 index = 2; //奖励位置
}

message S2C_CustomActivity_GetAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional uint32 index = 3;
    repeated out_base.Award awards = 4;
    optional out_base.CustomActivity activity = 5;
}

message C2S_CustomActivity_Exchange {
    required uint32 id = 1; //兑换id
    required uint32 num = 2; //兑换数量
    optional uint32 index = 3; //兑换位置
    required uint32 activity_id = 4;
}

message S2C_CustomActivity_Exchange {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 num = 3;
    optional uint32 index = 4;
    repeated out_base.Award awards = 5;
    optional out_base.CustomActivity activity = 6;
    required uint32 activity_id = 7;
}

message S2C_CustomActivity_SyncTask {
    required uint32 id = 1; //活动id
    required uint64 type = 2; //任务类型
    required uint64 value = 3; //任务状态
    optional bool is_special = 4; //是否特殊任务
}

message S2C_CustomActivity_UpdateInfo {
    repeated out_base.CustomActivityHideInfo updates = 1; //本次更新活动
    repeated uint32 deletes = 2; //本次删除活动
}

message C2S_CustomActivity_ReqInfo {
    repeated uint32 ids = 1;
}

message S2C_CustomActivity_ReqInfo {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
    repeated out_base.CustomActivityInfo shows = 3;
}

message C2S_CustomActivity_Collection{
    required uint32 id = 1; //任务id
    required uint32 index = 2; //奖励位置1-4
}

message S2C_CustomActivity_Collection {
    required uint32 ret = 1;
    required uint32 id = 2; //任务id
    required uint32 index = 3; //奖励位置1-4
    repeated out_base.Award awards = 4; //奖励
    optional out_base.CustomCollection collection = 5; //当前活动数据
}

message C2S_GetUserBattleTeam {
    repeated uint64 players = 1;  //玩家uid(最少1个最多4个)
}

message S2C_GetUserBattleTeam {
    required uint32 ret = 1;
    repeated bs.BattleTeam teams = 2;
}

message C2S_UpdateRandomPlayer {
}
message S2C_UpdateRandomPlayer {
    required uint32 ret = 1;
    repeated out_base.UserSnapshot random_players = 2;	// 随机玩家
}

message C2S_Proto_Test {
    optional uint64 uint_64 = 1;//一个符合uint64的值，值范围必须达到uint64
    optional uint64 non_uint_64 = 2;//一个使用uint64存储的值，但值范围没有达到uint64,此值是为了方便和上面比对
}

message S2C_Proto_Test {
    optional uint64 uint_64 = 1;//定义同C2S_PROTOBUF64_TEST
    optional uint64 non_uint_64 = 2;
}

//客户端记录的序列号信息
message C2S_SyncProto {
    optional uint64 client_id = 1;//客户端协议序列号
    optional uint64 server_id = 2;//服务器协议序列号
}

//服务器记录的序列号信息
message S2C_SyncProto {
    optional uint64 client_id = 1;
    optional uint64 server_id = 2;
}

// 战力竞赛-活动信息
message C2S_FightingCapacity_Info {
}
message S2C_FightingCapacity_Info {
    required uint32 ret = 1;
    optional uint64 fight_value = 2;	// 历史最高战力
    repeated uint32 ids = 3;	// 已领取过的战力奖励id
}

// 战力竞赛-领取战力奖励
message C2S_FightingCapacity_Award {
    optional uint32 id = 1;	// 配置表id
}
message S2C_FightingCapacity_Award {
    required uint32 ret = 1;
    optional uint32 id = 2;	// 配置表id
}

// 战力竞赛排行榜缓存(活动结束后才有数据)
message C2S_FightingCapacity_Rank {
}
message S2C_FightingCapacity_Rank {
    required uint32 ret = 1;
    repeated uint64 ids = 2;
    repeated uint64 fvs = 3;
}

//问卷信息
message C2S_Questionnaire_GetInfo {
}

message S2C_Questionnaire_GetInfo {
    required uint32 ret = 1;
    repeated out_base.QuestionnaireInfo infos = 2;
}

message S2C_Questionnaire_Notify {
}

// 礼包码奖励通知
message S2C_GiftNotify {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
}

// 防沉迷通知
message S2C_AntiAddictionNotify {
    required uint32 game_time = 1;
    required uint32 is_fcm    = 2;
    required uint32 is_adult  = 3;
    required uint32 is_warning = 4;
    required uint32 remaining_time = 5;
    required uint32 fcm_status = 6;
}

// 七日活动-信息
message C2S_Sevendays_Info {
    optional uint32 type = 1; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Info {
    required uint32 ret = 1;
    optional uint32 create_time = 2;	// 创角时间
    repeated out_base.SevendaysTask tasks = 3;	// 七日任务信息
    repeated uint32 fog_cleared = 4;	// 已清除迷雾的方格配置id
    repeated uint32 obstacle_broken = 5;	// 已破坏障碍的方格配置id
    repeated uint32 activated = 6;	// 已激活奖励或事件的方格配置id
    optional uint32 type = 7; //七日活动类型：1为七日活动，2为十四日活动
}

// 七日活动-登录任务领奖
message C2S_Sevendays_Login_Award {
    required uint32 id = 1;	// 任务配置id
    required uint32 type = 2; //暂时只有十四日活动的有登录任务，所以只传2
}
message S2C_Sevendays_Login_Award {
    required uint32 ret = 1;
    required uint32 id = 2;	// 任务配置id
    required uint32 type = 3;
}

// 七日活动-领奖
message C2S_Sevendays_Award {
    required uint32 id = 1;	// 任务配置id
    optional uint32 type = 2; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Award {
    required uint32 ret = 1;
    required uint32 id = 2;	// 任务配置id
    optional uint32 type = 3; //七日活动类型：1为七日活动，2为十四日活动
}

// 七日活动-清除迷雾
message C2S_Sevendays_Clear {
    repeated uint32 ids = 1;	// 方格的配置id
    optional uint32 type = 2; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Clear {
    required uint32 ret = 1;
    repeated uint32 ids = 2;	// 方格的配置id
    optional uint32 type = 3; //七日活动类型：1为七日活动，2为十四日活动
}

// 七日活动-破坏障碍
message C2S_Sevendays_Break {
    required uint32 id = 1;	// 方格的配置id
    optional uint32 type = 2; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Break {
    required uint32 ret = 1;
    required uint32 id = 2;	// 方格的配置id
    optional uint32 type = 3; //七日活动类型：1为七日活动，2为十四日活动
}

// 七日活动-激活事件/奖励
message C2S_Sevendays_Activate {
    required uint32 id = 1;	// 方格的配置id
    repeated uint32 break_ids = 2;	// 如果是事件1、2，填上需要破坏的方格配置id
    optional uint32 type = 3; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Activate {
    required uint32 ret = 1;
    required uint32 id = 2;	// 方格的配置id
    repeated uint32 break_ids = 3;	// 如果是事件1、2，填上需要破坏的方格配置id
    repeated out_base.Award awards = 4;
    optional uint32 type = 5; //七日活动类型：1为七日活动，2为十四日活动
}

message C2S_LevelUp_Info {
}

message S2C_LevelUp_Info {
    required uint32 ret = 1;
    repeated uint32 award = 2;
}

message C2S_LevelUp_Award {
    required uint32 id = 1;
}

message S2C_LevelUp_Award {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated out_base.Award awards = 3;
}

message C2S_Phone_Info {
}

message S2C_Phone_Info {
    required uint32 ret = 1;
    optional string phone_num = 2;
    optional uint32 next_award_time = 3;
}

message C2S_Phone_Bind {
    required string phone_num = 1;
}

message S2C_Phone_Bind {
    required uint32 ret = 1;
    optional string phone_num = 2;
}

message C2S_Phone_Award {
}

message S2C_Phone_Award {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    optional uint32 next_award_time = 3;
}

// 抽将返利-信息
message C2S_RecruitRebate_Info {
}
message S2C_RecruitRebate_Info {
    required uint32 ret = 1;
    optional uint32 recruit_count = 2;	// 已抽将次数
    repeated uint32 ids = 3;	// 已领取奖励id
}

// 抽将返利-领奖
message C2S_RecruitRebate_Award {
    required uint32 id = 1;	// 领取的配置id
}
message S2C_RecruitRebate_Award {
    required uint32 ret = 1;
    required uint32 id = 2;	// 领取的配置id
}

//军团竞赛
message C2S_GuildCompetition_GetInfo {
}

message S2C_GuildCompetition_GetInfo {
    required uint32 ret = 1;
    repeated out_base.Task guild_tasks = 2; //军团任务状态
    repeated out_base.Task personal_tasks = 3; //个人任务状态
    repeated uint32 awarded_tasks = 4; //已领取任务id
}

message C2S_GuildCompetition_GetAward {
    required uint32 id = 1; //任务id
}

message S2C_GuildCompetition_GetAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3; //本次获得奖励
    repeated uint32 awarded_tasks = 4; //已领取任务id
}

message S2C_GuildCompetition_SyncTask {
    required out_base.Task task = 1;
}

// 登录送礼-信息
message C2S_LoginReward_Info {
}
message S2C_LoginReward_Info {
    required uint32 ret = 1;
    optional uint32 days = 2;	// 累计登录天数
    repeated uint32 ids = 3;	// 已领取奖励id
    optional uint32 last_ts = 4;	// 上次成功领奖的时间戳
}

// 登录送礼-领奖
message C2S_LoginReward_Award {
    required uint32 id = 1;	// 领取的配置id
}
message S2C_LoginReward_Award {
    required uint32 ret = 1;
    required uint32 id = 2;	// 领取的配置id
}

//铸神像-信息
message C2S_GuildStatue_GetInfo {
}

message S2C_GuildStatue_GetInfo {
    required uint32 ret = 1;
    optional out_base.GuildStatue statue = 2;
    repeated uint32 awarded_stage = 3; //各个部件进度奖励标记
    optional uint32 stone_used = 4; //今日已使用
    repeated out_base.GuildStatueContribute contributes = 5; //成员铸造贡献
    optional uint32 total_progress = 6; //当前神像铸造进度
}

message C2S_GuildStatue_DoCast {
    required uint32 type = 1; //铸造部位
    required uint32 value = 2; //增加进度值
    required uint32 stone = 3; //铸造石
}

message S2C_GuildStatue_DoCast {
    required uint32 ret = 1;
    required uint32 type = 2;
    required uint32 value = 3;
    required uint32 stone = 4;
    repeated out_base.Award awards = 5; //铸造奖励
    optional out_base.GuildStatue statue = 6; //神像详情
    optional bool upgrade = 7; //是否升级
    optional uint32 stone_used = 8; //今日已使用
}

message C2S_GuildStatue_GetStageAward {
    required uint32 type = 1;
}

message S2C_GuildStatue_GetStageAward {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated out_base.Award awards = 3; //本次进度奖励
    repeated uint32 awarded_stage = 4; //各个部件进度奖励标记
}

message C2S_GuildStatue_GetFinalAward {
    required uint32 pos = 1;
}

message S2C_GuildStatue_GetFinalAward {
    required uint32 ret = 1;
    required uint32 pos = 2;
    repeated out_base.Award awards = 3; //宝箱奖励
    optional uint32 award_id = 4; //宝箱id
}

message S2C_GuildStatue_Push {
    required string name = 1; //玩家名字
    required uint32 base_id = 2;//配置id
    required uint32 type = 3; //铸造部位
    required uint32 value = 4; //增加进度值
    optional bool upgrade = 5; //是否升级
}

message C2S_GuildStatue_OneKeyStageAward {
}

message S2C_GuildStatue_OneKeyStageAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2; //本次进度奖励
    repeated uint32 awarded_stage = 3; //各个部件进度奖励标记
}

// 功能引导-信息
message C2S_GuideTask_Info {
}
message S2C_GuideTask_Info {
    required uint32 ret = 1;
    repeated out_base.Task tasks = 2;
    repeated uint32 ids = 3;	// 已领取奖励id
}

// 功能引导-领奖
message C2S_GuideTask_Award {
    required uint32 id = 1;	// 领取的配置id
}
message S2C_GuideTask_Award {
    required uint32 ret = 1;
    required uint32 id = 2;	// 领取的配置id
}

// 变装-穿戴
message C2S_Skin_Wear {
    required uint32 book_id = 1;//变装book id
}

message S2C_Skin_Wear {
    required uint32 ret = 1;
    optional uint32 book_id = 2;
}

// 变装-脱卸
message C2S_Skin_TakeOff {
    optional uint32 advance_id = 1;	//武将进阶id
}

message S2C_Skin_TakeOff {
    required uint32 ret = 1;
    optional uint32 advance_id = 2;
}

message C2S_Skin_Expire_Ntf{
    required uint32 book_id = 1;
}

message S2C_Skin_Expire_Ntf {
    required uint32 ret = 1;
    optional uint32 book_id = 2;
}


message C2S_Collect_GetInfo {
}

message S2C_Collect_GetInfo {
    required uint32 ret = 1;
    repeated out_base.CollectRecord records = 2; //已收集的武将或兵符
    repeated uint32 awarded_id = 3; //已领取的奖励id
}

message C2S_Collect_GetAward {
    required uint32 id = 1; //任务id
}

message S2C_Collect_GetAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
    repeated uint32 awarded_id = 4;
}

//请求分享信息
message C2S_GetChatShare {
    required uint32 share_type = 1;
    optional uint64 own_id = 2;
    optional uint64 id = 3;
}

message S2C_GetChatShare {
    required uint32 ret = 1;
    optional ChatShare share_info = 3;
}

//头像框激活信息
message C2S_FrameInfo {
}
message S2C_FrameInfo {
    required uint32 ret = 1;
    repeated uint32 ids = 2;	// 已激活的永久头像框
    repeated out_base.LimitFrameInfo frames = 3;  // 已激活的限时头像框
}

//领取礼包码
message C2S_GiftCode {
    required string code = 1;
}

message S2C_GiftCode {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
}

//新领取礼包码
message C2S_New_GiftCode {
    required string code = 1;
}

message S2C_New_GiftCode {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    optional uint32 code_type = 3;
}

//领取首充阶段奖励
message C2S_Recharge_GetFirstRechargeAward {
    required uint32 id = 1; //阶段id
}

message S2C_Recharge_GetFirstRechargeAward {
    required uint32 id = 1; //阶段id
    required uint32 ret = 2;
    repeated out_base.Award awards = 3;
}

//领取基金奖励
message C2S_Recharge_GetFundRechargeAward {
    required uint32 activity_id = 1;
    required uint32 id = 2;          //基金id
}

message S2C_Recharge_GetFundRechargeAward {
    required uint32 activity_id = 1;
    required uint32 id = 2;          //基金id
    required uint32 ret = 3;
    repeated out_base.Award awards = 4;
}

message S2C_Recharge_FundBuyNotify {
    required uint32 activity_id = 1;
    required uint32 num = 2;
}

//统一处理充值相关的数据
message S2C_Recharge_OpRecharge {
    optional out_base.OpMonthCard month_card = 1;
    optional out_base.OpFirstRecharge first_recharge = 2;
    optional out_base.OpFundRecharge fund_recharge = 3;
    optional out_base.OpDayRecharge day_recharge = 4;
    optional out_base.OpSubRecharge sub_recharge = 5;
    optional out_base.OpTotalRecharge total_recharge = 6;
    optional out_base.OpOpenPurchase open_purchase = 7;
    optional out_base.OpDayBox day_box = 8;
    optional out_base.OpMonthFund month_fund = 9;
    optional out_base.OpNewTotalRecharge new_total_recharge = 10;
    optional out_base.OpWeekGift week_gift = 11;
    optional out_base.OpYoungStore young_store = 12;
}

//获取基金
message C2S_Recharge_GetFundRecharge {
}

message S2C_Recharge_GetFundRecharge {
    required uint32 ret = 1;
    repeated out_base.FundRecharge fund_recharge = 2;
    optional uint32 dead_battle = 3; //无双历史最高层数
}

//领取天天充值奖励
message C2S_Recharge_GetDayRechargeAward {
    required uint32 activity_id = 1;
    required uint32 id = 2;
    optional uint32 choose = 3;
}

message S2C_Recharge_GetDayRechargeAward {
    required uint32 activity_id = 1;
    required uint32 id = 2;
    required uint32 ret = 3;
    repeated out_base.Award awards = 4;
}

//天天充值信息
message C2S_Recharge_GetDayRechargeInfo {
}

message S2C_Recharge_GetDayRechargeInfo {
    required uint32 ret = 1;
    repeated out_base.DayRecharge recharges = 2;//已参与的活动数据
}

//攻城略地
// 攻城略地-信息
message C2S_Storm_Info {
}
message S2C_Storm_Info {
    required uint32 ret = 1;
    repeated uint32 finish_storm_ids = 2;	// 已通关关隘ID(已领取通关奖励)
    optional uint32 total_progress = 3;	// 总进度
    repeated uint32 clear_storm_ids = 4;	// 今日已扫荡关隘ID
    repeated out_base.StormCityUnit units = 5; // 城主信息
    optional uint32 current_city = 6; //当前所在城池
    optional uint32 current_rank = 7; //当前排名
    repeated uint32 storm_ids = 8; // 关隘id列表
    repeated uint32 max_order = 9; // 关隘id列表对应的最大配置表order数
}

// 攻城略地-关隘信息
message C2S_Storm_StormInfo {
    required uint32 storm_id = 1;	// 关隘ID
}
message S2C_Storm_StormInfo {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    repeated out_base.StormEvent events = 3;	// 地图事件
}

// 攻城略地-挑战怪物/玩家事件(类型1/5)
message C2S_Storm_ChallengeBegin {
    required uint32 storm_id = 1;	// 关隘ID
    required uint32 cell_id = 2;	// 事件ID
}
message S2C_Storm_ChallengeBegin {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    required uint32 cell_id = 3;	// 事件ID
    optional uint64 battle_id = 4;	// 战斗id
}
message S2C_Storm_ChallengeFinish {
    required uint32 ret = 1;
    optional bool is_win = 2;	// 是否胜利
    repeated uint64 hp = 3;	// 战斗结束后剩余血量
    required uint32 storm_id = 4;	// 关隘ID
    required uint32 cell_id = 5;	// 事件ID
    repeated out_base.Award awards = 6;// 挑战奖励
}

// 攻城略地-领取宝箱事件(类型2/6)
message C2S_Storm_Award {
    required uint32 storm_id = 1;	// 关隘ID
    required uint32 cell_id = 2;	// 事件ID
}
message S2C_Storm_Award {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    required uint32 cell_id = 3;	// 事件ID
    repeated out_base.Award awards = 4;// 奖励
}

// 攻城略地-清除障碍事件(类型3)
message C2S_Storm_Break {
    required uint32 storm_id = 1;	// 关隘ID
    required uint32 cell_id = 2;	// 事件ID
}
message S2C_Storm_Break {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    required uint32 cell_id = 3;	// 事件ID
}

// 攻城略地-重置并扫荡
message C2S_Storm_Clear {
    required uint32 storm_id = 1;	// 关隘ID
}
message S2C_Storm_Clear {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    repeated out_base.Award awards = 3; // 其它奖励
    repeated out_base.Awards challenge_awards = 4;// 挑战类奖励
    repeated uint64 scores = 5;
}

// 攻城略地-重置
message C2S_Storm_Reset {
    required uint32 storm_id = 1;	// 关隘ID
}
message S2C_Storm_Reset {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    repeated out_base.StormEvent events = 3;	// 地图事件
}

// 攻城略地-更新事件敌人
message C2S_Storm_GetEnemy {
    required uint32 storm_id = 1;	// 关隘ID
    repeated uint32 cell_ids = 2;	// 需要拉取的事件cell id, 只能是StormEvent.enemy为空的事件id, 建议一次只拉取当前屏幕显示的玩家
}
message S2C_Storm_GetEnemy {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    repeated uint32 cell_ids = 3;	// 实际更新成功的事件ID
    repeated out_base.StormEvent events = 4;	// 实际更新成功的事件
}

// 攻城略地-通关关隘
message S2C_Storm_NotifyFinishStorm {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    repeated out_base.Award awards = 3;	// 通关奖励
}

// 攻城略地-获取事件对应的BattleUser结构
message C2S_Storm_GetBattleUser {
    required uint32 storm_id = 1;	// 关隘ID
    required uint32 cell_id = 2;	// 需要拉取的事件cell id
}
message S2C_Storm_GetBattleUser {
    required uint32 ret = 1;
    required uint32 storm_id = 2;	// 关隘ID
    required uint32 cell_id = 3;	// 需要拉取的事件cell id
    optional out_base.BattleUser battle_user = 4;
}

message C2S_Recharge_GetTotalRechargeAward {
    required uint32 id = 1;
}

message S2C_Recharge_GetTotalRechargeAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
}


//技能树升级
message C2S_Storm_SkillLvUp {
    required uint32 id = 1;
    required uint32 tg_lv = 2;
}

message S2C_Storm_SkillLvUp {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 tg_lv = 3;
}

//技能书手动重置
message C2S_Storm_SkillReset {
}

message S2C_Storm_SkillReset {
    required uint32 ret = 1;
}

//获取技能树信息
message C2S_Storm_GetSkillInfo {
}

message S2C_Storm_GetSkillInfo {
    required uint32 ret = 1;
    optional out_base.StormSkill storm_skill = 2;
}

//图鉴竞赛
message C2S_KnightBook_GetInfo {
}

message S2C_KnightBook_GetInfo {
    required uint32 ret = 1;
    repeated out_base.Task personal_tasks = 2; //个人任务状态
    repeated uint32 awarded_tasks = 3; //已领取任务id
}

message C2S_KnightBook_GetAward {
    required uint32 id = 1; //任务id
}

message S2C_KnightBook_GetAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3; //本次获得奖励
    repeated uint32 awarded_tasks = 4; //已领取任务id
}

message S2C_KnightBook_SyncTask {
    required out_base.Task task = 1;
}

//领取限时商人奖励
message C2S_Recharge_GetOpenPurchaseAward {
    required uint32 activity_id = 1;
    required uint32 id = 2;
}

message S2C_Recharge_GetOpenPurchaseAward {
    required uint32 activity_id = 1;
    required uint32 id = 2;
    required uint32 ret = 3;
    repeated out_base.Award awards = 4;
}

//限时商人信息
message C2S_Recharge_GetOpenPurchaseInfo {
}

message S2C_Recharge_GetOpenPurchaseInfo {
    required uint32 ret = 1;
    repeated out_base.OpenPurchase recharges = 2;//已参与的活动数据
}

//限时神将
message C2S_Recruit_RecruitKnight {
    required uint32 activity_id = 1;   //活动id
    required uint32 id = 2;            //抽卡配置id
    required uint32 draw_type = 3;     //区分免费抽，单抽，十连 0：免费 1；单抽 2：十连
    required uint32 sub_type = 4;      //抽卡类型
}

message S2C_Recruit_RecruitKnight {
    required uint32 activity_id = 1;   //活动id
    required uint32 id = 2;            //抽卡配置id
    required uint32 draw_type = 3;     //区分免费抽，单抽，十连 0：免费 1；单抽 2：十连
    required uint32 sub_type = 4;      //抽卡类型
    required uint32 ret = 5;
    repeated out_base.Award awards = 6;
}

message C2S_Recruit_GetRecruitKnightInfo {
    required uint32 activity_id = 1; // 活动id
}

message S2C_Recruit_GetRecruitKnightInfo {
    repeated out_base.RecruitKnight recruit_knight = 1;
    repeated out_base.ActivityCommonRecord records = 2; //本服抽卡记录
}

message C2S_Recruit_GetRecruitKnightAward {
    required uint32 activity_id = 1;   //活动id
    required uint32 id = 2;
}

message S2C_Recruit_GetRecruitKnightAward {
    required uint32 activity_id = 1;   //活动id
    required uint32 id = 2;
    required uint32 ret = 3;
    repeated out_base.Award awards = 4;
}

message S2C_Recruit_NotifyRank {
    required uint32 activity_id = 1;
    required uint64 score = 2;
    required uint32 time = 3;
    required out_base.UserSnapshot user = 4;
    required uint32 sub_type = 5;
}

//攻城掠地-城主抢夺
message C2S_StormCity_Info {
    required uint32 city= 1; //城池id
}

message S2C_StormCity_Info {
    required uint32 ret = 1;
    required uint32 city= 2; //城池id
    optional uint32 rank = 3; //自己排名
    optional uint32 lord_awarded = 4; //官职奖励领取时间
    repeated out_base.StormCityUnit units = 5; //匹配到的对手(包括前七名)
    optional uint32 preRank = 6; //之前排名
    optional uint32 current_city = 7; //当前所在城池
    optional uint32 current_rank = 8; //当前所在城池排名
}

message C2S_StormCity_ChallengeBegin {
    required uint32 city= 1; //城池id
    required uint32 rank = 2; //挑战的排名
}

message S2C_StormCity_ChallengeBegin {
    required uint32 ret = 1;
    required uint32 city = 2; //城池id
    required uint32 rank = 3; //挑战排名
    optional uint64 battle_id = 4; //本场战斗的id
}

message S2C_StormCity_ChallengeFinish {
    required uint32 ret = 1;
    required uint32 city = 2; //城池id
    required uint32 rank = 3; //挑战排名
    optional uint32 pre_rank = 4; //挑战奖励
    optional bool is_win = 5; //是否胜利
    repeated out_base.StormCityUnit units = 6; //挑战胜利时重新匹配的对手
    optional bs.BattleResult result = 7; //战斗结果
    optional out_base.StormCityUnit enemy = 8; //对手信息
}

message C2S_StormCity_GetLordAward {
}

message S2C_StormCity_GetLordAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2; //每日官职奖励
}

message C2S_StormCity_GetRanklist {
    required uint32 city = 1;
    required uint32 index = 2; // 1:1-25, 2:26-50 3:51-75 4:76-100
    required uint32 rank_tp = 3; // 1:50个包含机器人 2:50个不包含机器人
}

message S2C_StormCity_GetRanklist {
    required uint32 ret = 1;
    required uint32 city = 2;
    required uint32 index = 3;
    required uint32 rank_tp = 4;
    optional uint32 own_city = 5;
    optional uint32 own_rank = 6;
    repeated out_base.StormCityUnit units = 7; //挑战胜利时重新匹配的对手
}

message C2S_ReturnPay_GetInfo {
}

message S2C_ReturnPay_GetInfo {
    required uint32 ret = 1;
    required bool is_open = 2; // 是否开启
    optional uint64 gold_num = 3; // 元宝数量
    optional uint64 vip_exp_num = 4; // vip经验数量
    optional string desc = 5; // 活动介绍
    repeated out_base.Award awards = 6; // 奖励
}

message C2S_ReturnPay_GetAward {
}

message S2C_ReturnPay_GetAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2; // 奖励
}

message C2S_OnlineGift_GetInfo {
}

message S2C_OnlineGift_GetInfo {
    required uint32 ret = 1;
    optional uint32 online_time = 2; // 在线时间
    repeated out_base.KV reward_record = 3; // 领奖记录
}

message C2S_OnlineGift_GetAward {
    required uint32 order = 1; // 顺序
}

message S2C_OnlineGift_GetAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2; // 奖励
    repeated out_base.KV reward_record = 3; // 领奖记录
}

//领取每日直冲奖励
message C2S_Recharge_GetDayBoxAward {
    required uint32 activity_id = 1;
    required uint32 id = 2;
}

message S2C_Recharge_GetDayBoxAward {
    required uint32 activity_id = 1;
    required uint32 id = 2;
    required uint32 ret = 3;
    repeated out_base.Award awards = 4;
}

message C2S_Recharge_GetDayBoxInfo {
}

message S2C_Recharge_GetDayBoxInfo {
    required uint32 ret = 1;
    repeated out_base.DayBox recharges = 2;//已参与的活动数据
}

message C2S_Artifact_LevelUp {
    required uint64 id = 1;
    required uint32 tg_lv = 2;
}

message S2C_Artifact_LevelUp {
    required uint64 id = 1;
    required uint32 tg_lv = 2;
    required uint32 ret = 3;
}

message C2S_Artifact_Star {
    required uint64 id = 1;
    required uint32 tg_star = 2;
}

message S2C_Artifact_Star {
    required uint64 id = 1;
    required uint32 tg_star = 2;
    required uint32 ret = 3;
}

message C2S_Artifact_Draw {
    required uint32 draw_type = 1; //0表示免费，1表示单抽，2表示十抽
}

message S2C_Artifact_Draw {
    required uint32 draw_type = 1;
    repeated out_base.Award awards = 2;
    repeated uint32 indexs = 3;
    repeated uint32 award_indexs = 4;
    optional uint32 score = 5;
    required uint32 ret = 6;
    optional uint32 daily_num = 7; //每日抽取次数
}

message C2S_Artifact_GetDraw {
}

message S2C_Artifact_GetDraw {
    required uint32 ret = 1;
    optional out_base.ArtifactRecruit artifact_recruit = 2;
}

message C2S_Artifact_DrawRefresh {
}

message S2C_Artifact_DrawRefresh {
    required uint32 ret = 1;
    optional uint32 id = 2;   //刷新配置id
}

message C2S_Artifact_DrawAward {
}

message S2C_Artifact_DrawAward {
    required uint32 ret = 1;
    optional uint32 score = 2;    //剩余积分
    repeated out_base.Award awards = 3;
}

message C2S_Artifact_GetContinuePurify {
}

message S2C_Artifact_GetContinuePurify {
	required uint32 ret = 1;		//结果提示
	required uint32 qualify = 2;	//品质选项
	required bool more_score = 3;	//洗炼评分；true:更高评分，停止；false:不停止
	required uint32 qualify_num = 4;//洗炼品质数量高于当前数量
}

message C2S_Artifact_SetContinuePurify {
	required uint32 qualify = 1;	//品质选项
	required bool more_score = 2;	//洗炼评分；true:更高评分，停止；false:不停止
	required uint32 qualify_num = 3;//洗炼品质数量高于当前数量
}

message S2C_Artifact_SetContinuePurify {
	required uint32 ret = 1;		//结果提示
	required uint32 qualify = 2;	//品质选项
	required bool more_score = 3;	//洗炼评分；true:更高评分，停止；false:不停止
	required uint32 qualify_num = 4;//洗炼品质数量高于当前数量
}

message C2S_Artifact_PurifyHoleLock{
	required uint64 id = 1;			//神兵id
	required uint32 hole_id = 2;	//孔位id
	required bool lock_op = 3;		//true:加锁，false:解锁
}

message S2C_Artifact_PurifyHoleLock{
	required uint32 ret = 1;	//结果提示
	required uint64 id = 2;		//神兵id
	required uint32 hole_id = 3;	//孔位id
	required bool lock_op = 4;		//true:加锁，false:解锁
}

message C2S_Artifact_Purify{
	required uint64 id = 1;		//神兵id
}

message S2C_Artifact_Purify{
	required uint32 ret = 1;	//结果提示
	required uint64 id = 2;		//神兵id
}

message C2S_Artifact_SpecialPurify{
	required uint64 id = 1;		//神兵id
	required uint32 purify_type = 2;//洗炼方式
}

message S2C_Artifact_SpecialPurify{
	required uint32 ret = 1;	//结果提示
	required uint64 id = 2;		//神兵id
	required uint32 purify_type = 3;//洗炼方式
}

message C2S_Artifact_PurifyResultConfirm{
	required uint64 id = 1;		//神兵id
	required int32 hole_id = 2;//-1:保存孔位全部；>0：保存某个孔位的中间属性
}

message S2C_Artifact_PurifyResultConfirm{
	required uint32 ret = 1;	//结果提示
	required uint64 id = 2;		//神兵id
	required int32 hole_id = 3;//0:保存孔位全部；>0：保存某个孔位的中间属性
}

message C2S_Artifact_PurifyResultCancle{
	required uint64 id = 1;		//神兵id
	required int32 hole_id = 2;//-1:取消孔位全部；>0：取消某个孔位的中间属性
}

message S2C_Artifact_PurifyResultCancle{
	required uint32 ret = 1;	//结果提示
	required uint64 id = 2;		//神兵id
	required int32 hole_id = 3;//-1:取消孔位全部；>0：取消某个孔位的中间属性
}

message C2S_Artifact_SpecialPurifySelect{
	required uint64 id = 1;	//神兵id
	required uint32 hole_id = 2;	//孔位id
}

message S2C_Artifact_SpecialPurifySelect{
	required uint32 ret = 1;	//结果提示
	required uint64 id = 2;	//神兵id
	required uint32 hole_id = 3;	//孔位id
}

message C2S_Auction_GetInfo {
}

message S2C_Auction_GetInfo {
    required uint32 ret = 1;
    repeated out_base.Auction auctions = 2; // 拍卖数据
}

message C2S_Auction_BidPrice {
    required uint64 act_id = 1; // 拍卖活动ID
    required uint64 goods_id = 2; // 货物ID
    required bool is_bid_price = 3; // 是否是普通竞价
    required uint32 prepare_cost_amount = 4; // 预计花费元宝
}

message S2C_Auction_BidPrice {
    required uint32 ret = 1;
    optional out_base.AuctionGoods goods = 2;
    optional bool is_one_mouth_price = 3;
    optional uint64 act_id = 4;
    optional uint64 goods_id = 5;
    optional bool is_bid_price = 6;
    optional uint32 prepare_cost_amount = 7;
}

message C2S_Auction_GetRecord {
    required uint64 act_id = 1; // 拍卖活动ID
}

message S2C_Auction_GetRecord {
    required uint32 ret = 1;
    repeated out_base.AuctionRecord records = 2; // 竞拍记录
    optional uint64 act_id = 3;
}

message C2S_Auction_ClickTab {
    required uint64 act_id = 1; // 拍卖活动ID
    optional uint32 tab = 2; // 竞拍tab
}

message S2C_Auction_ClickTab {
    required uint32 ret = 1;
    optional out_base.Auction auction = 2; // 拍卖
    optional uint64 act_id = 3;
    optional uint32 tab = 4;
}

message C2S_Auction_Quit {
}

message S2C_Auction_Quit {
    required uint32 ret = 1;
}

message S2C_Auction_GoodsNotify {
    required out_base.AuctionGoods goods = 1; // 竞拍货物数据
    required bool is_one_mouth_price = 2;
}

message S2C_Auction_CreateNotify {
    required uint64 act_id = 1;
    required uint32 auction_id = 2;
}

//获取金装活动数据
message C2S_GoldEquip_GetInfo {
    required uint32 activity_id = 1;
}

message S2C_GoldEquip_GetInfo {
    required uint32 ret = 1;
    optional out_base.RecruitEquip recruit_equip = 2;
}

message C2S_GoldEquip_Draw {
    required uint32 activity_id = 1;
    required uint32 type = 2;//1表示单抽，2表示十抽
}

//金装活动抽卡
message S2C_GoldEquip_Draw {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    required uint32 type = 3;
    optional uint32 times = 4;
    repeated out_base.Award awards = 5;
}

//获取任务奖励
message C2S_GoldEquip_TaskAward {
    required uint32 activity_id = 1; //活动id
    required uint32 task_id = 2; //任务id
}

message S2C_GoldEquip_TaskAward {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    required uint32 task_id = 3;
    repeated out_base.Award awards = 4;
}

//同步变化的任务数据
message S2C_GoldEquip_SyncTask {
    required uint32 activity_id = 1;
    optional out_base.RecruitEquipTask task = 2;
}

//广播抽取的信息
message S2C_GoldEquip_BroadcastDrawInfo {
    required uint32 activity_id = 1;
    optional out_base.RecruitEquipHistory history = 2;
}

//获取条件类活动信息
message C2S_Condition_GetInfo {
    required uint32 activity_value = 1;   //活动关联id, 若为0，则获取所有条件类活动信息
}

message S2C_Condition_GetInfo {
    required uint32 ret = 1;
    repeated out_base.ConditionAct condition_act = 2; //活动信息
    optional uint32 activity_value = 3;
}

//获取任务奖励
message C2S_Condition_TaskAward {
    required uint32 activity_value = 1;   //活动关联id
    required uint32 task_id = 2; //任务id
}

message S2C_Condition_TaskAward {
    required uint32 ret = 1;
    required uint32 task_id = 2; //任务id
    required uint32 activity_value = 3;   //活动关联id
    repeated out_base.Award awards = 4;
}

//同步变化的任务数据
message S2C_Condition_SyncTask {
    required uint32 activity_value = 1;
    required uint32 value = 2;    //进度
    repeated uint32 finish_awards = 3; //已领奖任务task_id
}


// 获取活动通用任务
message C2S_Activity_Common_Task_Get {
    required uint32 activity_type = 1; // 任务类型
    required uint32 activity_id = 2; //任务id
}

message S2C_Activity_Common_Task_Get {
    required uint32 ret = 1;
    required uint32 activity_id = 2;           //活动id
    required uint32 activity_type = 3;         //活动类型
    repeated out_base.ActivityCommonTask taskList = 4; // 任务
}

// 更新活动通用任务
message S2C_Activity_Common_Task_Update {
    required uint32 activity_type = 1; // 任务类型
    required uint32 activity_id = 2; //任务id
    repeated out_base.ActivityCommonTask taskList = 3; // 任务
}

// 领取活动通用任务奖励
message C2S_Activity_Common_Task_Award {
    required uint32 activity_id = 1; //活动id
    required uint32 activity_type = 2; //活动type
    required uint32 task_id = 3; //任务id
    optional uint32 task_times = 4; // 领奖次数
}

message S2C_Activity_Common_Task_Award {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    required uint32 activity_type = 3; //活动type
    required uint32 task_id = 4;
    repeated out_base.Award awards = 5;
}

// 广播活动通用记录
message S2C_Activity_Common_Record_Broadcast {
    required uint32 activity_id = 1;
    required uint32 activity_type = 2;
    optional out_base.ActivityCommonRecord record = 3;
}

// 获取活动通用记录
message C2S_Activity_Common_Record_Get {
    required uint32 activity_id = 1;
    required uint32 activity_type = 2;
}

message S2C_Activity_Common_Record_Get {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    required uint32 activity_type = 3;
    repeated out_base.ActivityCommonRecord records = 4;
}

// 通用活动抽卡
message C2S_Activity_Common_Draw {
    required uint32 activity_id = 1;
    required uint32 activity_type = 2;
    required uint32 type = 3;//1表示单抽，2表示十抽
}


message S2C_Activity_Common_Draw {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    required uint32 activity_type = 3;
    required uint32 type = 4;
    optional uint32 times = 5;
    repeated out_base.Award awards = 6;
}

//玩法滲透率
message C2S_IconClick {
    required uint32 icon_id = 1;
}
//玩法滲透率
message S2C_IconClick {
    required uint32 ret = 1;
}

//刷新服务器最新资源信息
message C2S_RfreshResource {
    required uint64 id = 1;
}
//刷新服务器最新资源信息
message S2C_RfreshResource {
    required uint32 ret = 1;
    optional out_base.Resource resources = 2;
}

//获取信息
message C2S_RpRain_Info {
}
message S2C_RpRain_Info {
    required uint32 ret = 1;
    repeated out_base.RpRainFish fishes = 2;	//上次锦鲤, 20点后就是本次锦鲤
    repeated out_base.RpRainMessage messages = 3;	// 动态 弹幕
    optional out_base.RedPacketInfo redPacketInfo = 4;	// 领取红包信息
    optional uint32 end_time = 5;	// 活动结束时间
    optional uint32 activity_id = 6;	// 活动id
    optional uint32 days = 7;	// 当前活动天数
}

//领取红包
message C2S_RpRain_AwardRedpacket {
}
message S2C_RpRain_AwardRedpacket {
    required uint32 ret = 1;
    optional out_base.RedPacketInfo info = 2;	// 领取红包信息
}

//领取锦鲤
message C2S_RpRain_AwardFish {
}
message S2C_RpRain_AwardFish {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
}

// 渠道公测返利获取信息
message C2S_ReturnPayOperator_GetInfo {
}

message S2C_ReturnPayOperator_GetInfo {
    required uint32 ret = 1;
    required uint32 status = 2; // 状态（0:未开启，1：未领奖，2：已领奖）
    optional uint64 gold_num = 3; // 元宝数量
    optional uint64 vip_exp_num = 4; // vip经验数量
    repeated out_base.Award awards = 5; // 奖励
}

// 渠道公测返利领奖
message C2S_ReturnPayOperator_GetAward {
}

message S2C_ReturnPayOperator_GetAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2; // 奖励
}

//获取分享信息
message C2S_WeChat_Share_Get {}

message S2C_WeChat_Share_Get {
    repeated out_base.WeChatShare shares = 1;
}

message C2S_WeChat_Share {
    required uint32 id = 1; //对应share_info表的id
}

message S2C_WeChat_Share {
    required uint32 ret = 1;
    required uint32 id = 2; //对应share_info表的id
    optional uint32 last_share_time = 3; //领奖时间
    repeated out_base.Award awards = 4;
}

//请求风物志信息
message C2S_Reel_Get {
}

message S2C_Reel_Get {
    repeated uint32 ids = 1; //已激活的id对应reel_info表的id
}

//请求激活风物志
message C2S_Reel_Active {
    required uint32 id = 1; //对应reel_info表的id
}

message S2C_Reel_Active {
    required uint32 ret = 1;
    required uint32 id = 2;
}

message S2C_FlushCardCompose {
    repeated out_base.CardCompose   card_compose = 1;
}

message S2C_FlushCard {
    repeated out_base.Card cards = 1;
}
//请求聊天框和气泡信息
message C2S_TalkShow_Get {
}

message S2C_TalkShow_Get {
    optional uint32 id = 1; //正在使用的聊天气泡框，对应配置表里的group字段，客户端需检测是否过期
    repeated out_base.TalkShow shows = 2;
}

//同步解锁的头像和气泡(等级，vip提升和道具激活时会下发)
message S2C_TalkShow_Active {
    repeated out_base.TalkShow shows = 1;
}

// 化身卡激活
message C2S_Card_Activate {
    required uint32 id = 1;//化身卡 id
}

message S2C_Card_Activate {
    required uint32 ret = 1;
    required uint32 id = 2;//化身卡 id
}

enum eOpCardMagically {
    eOpCardMagically_Wear = 1; // 化身穿
    eOpCardMagically_unWear = 2; // 化身脱
}

enum CodeActType {
  ACT_TYPE_NONE = 0; //无活动类型
  ACT_TYPE_PRE_DRAW = 1; //预抽卡
}

// 化身卡幻化
message C2S_Card_Magically {
    required uint32 id = 1;//化身卡 id
    required uint32 op = 2;//1---穿，2---脱 eOpCardMagically
}

message S2C_Card_Magically {
    required uint32 ret = 1;
    required uint32 id = 2;//化身卡 id
    required uint32 op = 3;//1---穿，2---脱 eOpCardMagically
}

// 化身卡組合激活
message C2S_Card_Compose {
    required uint32 id = 1;//化身組合 id
}

message S2C_Card_Compose {
    required uint32 ret = 1;
    required uint32 id = 2;//化身組合 id
}

message C2S_WishShop_GetInfo {
}

message S2C_WishShop_GetInfo {
    required uint32 ret = 1;
    optional bool daily_wish_is_award = 2; // 每日心愿是否领奖
    optional uint32 daily_wish_level = 3; // 每日心愿刷新等级
    repeated uint64 daily_wish_index = 4; // 每日心愿选择奖励
    repeated out_base.Task tasks = 5; // 心愿任务进度数据
    repeated uint64 task_awards = 6; // 心愿任务领奖情况
    repeated out_base.KV gift_buy_times = 7; // 心愿礼包购买次数
    repeated out_base.KV gift_award_times = 8; // 心愿礼包领奖次数
    repeated out_base.KV task_start_time = 9; // 任务开始时间
}

message C2S_WishShop_DailyWishAward {
    required uint32 wish_id = 1; // 每日心愿ID（和策划确认过了，如果一个玩家满足多条数据，取ID最大的那条）
}

message S2C_WishShop_DailyWishAward {
    required uint32 ret = 1;
    required uint32 wish_id = 2;
    repeated out_base.Award awards = 3; // 奖励
}

message C2S_WishShop_TaskAward {
    required uint32 task_id = 1; // 任务ID
}

message S2C_WishShop_TaskAward {
    required uint32 ret = 1;
    required uint32 task_id = 2;
    optional uint64 progress = 3; // 进度
    repeated uint64 task_awards = 4; // 领奖情况
    repeated out_base.Award awards = 5;// 奖励
}

message C2S_WishShop_GiftAward {
    required uint32 gift_id = 1; // 礼包Id
}

message S2C_WishShop_GiftAward {
    required uint32 ret = 1;
    required uint32 gift_id = 2;
    optional uint64 buy_times = 3;
    optional uint64 award_times = 4;
    repeated out_base.Award awards = 5;
}

message S2C_WishShop_GiftBuyNotify {
    required uint32 gift_id = 1;
    optional uint64 buy_times = 2; // 购买次数
    optional uint64 award_times = 3; // 领奖次数
}

message S2C_WishShop_TaskNotify {
    required uint32 task_id = 1;
    optional uint64 progress = 2;
    repeated uint64 task_awards = 3;
}

message C2S_Holiday_Drop_Info {
    required uint32 sub_activity_id = 1; //关联活动id
}

message S2C_Holiday_Drop_Info {
    required uint32 ret = 1;
    required uint32 sub_activity_id = 2;
    repeated out_base.ExtraDropData data = 3;
}

message C2S_WishShop_DailyWishChoseAward {
    required uint64 index = 1;
    required bool is_chose = 2;
}

message S2C_WishShop_DailyWishChoseAward {
    required uint32 ret = 1;
    required uint64 index = 2;
    required bool is_chose = 3;
}

//获取当期的巅峰霸主信息-需要包含阵容
message C2S_StormCity_GetLord {
}

message S2C_StormCity_GetLord {
    optional bool same_server = 1;      //巅峰霸主是否跟自己同服(只有同服本服玩家才有奖励)
    optional uint32 last_award_time = 2;  //上一次领取全服奖励的时间(客户端判断跟当前是否在同一周，不在例外巅峰霸主在本服就可以领取全服奖励)
    optional out_base.UserSnapshot user = 3;     //巅峰霸主信息
}

//获取历史霸主列表
message C2S_StormCity_LordHistorys {
}

message S2C_StormCity_LordHistorys {
    repeated out_base.StormCityLordHistory historys = 1; //客户端自己做每期的排序（按照结构里的时间排序）
}

//通知霸主成就值变更
message S2C_StormCity_LordAchiveChange {
    required uint32 point = 1; //最新的成就值
}

//请求霸主成就信息（霸主历史获得的成就点记录从历史霸主榜获取）
message C2S_StormCity_GetLordAchive {
}

message S2C_StormCity_GetLordAchive {
    required uint32 point = 1;    //当前成就值
    repeated uint32 ids = 2;      //已经领取了奖励的成就id(对应storm_achievement_info表的id)
    repeated out_base.StormCityLords lords = 3; //获取自己的霸主之路记录
}

//请求领取霸主成就奖励(或阶段奖励)
message C2S_StormCity_GetLordAchiveAward {
    required uint32 id = 1; //对应storm_achievement_info表的id
}

message S2C_StormCity_GetLordAchiveAward {
    required uint32 ret = 1; //领取成功客户端需要自己标记当前阶段或者已经领取的成就奖励
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
}

//请求领取当期巅峰霸主全服奖励（巅峰霸主必须在自己所在服务器）
message C2S_StormCity_GetMaxLordAward {
}

message S2C_StormCity_GetMaxLordAward {
    required uint32 ret = 1; //领取成功客户端需要标识领取时间（服务器逻辑是当期时间跟上一次领取时间判断是否同一周）
    repeated out_base.Award awards = 2;
}

// 信息
message C2S_Holiday_Info {
    optional uint32 tp = 1;	// 活动类型: 1欢庆佳节 2拼多多
}
message S2C_Holiday_Info {
    required uint32 ret = 1;
    optional uint32 tp = 2;
    repeated uint32 good_ids = 3;	// 已购买商品ID列表
    repeated uint32 shop_num_list = 4;	// 已购买商品次数列表
    repeated out_base.CommonTask task_list = 5; // 任务信息
    optional uint32 end_time = 6;	// 活动结束时间戳
    optional uint32 activity_id = 7;	// 对应活动表配置ID
    optional uint32 days = 8;	// 当前活动第几天
    optional string activity_name = 9;	// 活动名称
    optional string pic_name = 10;	// 图片名称
    optional uint32 turn_end_time = 11;	// 轮次结束时间
}

// 领取任务奖励
message C2S_Holiday_Award {
    required uint32 task_id = 1;	// 任务表ID
    optional uint32 tp = 2;	// 活动类型: 1欢庆佳节 2拼多多
}
message S2C_Holiday_Award {
    required uint32 ret = 1;
    required uint32 task_id = 2;	// 任务表ID
    repeated out_base.Award awards = 3;
    optional uint32 tp = 4;
}

// 商店购买
message C2S_Holiday_Buy {
    required uint32 shop_id = 1;	// 商店表ID
    required uint32 num = 2;
    optional uint32 tp = 3;	// 活动类型: 1欢庆佳节 2拼多多
}
message S2C_Holiday_Buy {
    required uint32 ret = 1;
    required uint32 shop_id = 2;	// 商店表ID
    required uint32 num = 3;
    optional uint32 bought_num = 4;
    repeated out_base.Award awards = 5;
    optional uint32 tp = 6;
}

// 任务状态更新推送
message S2C_Holiday_NotifyTask {
    repeated out_base.CommonTask task_list = 1; // 任务信息
    optional uint32 tp = 2;	// 活动类型: 1欢庆佳节 2拼多多
}


// 找回資源信息請求
message C2S_Retrieve_GetInfo{
}

message S2C_Retrieve_GetInfo {
    optional uint32 ret = 1;
    repeated out_base.RetrieveRes res_list = 2; // 資源信息
}

// 找回資源請求
message C2S_Retrieve_Res {
    optional uint32 id				= 1;//找回資源id
    optional uint32 buy_type		= 2;//购买找回方式
}

message S2C_Retrieve_Res {
    optional uint32 ret				= 1;
    optional uint32 id				= 2;//找回資源id
    optional uint32 buy_type		= 3;//购买找回方式
}

//请求微信管家信息
message C2S_SuperVip_Get {
}

//这条协议也会主动同步给客户端（等客服在GM后台处理之后会同步给游戏服）
message S2C_SuperVip_Get {
    optional string we_chat = 1; //分配的微信管家号
    optional bool register = 2;  //是否已成功添加
    optional uint32 time = 3;    //绑定微信号时间
}

message S2C_Retrieve_OpRetrieveRes {
    optional out_base.OpRetrieveRes retrieve = 1;
}

// 号令天下获取信息
message C2S_OrderWorld_Info {
}
message S2C_OrderWorld_Info {
    required uint32 ret = 1;
    optional uint32 start_time = 2;	//活动开始时间戳
    optional uint32 end_time = 3;	//活动结束时间戳
    optional uint32 days = 4;	//当前活动第几天
    optional uint32 sub_id = 5;	//活动子id
    optional uint32 activity_id = 6;	//活动唯一id
    optional uint32 guild_level = 7; //公会等级
    optional uint32 guild_score = 8;//公会积分
    repeated uint64 guild_level_award = 9;//公会等级奖励状态 0,等级未到 1,已领取 2,加入公会时间不足 3,可领取。未加入公会为空数组
    repeated out_base.CommonTask task_list = 10; //任务信息
    repeated out_base.OrderWorldRecord records = 11;//捐赠记录-前两天为本服,第三天为跨服
    repeated out_base.OrderWorldBuyNum buys = 12;//商店购买次数
    repeated out_base.CommonRecharge recharge_list = 13; // 充值列表
    repeated uint64  guild_mars = 14; // 已领取的公会战神奖排名
    repeated uint64  server_mars = 15; // 已领取的区服战神奖排名
    optional uint32  self_score = 16; // 自己的积分
    optional uint32  join_guild_time = 17; // 加入公会时间
}

// 号令天下捐赠
message C2S_OrderWorld_Donate {
    required uint32 item_id = 1;
    required uint32 num = 2;
}

message S2C_OrderWorld_Donate {
    required uint32 ret = 1;
    required uint32 item_id = 2;
    required uint32 num = 3;
    optional uint32 guild_level = 4;
    optional uint32 guild_score = 5;
    optional uint32 self_score = 6; // 自己的积分
    repeated out_base.Award awards = 7; //获得奖励
    repeated uint64 guild_level_award = 8;//公会等级奖励状态 0,等级未到 1,已领取 2,加入公会时间不足 3,可领取。未加入公会为空数组
}

// 号令天下更新活动页面玩家
message C2S_OrderWorld_OpTabUser {
    required uint32 Op = 1; //0添加,1删除
}
message S2C_OrderWorld_OpTabUser {
    required uint32 ret = 1;
    required uint32 Op = 2; //0添加,1删除
}

// 号令天下领取公会积分等级奖励
message C2S_OrderWorld_GuildLevelAward {
    required uint32 level = 1; //等级
}
message S2C_OrderWorld_GuildLevelAward {
    required uint32 ret = 1;
    required uint32 level = 2; //等级
    repeated out_base.Award awards = 3;
}

// 号令天下推送捐记录
message S2C_OrderWorld_Record_Broadcast {
    required uint32 activity_id = 1;
    optional out_base.OrderWorldRecord record = 2;
}

// 号令天下任务领奖
message C2S_OrderWorld_TaskAward {
    required uint32 task_id = 1; // 任务ID
}

message S2C_OrderWorld_TaskAward {
    required uint32 ret = 1;
    required uint32 task_id = 2;
    optional out_base.CommonTask task = 3;
    repeated out_base.Award awards = 4;
}

// 号令天下商店购买
message C2S_OrderWorld_ShopBuy {
    required uint32 goods_id = 1;	// 商店表ID
    required uint32 num = 2;
}
message S2C_OrderWorld_ShopBuy {
    required uint32 ret = 1;
    required uint32 goods_id = 2;	// 商店表ID
    required uint32 num = 3;
    optional uint32 bought_num = 4;
    repeated out_base.Award awards = 5;
}

// 号令天下战神奖励
message C2S_OrderWorld_MarsAward {
    required uint32 genre = 1;	// 1本服,2跨服
    required uint32 rank = 2;     // 名次
    required uint64 rank_user_id = 3;     //排名玩家id
}
message S2C_OrderWorld_MarsAward {
    required uint32 ret = 1;
    required uint32 genre = 2;	// 1本服,2跨服
    required uint32 rank = 3;     // 名次
    required uint64 rank_user_id = 4;     //排名玩家id
    repeated out_base.Award awards = 5; //奖励
}

// 号令天下公会捐赠推送
message S2C_OrderWorld_GuildNotify {
    required uint32 level = 1;
    required uint64 score = 2;
}

// 号令天下排行信息推送
message S2C_OrderWorld_NotifyRank {
    required uint64 score = 1;
    required uint32 time = 2;
    required out_base.UserSnapshot user = 3;
}

// 号令天下一键领取公会积分等级奖励
message C2S_OrderWorld_GuildAllAward {
}
message S2C_OrderWorld_GuildAllAward {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
}

// 充值推送
message S2C_OrderWorld_RechargeNotify {
    required out_base.CommonRecharge recharge = 1;
}

// 充值领奖
message C2S_OrderWorld_RechargeAward {
    required uint32 task_id = 1;
}

message S2C_OrderWorld_RechargeAward {
    required uint32 ret = 1;
    required uint32 task_id = 2;
    optional uint64 buy_times = 3;
    optional uint64 award_times = 4;
    repeated out_base.Award awards = 5;
}

// 翅膀合成
message C2S_Wing_Compose {
    required uint32 id = 1;//翅膀 id
}

message S2C_Wing_Compose {
    required uint32 ret = 1;
    required uint32 id = 2;//翅膀 id
}

// 翅膀精炼
message C2S_Wing_Refine {
    required uint32 id = 1;//精炼 id
}

message S2C_Wing_Refine {
    required uint32 ret = 1;
    required uint32 id = 2;//精炼 id
}

message S2C_FlushWing {
    repeated out_base.Wing   wing = 1;
    repeated out_base.WingRefine   wing_refines = 2;
}


// 翅膀穿戴
message C2S_Wing_Wear {
    optional uint32 op = 1;//穿戴操作 0--脱，1--穿 as:eOpWingWear
}

message S2C_Wing_Wear {
    required uint32 ret = 1;
    optional uint32 op = 2;//穿戴操作 0--脱，1--穿
}

//请求广告页信息
message C2S_AbvertPage_GetInfo {
}

message S2C_AbvertPage_GetInfo {
    repeated out_base.AbvertPage pages = 1; //客户端需要判断当前时间是否在预览时间之内,并且判断每个广告页的function_id是否满足
    repeated out_base.AbvertPageHideInfo hides = 2;//隐藏信息，还未到时间的活动简单信息，客户端自己判断活动时间到了，再发送本条协议去请求具体信息
}

//通知广告业配置信息变更或删除
message S2C_AbvertPage_UpdateInfo {
    repeated out_base.AbvertPage updates = 1; //本次更新活动--需要前端判断是否是nil
    repeated uint32 deletes = 2; //本次删除活动--需要前端判断是否是nil
}

//指定更新特定action的进度
message C2S_Action_Finish {
    required uint32 id = 1; //表示action行为类型
}

message S2C_Action_Finish {
    required uint32 ret = 1;
    required uint32 id = 2;
}

// 神兽秘境-信息
message C2S_Mystery_Info {
}
message S2C_Mystery_Info {
    required uint32 ret = 1;
    repeated uint32 boss_id_list = 2;	// 已击败守将id列表
    repeated uint32 monster_group_list = 3;	//
    repeated out_base.CommonTask tasks = 4;	// 任务
    optional uint32 daily_task_id = 5;	// 今日已接取的任务id
    optional uint32 daily_task_monster_awarded_times = 6;	// 今日日常小怪任务已领奖次数
    optional uint32 daily_task_boss_awarded_times = 7;	// 今日日常boss任务已领奖次数
    optional uint32 drop_left_times = 8;	// 今日还能掉落次数
    optional uint32 elite_kill_times = 9;	// 今日守将击杀次数
}

// 神兽秘境-获取指定秘境的房间列表
message C2S_Mystery_GetRoomList {
    required uint32 mystery_id = 1;	// 秘境id
}
message S2C_Mystery_GetRoomList {
    required uint32 ret = 1;
    required uint32 mystery_id = 2;	// 秘境id
    repeated uint32 room_id_list = 3;	// 房间id列表
    repeated uint32 room_num_list = 4;	// 对应的房间人数列表
}

// 神兽秘境-进入秘境
message C2S_Mystery_Enter {
    required uint32 mystery_id = 1;	// 秘境id
    required out_base.Pos pos = 2;	// 默认坐标
}
message S2C_Mystery_Enter {
    required uint32 ret = 1;
    optional uint32 room_id = 2;	// 房间id
    repeated out_base.MysteryMonster monsters = 3;	// 小怪列表
    repeated out_base.MysteryUser users = 4;	// 玩家列表
    required uint32 mystery_id = 5;	// 秘境id
    required out_base.Pos pos = 6;	// 默认坐标
}

// 神兽秘境-离开秘境
message C2S_Mystery_Exit {
}
message S2C_Mystery_Exit {
    required uint32 ret = 1;
}

// 神兽秘境-切换房间
message C2S_Mystery_ChangeRoom {
    required uint32 room_id = 1;	// 房间id
}
message S2C_Mystery_ChangeRoom {
    required uint32 ret = 1;
    required uint32 room_id = 2;	// 房间id
    repeated out_base.MysteryMonster monsters = 3;	// 小怪列表
    repeated out_base.MysteryUser users = 4;	// 玩家列表
}

// 神兽秘境-移动
message C2S_Mystery_Move {
    required out_base.Pos pos = 1;	// 坐标
}
message S2C_Mystery_Move {
    required uint32 ret = 1;
    required out_base.Pos pos = 2;	// 坐标
}

// 神兽秘境-挑战小怪/守将
message C2S_Mystery_ChallengeBegin {
    required uint32 monster_id = 1;	// 怪物/守将的id
}
message S2C_Mystery_ChallengeBegin {
    required uint32 ret = 1;
    required uint32 monster_id = 2;	// 怪物/守将的id
    optional uint64 battle_id = 3;	// 战斗id
}
message S2C_Mystery_ChallengeFinish {
    required uint32 ret = 1;
    required uint32 monster_id = 2;	// 怪物/守将的id
    optional bool is_win = 3;	// 是否胜利
    repeated out_base.Award awards = 4;// 挑战奖励
}

// 神兽秘境-攻击小怪
message C2S_Mystery_Attack {
    required uint32 monster_id = 1;	// 怪物id
}
message S2C_Mystery_Attack {
    required uint32 ret = 1;
    required uint32 monster_id = 2;	// 怪物id
    optional uint64 damage = 3;	// 攻击伤害
    optional bool critical = 4;	// 是否暴击
}

// 神兽秘境-接取日常任务
message C2S_Mystery_AcceptTask {
    required uint32 task_id = 1;	// 任务id
}
message S2C_Mystery_AcceptTask {
    required uint32 ret = 1;
    required uint32 task_id = 2;	// 任务id
}

// 神兽秘境-放弃日常任务
message C2S_Mystery_GiveUpTask {
}
message S2C_Mystery_GiveUpTask {
    required uint32 ret = 1;
}

// 神兽秘境-领取任务奖励
message C2S_Mystery_Award {
    required uint32 task_id = 1;	// 任务id
}
message S2C_Mystery_Award {
    required uint32 ret = 1;
    required uint32 task_id = 2;	// 任务id
    repeated out_base.Award awards = 3;// 奖励
}

// 通知:移动
message S2C_Mystery_NotifyMove {
    required out_base.MysteryUser user = 1;	// 移动后的状态
}

// 通知:攻击小怪
message S2C_Mystery_NotifyAttack {
    required out_base.MysteryUser user = 1;	// 攻击者
    required uint64 damage = 2;	// 攻击伤害
    required bool critical = 3;	// 是否暴击
    required out_base.MysteryMonster monster = 4;	// 攻击后的状态
}

// 通知:任务状态改变
message S2C_Mystery_NotifyTask {
    repeated out_base.CommonTask task_list = 1; // 任务信息
}

// 通知:离开
message S2C_Mystery_NotifyExit {
    required uint64 uid = 1;	// 玩家id
}

// 通知:物品掉落
message S2C_Mystery_NotifyDrop {
    required uint32 monster_id = 1;
    repeated out_base.Award awards = 2;// 奖励
}

// 神兽秘境-一键扫荡小怪
message C2S_Mystery_OneKey_Attack {
    required uint32 num = 1;	// 扫荡次数
    required bool is_auto = 2; // 是否自动接取试炼任务
}
message S2C_Mystery_OneKey_Attack {
    required uint32 ret = 1;
    required uint32 num = 2;
    required bool is_auto = 3;
    optional uint32 task_id = 4; // 当前任务id
    repeated out_base.DropAward drop_awards = 5; // 掉落奖励
}

// 神兽升级-使用道具
message C2S_Pet_LevelUp {
    required uint64 id = 1; // 神兽ID
    required uint32 item_id = 2;// 使用道具
    required uint32 item_num = 3; // 使用数量
}

message S2C_Pet_LevelUp {
    required uint32 ret = 1;
    required uint64 id = 2;
    required uint32 item_id = 3;// 使用道具
    required uint32 item_num = 4; // 使用数量
}

// 神兽一键升级
message C2S_Pet_OneKey_LevelUp {
    required uint64 id = 1; // 神兽ID
    required uint32 level = 2; // 升几级
}

message S2C_Pet_OneKey_LevelUp {
    required uint32 ret = 1;
    required uint64 id = 2;
    required uint32 level = 3;
}

// 神兽升星
message C2S_Pet_StarUp {
    required uint64 id = 1;// 神兽ID
    repeated uint64 cost_id = 2; // 消耗的神兽ID
}

message S2C_Pet_StarUp {
    required uint32 ret = 1;
    required uint64 id = 2;
    repeated uint64 cost_id = 3;
}

// 神兽装备强化
message C2S_Pet_Equipment_Upgrade {
    required uint64 id = 1;	// 唯一id
    repeated uint64 consumes = 2; //消耗id
}

message S2C_Pet_Equipment_Upgrade {
    required uint32 ret = 1;
    required uint64 id = 2;	// 唯一id
    repeated uint64 consumes = 3; //消耗id
}


// 神兽装备一键强化
message C2S_Pet_Equipment_FastUpgrade {
    repeated uint32 positions = 1;	// 装备位置
}

message S2C_Pet_Equipment_FastUpgrade {
    required uint32 ret = 1;
    repeated uint32 positions = 2;	// 装备位置
}

//神兽装备加解锁
message C2S_Pet_Equipment_Lock {
    required uint64 id = 1;   //唯一id
}

message S2C_Pet_Equipment_Lock {
    required uint32 ret = 1;
    required uint64 id = 2;   //唯一id
    optional bool lockStatus = 3; //锁的状态
}

//神兽协战(目前策划需求只能有一个宠物协战，后续有可能会有多个宠物协战)
message C2S_Pet_Help {
    required uint64 pet_id = 1;  //目标宠物id
    required uint64 help_id = 2; //助战的宠物id 下阵的时候help_id传0即可
    required uint32 pos = 3;     //助战的位置
}

message S2C_Pet_Help {
    required uint32 ret = 1;
    required uint64 pet_id = 2;  //目标宠物id
    required uint64 help_id = 3; //助战的宠物id
    required uint32 pos = 4;     //助战的位置
}

//请求关注秘境boss
message C2S_MysteryBoss_Care {
    required uint32 id = 1; //为0时表示取消关注，否则是要关注的bossId
}

message S2C_MysteryBoss_Care {
    required uint32 ret = 1;
    required uint32 id = 2;
}

//请求秘境boss信息-每次打开秘境面板重新请求
message C2S_MysteryBoss_GetInfo {
    required uint32 type = 1;//跟mystery_boss_info表的type一致
}

message S2C_MysteryBoss_GetInfo {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated out_base.MysteryBossShowInfo shows = 3; //可以攻打的秘境boss简化信息
    optional out_base.MysteryBossUserInfo self = 4;  //自己的信息
}

//请求进入指定boss副本房间(boss未复活不允许进入-服务器依赖前端请求进入房间和请求boss列表的时候初始化boss)
message C2S_MysteryBoss_EnterRoom {
    required uint32 id = 1; //bossId
}

message S2C_MysteryBoss_EnterRoom {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional out_base.MysteryBossDetailInfo detail = 3; //boss房间完整信息（boss血量信息，排行榜，挑战位上的信息，自己的伤害数据）
}

//请求离开boss副本房间(不需要传bossId，玩家同时只可能在一个房间内)
//boss死亡时，服务器广播，客户端在播放完奖励特效，也要主动调用这条协议，并且清理客户端本地缓存的房间信息数据
message C2S_MysteryBoss_LeaveRoom {
}

message S2C_MysteryBoss_LeaveRoom {
    required uint32 ret = 1; //返回成功时，客户端需要重置玩家相关的奖励次数，相关cd
}

//请求挑战坑位上的玩家
message C2S_MysteryBoss_PosChallengeBegin {
    required uint32 pos = 1; //挑战指定坑位-取值范围从1到6
}

//如果挑战坑位上无玩家，则不会发送S2C_MysteryBoss_PosChallengeFinish协议
message S2C_MysteryBoss_PosChallengeBegin {
    required uint32 ret = 1;
    required uint32 pos = 2;
    optional uint64 battle_id = 3;
}

//通知战斗结果
message S2C_MysteryBoss_PosChallengeFinish {
    required uint32 ret = 1;
    required uint32 pos = 2; //挑战指定坑位-取值范围从1到6
    optional bool is_win = 3; //是否胜利
}

//通知房间内 玩家挑战坑位成功的信息-成功则挑战者站到坑位上，原先占有者主动退出坑位
//如果boss是跨服特殊boss，如果挑战者的pos是大于0的，说明挑战的是归属位上的玩家，要互换位置
message S2C_MysteryBoss_NotifyPosChallenge {
    required uint32 pos = 1;                  //原先pos上没有占坑的人，则认为是直接占坑，不需要播放挑战动画
    required out_base.MysteryBossPos user = 2; //挑战者
}

//请求挑战boss-玩家首次站到挑战位上才需要发该协议
message C2S_MysteryBoss_BossChallengeBegin {
}

message S2C_MysteryBoss_BossChallengeBegin {
    required uint32 ret = 1;
    optional uint64 battle_id = 2;
}

//通知战斗结果
message S2C_MysteryBoss_BossChallengeFinish {
    required uint32 ret = 1;
    optional bool is_win = 2; //是否胜利
    optional uint64 damage = 3;  //本次伤害
    optional uint64 total_damage = 4;//历史总伤害
    optional uint64 hp_left = 5; //boss剩余血量
}

//通知房间内 玩家挑战boss的信息(客户端需要自己维护排行)
message S2C_MysteryBoss_NotifyBossChallenge {
    required uint64 user_id = 1; //坑位上的挑战者-前端更新攻击boss时间
    required uint64 damage = 2; //单次对boss造成的伤害-客户端需要根据玩家伤害计算排行
    required uint64 total_damage = 3;//玩家对boss总伤害
    required uint64 hp_left = 4; //boss剩余血量-boss血条显示血量已这个为准-当剩余血量为0的时候客户端播放完奖励特效发送离开房间消息
}

//通知boss死亡通知-给房间内玩家推送死亡信息，关注了该boss的玩家推送死亡信息
message S2C_MysteryBoss_NotifyBossDead {
    required out_base.MysteryBossShowInfo show = 1;
    optional bool is_system = 2;
}

message S2C_MysteryBoss_NotifyBossReborn {
    required out_base.MysteryBossShowInfo show = 1;
}

//通知玩家离开房间（玩家在排行榜或在挑战位上会推送）,客户端需要把玩家从排行榜里清除 客户端需要判断玩家是否在挑战位上，如在挑战位上需要处理从挑战位上离开的逻辑
message S2C_MysteryBoss_NotifyLeave {
    required uint64 user_id = 1;
    optional out_base.MysteryBossPos user = 2; //自动补位入榜的-如果参与了boss攻打的玩家有8人，离开了一个玩家，则从不在榜内的玩家列表里找出伤害最大的进榜
}

//通知玩家进入房间
message S2C_MysteryBoss_NotifyEnter {
    optional out_base.UserSnapshot user = 1;
}

//通知玩家有奖励(在线的才有，离线的统一发邮件)
message S2C_MysteryBoss_NotifyAwards {
    repeated out_base.Award awards = 1;
}

//请求月基金信息
message C2S_Recharge_GetMonthFundInfo {
}

message S2C_Recharge_GetMonthFundInfo {
    repeated out_base.MonthFund recharges = 1;
}

message C2S_Recharge_GetMonthFundAward {
    required uint32 activity_id = 1; //活动id
    required uint32 type = 2;  //1-豪华基金 2-至尊基金 3-免费基金
    optional uint32 day = 3; //领取第几天的奖励
}

message S2C_Recharge_GetMonthFundAward {
    required uint32 ret = 1;
    required uint32 activity_id = 2; //活动id
    required uint32 type = 3;  //购买的子任务id
    optional uint32 day = 4; //领取第几天的奖励
    repeated out_base.Award awards = 5;
}

// 老玩家回归-信息(符合条件的玩家才会返回活动id等信息)
message C2S_BackReward_Info {
}
message S2C_BackReward_Info {
    required uint32 ret = 1;
    optional uint32 activity_id = 2;	// 对应活动表配置ID
    optional out_base.AfkPlayer afk_player = 4;	// 老玩家信息
    repeated uint32 awarded_ids = 5;	// 已领取奖励id
    repeated out_base.TaskInfo tasks = 6; //当前所有任务状态(type:任务类型 value:完成进度)
    optional string desc = 7;	// 活动描述
}

// 老玩家回归-奖励
message C2S_BackReward_Award {
    required uint32 id = 1;	// 配置表id
}
message S2C_BackReward_Award {
    required uint32 ret = 1;
    required uint32 id = 2;	// 配置表id
    repeated out_base.Award awards = 3;
}

//获取开服类兑换活动
message C2S_Activity_GetExchangeInfo {
}

message S2C_Activity_GetExchangeInfo {
    repeated out_base.Exchange exchanges = 1;
}

//请求累计充值信息
message C2S_Recharge_GetNewTotalRechargeInfo {
}

message S2C_Recharge_GetNewTotalRechargeInfo {
    repeated out_base.NewTotalRecharge recharges = 1;
}

//请求累计充值子任务奖励
message C2S_Recharge_GetNewTotalRechargeAward {
    required uint32 activity_id = 1; //活动id
    required uint32 id = 2;          //子任务id
    optional uint32 index = 3;       //如果对应子任务的奖励是可选择的掉落，需传奖励索引，从1开始
}

message S2C_Recharge_GetNewTotalRechargeAward {
    required uint32 ret = 1;
    required uint32 activity_id = 2; //活动id
    required uint32 id = 3;          //子任务id
    optional uint32 index = 4;       //如果对应子任务的奖励是可选择的掉落，需传奖励索引，从1开始
    repeated out_base.Award awards = 5;
}

// 富甲天下-获取活动信息
message C2S_Richest_GetInfo {
    required uint32 activity_id = 1; //活动id
}
message S2C_Richest_GetInfo {
    required uint32 ret = 1;
    required uint32 activity_id = 2; //活动id
    required uint32 order = 3; //玩家当前格子位置
    required uint32 score = 4; //玩家积分
    repeated out_base.ActivityCommonRecord records = 5; //抽卡记录
    required uint32 purple_order = 6;
    required uint32 purple_score = 7;
}

// 富甲天下-活动抽卡
message C2S_Richest_Draw {
    required uint32 activity_id = 1; //活动id
    required uint32 type = 2;//1表示单抽，2表示十抽
    required uint32 sub_type = 3;//1代表金卡池，2表示紫金卡池
}

message S2C_Richest_Draw {
    required uint32 ret = 1;
    required uint32 activity_id = 2; //活动id
    required uint32 type = 3;       //1表示单抽，2表示十抽
    optional uint32 order = 4;      //抽卡后的位置
    repeated out_base.Award awards = 5; //抽卡获得的奖励
    repeated out_base.ActivityCommonEvent events = 6; //抽卡获得的事件
    required uint32 sub_type = 7;   //1代表金卡池，2表示紫金卡池
}

// 富甲天下排行信息推送
message S2C_Richest_NotifyRank {
    required uint32 activity_id = 1; //活动id
    required uint64 score = 2;
    required uint32 time = 3;
    required out_base.UserSnapshot user = 4;
    required uint32 sub_type = 5;
}

// 活动通用事件列表
message C2S_ActivityCommon_EventList {
    required uint32 activity_id = 1; //活动id
    required uint32 activity_type = 2; //活动类型
}

message S2C_ActivityCommon_EventList {
    required uint32 ret = 1;
    required uint32 activity_id = 2; //活动id
    required uint32 activity_type = 3; //活动类型
    repeated out_base.ActivityCommonEvent events = 4; // 事件列表
}

// 活动通用完成事件
message C2S_ActivityCommon_FinishEvent {
    required uint32 activity_id = 1; //活动id
    required uint32 activity_type = 2; //活动类型
    required uint64 event_id = 3;  //事件唯一id
    required uint32 arg = 4; //根据不同的事件传值 传1-3
}

message S2C_ActivityCommon_FinishEvent {
    required uint32 ret = 1;
    required uint32 activity_id = 2; //活动id
    required uint32 activity_type = 3; //活动类型
    required uint64 event_id = 4;     //事件唯一id
    required uint32 arg = 5;         //根据不同的事件传值
    optional uint32 result = 6; //结果 1胜 2平 3负
    repeated out_base.Award awards = 7; //奖励
}

// 活动通用一键完成事件
message C2S_ActivityCommon_FastFinishEvent {
    required uint32 activity_id = 1; //活动id
    required uint32 activity_type = 2; //活动类型
}

message S2C_ActivityCommon_FastFinishEvent {
    required uint32 ret = 1;
    required uint32 activity_id = 2; //活动id
    required uint32 activity_type = 3; //活动类型
    repeated out_base.Award awards = 4; //奖励
}

//流失活动-获取流失数据
message C2S_Activity_GetLosts {
}

message S2C_Activity_GetLosts {
    repeated out_base.UserLost losts = 1;
}

//流失活动-获取流失奖励
message C2S_Activity_GetLostAward {
    required uint32 activity_id = 1;
}

message S2C_Activity_GetLostAward {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    repeated out_base.Award awards = 3;
}

// 进入玩法
message C2S_GroupBattle_Enter {
}

message S2C_GroupBattle_Enter {
    required uint32 ret = 1;
    optional uint32 rank = 2; // 排名
    optional uint32 challenge_num = 3; // 可挑战次数
    optional uint32 honor = 4; // 荣誉值
    optional uint32 title = 5; // 称号
    optional uint32 map_id = 6; // 地图id
    optional out_base.UserSnapshot user_show = 7; // 玩家数据
    optional out_base.GroupBattleRoom room = 8; // 玩家所在的房间
}

// 创建队伍
message C2S_GroupBattle_CreateRoom {
}

message S2C_GroupBattle_CreateRoom {
    required uint32 ret = 1;
    optional out_base.GroupBattleRoom room = 2;
}

// 快速加入
message C2S_GroupBattle_QuickJoin {
}

message S2C_GroupBattle_QuickJoin {
    required uint32 ret = 1;
    optional out_base.GroupBattleRoom room = 2; // 房间
}

// 邀请
message C2S_GroupBattle_Invite {
    required uint64 user_id = 1; // 被邀请玩家ID
}

message S2C_GroupBattle_Invite {
    required uint32 ret = 1;
    optional uint64 user_id = 2;
}

// 处理邀请
message C2S_GroupBattle_ConfirmInvite {
    required uint64 room_id = 1; // 同意那个队伍的邀请
    required bool is_join = 2; // 是否加入
}

message S2C_GroupBattle_ConfirmInvite {
    required uint32 ret = 1;
    optional uint64 room_id = 2;
    optional bool is_join = 3;
}


// 退出房间
message C2S_GroupBattle_QuitRoom {
}

message S2C_GroupBattle_QuitRoom {
    required uint32 ret = 1;
}

// 踢人
message C2S_GroupBattle_Kick {
    required string guid = 1; // 踢谁
}

message S2C_GroupBattle_Kick {
    required uint32 ret = 1;
    optional string guid = 2;
}

// 准备
message C2S_GroupBattle_Ready {
    required bool is_ready = 1; // 是否准备
}

message S2C_GroupBattle_Ready {
    required uint32 ret = 1;
    optional bool is_ready = 2;
}

// 设置
message C2S_GroupBattle_Setting {
    required uint32 catalog = 1; // 设置种类
    required bool is_open = 2;// 开关
}

message S2C_GroupBattle_Setting {
    required uint32 ret = 1;
    optional uint32 catalog = 2;
    optional bool is_open = 3;
}

// 布阵
message C2S_GroupBattle_LineUp {
    repeated out_base.GroupBattleRoomLineUp lineup = 1;
}

message S2C_GroupBattle_LineUp {
    required uint32 ret = 1;
    repeated out_base.GroupBattleRoomLineUp lineup = 2;
}

// 匹配战斗队伍
message C2S_GroupBattle_Match {
    required uint32 tp = 1; // 1：匹配，2：取消匹配
}

message S2C_GroupBattle_Match {
    required uint32 ret = 1;
    optional uint32 tp = 2;
}

// 推送房间改变
message S2C_GroupBattle_NotifyRoomChange {
    required out_base.GroupBattleRoom room = 1;
    repeated uint32 addition = 2;
}

// 推送匹配开始/结束
message S2C_GroupBattle_NotifyMatch {
    required uint32 tp = 1; // 1:匹配，2：取消匹配
}

// 推送匹配结束
message S2C_GroupBattle_NotifyMatchFinish {
    required bool is_success = 1;
    optional out_base.GroupBattleRoom room = 2;
}

// 推送被踢出房间
message S2C_GroupBattle_NotifyBeKick {
}

// 推送邀请信息
message S2C_GroupBattle_NotifyInvite {
    required out_base.GroupBattleInvitation invitaion = 1; // 邀请函列表
}

// 邀请机器人
message C2S_GroupBattle_InviteRobot{
}

message S2C_GroupBattle_InviteRobot {
    required uint32 ret = 1;
}

// 被邀请列表
message C2S_GroupBattle_InviteeList {

}

message S2C_GroupBattle_InviteeList {
    required uint32 ret = 1;
    repeated out_base.UserSnapshot friends = 2; // 好友
    repeated out_base.UserSnapshot guild_members = 3; // 公会成员
}

// 邀请函列表
message C2S_GroupBattle_GetInvitation {
}

message S2C_GroupBattle_GetInvitation {
    required uint32 ret = 1;
    repeated out_base.GroupBattleInvitation invitation = 2; // 邀请函列表
}

// 加入队伍
message C2S_GroupBattle_JoinRoom {
    required uint64 room_id = 1;
}

message S2C_GroupBattle_JoinRoom {
    required uint32 ret = 1;
    optional uint64 room_id = 2;
}

// 通知：战报数据
message S2C_GroupBattle_NotifyFightReport {
    required bool is_success = 1;
    optional out_base.GroupBattleFightReport report = 2;
}

// 查询房间信息
message C2S_GroupBattle_QueryRoom {
    required uint64 room_id = 1;
}

message S2C_GroupBattle_QueryRoom {
    required uint32 ret = 1;
    required uint64 room_id = 2;
    optional out_base.GroupBattleRoom room = 3;
    repeated uint32 addition = 4;
}

// 通知：房间解散
message S2C_GroupBattle_NotifyDisbandRoom {
}

// 查询
message C2S_GroupBattle_RefreshBattleUser {
}

message S2C_GroupBattle_RefreshBattleUser {
    required uint32 ret = 1;
}

// 推送地图变化
message S2C_GroupBattle_NotifyMapChange {
    required uint32 map_id = 1;
}

// 熔炉熔炼
message C2S_Furnace_Exchange {
    required uint32 id = 1; // 目标id
    repeated out_base.Award costs = 2; // 消耗物品数量
}

message S2C_Furnace_Exchange {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated out_base.Award costs = 3;
    repeated out_base.Award awards = 4;
    optional uint64 exp = 5;
}

// 熔炼查询信息
message C2S_Furnace_GetInfo {
}

message S2C_Furnace_GetInfo {
    required uint32 ret = 1;
    repeated out_base.KV exp = 2;
}

//噩梦副本-进入玩法
message C2S_SpaceTimeDungeon_Enter {
}

message S2C_SpaceTimeDungeon_Enter {
    required uint32 ret = 1;
    repeated out_base.StdChapterProgress progress = 2; // 关卡进度
    repeated uint32 play_chapters = 3; //已消耗疲劳值的关卡
}

//噩梦副本-进入关卡
message C2S_SpaceTimeDungeon_EnterChapter {
    required uint32 chapter_id = 1; // 关卡id
}

message S2C_SpaceTimeDungeon_EnterChapter {
    required uint32 ret = 1;
    optional out_base.Pos pos = 2;                   //当前坐标
    repeated uint32 pass_grids = 3;                  //通过的格子
    repeated uint32 trigger_events = 4;              //已触发的事件
    repeated out_base.MonsterHpList monsters = 5;    //怪物扣除的血量
    optional uint32 buff_grid_id = 6;                //有时光之力的格子
    optional uint32 buff_event_id = 7;               //有时光之力的事件
    repeated uint64 hp_list = 8;                     //玩家剩余血量百分比
    repeated uint32 new_events = 9;                  //进入关卡触发的事件
    repeated out_base.StdLifts lifts = 10;           //升降台和控制台状态
    repeated uint32 play_chapters = 11;              //已消耗疲劳值的关卡-有变化才给数据
}

//噩梦副本-重置关卡
message C2S_SpaceTimeDungeon_ResetChapter {
    required uint32 chapter_id = 1; // 关卡id
}

message S2C_SpaceTimeDungeon_ResetChapter {
    required uint32 ret = 1;
    required out_base.Pos pos = 2;
    repeated uint32 pass_grids = 3;        //通过的格子
    repeated uint32 trigger_events = 4;    //已触发的事件
    repeated out_base.MonsterHpList monsters = 5;    //怪物扣除的血量
}


//噩梦副本-移动
message C2S_SpaceTimeDungeon_Move {
    required uint32 chapter_id = 1; // 关卡id
    repeated out_base.Pos poss = 2; // 移动路径
}

message S2C_SpaceTimeDungeon_Move {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    repeated out_base.Pos poss = 3; // 移动路径
    repeated out_base.EffectPos effect_poss = 4; // 有效路径
}

//噩梦副本-战斗开始
message C2S_SpaceTimeDungeon_BattleStart {
    required uint32 chapter_id = 1; // 关卡id
    required out_base.Pos pos = 2; // 坐标
    required uint32 grid_id = 3; //格子id
}

message S2C_SpaceTimeDungeon_BattleStart {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    required out_base.Pos pos = 3;   //坐标
    required uint32 gridId  = 4;     //格子id
    optional uint64 battle_id  = 5; //战斗id
}

//噩梦副本-战斗完成
message S2C_SpaceTimeDungeon_BattleFinish {
    required uint32 ret = 1;
    required out_base.Pos pos = 2;   //坐标
    required uint32 gridId  = 3; //格子id
    optional bool is_win = 4; //是否战胜
    repeated uint32 event_ids = 5; //事件id
    repeated uint64 hp_list = 6; //玩家剩余血量百分比
    optional uint32 role_exp = 7;//主角经验
    optional out_base.MonsterHpList mHp =8; // 怪物剩余血量
}

//噩梦副本-领取宝箱
message C2S_SpaceTimeDungeon_BoxAward {
    required uint32 chapter_id = 1; // 关卡id
    required out_base.Pos pos = 2; // 坐标
    required uint32 grid_id = 3; //格子id
}

message S2C_SpaceTimeDungeon_BoxAward {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    required out_base.Pos pos = 3; // 坐标
    required uint32 grid_id = 4; //格子id
    repeated out_base.Award awards = 5;   //获得奖励
}

//噩梦副本-泉水加血
message C2S_SpaceTimeDungeon_RestoreHp {
    required uint32 chapter_id = 1; // 关卡id
    required out_base.Pos pos = 2; // 坐标
    required uint32 grid_id = 3; //格子id
}

message S2C_SpaceTimeDungeon_RestoreHp {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    required out_base.Pos pos = 3; // 坐标
    required uint32 grid_id = 4; //格子id
    repeated uint64 hp_list = 5; //玩家剩余血量百分比
}

//噩梦副本-阵位复活
message C2S_SpaceTimeDungeon_Revive {
    required uint32 chapter_id = 1; // 关卡id
    required out_base.Pos pos = 2;  // 坐标
    required uint32 grid_id = 3;    // 格子id
}

message S2C_SpaceTimeDungeon_Revive {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    required out_base.Pos pos = 3;  // 坐标
    required uint32 grid_id = 4;    // 格子id
    repeated uint64 hp_list = 5;    // 玩家剩余血量百分比
}

//噩梦副本-时光之力背包
message C2S_SpaceTimeDungeon_ItemList {
    required uint32 chapter_id = 1; // 关卡id
}

message S2C_SpaceTimeDungeon_ItemList {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    repeated uint32 item_ids = 3; // 时光之力
}

//噩梦副本-选择时光之力
message C2S_SpaceTimeDungeon_SelectItem {
    required uint32 chapter_id = 1; // 关卡id
    required uint32 item_id = 2;    // 选择id
    required uint32 select_type =3; // 选择类型 :1 事件,2战斗
    required uint32 arg =4;         // 参数 :1 事件id, 2战斗格子
    optional out_base.Pos pos = 5;  // 战斗格子的坐标
}

message S2C_SpaceTimeDungeon_SelectItem {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    required uint32 item_id = 3;    // 选择id
    required uint32 select_type =4; // 选择类型 :1 事件,2战斗
    required uint32 arg =5;         // 参数 :1 事件id, 2战斗格子
    optional out_base.Pos pos = 6;  // 战斗格子的坐标
}

//噩梦副本-触发机关
message C2S_SpaceTimeDungeon_TriggerGear {
    required uint32 chapter_id = 1; // 关卡id
    required out_base.Pos pos = 2; // 坐标
    required uint32 grid_id = 3; //格子id
}

message S2C_SpaceTimeDungeon_TriggerGear {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    required out_base.Pos pos = 3; // 坐标
    required uint32 grid_id = 4; //格子id
    repeated uint32 event_ids = 5; //触发的事件
}

//噩梦副本-触发控制台
message C2S_SpaceTimeDungeon_TriggerControl {
    required uint32 chapter_id = 1; // 关卡id
    required out_base.Pos pos = 2; // 坐标
    required uint32 grid_id = 3; //格子id
}

message S2C_SpaceTimeDungeon_TriggerControl {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; // 关卡id
    required out_base.Pos pos = 3; // 坐标
    required uint32 grid_id = 4; //格子id
    repeated out_base.StdLifts lifts = 5;   //升降台和控制台状态
}

//王者竞技-获取当期或者下一期正要开启的活动(已经结束的活动不会再发，只发正在进行中的或者下一期要开的活动)
message C2S_PeakArena_GetActivityInfo {
}

message S2C_PeakArena_GetActivityInfo {
    optional out_base.PeakArenaInfo info = 1;
}

//王者竞技-获取自己的信息
message C2S_PeakArena_GetUserInfo {
}

message S2C_PeakArena_GetUserInfo {
    optional out_base.PeakArenaSelf info = 1;
}

//王者竞技-获取战报数据
message C2S_PeakArena_GetRecords {
    required uint32 type = 1; //1个人 2战区 3全服
}

message S2C_PeakArena_GetRecords {
    required uint32 ret = 1;
    required uint32 type = 2; //1个人 2战区 3全服
    repeated out_base.PeakArenaRecord records = 3;
}

//王者竞技-获取历代王者
message C2S_PeakArena_GetHistorys {
}

message S2C_PeakArena_GetHistorys {
    required uint32 ret = 1;
    repeated out_base.PeakArenaHistory historys = 2;
}

//王者竞技-上阵、下阵合击兵符
message C2S_PeakArena_ChangeFormation {
    required uint32 id = 1; //合击兵符id(根据策划规则，可以上阵已拥有的兵符也可以上阵本玩法段位提升激活的兵符)
    required uint32 pos = 2; //pos=0为下阵，1-4为上阵
}

message S2C_PeakArena_ChangeFormation {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 pos = 3;
    repeated uint32 unit_tokens = 4; //最终兵符状态-同PeakArenaSelf里的unit_tokens
}

//王者竞技-匹配
message C2S_PeakArena_Match {
}

message S2C_PeakArena_Match {
    required uint32 ret = 1;
    optional uint32 lv = 2; //匹配目标的段位(小段位)
    optional out_base.UserSnapshot show = 3; //匹配目标
    optional uint64 max_fight_value = 4; //全服最高战力-如果全服最高战力小于自己的战力，最高战力用玩家自己的战力
}

//王者竞技-战斗
message C2S_PeakArena_ChallengeBegin {
}

message S2C_PeakArena_ChallengeBegin {
    required uint32 ret = 1;
    optional uint64 battle_id = 2;
}

message S2C_PeakArena_ChallengeFinish {
    required uint32 ret = 1;
    optional bool is_win = 2;               //是否胜利
    optional uint64 score = 3;              //最终积分
    optional uint32 lv = 4;                 //最终段位
    optional uint32 local_rank = 5;         //结算前本服排名
    optional uint32 local_rank_finish = 6;  //结算后本服排名
    optional uint32 area_rank = 7;          //结算前战区排名
    optional uint32 area_rank_finish = 8;   //结算后战区排名
    optional uint32 all_rank = 9;           //结算前全服排名
    optional uint32 all_rank_finish = 10;   //结算后全服排名
    optional out_base.PeakArenaRecord record = 11; //本次战斗的录像
    optional string video = 12;             //录像
}

//王者竞技-获取战斗录像
message C2S_PeakArena_GetBattleVideo {
    required uint32 type = 1; //1.本服 2.战区 3.全服
    required uint64 battle_id = 2;
}

message S2C_PeakArena_GetBattleVideo {
    required uint32 ret = 1;
    required uint32 type = 2; //1.本服 2.战区 3.全服
    required uint64 battle_id = 3;
    optional bs.BattleVideo video = 4;
}

// 通用action模块：一键领取任务奖励
message C2S_GetModuleOneKeyTaskAward {
    required uint32 module_id = 1;
}

message S2C_GetModuleOneKeyTaskAward {
    required uint32 ret = 1;
    optional uint32 module_id = 2;
    repeated out_base.Award awards = 3;
}

// 竞技场一键挑战
message C2S_Arena_OneKeyChallenge {
    required uint64 num = 1; // 挑战次数
}

message S2C_Arena_OneKeyChallenge {
    required uint32 ret = 1;
    optional uint64 num = 2;
    repeated out_base.Award awards = 3;
    optional uint32 item_num = 4;
    repeated out_base.Award turn_awards = 5;
}
//武将觉醒下一步
message C2S_Knight_Awake_Next {
    required uint64 id = 1;
}

message S2C_Knight_Awake_Next {
    required uint32 ret = 1;
    required uint64 id = 2;
}

//武将觉醒取消
message C2S_Knight_Awake_Cancel {
    required uint64 id = 1;
}

message S2C_Knight_Awake_Cancel {
    required uint32 ret = 1;
    required uint64 id = 2;
}

//武将觉醒快速
message C2S_Knight_Awake_Quick {
  required uint64 id = 1;
}

message S2C_Knight_Awake_Quick {
  required uint32 ret = 1;
  required uint64 id = 2;
}

//饰品升级
message C2S_Knight_Pendant_Up {
    required uint64 id = 1;
}

message S2C_Knight_Pendant_Up {
    required uint32 ret = 1;
    required uint64 id = 2;
}

//副将操作
message C2S_Knight_Adjutant_Op {
    required uint64 general = 1;
    required uint64 adjutant = 2;
    required uint32 pos = 3;
}

message S2C_Knight_Adjutant_Op {
    required uint32 ret = 1;
    required uint64 general = 2;
    required uint64 adjutant = 3;
    required uint32 pos = 4;
}


//获取屏蔽的活动列表
message C2S_BlockedActivity_GetList{
}

message S2C_BlockedActivity_GetList {
    required uint32 ret = 1;
    repeated out_base.BlockActivity ids = 2; //屏蔽的活动ID列表
}

message S2C_BlockedActivity_ChangeNotify{
    repeated out_base.BlockActivity ids = 1; //屏蔽的活动ID列表
}

//周礼包活动玩家参与信息
message C2S_Recharge_GetWeekGiftInfo{
}

message S2C_Recharge_GetWeekGiftInfo{
    required uint32 ret = 1;
    repeated out_base.WeekGiftHistory histories = 2;//已参与的活动数据
}

//周礼包-奖励领取
message C2S_Recharge_GetWeekGiftAward{
    required uint32 gift_id = 1; //礼包ID
    required uint32 act_id = 2;  //活动ID
}

message S2C_Recharge_GetWeekGiftAward{
    required uint32 ret = 1;     //响应码
    optional uint32 gift_id = 2;  //礼包ID
    optional uint32 act_id = 3;  //活动ID
    repeated out_base.Award awards = 4; //返回award结构
}

//周礼包-元宝购买礼包
message C2S_WeekGift_PurchaseWithGold {
    required uint32 gift_id = 1; //礼包ID
    required uint32 act_id = 2; //活动ID
}

message S2C_WeekGift_PurchaseWithGold {
    required uint32 ret = 1; //响应码
    optional uint32 gift_id = 2; //礼包ID
    optional uint32 act_id = 3; //活动ID
    optional uint32 purchased_times = 4; //已购买次数
    repeated out_base.Award awards = 5; //返回award结构
}

//================================攻城略地新赛季==========================================
//获取主界面信息
message C2S_Wrest_GetInfo{
}
message S2C_Wrest_GetInfo{
    required uint32 ret = 1;
    optional uint32 status = 2;//当前阶段：0未开启 2 第一阶段 2 第二阶段 3 结束
    optional uint32 gold_acc = 3;//累计领取的元宝
    optional uint32 league_left_time = 4;//赛季结算剩余时间 时间戳
    optional uint32 now_gold = 5;//当前可获得元宝
    optional uint32 now_cityId = 6;//当前停留的城池id
    optional uint32 now_gold_speed = 7;//当前元宝产出的速度 单位 s/个 方便客户端
    repeated out_base.WrestCityInfo wrest_city_info = 8;//城池数据
    optional uint32 power = 9;//当前兵力
    optional uint32 city_type = 10; //1 外城 2 内城
    optional uint32 zone = 11; // 区域
    optional uint32 start_time = 12; // 开始时间
    optional uint32 win_zone = 13; // 赢的联盟名称
    repeated out_base.WrestUnionName union_name = 14; // 联盟名称
    optional uint32 win_time = 15;//当前胜场
    optional uint32 win_rate= 16;//当前胜率 100%胜率传1000
    optional uint32 sid = 17; // 区服ID
}

//获取城池详细信息
message C2S_Wrest_GetCityInfo{
    required uint32 city_id = 1;//城池id
    optional uint32 page = 2;//请求的当前页 默认1
    optional uint32 filter_type = 3;//1 非军团 2 非联盟
    optional uint32 type = 4; //1 外城 2 内城
}

message S2C_Wrest_GetCityInfo {
    required uint32 ret = 1;
    optional out_base.WrestCityStatusInfo city_status_info = 2;//状态信息 包括占城信息 当前人数
    repeated out_base.WrestCityUserInfo users = 3;//玩家数据
    optional uint32 city_id = 4;//城池id
    optional uint32 page = 5;//请求的当前页
    optional uint32 total_page = 6;//总的页数
    optional uint32 filter_type = 7;//1 非军团 2 非联盟
    optional uint32 buff_id = 8; //人数BUFF加成
    optional uint32 type = 9; //1 外城 2 内城
    optional uint32 guild_rank = 10; // 公会积分排名
    optional uint32 addition = 11; // 公会产量
    optional uint32 inner_space = 12; // 内城是否有空位 0 没有 1 有
}

//迁入城池
message C2S_Wrest_MoveCity{
    repeated uint32 city_id = 1;//城池id 行进城池路径
}
message S2C_Wrest_MoveCity{
    required uint32 ret = 1;
    optional out_base.WrestCityStatusInfo city_status_info  = 2;//状态信息
    optional uint32 now_gold = 3;//当前可获得元宝
    repeated uint32 city_id = 5;//城池id 行进城池路径原样返回客户端
}


//进出内城城池
message C2S_Wrest_InnerCity{
    required uint32 type = 1;//1 进入 2离开
    optional uint32 index = 2; // 排名
}
message S2C_Wrest_InnerCity{
    required uint32 ret = 1;
    optional out_base.WrestCityStatusInfo city_status_info  = 2;//状态信息
    optional uint32 now_gold = 3;//当前可获得元宝
    optional uint64 guild_score = 4; // 公会积分
}


//攻击城池内其他玩家
message C2S_Wrest_AttackUserBegin{
    required uint64 user_id = 1;//玩家id
    optional bool skip_battle = 2; // 是否跳过战斗显示(透传参数)
}

message S2C_Wrest_AttackUserBegin{
    required uint32 ret = 1;
    optional uint64 battle_id = 2; //战斗id
    optional bool skip_battle = 3; // 是否跳过战斗显示(透传参数)
    optional uint32 index = 4;// 用于内城挑战
}

message S2C_Wrest_AttackUserFinish{
    required uint32 ret = 1;
    optional uint64 user_id = 2; //攻击的玩家id
    optional bool skip_battle = 3;
    optional bool is_win = 4; //是否胜利
    optional out_base.WrestCityStatusInfo city_status_info = 5;//状态信息
    optional out_base.WrestBattleResult my_battle_result = 6;//我方战斗数据
    optional out_base.WrestBattleResult enemy_battle_result = 7;//敌方战斗数据
    optional uint32 win_time = 8;//胜场
    optional uint32 win_rate = 9;//胜率
    optional out_base.UserSnapshot enemy= 10;//被攻击方的玩家快照
    repeated out_base.Award awards = 11;//节日掉落展示
    optional uint64 guild_score = 12; //军团积分
}

//玩家兵力变化通知
message S2C_Wrest_PlayerPowerNotify{
    required uint32 power = 1;//当前玩家的兵力
}

//玩家死亡
message S2C_Wrest_PlayerDieNotify{
    required uint32 now_city_id = 1;//玩家复活的城池id
}

//补充兵力
message C2S_Wrest_BuyPower{
    required uint32 num = 1;//购买多少兵力
}

message S2C_Wrest_BuyPower{
    required uint32 ret = 1;
    optional uint32 power = 2;//当前兵力
    optional uint32 num = 3;//购买多少兵力
}

//领取当前元宝
message C2S_Wrest_GetGold{
}
message S2C_Wrest_GetGold{
    required uint32 ret = 1;
    repeated out_base.Award award = 2;//返回award结构
    optional uint32 gold_acc  = 3; //当前累计的元宝
}

//离开玩法页面
message C2S_Wrest_Leave{
}

message S2C_Wrest_Leave{
    required uint32 ret = 1;
}

//获取仇人
message C2S_Wrest_GetEnemyUser{
}

message S2C_Wrest_GetEnemyUser{
    optional uint32 ret = 1;
    repeated out_base.WrestEnemyUser wrest_enemy_user = 2;
}

//获取敌对军团
message C2S_Wrest_GetEnemyGuild{
}

message S2C_Wrest_GetEnemyGuild{
    optional uint32 ret = 1;
    repeated out_base.WrestEnemyGuild wrest_enemy_guild = 2;
}

// 获取赛季任务
message C2S_Wrest_GetMission {
}

message S2C_Wrest_GetMission {
    required uint32 ret = 1;
    repeated out_base.WrestAction wrest_actions = 2;
    repeated out_base.WrestAchieve wrest_achieves = 3;
}

message C2S_Wrest_GetMissionAward {
    required uint32 id = 1;
}

message S2C_Wrest_GetMissionAward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated out_base.Award awards = 3;
}

message C2S_Wrest_GetAchieveAward {
    required uint32 id = 1;
}

message S2C_Wrest_GetAchieveAward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated out_base.Award awards = 3;
}
message C2S_Wrest_DeleteEnemyUser{
    optional uint64 userId = 1;//仇人id
}
message S2C_Wrest_DeleteEnemyUser{
    optional uint32 ret = 1;
    optional uint64 userId = 2;//仇人id
}

//占城状态通知
message S2C_Wrest_CaptureNotify{
    optional out_base.WrestCityStatusInfo city_status_info  = 1;//状态信息
}

//获取战报
message C2S_Wrest_GetRecord {
}

message S2C_Wrest_GetRecord {
    required uint32 ret = 1;
    repeated out_base.WrestRecord records = 2;
}

// 公示匹配
message C2S_Wrest_GetLeagueStatus {
}

message S2C_Wrest_GetLeagueStatus {
    required uint32 ret = 1;
    repeated out_base.WrestServerInfo server_info = 2;//赛季匹配到的区服列表
}

// 联盟排行榜
message C2S_Wrest_GetUnionRank {
    required uint32 city_id = 1; // 城池id
}

message S2C_Wrest_GetUnionRank {
    required uint32 ret = 1;
    repeated out_base.WrestUnion wrest_union = 2;
    optional uint32 city_id = 3;
}

// 军团信息
message C2S_Wrest_GuildMemberInfo {
}

message S2C_Wrest_GuildMemberInfo {
    required uint32 ret = 1;
    repeated out_base.WrestGuildMember members = 2; // 公会成员
    optional uint32 cnt = 3; // 公会人数
    optional string guild_name = 4; // 公会名称
}

// 联盟信息
message C2S_Wrest_UnionServerInfo {
}

message S2C_Wrest_UnionServerInfo {
    required uint32 ret = 1;
    optional string name = 2; // 联盟名称
    optional string leader = 3; // 联盟盟主
    optional uint32 guild_num = 4; // 服务器数量(积分变动过的公会)
    optional uint32 addition = 5; // 产量
    repeated out_base.WrestUnionServer servers = 6; // 服务器信息
    optional uint32 my_sid = 7; // 我的区服id
}

message C2S_Wrest_GetGmAct {
}

message S2C_Wrest_GetGmAct {
    required uint32 gm_start_time = 1; // 开始时间
    required uint32 gm_end_time = 2; // gm结束时间
    required uint32 start_time = 3; // 原来老活动的本服开启时间
    optional bool is_new_act = 4; // 是否是新活动
}


//将灵主界面信息
message C2S_KSoul_Info {
}

message S2C_KSoul_Info {
    required uint32 ret = 1;
    optional uint32 honor = 2; //荣誉值
    optional uint32 max_honor_id = 3; //当前激活的最大荣誉id
    repeated out_base.KSoulChapterInfo cb_info  = 4; //章节信息
}

// 将灵章节信息
message C2S_KSoul_ChapterInfo {
    required uint32 chapter_id = 1;
}

message S2C_KSoul_ChapterInfo {
    required uint32 ret = 1;
    required uint32 chapter_id = 2; //章节id
    repeated out_base.KSoulBook books = 3; //图鉴列表
}

// 将灵图鉴激活
message C2S_KSoul_BookActivate {
    required uint32 book_id = 1;	  //图鉴id
    required uint32 chapter_id = 2; //章节id
}

message S2C_KSoul_BookActivate {
    required uint32 ret = 1;
    required uint32 book_id = 2;	  //图鉴id
    required uint32 chapter_id = 3; //章节id
    optional uint32 honor = 4; //荣誉值
}


// 将灵图鉴升级
message C2S_KSoul_BookUpgrade {
    required uint32 book_id = 1;	  //图鉴id
    required uint32 chapter_id = 2; //章节id
}

message S2C_KSoul_BookUpgrade {
    required uint32 ret = 1;
    required uint32 book_id = 2;	  //图鉴id
    required uint32 chapter_id = 3; //章节id
    optional uint32 star = 4;       //星级
}

// 将灵荣誉成就
message C2S_KSoul_HonorAdvance {
    required uint32 honor_id = 1; //荣誉id
}

message S2C_KSoul_HonorAdvance {
    required uint32 ret = 1;
    required uint32 honor_id = 2; //荣誉id
}


// 将灵抽取信息
message C2S_KSoul_DrawInfo {
}

message S2C_KSoul_DrawInfo {
    required uint32 ret = 1;
    repeated uint32 free_count = 2;  // 今日已使用免费次数(依次为普通、高级招募)
    repeated uint32 free_time = 3; // 上次免费抽取的时间戳(依次为普通、高级招募)
    repeated uint32 total_count = 4;  // 总招募次数(依次为普通、高级招募)
    repeated uint32 daily_count = 5;  // 每日招募次数(依次为普通、高级招募)
}

// 将灵抽取
message C2S_KSoul_Draw {
    required uint32 recruit_type = 1;   // 1 普通 2 高级
    required uint32 is_free = 2;        // 0 免费 1 不免费
    required uint32 num = 3;  // 数量1、10
}

message S2C_KSoul_Draw {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2;
    required uint32 recruit_type = 3;   // 1 普通 2 高级
    required uint32 is_free = 4;        // 0 免费 1 不免费
    required uint32 num = 5;  // 数量1、10
    optional uint32 daily_num = 6; //抽将每日次数 (根据抽将类型来区分数据源)
}

//少年节-获取活动详情
message C2S_YoungAct_GetInfo {
}

message S2C_YoungAct_GetInfo {
    required uint32 ret = 1;
    optional out_base.YoungActInfo info = 2; //开启中的少年节活动详情
    optional bool has_signed_in = 3; //今天是否已经签到
    repeated out_base.StageRewardDetail details = 4; //阶段奖励领取详情
    optional bool has_received_gift_box = 5; //是否领取了定时礼盒
    repeated out_base.YoungActNightMareTask task_infos = 6; //噩梦副本任务奖励领取情况
    repeated out_base.YoungActTokenExchangeHis histories = 7; //商品的兑换历史
}

//少年节-推送活动更新
message S2C_YoungAct_UpdateInfo {
    optional out_base.YoungActInfo update = 1; //本次更新活动
    repeated uint32 deletes = 2; //本次删除活动
}

//少年节-签到
message C2S_YoungAct_SignIn {
    required uint32 act_id = 1; //传YoungActInfo.id
}

message S2C_YoungAct_SignIn {
    required uint32 ret = 1;
    optional uint32 act_id = 2;
    repeated out_base.Award awards = 3;//掉落奖励
}

//少年节-领取节点奖励
message C2S_YoungAct_ReceiveStageReward {
    required uint32 act_id = 1; //传YoungActInfo.id
    required uint32 stage_id = 2; //阶段ID
}

message S2C_YoungAct_ReceiveStageReward {
    required uint32 ret = 1;
    optional uint32 act_id = 2;
    optional uint32 stage_id = 3;
}

//少年节-代币兑换
message C2S_YoungAct_TokenExchange {
    required uint32 act_id = 1; //传YoungActInfo.id
    required uint32 good_id = 2; //物品ID
    required uint32 exchange_num = 3; //兑换数量
}

message S2C_YoungAct_TokenExchange {
    required uint32 ret = 1;
    required uint32 act_id = 2;
    required uint32 good_id = 3;
    required uint32 exchange_num = 4;
}

//少年节-推送任务更新
message S2C_YoungAct_NotifyTask {
    repeated out_base.CommonTask tasks = 1; //任务完成情况
}

//少年节-领取充值奖励
message C2S_YoungAct_GetRechargeAward {
    required uint32 act_id = 1; //活动ID
    required uint32 good_id = 2; //物品ID
}

message S2C_YoungAct_GetRechargeAward {
    required uint32 ret = 1;
    required uint32 act_id = 2;
    required uint32 good_id = 3;
}

//少年节-领取定时礼盒
message C2S_YoungAct_ReceiveTimerGift {
    required uint32 act_id = 1; //传YoungActInfo.id
}

message S2C_YoungAct_ReceiveTimerGift {
    required uint32 ret = 1;
    required uint32 act_id = 2;
    repeated out_base.Award awards = 3; //掉落奖励
}

//少年节-领取噩梦任务奖励
message C2S_YoungAct_ReceiveTaskReward {
    required uint32 act_id = 1; //传YoungActInfo.id
    required uint32 task_id = 2; //young_task_info表中的ID
}

message S2C_YoungAct_ReceiveTaskReward {
    required uint32 ret = 1;
    required uint32 act_id = 2;
    required uint32 task_id = 3;
}


/****************************军团支柱玩法协议*******************************/
//获取匹配信息和当前自己的领取信息
message C2S_GuildBattle_GetInfo {
    required bool is_match = 1; //进军团界面is_match是false，只有点玩法界面才是true
}

message S2C_GuildBattle_GetInfo {
    required uint32 ret = 1;
    required bool is_match = 2; //进军团界面is_match是false，只有点玩法界面才是true
    optional out_base.GuildBattleUserSelf self = 3;       //自己领取的信息
    optional out_base.GuildBattleInfo guild_info = 4;     //军团信息
    repeated out_base.GuildBattleUser users = 5;          //匹配的玩家信息
}

//开始战斗
message C2S_GuildBattle_BeginChallenge {
    optional uint32 index = 1; //当是战车玩法的时候需要填战车id，否则是玩家唯一id
}

message S2C_GuildBattle_BeginChallenge {
    required uint32 ret = 1;
    optional uint32 index = 2;
    repeated uint64 battle_id = 3;
}

message S2C_GuildBattle_FinishChallenge {
    required uint32 ret = 1;
    optional uint32 index = 2;
    repeated out_base.GuildBattleFightResult results = 3;
    optional uint64 score = 4;        //自己本次获得的积分
    optional uint64 contribute = 5;   //自己本次获得的贡献
}

//领取奖励
message C2S_GuildBattle_Award {
    required uint32 id = 1;
}

message S2C_GuildBattle_Award {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
}

//通知新的匹配战车
message S2C_GuildBattle_NoticeNewChariot {
    repeated out_base.GuildBattleUser users = 1; //匹配的玩家信息
}

//获取战报
message C2S_GuildBattle_GetRecords {
}

message S2C_GuildBattle_GetRecords {
    required uint32 ret = 1;
    repeated out_base.GuildBattleRecord records = 2;
}

//广播积分变化
message S2C_GuildBattle_NoticeScore {
    required uint64 score = 1;
    repeated uint32 ids = 2; //新解锁的宝箱id
    optional out_base.GuildBattleRecord record = 3;
}

//广播被攻击玩家信息变化
message S2C_GuildBattle_NoticeUser {
    repeated out_base.GuildBattleUser users = 1;
    optional string atk_name = 2;
    optional uint32 index = 3; //战车id
    optional uint64 damage = 4;
}

// 置换
message C2S_Switch_Execute {
    required uint32 category = 1; // 胚子类型
    required uint64 id1 = 2;      // 胚子唯一id
    required uint64 id2 = 3;      // 胚子唯一id
}

message S2C_Switch_Execute {
    required uint32 ret = 1;
    required uint32 category = 2;
    required uint64 id1 = 3;
    required uint64 id2 = 4;
}

// 讨伐魔将-获取信息
message C2S_DemonBoss_GetInfo {
}

message S2C_DemonBoss_GetInfo {
    required uint32 ret = 1;
    optional uint32 boss_id = 2; // bossId
    optional uint32 start_time = 3; // 开始时间
    optional uint32 end_time = 4; // 结束时间
    optional uint32 team = 5; // 阵营
    optional uint64 honor = 6; // 最高荣誉
    optional uint64 total_honor = 7; // 累计荣誉
    optional uint32 guild_rank = 8; // 军团排名
    optional uint32 total_honor_rank = 9; // 累计荣誉排名
    optional uint32 rest_hp = 10; // 剩余血量百分比
    optional uint32 reborn_time = 11; // 复活时间
    optional uint32 boss_grade = 12; // boss等级Id
    repeated out_base.UserSnapshot user_show = 13; // 显示玩家
    repeated out_base.DemonBossHonorRankUser rank_users = 14; // 休赛期各阵营荣誉值最高排行玩家
    optional out_base.UserSnapshot lucky_atk_user = 15; // 幸运一击玩家信息
    repeated uint32 task_award = 16; // 已领奖任务
    optional uint32 challenge_num = 17; // 攻击次数
    optional uint64 guild_total_honor = 18; // 军团总荣誉值
}

// 讨伐魔将-阵营选择
message C2S_DemonBoss_ChoseTeam {
    required uint32 team = 1; // 阵营
}

message S2C_DemonBoss_ChoseTeam {
    required uint32 ret = 1;
    optional uint32 team = 2;
}

// 讨伐魔将-开始战斗
message C2S_DemonBoss_BeginChallenge {
}

message S2C_DemonBoss_BeginChallenge {
    required uint32 ret = 1;
    optional uint64 battle_id = 2;
}

// 讨伐魔将-战斗完成
message S2C_DemonBoss_FinishChallenge {
    required uint32 ret = 1;
    optional uint64 damage = 2; // 伤害值
    optional uint64 honor = 3; // 获得荣誉
    optional uint32 old_honor_rank = 4; // 旧最高荣誉值排名
    optional uint32 new_honor_rank = 5; // 新最高荣誉值排名
    optional uint32 old_total_honor_rank = 6; // 旧累计荣誉值排名
    optional uint32 new_total_honor_rank = 7; // 新累计荣誉值排名
    repeated out_base.Award challenge_award = 8; // 挑战奖励
    repeated out_base.Award lucky_award = 9; // 幸运奖励
    optional bool is_high = 10; // 是否今日新高
    optional uint32 challenge_num = 11; // 挑战次数
}

// 讨伐魔将-战报
message C2S_DemonBoss_GetReport {
}

message S2C_DemonBoss_GetReport {
    required uint32 ret = 1;
    repeated out_base.DemonBossReport reports = 2; // 战报
}

// 讨伐魔将-玩家进入/退出
message C2S_DemonBoss_UserJoin {
    required bool exit = 1 ; //是否退出
}

message S2C_DemonBoss_UserJoin {
    required uint32 ret = 1;
    optional bool exit = 2; //是否退出
}

// 讨伐魔将-推送信息
message S2C_DemonBoss_Notify {
    optional uint64 damage = 1; // 伤害
    optional uint32 rest_hp = 2; // 剩余血量
    optional uint64 honor = 3; // 荣誉值
    optional uint32 time = 4; // 时间
    optional out_base.UserSnapshot user = 5; // 玩家
    optional uint32 team = 6; // 阵营
    optional uint32 reborn_time = 7; // 复活时间
    optional out_base.UserSnapshot lucky_user = 8; // 幸运一击玩家
    optional uint32 boss_grade = 9; // boss等级
}

// 讨伐魔将-任务领奖
message C2S_DemonBoss_TaskAward {
    required uint32 id = 1;
}

message S2C_DemonBoss_TaskAward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated out_base.Award awards = 3;
    repeated uint32 task_award = 4;
}

// 讨伐魔将-任务一键领奖
message C2S_DemonBoss_OneKeyTaskAward {
    repeated uint32 ids = 1;
}

message S2C_DemonBoss_OneKeyTaskAward {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
    repeated out_base.Award awards = 3;
    repeated uint32 task_award = 4;
}

/****************************精英副本协议*******************************/
//请求副本信息
message C2S_EliteDungeon_GetInfo {
}

message S2C_EliteDungeon_GetInfo {
    required uint32 ret = 1;
    optional out_base.EliteDungeon info = 2;
}

//请求获取某个难度的挑战记录
message C2S_EliteDungeon_GetRecords {
    required uint32 stage_id = 1;
    required uint32 diff_type = 2; //副本难度 enums.ELITE_DUNGEON_RECORD_TYPE
}

message S2C_EliteDungeon_GetRecords {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    required uint32 diff_type = 3;
    repeated out_base.EliteDungeonRecord recs = 4;
}

//获取录像数据
message C2S_EliteDungeon_GetVideo {
    required uint32 stage_id = 1;
    required uint32 diff_type = 2;
    required uint32 rec_type = 3;
}

message S2C_EliteDungeon_GetVideo {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    required uint32 diff_type = 3;
    required uint32 rec_type = 4;
    optional string video = 5;  //bs.BattleVedio的pb序列化字符串
}

//请求战斗
message C2S_EliteDungeon_BeginChallenge {
    required uint32 stage_id = 1;
    required uint32 diff_type = 2; //副本难度 enums.ELITE_DUNGEON_RECORD_TYPE
}

message S2C_EliteDungeon_BeginChallenge {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    required uint32 diff_type = 3;
    optional uint64 battle_id = 4;
}

message S2C_EliteDungeon_FinishChallenge {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    required uint32 diff_type = 3;
    optional bool is_win = 4;//首次通关该难度，客户端需要自己维护累计星数
    optional out_base.FinishResult result = 5;
    optional uint64 knight_add_exp = 6; //武将增加经验
}

//请求扫荡
message C2S_EliteDungeon_FastChallenge {
    required uint32 stage_id = 1;
    required uint32 diff_type = 2;
    required uint32 times = 3;
}

//请求扫荡
message S2C_EliteDungeon_FastChallenge {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    required uint32 diff_type = 3;
    required uint32 times = 4;
    repeated out_base.FinishResult results = 5;
    optional uint64 knight_add_exp = 6; //武将增加经验
}

//请求获取章节宝箱奖励
message C2S_EliteDungeon_GetChapterAward {
    required uint32 chapter_id = 1; //章节id
    required uint32 tp = 2; //1星数宝箱2关卡宝箱
    required uint32 pos = 3; //宝箱位置 从1开始
}

message S2C_EliteDungeon_GetChapterAward {
    required uint32 ret = 1;
    required uint32 chapter_id = 2;
    required uint32 tp = 3; //1星数宝箱2关卡宝箱
    required uint32 pos = 4; //宝箱位置 从1开始
    repeated out_base.Award awards = 5;
}

//请求领取星数成就奖励
message C2S_EliteDungeon_GetAchievementAward {
    required uint32 id = 1;//成就配置id
}

message S2C_EliteDungeon_GetAchievementAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
}

//请求关卡解锁条件
message C2S_EliteDungeon_GetStageInfo {
    required uint32 stage_id = 1;
}

message S2C_EliteDungeon_GetStageInfo {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    repeated out_base.EliteDungeonStageState states = 3;
}


// 幸运翻牌-获取信息
message C2S_LuckyDraw_GetInfo {
    required uint32 act_tp = 1; // 活动类型
    required uint32 act_id = 2; // 活动ID
}

message S2C_LuckyDraw_GetInfo {
    required uint32 ret = 1;
    required uint32 act_tp = 2;
    required uint32 act_id = 3;
    optional uint32 lucky_value = 4; // 幸运值
    repeated out_base.LuckyDrawAward awards = 5; // 奖励池
}

// 幸运翻牌-翻牌
message C2S_LuckyDraw_Exec {
    required uint32 act_tp = 1; // 活动类型
    required uint32 act_id = 2; // 活动ID
    required uint32 index = 3; // 下标,从1开始
}

message S2C_LuckyDraw_Exec {
    required uint32 ret = 1;
    required uint32 act_tp = 2;
    required uint32 act_id = 3;
    required uint32 index = 4;
    repeated out_base.Award awards = 5; // 奖励
    optional uint32 lucky_value = 6; // 幸运值
    optional uint32 award_id = 7; // 配置id
}

// 幸运翻牌-刷新
message C2S_LuckyDraw_Refresh {
    required uint32 act_tp = 1; // 活动类型
    required uint32 act_id = 2; // 活动ID
}

message S2C_LuckyDraw_Refresh {
    required uint32 ret = 1;
    required uint32 act_tp = 2; // 活动类型
    required uint32 act_id = 3; // 活动ID
    repeated out_base.LuckyDrawAward awards = 4; // 奖励
}

//无双地牢-进入
message C2S_DeadTower_EnterInfo {
}

message S2C_DeadTower_EnterInfo {
    required uint32 ret = 1;
    optional uint32 last_reset_time = 2;        //上次重置时间
    repeated uint32 treasure_has_id = 3;        //寻宝当前id
    optional uint32 zone_id = 4;                //区域
    optional uint32 now_grid_id = 5;            //当前格子
    optional uint32 challenge_num = 6;          //挑战次数
    optional uint32 challenge_fool = 7;         //今日已挑战层数
    optional uint32 last_recover_time = 8;      //上次次数恢复时间
    repeated out_base.KV cards = 9;             //拥有卡片
    repeated out_base.DeadTowerGrid grids = 10; //格子内容
    optional bool is_reset = 11;                //是否重置
    optional bool is_revive = 12;               //是否恢复血量
    repeated uint64 user_hp = 13;               //阵容血量
    repeated uint32 pass_grids = 14;            //通过路线
}


//无双地牢-战斗开始
message C2S_DeadTower_BattleStart {
    required uint32 grid_id = 1;    //格子id
    repeated uint32 cards = 2;      //使用卡片
}

message S2C_DeadTower_BattleStart {
    required uint32 ret = 1;
    required uint32 grid_id = 2;    //格子id
    repeated uint32 cards = 3;      //使用卡片
    optional uint64 battle_id  = 4; //战斗id
}

//无双地牢-战斗完成
message S2C_DeadTower_BattleFinish {
    required uint32 ret = 1;
    required uint32 zone_id = 2;             //区域id
    required uint32 grid_id = 3;             //格子id
    optional bool is_win = 4;                //是否战胜
    optional uint32 challenge_num = 5;       //今日挑战次数
    repeated out_base.Award awards = 6;      //奖励
    repeated uint64 user_hp = 7;             //剩余血量千分比
}



//无双地牢-获取卡片
message C2S_DeadTower_GetCard {
    required uint32 grid_id = 1;    //格子id
}

message S2C_DeadTower_GetCard {
    required uint32 ret = 1;
    required uint32 grid_id = 2;    //格子id
    repeated out_base.KV cards = 3; //卡片背包
}

//无双地牢-寻宝
message C2S_DeadTower_Treasure {
    required uint32 id = 1;             //寻宝地图id
}

message S2C_DeadTower_Treasure {
    required uint32 ret = 1;
    required uint32 id = 2;             //寻宝地图id
    repeated out_base.Award awards = 3; //寻宝奖励
    optional uint32 is_max = 4;         //是否大奖
    repeated uint32 treasure_has_id = 5;//已寻宝id
}

//无双地牢-好友进度
message C2S_DeadTower_FriendProgress {
}

message S2C_DeadTower_FriendProgress {
  required uint32 ret = 1;
  repeated out_base.DeadTowerProgress progress = 2;
}

message C2S_Guild_RedPacket_OneKey_Pick {
    required bool only_sys = 1; //为true的时候表示只领取系统红包
}

message S2C_Guild_RedPacket_OneKey_Pick {
    required uint32 ret = 1;
    required bool only_sys = 2;
    repeated out_base.Award awards = 3;
}

//时空召唤-抽卡
message C2S_Recruit_RecruitAuKnight {
    required uint32 activity_id = 1;   //活动id
    required uint32 id = 2;            //抽卡配置id
    required uint32 draw_type = 3;     //区分免费抽，单抽，十连 1；单抽 2：十连
}

message S2C_Recruit_RecruitAuKnight {
    required uint32 ret = 1;
    required uint32 activity_id = 2;   //活动id
    required uint32 id = 3;            //抽卡配置id
    required uint32 draw_type = 4;     //区分免费抽，单抽，十连 1；单抽 2：十连
    repeated out_base.Award awards = 5;
}

message C2S_Recruit_GetRecruitAuKnightInfo {
    required uint32 activity_id = 1; // 活动id
}

message S2C_Recruit_GetRecruitAuKnightInfo {
    repeated out_base.RecruitAuKnight recruit_au_knight = 1;
    repeated out_base.ActivityCommonRecord records = 2; //本服抽卡记录
}

//时空召唤-领取阶段奖励
message C2S_Recruit_GetRecruitAuKnightAward {
    required uint32 activity_id = 1;   //活动id
}

message S2C_Recruit_GetRecruitAuKnightAward {
    required uint32 ret = 1;
    required uint32 activity_id = 2;   //活动id
    repeated out_base.Award awards = 3;
}

//时空召唤-领取充值奖励
message C2S_Recruit_GetRechargeAward {
    required uint32 activity_id = 1;   //活动id
    required uint32 id = 2;            //充值配置id
}

message S2C_Recruit_GetRechargeAward {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    required uint32 id = 3;
    repeated out_base.Award awards = 4;
}

//==========================乱世英杰活动==============================
//请求活动信息
message C2S_WarLord_GetInfo {
}

message S2C_WarLord_GetInfo {
    required uint32 ret = 1;
    optional uint32 act_id = 2;//活动ID
    optional uint32 start_tm = 3;//开始时间
    optional uint32 end_tm = 4; //结束时间
    repeated uint64 max_damage = 5; //个人历史最高伤害
}

//获取成就信息
message C2S_WarLord_GetAchievementInfo {
}

message S2C_WarLord_GetAchievementInfo {
    required uint32 ret = 1;
    repeated out_base.WarlordAction states = 2;
}

//领取成就奖励
message C2S_WarLord_GetAchievementAward {
    required uint32 id = 1; //成就配置id
}

//领取成就奖励
message S2C_WarLord_GetAchievementAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated out_base.Award awards = 3;
}

//进入地图
message C2S_WarLord_Enter {
}

message S2C_WarLord_Enter {
    required uint32 ret = 1;
    optional bs.BattleTeam own_team = 2; //自己的战斗数据
    repeated uint32 random_seeds = 3;// 种子序列

}

//伤害列表
message C2S_WarLord_Finish {
    required uint64 res_hp = 1; //剩余血量
    repeated out_base.WarlordDamage damage = 2; //伤害列表
    repeated uint32 dead_monster = 3; //怪物死亡列表
}

message S2C_WarLord_Finish {
    required uint32 ret = 1;
    repeated out_base.Award awards = 2; //奖励列表
    optional uint64 max_damage = 3; //个人历史最高伤害
    optional uint32 order = 4; //进入order
    optional bool is_win = 5;//是否成功
    repeated out_base.Award rare_awards = 6; //稀有奖励列表
}

// 屏蔽聊天
message C2S_BlockedChat_GetInfo {
}

message S2C_BlockedChat_GetInfo {
  required uint32 ret = 1;
  optional uint32 start_time = 2;//屏蔽开始时间
  optional uint32 end_time = 3;//屏蔽结束时间
  optional bool is_close = 4;//是否关闭屏蔽功能
}


message S2C_BlockedChat_ChangeNotify {
  optional uint32 start_time = 1;//屏蔽开始时间
  optional uint32 end_time = 2;//屏蔽结束时间
  optional bool is_close = 3;//是否关闭屏蔽功能
}

// 月卡强化已领奖信息
message C2S_Recharge_MonthCard_GetInfo {
}

message S2C_Recharge_MonthCard_GetInfo {
  required uint32 ret = 1;
  repeated uint32 award_ids = 2;//已领奖节点id
}

// 月卡强化领奖
message C2S_Recharge_MonthCard_Award {
  required uint32 id = 1;//奖励节点id
}

message S2C_Recharge_MonthCard_Award {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
  optional bool is_clear = 4;//是否重置
}

// 军团图腾-获取图腾信息
message C2S_GuildTotem_GetInfo {
}

message S2C_GuildTotem_GetInfo {
  required uint32 ret = 1;
  repeated out_base.GuildTotem totem_info = 2;
}

// 军团图腾-节点升级
message C2S_GuildTotem_NodeUpgrade {
  required uint32 totem_id = 1; // 图腾advanceId
  required uint32 node_id = 2; // 节点id
}

message S2C_GuildTotem_NodeUpgrade {
  required uint32 ret = 1;
  required uint32 totem_id = 2; // 图腾advanceId
  required uint32 node_id = 3; // 节点id
  optional uint32 node_level = 4; // 节点等级
}

// 军团图腾-图腾品质提升
message C2S_GuildTotem_Upgrade {
  required uint32 totem_id = 1; // 图腾advanceId
}

message S2C_GuildTotem_Upgrade {
  required uint32 ret = 1;
  required uint32 totem_id = 2; // 图腾advanceId
  optional uint32 totem_quality = 3; // 图腾品质
}

// 烽火连城-获取信息
message C2S_FlameCity_GetInfo {
}

message S2C_FlameCity_GetInfo {
  required uint32 ret = 1;
  optional uint32 topic_id = 2; // 主题ID
  repeated out_base.FlameCityChapter chapters = 3; // 章节信息
  repeated uint32 main_chapter_award = 4; // 玩家主线章节通关奖励
  repeated uint32 perfect_chapter_award = 5; // 玩家完美章节通关奖励
}

// 烽火连城-进入章节
message C2S_FlameCity_EnterChapter {
  required uint32 chapter_id = 1; // 章节ID
}

message S2C_FlameCity_EnterChapter {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节ID
  optional out_base.FlameCityChapter chapter = 3; // 章节信息
  optional uint32 attack_target = 4; // 进攻目标
  repeated out_base.FlameCityBlock blocks = 5; // 格子数据
  repeated uint32 unlock_blocks = 6; // 已解锁的格子id
  repeated uint32 box_award = 7; // 玩家已领取章节内宝箱奖励
  repeated uint32 treasure_award = 8; // 玩家已领取章节内宝藏奖励
  repeated out_base.FlameCityBlockWinGrade block_win_grade = 9; // 玩家赢过的格子
  repeated out_base.KV leader_attack_block = 10; // 军团长攻击的格子
  repeated uint32 main_chapter_award = 11; // 玩家主线章节通关奖励
  repeated uint32 perfect_chapter_award = 12; // 玩家完美章节通关奖励
}

// 烽火连城-攻击
message C2S_FlameCity_AttackBegin {
  required uint32 chapter_id = 1; // 章节id
  required uint32 block_id = 2; // 格子id
  required uint32 grade = 3; // 等级
}

message S2C_FlameCity_AttackBegin {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节id
  required uint32 block_id = 3; // 格子id
  required uint32 grade = 4; // 等级
  optional uint64 battle_id = 5; // 战斗id
}

message S2C_FlameCity_AttackFinish {
  required uint32 ret = 1;
  optional uint32 chapter_id = 2; // 章节id
  optional uint32 block_id = 3; // 格子id
  optional uint32 grade = 4; // 等级
  optional uint32 user_cost_hp = 5; // 本次消耗血量
  optional uint32 cost_hp = 6; // 总消耗血量
  repeated out_base.Award awards = 7; // 奖励
  optional uint32 max_grade = 8; // 最大等级
  optional bool is_win = 9; // 是否输赢
}

// 烽火连城-设置目标
message C2S_FlameCity_ChoseTarget {
  required uint32 chapter_id = 1; // 章节id
  required uint32 block_id = 2; // 格子id
}

message S2C_FlameCity_ChoseTarget {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节id
  required uint32 block_id = 3; // 格子id
}

// 烽火连城-查询战报
message C2S_FlameCity_GetReport {
  required uint32 chapter_id = 1; // 章节id
}

message S2C_FlameCity_GetReport {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节id
  repeated out_base.FlameCityReport reports = 3; // 战报
}

// 烽火连城-领取章节奖励
message C2S_FlameCity_GetChapterAward {
  required uint32 chapter_id = 1;// 章节id
  required uint32 tp = 2; // 领奖类型（1:主线通关 2：完美通关）
}

message S2C_FlameCity_GetChapterAward {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节id
  required uint32 tp = 3; // 领奖类型（1：主线通关 2：完美通关）
  repeated out_base.Award awards = 4; // 奖励
}

// 烽火连城-领取宝箱奖励
message C2S_FlameCity_GetBoxAward {
  required uint32 chapter_id = 1; // 章节id
  required uint32 block_id = 2; // 格子id
}

message S2C_FlameCity_GetBoxAward {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节id
  required uint32 block_id = 3; // 格子id
  repeated out_base.Award awards = 4; // 奖励
  optional out_base.FlameCityChapter chapter = 5; // 章节
}

// 烽火连城-领取宝藏奖励
message C2S_FlameCity_GetTreasureAward {
  required uint32 chapter_id = 1; // 章节id
  required uint32 block_id = 2; // 格子id
  required uint32 index = 3; // 下标
}

message S2C_FlameCity_GetTreasureAward {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节id
  required uint32 block_id = 3; // 格子id
  required uint32 index = 4; // 下标
  repeated out_base.Award awards = 5; // 奖励
  optional uint32 award_id = 6; // 奖励id
}

// 烽火连城-获取个人贡献排行榜
message C2S_FlameCity_GetCostHpRank {
}

message S2C_FlameCity_GetCostHpRank {
  required uint32 ret = 1;
  repeated out_base.FlameCityMember members = 2; // 玩家信息
}

// 烽火连城-攻击推送
message S2C_FlameCity_AttackNotify {
  required uint32 chapter_id = 1; // 章节id
  required uint32 block_id = 2; // 格子id
  required uint32 cost_hp = 3; // 格子扣除血量
  repeated out_base.KV leader_attack_block = 4; // 军团长攻击的格子
  optional uint64 user_id = 5; // 玩家id
}

// 烽火连城-快速挑战
message C2S_FlameCity_FastAttack {
  required uint32 chapter_id = 1; // 章节id
  required uint32 block_id = 2; // 格子id
  required uint32 grade = 3; // 怪物等级
  required uint32 num = 4; // 挑战次数
}

message S2C_FlameCity_FastAttack {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节id
  required uint32 block_id = 3; // 格子id
  required uint32 grade = 4; // 等级
  required uint32 num = 5; // 挑战次数
  repeated out_base.FlameCityAttackAward atk_awards = 6; // 挑战奖励
  repeated out_base.Award awards = 7; // 奖励
  optional uint32 cost_hp = 8; // 格子扣除血量
}

// 烽火连城-玩家进入/退出
message C2S_FlameCity_UserJoin {
  required uint32 chapter_id = 1; // 章节id
  required bool exit = 2; //是否退出
}

message S2C_FlameCity_UserJoin {
  required uint32 ret = 1;
  optional uint32 chapter_id = 2; // 章节id
  optional bool exit = 3; //是否退出
}

// 烽火连城-获取宝藏奖励列表
message C2S_FlameCity_GetTreasureList {
  optional uint32 chapter_id = 1; // 章节id(0:查看所有章节)
}

message S2C_FlameCity_GetTreasureList {
  required uint32 ret = 1; 
  optional uint32 chapter_id = 2;
  repeated out_base.FlameCityTreasure treasure = 3; // 宝藏奖励
}

// 烽火连城-章节信息推送
message S2C_FlameCity_ChapterNotify {
  optional out_base.FlameCityChapter chapter = 1; // 章节信息
}

// 烽火连城-一键领取宝箱奖励
message C2S_FlameCity_OneKeyBoxAward {
  required uint32 chapter_id = 1; //章节id
  repeated uint32 block_ids = 2; // 格子id
}

message S2C_FlameCity_OneKeyBoxAward {
  required uint32 ret = 1;
  required uint32 chapter_id = 2; // 章节id
  repeated uint32 block_ids = 3; // 格子id
  repeated uint32 box_award = 4; // 玩家已领取章节内宝箱奖励
  repeated out_base.Award awards = 5; // 奖励
  optional out_base.FlameCityChapter chapter = 6; // 章节
}

// 烽火连城-攻击目标推送
message S2C_FlameCity_TargetNotify {
  required uint32 chapter_id = 1; // 章节id
  required uint32 block_id = 2; // 格子id
}

//武将幻紫
message C2S_Knight_Purplize {
  required uint64 id = 1;  //武将id
}

message S2C_Knight_Purplize {
  required uint32 ret = 1;
  required uint64 id = 2;
}

//神兵协战-上阵
message C2S_Artifact_HelpUp {
  required uint64 artifact_id = 1;//主神兵ID
  required uint64 helper_id = 2;//协战神兵ID
}

message S2C_Artifact_HelpUp{
  required uint32 ret = 1;
  required uint64 artifact_id = 2;//主神兵ID
  required uint64 helper_id = 3;//协战神兵ID
}

//神兵协战-下阵
message C2S_Artifact_HelpDown{
  required uint64 artifact_id = 1;//主神兵ID
}

message S2C_Artifact_HelpDown{
  required uint32 ret = 1;
  required uint64 artifact_id = 2;//主神兵ID
}

//*************************************************军团战************************************************************
//军团战-获取军团战信息
message C2S_GVG_GetInfo {
}

message S2C_GVG_GetInfo {
  required uint32 ret = 1;
  optional uint32 start_time = 2; //活动开始时间
  optional uint32 joined_user_num = 3; //参战人数
  optional bool is_joined = 4; //当前玩家是否已参战
  optional bool is_guild_joined = 5; //军团是否已报名
  optional out_base.GVGMatchInfo my_match = 6; //己方军团比赛信息
  optional uint32 mvp_num = 7; //mvp次数
  optional uint32 kill_num = 8; //杀人次数
}

// 军团战-获取赛季成就
message C2S_GVG_GetAchieve {
}

message S2C_GVG_GetAchieve {
  required uint32 ret = 1;
  repeated out_base.GVGUserAchieve achieves = 2;
}

// 军团战-领取成就奖励
message C2S_GVG_GetAchieveAward {
  required uint32 id = 1; //成就ID
}

message S2C_GVG_GetAchieveAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
}

//军团战-报名 自动判断报名者身份执行玩家参战或军团报名逻辑
message C2S_GVG_Join {
}

message S2C_GVG_Join {
  required uint32 ret = 1;
  optional bool is_guild_joined = 2; //军团是否报名
}

//军团战-获取历史赛季
message C2S_GVG_GetSeasonHistory {
}

message S2C_GVG_GetSeasonHistory {
  required uint32 ret = 1;
  repeated out_base.GVGSeasonResult history = 2; //各赛季历史
}

//军团战-进入比赛
message C2S_GVG_EnterMatch {
}

message S2C_GVG_EnterMatch {
  required uint32 ret = 1;
  optional out_base.GVGMatchInfo info = 2; //比赛信息
  repeated out_base.GVGMatchUser users = 3; //比赛中的玩家列表
  repeated out_base.GVGMatchGridGate gates = 4; //城门
  repeated out_base.GVGMatchGridBuff buffs = 5; //BUFF点
  repeated out_base.GVGMatchGridTower towers = 6; //炮台
  optional uint32 revive_enable_time = 7; //下一次可复活时间
  optional uint64 message_index = 8; //消息序号
}

//军团战-离开比赛
message C2S_GVG_LeaveMatch {
}

message S2C_GVG_LeaveMatch {
  required uint32 ret = 1;
}

//军团战-玩家移动
message C2S_GVG_Move {
  required uint32 target_pos_id = 1; //终点位置ID
  required uint32 cost_time = 2; //需要时间
}

message S2C_GVG_Move {
  required uint32 ret = 1;
  required uint32 target_pos_id = 2; //终点位置ID
  required uint32 cost_time = 3; //需要时间
  optional uint32 arrive_time = 4; //到达目的地时间
}

//军团战-移动推送
message S2C_GVG_NotifyMove {
  required uint64 user_id = 1; //玩家ID
  required uint32 pos_id = 2; //目标位置
  optional uint32 arrive_time = 3; //到达时间 无此值时表示立即到达
  optional uint64 owner_guild_id = 4; //炮塔拥有者是发生变更时，返回当前炮台占领的军团
  optional uint32 protect_end_time = 5; //如果是站上炮台占领位，则返回保护到期时间
  required uint64 message_index = 6; //消息序号
}

//军团战-玩家复活
message C2S_GVG_Revive {

}

message S2C_GVG_Revive {
  required uint32 ret = 1;
}

//军团战-攻击玩家
message C2S_GVG_AttackUser {
  required uint64 user_id = 1; //目标玩家ID
}

message S2C_GVG_AttackUser {
  required uint32 ret = 1;
  required uint64 user_id = 2; //目标玩家ID
}

//军团战-攻击玩家推送
message S2C_GVG_NotifyAttackUser {
  required uint64 attacker_user_id = 1; //攻击方玩家ID
  required uint64 attacker_score = 2; //攻击方当前积分
  required uint32 attacker_power = 3; //攻击方当前兵力
  required uint32 attacker_cont_kill_num = 4; //连续杀人数
  required uint64 defender_user_id = 5; //被攻击方玩家ID
  required uint64 defender_score = 6; //被攻击方当前积分
  required uint32 defender_power = 7; //被攻击方当前兵力
  required uint32 defender_cont_kill_num = 8; //被攻击方连续杀人数
  optional uint32 attacker_protect_end_time = 9; //如果是攻占炮台占领位，则返回保护到期时间
  optional uint64 owner_guild_id = 10; //如果是炮台占领区占领军团，则返回当前占领者
  required uint64 attacker_guild_id = 11; //防守方军团ID
  required uint64 attacker_guild_score = 12;//攻击方军团积分
  required uint64 defender_guild_id = 13; //攻击方军团ID
  required uint64 defender_guild_score = 14;//防守方方军团积分
  required uint64 message_index = 15; //消息序号
}

//军团战-攻击城门
message C2S_GVG_AttackGate {
}

message S2C_GVG_AttackGate {
  required uint32 ret = 1;
}

//军团战-攻击城门推送
message S2C_GVG_NotifyAttackGate {
  required uint64 user_id = 1; //玩家ID
  required uint64 score = 2; //当前积分
  required uint32 gate_grid_id = 3; //城门格子ID
  optional uint64 gate_hp = 4; //城门当前耐久
  required uint64 guild_id = 5; //军团ID
  required uint64 guild_score = 6; //军团积分
  required uint64 message_index = 7; //消息序号
}

//军团战-产生新buff推送
message S2C_GVG_NotifyNewBuff {
  required out_base.GVGMatchGridBuff grid_buff = 1; //Buff区域
}

//军团战-使用炮台攻击
message S2C_GVG_NotifyTowerAttack {
  repeated out_base.KV users = 1; //炮台攻击的玩家列表 id:玩家ID num:玩家当前积分
  optional uint32 tower_grid_id = 2; //炮台区域ID
  required uint64 guild_id = 3; //军团ID
  required uint64 guild_score = 4; //军团积分
  required uint64 message_index = 5; //消息序号
}

//军团战-玩家进入推送
message S2C_GVG_NotifyUserEnter {
  required out_base.GVGMatchUser user = 1; //比赛玩家信息
  required uint64 message_index = 5; //消息序号
}

//军团战-玩家离开推送
message S2C_GVG_NotifyUserLeave {
  required uint64 user_id = 1; //玩家ID
}

//军团战-复活推送
message S2C_GVG_NotifyRevive {
  required uint64 user_id = 1; //玩家ID
  required uint32 pos_id = 2; //所在位置
  required uint64 message_index = 8; //消息序号
}

//军团战-玩家获得Buff
message C2S_GVG_AddBuff {
}

message S2C_GVG_AddBuff {
  required uint32 ret = 1;
}

//军团战-玩家获得Buff推送
message S2C_GVG_NotifyAddBuff {
  required uint64 user_id = 1; //玩家ID
  required uint32 buff_id = 2; //Buff ID
}

//军团战-玩家移除Buff推送
message S2C_GVG_NotifyRemoveBuff {
  required uint64 user_id = 1; //玩家ID
}

//军团战-比赛结束通知
message S2C_GVG_NotifyMatchEnd {
  required out_base.GVGMatchInfo match_info = 4; //GVG战斗结果
}

//军团战-获取玩家快照
message C2S_GVG_GetUserSnapshots {
  repeated uint64 user_ids = 1; //请求的玩家ID列表
}

message S2C_GVG_GetUserSnapshots {
  required uint32 ret = 1;
  repeated uint64 user_ids = 2; //请求的玩家ID列表
  repeated out_base.UserSnapshot snapshots = 3; //比赛中的玩家列表
}

//获取赛季军团排名
message C2S_GVG_GetGuildRankList {
  required uint32 size = 1; //排行长度
}

message S2C_GVG_GetGuildRankList {
  required uint32 ret = 1;
  required uint32 size = 2; //排行长度
  optional uint32 self_rank = 3; //自己的排名
  optional uint64 self_score = 4; //我的积分
  repeated out_base.RankUnit list = 5; //军团列表
}

//淘汰赛以后的对阵
message C2S_GVG_GetAdvanceMatches {
}

message S2C_GVG_GetAdvanceMatches {
  required uint32 ret = 1;
  repeated out_base.GVGMatchSummary advance_matches = 2; //晋级赛
  optional out_base.GVGMatchSummary final_match = 3; //决赛
}

//****************************************************************************************************************

// 18加-获取信息
message C2S_EighteenPlus_Info {
}

message S2C_EighteenPlus_Info {
    required uint32 ret = 1;
      optional bool is_open = 2; // 是否开启
}

// 18加-推送
message S2C_EighteenPlus_Notify {
    optional bool is_open = 1; // 是否开启 
}

/****************************************************学宫论战***************************************************************/
//学宫论战-进入玩法
message C2S_Debate_EnterInfo {
}

message S2C_Debate_EnterInfo {
  required uint32 ret = 1;
  repeated uint32 line_up = 2;          // 学宫阵位: 数组下标为武将上阵阵位,数组元素未1-12的学宫阵位,0-6为首阵,7-12为次阵
  optional uint32 doctor_num = 3;       // 战胜五经博士数量
  optional uint32 score = 4;            // 积分
  optional uint32 score_rank = 5;       // 积分排名
  repeated uint32 doctor_awarded = 6;   // 已领取五经博士奖励
  optional bool is_match = 7;           // 是否自动刷新匹配
  repeated out_base.DebateUser match_users = 8;  // 匹配玩家
  optional uint32 turn = 9;             // 轮次
}

//学宫论战-布阵保存
message C2S_Debate_LineUp {
  repeated uint32 line_up = 1;     // 学宫阵位
}

message S2C_Debate_LineUp {
  required uint32 ret = 1;
  repeated uint32 line_up = 2;     // 学宫阵位
}

//学宫论战-战斗
message C2S_Debate_BattleStart {
  required uint32 enemy_index = 1;     // out_base.DebateUser中的index
}

message S2C_Debate_BattleStart {
  required uint32 ret = 1;
  required uint32 enemy_index = 2;
  optional uint64 battle_id  = 3;   // 战斗id
}

//学宫论战-战斗完成
message S2C_Debate_BattleFinish {
    required uint32 ret = 1;
    required uint32 enemy_index = 2;         // 敌人
    optional uint32 score = 3;               // 积分
    required bool is_win = 4;                // 是否获胜
    optional bool is_match = 5;              // 是否自动刷新匹配
    repeated uint32 multi_result = 6;        // 多轮战斗结果
    repeated out_base.Award awards = 7;      // 奖励
    optional uint32 score_rank = 8;          // 积分排名
}

//学宫论战-手动匹配
message C2S_Debate_RefreshMatch {
}

message S2C_Debate_RefreshMatch {
  required uint32 ret = 1;
  repeated out_base.DebateUser match_users = 2;  // 匹配玩家
}

//学宫论战-领取博士奖励
message C2S_Debate_DoctorReward {
  required uint32 stage_id = 1;            // 领奖阶段
}

message S2C_Debate_DoctorReward {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  repeated out_base.Award awards = 3;      // 奖励
}

//学宫论战-获取测试玩家阵位
message C2S_Debate_TestLineUp {
  required uint64 player_id = 1;            // 玩家id
}

message S2C_Debate_TestLineUp {
 required uint32 ret = 1;
 required uint64 player_id = 2;
 repeated uint32 line_up = 3;     // 学宫阵位
 repeated out_base.GrowKnight knights = 4;     // 上阵武将
}

//战法升级-->req
message C2S_Magic_Upgrade{
	required uint64 id = 1;				//战法id
	required uint32 upgrade_count = 2;	//升级次数
}

//战法升级-->ret
message S2C_Magic_Upgrade{
	required uint32  ret = 1;			//结果码
	required uint64 id = 2;				//战法id
	required uint32 upgrade_count = 3;	//升级次数
}

//战法升阶-->req
message C2S_Magic_Advance{
	required uint64 id = 1;		//战法id
	repeated uint64 consumes1 = 2;	//孔位1选择材料列表
	repeated uint64 consumes2 = 3;	//孔位2选择材料列表
	repeated uint64 consumes3 = 4;	//孔位3选择材料列表
}

//战法升阶-->ret
message S2C_Magic_Advance{
	required uint32 ret	= 1;		//结果码
	required uint64 id   = 2;		//战法id
	repeated uint64 consumes1 = 3;	//孔位1选择材料列表
	repeated uint64 consumes2 = 4;	//孔位2选择材料列表
	repeated uint64 consumes3 = 5;	//孔位3选择材料列表
}
/**************************************************************************************************************************/

// 军团头像框
message C2S_Guild_FrameInfo {
}

message S2C_Guild_FrameInfo {
  required uint32 ret = 1;
  repeated out_base.LimitFrameInfo frames = 2;  // 已激活的边框和图像
}

//预抽卡-获取活动详情
message C2S_PreDraw_GetInfo {
}

message S2C_PreDraw_GetInfo {
  required uint32 ret = 1;
  optional out_base.PreDrawActInfo info = 2;
  optional out_base.UserPreDraw user_data = 3;
}

//预抽卡-领取直登奖励
message C2S_PreDraw_ReceiveLoginAward {

}

message S2C_PreDraw_ReceiveLoginAward {
  required uint32 ret = 1;
  repeated out_base.Award award = 2;
}

//预抽卡-领取最终奖励
message C2S_PreDraw_ReceiveFinalAward {

}

message S2C_PreDraw_ReceiveFinalAward {
  required uint32 ret = 1;
  repeated out_base.Award award = 2;
}

//预抽卡-活动配置更新推送
message S2C_PreDraw_ChangeNotify {
  optional out_base.PreDrawActInfo update = 1;
  optional uint32 delete = 2;
}

