syntax = "proto2";
import "out_base.proto";
import "bs.proto";
package cs; 

enum ID {
	MSG_ENUM_DEFAULT = 0;
  MSG_BEGIN = 10099;//cs协议开始
  MSG_END = 20000;//cs协议结束
	//协议开始 最小值为10100
	MSG_C2S_Flush = 10100;//flush协议 刷新基础数据
	MSG_S2C_Flush = 10101;//返回原则：有定量的可以合并到该协议 会自增长的单独协议
	MSG_S2C_FlushRedPoint = 10103;//红点
	MSG_S2C_FlushKnight = 10104;
	MSG_S2C_FlushFragment = 10105;
	MSG_S2C_FlushItem = 10106;
	MSG_S2C_FlushUniteToken = 10107;
	MSG_S2C_FlushResource = 10108;
	MSG_S2C_FlushFormation = 10109;
	MSG_S2C_FlushAdvanceEquipment = 10110;
	MSG_S2C_FlushEquipment = 10111;
	MSG_S2C_FlushTreasure = 10112;
	MSG_S2C_FlushDress = 10113;
	MSG_S2C_FlushRedPacket = 10114;
	MSG_S2C_FlushRandomPlayer = 10115;
	MSG_S2C_FlushBiographyItem = 10116;
	MSG_S2C_FlushSkin = 10117;
	MSG_S2C_FlushPrivilege= 10118;

	MSG_C2S_GetUserConfig = 10130;//玩家通用设置
	MSG_S2C_GetUserConfig = 10131;
	MSG_C2S_SetUserConfig = 10132;//设置玩家通用设置
	MSG_S2C_SetUserConfig = 10133;
	MSG_C2S_Test = 10140;	// 发放测试物品
	MSG_S2C_Test = 10141;
	MSG_C2S_Chat = 10142;//聊天	
	MSG_S2C_Chat = 10143;
	MSG_S2C_ChatBroadcast = 10144;//聊天广播 消息接受
	MSG_C2S_SyncTime = 10145;//同步时间
	MSG_S2C_SyncTime = 10146;//同步时间
	MSG_C2S_Sell = 10147;	// 出售
	MSG_S2C_Sell = 10148;
  MSG_S2C_Notice = 10149; //走马灯
	MSG_S2C_OpObject = 10150;//身上状态变更
	MSG_S2C_CmdRet = 10151;//协议异常
	MSG_S2C_ActionStatusFlush = 10152;//各种行为类状态刷新协议
	MSG_C2S_Chat_LeftTimes = 10153;//世界聊天剩余可用次数
	MSG_S2C_Chat_LeftTimes = 10154;
  MSG_C2S_GetUserBattleTeam = 10155;
  MSG_S2C_GetUserBattleTeam = 10156;

  MSG_C2S_GetUserDetailInfo = 10158; //获取玩家详细信息
  MSG_S2C_GetUserDetailInfo = 10159;

	MSG_C2S_Formation_ChangePosition = 10160;//改变出战位置
	MSG_S2C_Formation_ChangePosition = 10161;
	MSG_C2S_Formation_ChangeFormation = 10162;//上阵其他
	MSG_S2C_Formation_ChangeFormation = 10163;

  MSG_C2S_GetCommonRankList = 10170;//获取通用排行榜信息
  MSG_S2C_GetCommonRankList = 10171;
  MSG_C2S_GetCommonPlayNum = 10172;//获取通用玩法次数信息
  MSG_S2C_GetCommonPlayNum = 10173;
  MSG_C2S_BuyCommonPlayNum = 10174;//购买通用玩法次数（包括重置类型）
  MSG_S2C_BuyCommonPlayNum = 10175;
  MSG_S2C_FlushCommonPlayNum = 10176;//刷新通用玩法次数信息给客户端
  MSG_C2S_GetBattleRecord = 10177; //获取战斗纪录
  MSG_S2C_GetBattleRecord = 10178;

  MSG_C2S_ModifyUserInfo = 10180;//修改玩家信息
  MSG_S2C_ModifyUserInfo = 10181;

  MSG_C2S_GetUserState = 10182;//根据模块获取玩家状态集
  MSG_S2C_GetUserState = 10183;

  MSG_C2S_GetModuleTaskInfo = 10185;//获取通用action模块信息
  MSG_S2C_GetModuleTaskInfo = 10186;
  MSG_C2S_GetModuleTaskAward = 10187;//获取通用action模块奖励
  MSG_S2C_GetModuleTaskAward = 10188;

  MSG_C2S_TestAsyncBattleBegin = 10190;//测试异步战斗
  MSG_S2C_TestAsyncBattleBegin = 10191;
  MSG_S2C_TestAsyncBattleFinish = 10192;

  MSG_C2S_GetBattleVideo = 10195; //获取战斗录像
  MSG_S2C_GetBattleVideo = 10196;

  MSG_C2S_UpdateRandomPlayer = 10197;
  MSG_S2C_UpdateRandomPlayer = 10198;

	//10200开始以后都是模块逻辑 注意id间隔符合readme中规范
  MSG_C2S_UniteToken_Awaken = 10200;//觉醒兵符
  MSG_S2C_UniteToken_Awaken = 10201;  
  MSG_C2S_UniteToken_Upgrade = 10202;//升级兵符
  MSG_S2C_UniteToken_Upgrade = 10203;
  MSG_C2S_UniteToken_GetAttribute = 10204;//获取兵符属性
  MSG_S2C_UniteToken_GetAttribute = 10205;
  MSG_C2S_UniteToken_StarIncrease = 10206;//兵符升星
  MSG_S2C_UniteToken_StarIncrease = 10207;

  MSG_C2S_Knight_Upgrade = 10250;//武将升级
  MSG_S2C_Knight_Upgrade = 10251;
  MSG_C2S_Knight_StarIncrease = 10252;	// 武将升星
  MSG_S2C_Knight_StarIncrease = 10253;
  MSG_C2S_Knight_StarTrain = 10254;	// 将星培养
  MSG_S2C_Knight_StarTrain = 10255;
  MSG_C2S_Knight_StarTrainConfirm = 10256;	// 将星确认、取消
  MSG_S2C_Knight_StarTrainConfirm = 10257;
  MSG_C2S_Knight_StarTrainUpgrade = 10258;	// 将星升级
  MSG_S2C_Knight_StarTrainUpgrade = 10259;
  MSG_C2S_Knight_AdvanceEquip = 10260;	// 进阶-装备
  MSG_S2C_Knight_AdvanceEquip = 10261;
  MSG_C2S_Knight_AdvanceUpgrade = 10262;	// 进阶-升级
  MSG_S2C_Knight_AdvanceUpgrade = 10263;
  MSG_C2S_Knight_AdvanceCompose = 10264;	// 进阶-合成装备
  MSG_S2C_Knight_AdvanceCompose = 10265;
  MSG_C2S_Knight_AdvanceComposeOneKey = 10266;	// 进阶-合成装备一键
  MSG_S2C_Knight_AdvanceComposeOneKey = 10267;

  MSG_C2S_Fragment_Compose = 10300;	// 合成碎片
  MSG_S2C_Fragment_Compose = 10301;

  MSG_C2S_Item_Use = 10350;	// 使用道具
  MSG_S2C_Item_Use = 10351;
  MSG_C2S_Item_Transform = 10352;	// 万能碎片转换 
  MSG_S2C_Item_Transform = 10353;

  MSG_C2S_Dungeon_GetChapterList = 10400;
  MSG_S2C_Dungeon_GetChapterList = 10401;
  MSG_C2S_Dungeon_ChallengeStageBegin = 10402;
  MSG_S2C_Dungeon_ChallengeStageBegin = 10403;
  MSG_S2C_Dungeon_ChallengeStageFinish = 10404;
  MSG_C2S_Dungeon_ResetChallengeCount = 10405;
  MSG_S2C_Dungeon_ResetChallengeCount = 10406;
  MSG_C2S_Dungeon_GetChapterChestAward = 10407;
  MSG_S2C_Dungeon_GetChapterChestAward = 10408;
  //MSG_C2S_Dungeon_GetStageRecord = 10409;
  //MSG_S2C_Dungeon_GetStageRecord = 10410;
  MSG_C2S_Dungeon_FastChallengeStage = 10411;
  MSG_S2C_Dungeon_FastChallengeStage = 10412;
  MSG_C2S_Dungeon_FinishAchievement = 10413; //星数成就领奖
  MSG_S2C_Dungeon_FinishAchievement = 10414;

  MSG_C2S_Shop_GetShopInfo = 10420;//获取通用商店信息
  MSG_S2C_Shop_GetShopInfo = 10421;
  MSG_C2S_Shop_Shopping = 10422;//商店购买
  MSG_S2C_Shop_Shopping = 10423;

  MSG_C2S_Recruit_Info = 10450;	// 招募信息
  MSG_S2C_Recruit_Info = 10451;
  MSG_C2S_Recruit_Recruit = 10452;	// 招募
  MSG_S2C_Recruit_Recruit = 10453;

  MSG_C2S_Arena_GetMainInfo = 10480;//主界面信息
  MSG_S2C_Arena_GetMainInfo = 10481;
  MSG_C2S_Arena_ChallengeBegin = 10482;//发起挑战
  MSG_S2C_Arena_ChallengeBegin = 10483;
  MSG_S2C_Arena_ChallengeFinish = 10484;//返回结算
  MSG_C2S_Arena_FastChallenge = 10485;//扫荡
  MSG_S2C_Arena_FastChallenge = 10486;
  MSG_C2S_Arena_GetTaskInfo = 10487;//任务信息
  MSG_S2C_Arena_GetTaskInfo = 10488;
  MSG_C2S_Arena_GetTaskAward = 10489;//任务奖励
  MSG_S2C_Arena_GetTaskAward = 10490;
  MSG_C2S_Arena_GetRanklist = 10491;//排行榜
  MSG_S2C_Arena_GetRanklist = 10492;
  MSG_C2S_Arena_ChallengeRecord = 10493; //挑战记录
  MSG_S2C_Arena_ChallengeRecord = 10494;

	MSG_C2S_DeadBattle_GetInfo = 10510;//信息
	MSG_S2C_DeadBattle_GetInfo = 10511;
	MSG_C2S_DeadBattle_PickBuff = 10512;//选择buff
	MSG_S2C_DeadBattle_PickBuff = 10513;
	MSG_C2S_DeadBattle_FastChallenge = 10515;//扫荡
	MSG_S2C_DeadBattle_FastChallenge = 10516;
	MSG_C2S_DeadBattle_Shopping = 10517;//限时商店购买
	MSG_S2C_DeadBattle_Shopping = 10518;
	MSG_C2S_DeadBattle_ChallengeBegin = 10519;//挑战
	MSG_S2C_DeadBattle_ChallengeBegin = 10520;
	MSG_S2C_DeadBattle_ChallengeFinish = 10521;
	MSG_C2S_DeadBattle_BoxAward = 10522;//宝箱
	MSG_S2C_DeadBattle_BoxAward = 10523;//宝箱

  MSG_C2S_KnightBook_Info = 10550;	// 武将图鉴信息
  MSG_S2C_KnightBook_Info = 10551;
  MSG_C2S_KnightBook_Upgrade = 10552;	// 武将图鉴升级
  MSG_S2C_KnightBook_Upgrade = 10553;
  MSG_C2S_KnightBook_Activate = 10554;	// 武将图鉴激活成就
  MSG_S2C_KnightBook_Activate = 10555;

	MSG_C2S_Achievement_Info = 10570; //成就
	MSG_S2C_Achievement_Info = 10571; 
	MSG_C2S_Achievement_Finish = 10572; //完成成就
	MSG_S2C_Achievement_Finish = 10573; 
	MSG_C2S_Achievement_Reward = 10574; //完成成就奖励
	MSG_S2C_Achievement_Reward = 10575; 

  MSG_C2S_Equipment_Upgrade = 10600;	// 装备升级
  MSG_S2C_Equipment_Upgrade = 10601;
  MSG_C2S_Equipment_Refining = 10602;	// 装备精炼
  MSG_S2C_Equipment_Refining = 10603;
  MSG_C2S_Equipment_Glyph = 10604;    //装备雕纹
  MSG_S2C_Equipment_Glyph = 10605;

  MSG_C2S_Mail_Info = 10650;	// 获取邮件
  MSG_S2C_Mail_Info = 10651;
  MSG_C2S_Mail_Award = 10652;	// 领取邮件奖励
  MSG_S2C_Mail_Award = 10653;
  MSG_C2S_Mail_Send = 10654;	// 发送玩家邮件
  MSG_S2C_Mail_Send = 10655;
  MSG_C2S_Mail_Del = 10656;	// 删除邮件
  MSG_S2C_Mail_Del = 10657;

	MSG_C2S_MainGrowth_GetInfo = 10690; //获取三国志命星信息
	MSG_S2C_MainGrowth_GetInfo = 10691;
	MSG_C2S_MainGrowth_Activate = 10692; //激活三国志命星
	MSG_S2C_MainGrowth_Activate = 10693;

	MSG_C2S_Scroll_Info = 10694;//获取三国志全部信息
	MSG_S2C_Scroll_Info = 10695;
	MSG_C2S_Scroll_Activate = 10696;//激活节点
	MSG_S2C_Scroll_Activate = 10697;

  MSG_C2S_Biography_GetMainInfo = 10700;       //获取主要信息
  MSG_S2C_Biography_GetMainInfo = 10701;
  MSG_C2S_Biography_ExecuteMission = 10702;  //执行任务
  MSG_S2C_Biography_ExecuteMission = 10703;
  MSG_S2C_Biography_ExecuteMissionBattle = 10704; //战斗任务返回
  MSG_C2S_Biography_FastExecuteMission = 10705;   //快速执行任务
  MSG_S2C_Biography_FastExecuteMission = 10706;
  MSG_C2S_Biography_GetMissionAward = 10707; //任务链奖励和支线任务进度奖励
  MSG_S2C_Biography_GetMissionAward = 10708;
  MSG_C2S_Biography_GetTeamList = 10711; //获取队伍列表
  MSG_S2C_Biography_GetTeamList = 10712;
  MSG_C2S_Biography_CreateTeam = 10713; //创建队伍
  MSG_S2C_Biography_CreateTeam = 10714;
  MSG_C2S_Biography_JoinTeam = 10715; //加入队伍
  MSG_S2C_Biography_JoinTeam = 10716;
  MSG_C2S_Biography_KickOutTeam = 10717; //踢出队伍
  MSG_S2C_Biography_KickOutTeam = 10718;
  MSG_C2S_Biography_LeaveTeam = 10719; //离开队伍
  MSG_S2C_Biography_LeaveTeam = 10720; 
  MSG_C2S_Biography_PrepareBattle = 10721; //准备战斗
  MSG_S2C_Biography_PrepareBattle = 10722;
  MSG_C2S_Biography_AttackCampaignBegin = 10723; //开始战斗
  MSG_S2C_Biography_AttackCampaignBegin = 10724;
  MSG_S2C_Biography_AttackCampaignFinish = 10725;
  MSG_S2C_Biography_SyncTeamStatus = 10726; //同步队伍状态
  MSG_C2S_Biography_GetCampaignFirstAward = 10727; //获取战役首通奖励
  MSG_S2C_Biography_GetCampaignFirstAward = 10728;
  MSG_C2S_Biography_MoveMember = 10729; //移动队员
  MSG_S2C_Biography_MoveMember = 10730;
  MSG_C2S_Biography_GetInviteeList = 10731; //可邀请玩家列表
  MSG_S2C_Biography_GetInviteeList = 10732;
  MSG_C2S_Biography_InviteRobot = 10733; //邀请npc或机器人
  MSG_S2C_Biography_InviteRobot = 10734;
  MSG_C2S_Biography_InvitePlayer = 10735; //邀请在线玩家
  MSG_S2C_Biography_InvitePlayer = 10736;
  MSG_C2S_Biography_GetInvitation = 10737; //获取邀请函
  MSG_S2C_Biography_GetInvitation = 10738;
  MSG_C2S_Biography_ConfirmInvite = 10739; //处理邀请
  MSG_S2C_Biography_ConfirmInvite = 10740;
  MSG_C2S_Biography_ShieldInvite = 107341; //屏蔽邀请
  MSG_S2C_Biography_ShieldInvite = 10742;
  MSG_C2S_Biography_SetTeamLock = 10743; //队伍加锁
  MSG_S2C_Biography_SetTeamLock = 10744;
  MSG_S2C_Biography_NotifyInvitee = 10745; //通知被邀请人
  MSG_S2C_Biography_NotifyDismiss = 10746; //通知队伍解散
  MSG_C2S_Biography_ResetMissionCount = 10477; //重置任务次数(仅限战斗任务)
  MSG_S2C_Biography_ResetMissionCount = 10478;
  MSG_C2S_Biography_GetChapterAward = 10760; //获取通关奖励
  MSG_S2C_Biography_GetChapterAward = 10761;

	MSG_C2S_Biography_Boss_Info = 10747;//名将传BOSS信息
	MSG_S2C_Biography_Boss_Info = 10748;
	MSG_C2S_Biography_Boss_ChallengeBegin = 10749; //挑战名将传Boss
	MSG_S2C_Biography_Boss_ChallengeBegin = 10754;
	MSG_S2C_Biography_Boss_ChallengeFinish = 10755;


  MSG_C2S_Treasure_Upgrade = 10750;	// 宝物升级
  MSG_S2C_Treasure_Upgrade = 10751;
  MSG_C2S_Treasure_Refining = 10752;	// 宝物精炼
  MSG_S2C_Treasure_Refining = 10753;
  MSG_C2S_Treasure_Glyph = 10756;   //宝物雕纹
  MSG_S2C_Treasure_Glyph = 10757;

	// 夺宝
  MSG_C2S_ContendTreasure_GetList = 10800;	// 获取抢夺列表
  MSG_S2C_ContendTreasure_GetList = 10801;
  MSG_C2S_ContendTreasure_RobBegin = 10802;	// 抢夺-发起挑战
  MSG_S2C_ContendTreasure_RobBegin = 10803;
  MSG_S2C_ContendTreasure_RobFinish = 10804;	// 抢夺-返回结算
  MSG_C2S_ContendTreasure_Fast = 10805;//扫荡
  MSG_S2C_ContendTreasure_Fast = 10806;
  MSG_C2S_ContendTreasure_Info = 10807;//获取夺宝信息
  MSG_S2C_ContendTreasure_Info = 10808;
  MSG_C2S_ContendTreasure_AvengeBegin = 10809;	// 复仇-发起挑战
  MSG_S2C_ContendTreasure_AvengeBegin = 10810;
  MSG_S2C_ContendTreasure_AvengeFinish = 10811;	// 复仇-返回结算
  
  //领地巡逻
  MSG_C2S_City_GetInfo = 10850; //获取信息
  MSG_S2C_City_GetInfo = 10851;
  MSG_C2S_City_StartPatrol = 10852; //开始巡逻
  MSG_S2C_City_StartPatrol = 10853;
  MSG_C2S_City_FinishPatrol = 10854; //结束巡逻
  MSG_S2C_City_FinishPatrol = 10855;
  MSG_C2S_City_GetFriendInfo = 10856; //获取好友
  MSG_S2C_City_GetFriendInfo = 10857;
  MSG_C2S_City_GetFriendCity = 10858; //好友城池
  MSG_S2C_City_GetFriendCity = 10859;
  MSG_C2S_City_HandleTrouble = 10860; //平定动乱
  MSG_S2C_City_HandleTrouble = 10861;
  MSG_C2S_City_GetTroubleFriend = 10862; //有动乱的好友
  MSG_S2C_City_GetTroubleFriend = 10863;

  // 好友
  MSG_C2S_Friend_Info = 10900;	// 信息
  MSG_S2C_Friend_Info = 10901;
  MSG_C2S_Friend_FriendList = 10902;	// 获取好友列表
  MSG_S2C_Friend_FriendList = 10903;
  MSG_C2S_Friend_BlackList = 10904;	// 获取黑名单
  MSG_S2C_Friend_BlackList = 10905;
  MSG_C2S_Friend_RequestList = 10906;	// 获取好友请求列表
  MSG_S2C_Friend_RequestList = 10907;
  MSG_C2S_Friend_AddFriend = 10908;	// 请求添加好友
  MSG_S2C_Friend_AddFriend = 10909;
  MSG_C2S_Friend_DelFriend = 10910;	// 删除好友
  MSG_S2C_Friend_DelFriend = 10911;
  MSG_C2S_Friend_AddBlackList = 10912;	// 添加黑名单
  MSG_S2C_Friend_AddBlackList = 10913;
  MSG_C2S_Friend_DelBlackList = 10914;	// 删除黑名单
  MSG_S2C_Friend_DelBlackList = 10915;
  MSG_C2S_Friend_ConfirmFriend = 10916;	// 同意、拒绝添加好友
  MSG_S2C_Friend_ConfirmFriend = 10917;
  MSG_C2S_Friend_SendGift = 10918;	// 赠送礼物
  MSG_S2C_Friend_SendGift = 10919;
  MSG_C2S_Friend_ReceiveGift = 10920;	// 接收礼物
  MSG_S2C_Friend_ReceiveGift = 10921;
  MSG_C2S_Friend_GetRecommendList = 10922;	// 获取推荐好友
  MSG_S2C_Friend_GetRecommendList = 10923;
  MSG_C2S_Friend_GetSnapshot = 10924;	// 查找好友
  MSG_S2C_Friend_GetSnapshot = 10925;
  MSG_S2C_Friend_NotifyAddFriendRequest = 10926;	// 通知：对方请求添加你为好友
  MSG_S2C_Friend_NotifyAddFriend = 10927;	// 通知：对方添加你为好友
  MSG_S2C_Friend_NotifyDelFriend = 10928;	// 通知：对方将你删除
  MSG_S2C_Friend_NotifyTask = 10929;	// 通知：亲密度任务完成
  MSG_S2C_Friend_NotifyGift = 10930;	// 通知：对方给你赠送礼物
  MSG_C2S_Friend_Duel = 10931;	// 好友对战
  MSG_S2C_Friend_Duel = 10932;

	//称号
	MSG_C2S_Title_Info = 10950;// 获取info 这条存在但是不需要 因为title信息在user里面了
	MSG_S2C_Title_Info = 10951;
	MSG_C2S_Title_Wear = 10952;// 穿戴title
	MSG_S2C_Title_Wear = 10953;

	MSG_C2S_Handbook_Info = 10960;//通用图鉴
	MSG_S2C_Handbook_Info = 10961;
	//时装
	MSG_C2S_Dress_Enhance = 10972;//时装强化
	MSG_S2C_Dress_Enhance = 10973;
	MSG_C2S_Dress_Wear = 10974;//时装穿戴
	MSG_S2C_Dress_Wear = 10975;
  //军团
  MSG_C2S_Guild_Recommend = 11000; //推荐军团
  MSG_S2C_Guild_Recommend = 11001;
  MSG_C2S_Guild_Search = 11002; //查找军团
  MSG_S2C_Guild_Search = 11003;
  MSG_C2S_Guild_GetInfo = 11004; //获取信息
  MSG_S2C_Guild_GetInfo = 11005;
  MSG_C2S_Guild_Create = 11006; //创建军团
  MSG_S2C_Guild_Create = 11007;
  MSG_C2S_Guild_ReqJoin = 11008; //请求加入
  MSG_S2C_Guild_ReqJoin = 11009;
  MSG_C2S_Guild_Confirm = 11010; //处理申请
  MSG_S2C_Guild_Confirm = 11011;
  MSG_C2S_Guild_KickOut = 11012; //踢出军团
  MSG_S2C_Guild_KickOut = 11013;
  MSG_C2S_Guild_Quit = 11014; //退出军团
  MSG_S2C_Guild_Quit = 11015;
  MSG_C2S_Guild_Dismiss = 11016; //解散军团
  MSG_S2C_Guild_Dismiss = 11017;
  MSG_C2S_Guild_Appoint = 11018; //任命官职
  MSG_S2C_Guild_Appoint = 11019;
  MSG_C2S_Guild_Impeach = 11020; //弹劾军团长
  MSG_S2C_Guild_Impeach = 11021;
  MSG_C2S_Guild_GetHistory = 11022; //军团动态
  MSG_S2C_Guild_GetHistory = 11023;
  MSG_C2S_Guild_ModifyInfo = 11024; //修改信息
  MSG_S2C_Guild_ModifyInfo = 11025;
  MSG_C2S_Guild_GetMessageBoard = 11026; //获取留言板
  MSG_S2C_Guild_GetMessageBoard = 11027;
  MSG_C2S_Guild_LeaveAMessage = 11028; //增加留言
  MSG_S2C_Guild_LeaveAMessage = 11029;
  MSG_C2S_Guild_OperateMessage = 11030; //删除,置顶,取消置顶
  MSG_S2C_Guild_OperateMessage = 11031;
  MSG_C2S_Guild_GetApplyList = 11032; //申请列表
  MSG_S2C_Guild_GetApplyList = 11033;
  MSG_C2S_Guild_GetApplyHistory = 11034; //申请历史
  MSG_S2C_Guild_GetApplyHistory = 11035;
  MSG_C2S_Guild_DeleteApply = 11036; //删除申请
  MSG_S2C_Guild_DeleteApply = 11037;
  MSG_C2S_Guild_GetWorshipInfo = 11038; //祭天信息
  MSG_S2C_Guild_GetWorshipInfo = 11039;
  MSG_C2S_Guild_DoWorship = 11040; //祭天
  MSG_S2C_Guild_DoWorship = 11041;
  MSG_C2S_Guild_GetWorshipAward = 11042; //祭天进度奖励
  MSG_S2C_Guild_GetWorshipAward = 11043;
  MSG_S2C_Guild_NotifyJoin = 11044; //加入军团通知
  MSG_S2C_Guild_NotifyLeave = 11045; //退出军团通知(包括被踢和解散)
  MSG_C2S_Guild_FastJoin = 11046; //快速加入
  MSG_S2C_Guild_FastJoin = 11047;
  MSG_C2S_Guild_SendGift = 11048; //送礼
  MSG_S2C_Guild_SendGift = 11049;

  //红包 
  MSG_C2S_Guild_RedPacket_Info = 11050; //红包列表
  MSG_S2C_Guild_RedPacket_Info = 11051;
  MSG_C2S_Guild_RedPacket_Detail = 11052; //红包详情
  MSG_S2C_Guild_RedPacket_Detail = 11053;
  MSG_C2S_Guild_RedPacket_Pick = 11054; //领取红包
  MSG_S2C_Guild_RedPacket_Pick = 11055;
  MSG_C2S_Guild_RedPacket_Use = 11056; //使用红包
  MSG_S2C_Guild_RedPacket_Use = 11057;
  MSG_S2C_Guild_RedPacket_Flush = 11058;//刷新红包

  //军团祭天
  MSG_C2S_GuildWorship_GetInfo = 11060;//祭天信息
  MSG_S2C_GuildWorship_GetInfo = 11061; 
  MSG_C2S_GuildWorship_FinishMission = 11062; //三种祭天
  MSG_S2C_GuildWorship_FinishMission = 11063;
  MSG_C2S_GuildWorship_GetProgressAward = 11064; //进度奖励
  MSG_S2C_GuildWorship_GetProgressAward = 11065;
  MSG_S2C_GuildWorship_PushMission = 11066; //推送完成的任务
  MSG_S2C_GuildWorship_PushHistory = 11067; //推送军团祭天动态
  
  //军团副本
  MSG_C2S_GuildDungeon_GetInfo = 11070; //获取信息
  MSG_S2C_GuildDungeon_GetInfo = 11071;
  MSG_C2S_GuildDungeon_GetChapter = 11072; //获取章节信息
  MSG_S2C_GuildDungeon_GetChapter = 11073;
  MSG_C2S_GuildDungeon_AttackBegin = 11074; //开始挑战
  MSG_S2C_GuildDungeon_AttackBegin = 11075;
  MSG_S2C_GuildDungeon_AttackFinish = 11076; //返回挑战结果
  MSG_C2S_GuildDungeon_GetSkillInfo = 11077; //技能信息
  MSG_S2C_GuildDungeon_GetSkillInfo = 11078;
  MSG_C2S_GuildDungeon_SkillLevelUp = 11079; //技能升级
  MSG_S2C_GuildDungeon_SkillLevelUp = 11080;
  MSG_C2S_GuildDungeon_GetFinishAward = 11081; //领取通关奖励
  MSG_S2C_GuildDungeon_GetFinishAward = 11082;
  MSG_C2S_GuildDungeon_GetTreasureBox = 11083; //领取关卡宝藏
  MSG_S2C_GuildDungeon_GetTreasureBox = 11084;
  MSG_C2S_GuildDungeon_GetStageMvpAward = 11085; //领取关卡mvp奖励
  MSG_S2C_GuildDungeon_GetStageMvpAward = 11086;
  MSG_S2C_GuildDungeon_BroadcastDamage = 11087; //广播成员伤害
  MSG_C2S_GuildDungeon_GetMemberDamage = 11088; //获取成员战绩
  MSG_S2C_GuildDungeon_GetMemberDamage = 11089;

  // 叛军
  MSG_C2S_Rebel_Info = 11150; // 叛军信息
  MSG_S2C_Rebel_Info = 11151;
  MSG_C2S_Rebel_AttackBegin = 11152; // 攻击叛军
  MSG_S2C_Rebel_AttackBegin = 11153;
  MSG_S2C_Rebel_AttackFinish = 11154;
  MSG_C2S_Rebel_Share = 11155; // 分享叛军
  MSG_S2C_Rebel_Share = 11156;
  MSG_C2S_Rebel_Award = 11157; // 叛军奖励
  MSG_S2C_Rebel_Award = 11158;
  MSG_S2C_Rebel_NotifyCreate = 11159;	// 通知：叛军出现

  // 日常副本 
  MSG_C2S_DailyDungeon_Info   = 11200;	// 日常副本-信息
  MSG_S2C_DailyDungeon_Info   = 11201;
  MSG_C2S_DailyDungeon_ChallengeBegin  = 11202;	// 日常副本-战斗
  MSG_S2C_DailyDungeon_ChallengeBegin  = 11203;
  MSG_S2C_DailyDungeon_ChallengeFinish  = 11204;
  MSG_C2S_DailyDungeon_Fast   = 11205;	// 日常副本-扫荡
  MSG_S2C_DailyDungeon_Fast   = 11206;

  // 刷新商店
  MSG_C2S_FlushShop_Info = 11250;	// 刷新商店-信息
  MSG_S2C_FlushShop_Info = 11251;
  MSG_C2S_FlushShop_Flush = 11252;	// 刷新商店-刷新
  MSG_S2C_FlushShop_Flush = 11253;
  MSG_C2S_FlushShop_Buy = 11254;	// 刷新商店-购买
  MSG_S2C_FlushShop_Buy = 11255;
  
  //日常任务
  MSG_C2S_DailyTask_GetInfo = 11280; //日常任务信息
  MSG_S2C_DailyTask_GetInfo = 11281;
  MSG_C2S_DailyTask_FinishAward = 11282; //领取完成任务奖励
  MSG_S2C_DailyTask_FinishAward = 11283;
  MSG_C2S_DailyTask_DegreeAward = 11284; //领取活跃度奖励
  MSG_S2C_DailyTask_DegreeAward = 11285;

  //重生系统
  MSG_C2S_Reborn_Preview = 11300; //预览
  MSG_S2C_Reborn_Preview = 11301; 
  MSG_C2S_Reborn_Execute = 11302; //重生
  MSG_S2C_Reborn_Execute = 11303;

  // 领取体力
  MSG_C2S_GetStamina_Info = 11350;	//领取体力-信息
  MSG_S2C_GetStamina_Info = 11351;
  MSG_C2S_GetStamina_Get = 11352;	//领取体力-领取
  MSG_S2C_GetStamina_Get = 11353;

  // 签到
  MSG_C2S_SignIn_Info = 11400;	// 签到-信息
  MSG_S2C_SignIn_Info = 11401;
  MSG_C2S_SignIn_Sign = 11402;	// 签到-签到
  MSG_S2C_SignIn_Sign = 11403;
  MSG_C2S_SignIn_Award = 11404;	// 签到-礼包
  MSG_S2C_SignIn_Award = 11405;
  MSG_C2S_SignIn_Test = 11406;	// 签到-重置今日已签到状态(测试用)
  MSG_S2C_SignIn_Test = 11407;

  //名人堂
  MSG_C2S_HallOfFame_Rank = 11425; //获取排行
  MSG_S2C_HallOfFame_Rank = 11426; 
  MSG_C2S_HallOfFame_Like = 11427; //点赞
  MSG_S2C_HallOfFame_Like = 11428; 

  //新手引导
  MSG_C2S_Guide_Set = 11450;	//新手引导-设置id
  MSG_S2C_Guide_Set = 11451;
  MSG_C2S_Guide_Action = 11452;	//新手引导-执行特殊操作
  MSG_S2C_Guide_Action = 11453;
	//GM公告
	MSG_C2S_Announce_Info = 11454;
	MSG_S2C_Announce_Info = 11455;
	MSG_S2C_Announce_Flush = 11456;


  // 充值
  MSG_C2S_Recharge_GetRecharge = 11500;
  MSG_S2C_Recharge_GetRecharge = 11501;
  MSG_C2S_Recharge_UseMonthCard = 11502;
  MSG_S2C_Recharge_UseMonthCard = 11503;
  MSG_S2C_Recharge_NotifySuccess = 11504;
  MSG_C2S_Recharge_UseSubRecharge = 11505;
  MSG_S2C_Recharge_UseSubRecharge = 11506;

  //可配置活动
  MSG_C2S_CustomActivity_GetInfo = 11550;
  MSG_S2C_CustomActivity_GetInfo = 11551;
  MSG_C2S_CustomActivity_GetAward = 11552;
  MSG_S2C_CustomActivity_GetAward = 11553;
  MSG_C2S_CustomActivity_Exchange = 11554;
  MSG_S2C_CustomActivity_Exchange = 11555;
  MSG_S2C_CustomActivity_SyncTask = 11556;
  MSG_S2C_CustomActivity_UpdateInfo = 11557;
  MSG_C2S_CustomActivity_ReqInfo = 11558;
  MSG_S2C_CustomActivity_ReqInfo = 11559;
  MSG_C2S_CustomActivity_Collection = 11560;
  MSG_S2C_CustomActivity_Collection = 11561;

	//测试用协议
	MSG_C2S_Proto_Test = 11580;//测试uint64的协议
	MSG_S2C_Proto_Test = 11581;
	MSG_C2S_SyncProto = 11582;//同步客户端协议
	MSG_S2C_SyncProto = 11583;

  // 战力竞赛
  MSG_C2S_FightingCapacity_Info = 11600;	// 活动信息
  MSG_S2C_FightingCapacity_Info = 11601;
  MSG_C2S_FightingCapacity_Award = 11602;	// 领取战力奖励
  MSG_S2C_FightingCapacity_Award = 11603;
  MSG_C2S_FightingCapacity_Rank = 11604;	// 战力竞赛排行榜缓存(活动结束后才有数据)
  MSG_S2C_FightingCapacity_Rank = 11605;
  
  //问卷调查
  MSG_C2S_Questionnaire_GetInfo = 11650; //问卷配置
  MSG_S2C_Questionnaire_GetInfo = 11651; 
  MSG_S2C_Questionnaire_Notify = 11652; //通知有新问卷

	// 礼包码
	MSG_S2C_GiftNotify = 11700;

	// 七日活动
	MSG_C2S_Sevendays_Info = 11800;	// 七日活动-信息
	MSG_S2C_Sevendays_Info = 11801;
	MSG_C2S_Sevendays_Award = 11802;	// 七日活动-领奖
	MSG_S2C_Sevendays_Award = 11803;
	MSG_C2S_Sevendays_Clear = 11804;	// 七日活动-清除迷雾
	MSG_S2C_Sevendays_Clear = 11805;
	MSG_C2S_Sevendays_Break = 11806;	// 七日活动-破坏障碍
	MSG_S2C_Sevendays_Break = 11807;
	MSG_C2S_Sevendays_Activate = 11808;	// 七日活动-激活事件/奖励
	MSG_S2C_Sevendays_Activate = 11809;

	//升级奖励
	MSG_C2S_LevelUp_Info = 11820;
	MSG_S2C_LevelUp_Info = 11821;
	MSG_C2S_LevelUp_Award = 11822;
	MSG_S2C_LevelUp_Award = 11823;

	//绑定手机
	MSG_C2S_Phone_Info = 11830;
	MSG_S2C_Phone_Info = 11831;
	MSG_C2S_Phone_Bind = 11832;
	MSG_S2C_Phone_Bind = 11833;
	MSG_C2S_Phone_Award = 11834;
	MSG_S2C_Phone_Award = 11835;

  // 抽将返利
  MSG_C2S_RecruitRebate_Info = 11900;	// 抽将返利-信息
  MSG_S2C_RecruitRebate_Info = 11901;
  MSG_C2S_RecruitRebate_Award = 11902;	// 抽将返利-领奖
  MSG_S2C_RecruitRebate_Award = 11903;

  //军团竞赛
  MSG_C2S_GuildCompetition_GetInfo = 11950; //军团竞赛信息
  MSG_S2C_GuildCompetition_GetInfo = 11951; 
  MSG_C2S_GuildCompetition_GetAward = 11952; //军团竞赛任务奖励
  MSG_S2C_GuildCompetition_GetAward = 11953;
  MSG_S2C_GuildCompetition_SyncTask = 11954;

  // 登录送礼
  MSG_C2S_LoginReward_Info = 12000;	// 登录送礼-信息
  MSG_S2C_LoginReward_Info = 12001;
  MSG_C2S_LoginReward_Award = 12002;	// 登录送礼-领奖
  MSG_S2C_LoginReward_Award = 12003;

  //军团神像
  MSG_C2S_GuildStatue_GetInfo = 12150; //铸神像-信息
  MSG_S2C_GuildStatue_GetInfo = 12151;
  MSG_C2S_GuildStatue_DoCast = 12152; //铸神像-铸造
  MSG_S2C_GuildStatue_DoCast = 12153;
  MSG_C2S_GuildStatue_GetStageAward = 12154; //铸神像-进度宝箱
  MSG_S2C_GuildStatue_GetStageAward = 12155;
  MSG_C2S_GuildStatue_GetFinalAward = 12156; //铸神像-显灵宝箱
  MSG_S2C_GuildStatue_GetFinalAward = 12157;
  MSG_S2C_GuildStatue_Push = 12158; //铸神像-广播铸造
  MSG_C2S_GuildStatue_OneKeyStageAward = 12159; //铸神像-一键领奖
  MSG_S2C_GuildStatue_OneKeyStageAward = 12160;

  // 功能引导
  MSG_C2S_GuideTask_Info = 12050;	// 功能引导-信息
  MSG_S2C_GuideTask_Info = 12051;
  MSG_C2S_GuideTask_Award = 12052;	// 功能引导-领奖
  MSG_S2C_GuideTask_Award = 12053;

	//变装
	MSG_C2S_Skin_Wear = 12100;//变装穿戴
	MSG_S2C_Skin_Wear = 12101;
	MSG_C2S_Skin_TakeOff = 12102;//变装脱卸
	MSG_S2C_Skin_TakeOff = 12103;

  //收集活动
  MSG_C2S_Collect_GetInfo = 12200; //获取信息
  MSG_S2C_Collect_GetInfo = 12201;
  MSG_C2S_Collect_GetAward = 12202; //收集领奖
  MSG_S2C_Collect_GetAward = 12203;

  //聊天分享
  MSG_C2S_GetChatShare = 12204;
  MSG_S2C_GetChatShare = 12205;

  //头像框激活信息
  MSG_C2S_FrameInfo = 12210;
  MSG_S2C_FrameInfo = 12211;

  //领取礼品码
  MSG_C2S_GiftCode = 12220;
  MSG_S2C_GiftCode = 12221;

  //领取首充阶段奖励
  MSG_C2S_Recharge_GetFirstRechargeAward = 12226;
  MSG_S2C_Recharge_GetFirstRechargeAward = 12227;

  //领取基金奖励
  MSG_C2S_Recharge_GetFundRechargeAward = 12228;
  MSG_S2C_Recharge_GetFundRechargeAward = 12229;
  MSG_S2C_Recharge_OpRecharge = 12230;
  MSG_C2S_Recharge_GetFundRecharge = 12231;
  MSG_S2C_Recharge_GetFundRecharge = 12232;
  MSG_C2S_Recharge_GetDayRechargeAward = 12233;
  MSG_S2C_Recharge_GetDayRechargeAward = 12234;
  MSG_C2S_Recharge_GetDayRechargeInfo = 12235;
  MSG_S2C_Recharge_GetDayRechargeInfo = 12236;
  MSG_C2S_Recharge_GetTotalRechargeAward = 12237;
  MSG_S2C_Recharge_GetTotalRechargeAward = 12238;
  MSG_S2C_Recharge_FundBuyNotify = 12239;

	//攻城略地
  MSG_C2S_Storm_Info = 12300;	// 攻城略地-信息
  MSG_S2C_Storm_Info = 12301;
  MSG_C2S_Storm_StormInfo = 12302;	// 攻城略地-关隘信息
  MSG_S2C_Storm_StormInfo = 12303;
  MSG_C2S_Storm_ChallengeBegin = 12304;	// 攻城略地-挑战怪物事件
  MSG_S2C_Storm_ChallengeBegin = 12305;
  MSG_S2C_Storm_ChallengeFinish = 12306;
  MSG_C2S_Storm_Award = 12307;	// 攻城略地-领取宝箱事件
  MSG_S2C_Storm_Award = 12308;
  MSG_C2S_Storm_Break = 12309;	// 攻城略地-清除障碍事件
  MSG_S2C_Storm_Break = 12310;
  MSG_C2S_Storm_Clear = 12311;	// 攻城略地-重置并扫荡
  MSG_S2C_Storm_Clear = 12312;
  MSG_C2S_Storm_Reset = 12313;	// 攻城略地-重置
  MSG_S2C_Storm_Reset = 12314;
  MSG_C2S_Storm_GetEnemy = 12315;	// 攻城略地-更新事件敌人
  MSG_S2C_Storm_GetEnemy = 12316;
  MSG_S2C_Storm_NotifyFinishStorm = 12317;	// 攻城略地-通关关隘
  MSG_C2S_Storm_GetBattleUser = 12318;	// 攻城略地-获取事件对应的BattleUser结构
  MSG_S2C_Storm_GetBattleUser = 12319;

  //技能树
  MSG_C2S_Storm_SkillLvUp = 12325; //技能树升级
  MSG_S2C_Storm_SkillLvUp = 12326;
  MSG_C2S_Storm_SkillReset = 12327; //技能书手动重置
  MSG_S2C_Storm_SkillReset = 12328;
  MSG_C2S_Storm_GetSkillInfo = 12329; //获取技能树信息
  MSG_S2C_Storm_GetSkillInfo = 12330;

  //图鉴竞赛
  MSG_C2S_KnightBook_GetInfo = 12340;
  MSG_S2C_KnightBook_GetInfo = 12241;
  MSG_C2S_KnightBook_GetAward = 12242;
  MSG_S2C_KnightBook_GetAward = 12243;
  MSG_S2C_KnightBook_SyncTask = 12245;

  //限时商人
  MSG_C2S_Recharge_GetOpenPurchaseAward = 12246;
  MSG_S2C_Recharge_GetOpenPurchaseAward = 12247;
  MSG_C2S_Recharge_GetOpenPurchaseInfo = 12248;
  MSG_S2C_Recharge_GetOpenPurchaseInfo = 12249;

  //限时神将
  MSG_C2S_Recruit_RecruitKnight = 12250;
  MSG_S2C_Recruit_RecruitKnight = 12251;
  MSG_C2S_Recruit_GetRecruitKnightInfo = 12252;
  MSG_S2C_Recruit_GetRecruitKnightInfo = 12253;
  MSG_C2S_Recruit_GetRecruitKnightAward = 12254;
  MSG_S2C_Recruit_GetRecruitKnightAward = 12255;
  MSG_S2C_Recruit_NotifyRank = 12256;

  //攻城掠地-城主抢夺
  MSG_C2S_StormCity_Info = 12400;
  MSG_S2C_StormCity_Info = 12401;
  MSG_C2S_StormCity_ChallengeBegin = 12402;
  MSG_S2C_StormCity_ChallengeBegin = 12403;
  MSG_S2C_StormCity_ChallengeFinish= 12404;
  MSG_C2S_StormCity_GetLordAward = 12405;
  MSG_S2C_StormCity_GetLordAward = 12406;
  MSG_C2S_StormCity_GetRanklist = 12407;
  MSG_S2C_StormCity_GetRanklist = 12408;

  // 公测返利
  MSG_C2S_ReturnPay_GetInfo = 12450;
  MSG_S2C_ReturnPay_GetInfo = 12451;
  MSG_C2S_ReturnPay_GetAward = 12452;
  MSG_S2C_ReturnPay_GetAward = 12453;

  // 在线好礼
  MSG_C2S_OnlineGift_GetInfo = 12470;
  MSG_S2C_OnlineGift_GetInfo = 12471;
  MSG_C2S_OnlineGift_GetAward = 12472;
  MSG_S2C_OnlineGift_GetAward = 12473;

  // 每日直冲
  MSG_C2S_Recharge_GetDayBoxAward = 12500;
  MSG_S2C_Recharge_GetDayBoxAward = 12501;
  MSG_C2S_Recharge_GetDayBoxInfo = 12502;
  MSG_S2C_Recharge_GetDayBoxInfo = 12503;

  //等级礼包
  MSG_C2S_LevelGift_GetInfo = 12520;
  MSG_S2C_LevelGift_GetInfo = 12521;
  MSG_S2C_LevelGift_Triggle = 12522;
  MSG_C2S_LevelGift_Shopping = 12523;
  MSG_S2C_LevelGift_Shopping = 12524;
}

message C2S_Test {
	repeated out_base.Award awards = 1;
	repeated out_base.Award consumes = 2;
  optional uint32 total_login_days = 3;	// 设置累计登录天数
  optional bool loop = 4;	// 一键死机(容灾测试)
}

message S2C_Test {
	required uint32 ret = 1;
}

//等级礼包信息
message C2S_LevelGift_GetInfo {
}

message S2C_LevelGift_GetInfo {
  required uint32 ret = 1;
  repeated out_base.LevelGiftShop shipInfo = 2; //限时商店
}

//等级礼包-当有商店被触发时，主动通知客户端
message S2C_LevelGift_Triggle_Message {
  repeated out_base.LevelGiftShop shipInfo = 1; //限时商店
}

//等级礼包购买
message C2S_LevelGift_Shopping {
  required uint32 shipId = 1;//商店唯一id
}

message S2C_Level_Gift_Shopping {
  required uint32 ret = 1;
  repeated out_base.Award  awards = 2; 
}

message Empty_Message {
}

message C2S_Flush {
	optional bool user = 1;
	optional bool red_point = 2;
	optional bool knight = 3;
	optional bool fragment = 4;
	optional bool item = 5;
	optional bool resource = 6;
	optional bool formation = 7;
  optional bool unite_token = 8;
	optional bool advance_equipment = 9;
	optional bool equipment = 10;
	optional bool treasure = 11;
	optional bool dress = 12;
	optional bool red_packet = 13;
  optional bool random_player = 14;	// 随机玩家
  optional bool biography_item = 15; // 名将传道具
	optional bool skin = 16;
	optional bool privilege = 17;//特权
}

message S2C_Flush {
	required uint32 ret = 1;
	optional bool user = 2;//这条放到opobject里面去了
	optional bool red_point = 3;
	optional bool knight = 4;
	optional bool fragment = 5;
	optional bool item = 6;
	optional bool resource = 7;
	optional bool formation = 8;
	optional bool unite_token = 9;
	optional bool advance_equipment = 10;
	optional bool equipment = 11;
	optional bool treasure = 12;
	optional bool dress = 13;
	optional bool red_packet = 14;
  optional bool random_player = 15;	// 随机玩家
  optional bool biography_item = 16; //名将传道具
	optional bool skin = 17;
	optional bool privilege = 18;//特权

	repeated out_base.Knight knights = 104;
	repeated out_base.KV fragments = 105;
	repeated out_base.KV items = 106;
	repeated out_base.Resource resources = 107;
	optional out_base.Formation formations = 108;
  repeated out_base.UniteToken unite_tokens = 109;
	repeated out_base.KV advance_equipments = 110;
	repeated out_base.Equipment equipments = 111;
	repeated out_base.Treasure treasures = 112;
	repeated out_base.Dress dresses = 113;
	repeated out_base.KV red_packets = 114;
	repeated out_base.UserSnapshot random_players = 115;	// 随机玩家
  repeated out_base.KV biography_items = 116; //名将传道具
	repeated out_base.Skin skins = 117;	// 变装
}


message S2C_FlushRedPoint {
	optional out_base.RedPoint red_point = 1;
}

message S2C_FlushKnight {
	repeated out_base.Knight knights = 1;
}

message S2C_FlushEquipment {
	repeated out_base.Equipment equipments = 1;
}

message S2C_FlushTreasure {
	repeated out_base.Treasure treasures = 1;
}

message S2C_FlushFragment {
	repeated out_base.KV fragments = 1;
}

message S2C_FlushResource {
	repeated out_base.Resource resources = 1;
}

message S2C_FlushFormation {
	optional out_base.Formation formations = 1;
}

message S2C_FlushItem {
	repeated out_base.KV items = 1;
}

message S2C_FlushAdvanceEquipment {
	repeated out_base.KV advance_equipments = 1;
}

message S2C_FlushUniteToken {
  repeated out_base.UniteToken unite_tokens = 1;
}

message S2C_FlushDress {
	repeated out_base.Dress dresses = 1;
}

message S2C_FlushSkin {
	repeated out_base.Skin skins = 1;
}

message S2C_FlushRedPacket {
	repeated out_base.KV red_packets = 1;
}

message S2C_FlushRandomPlayer {
	repeated out_base.UserSnapshot random_players = 1;	// 随机玩家
}

message S2C_FlushBiographyItem {
	repeated out_base.KV biography_items = 1; //名将传道具
}

message S2C_FlushPrivilege {
	repeated uint32 ids = 1; 
}

message S2C_OpObject {
	optional out_base.OpKnight knight = 2;
	optional out_base.OpKV item = 3;
	optional out_base.OpKV fragment = 4;
	optional out_base.OpResource resource = 5;
  optional out_base.OpUniteToken unite_token = 6;
	optional out_base.OpKV advance_equipment = 7;
	optional out_base.OpEquipment equipment = 8;
	optional out_base.OpTreasure treasure = 9;
	optional out_base.OpDress dress = 10;
	optional out_base.OpKV red_packet = 11;
	optional out_base.User user = 12;
  optional out_base.OpKV biography_item = 13;
	optional out_base.OpSkin skin = 14;
  optional out_base.OpRecruitKnight recruit_knight = 15;
}

message C2S_ModifyUserInfo {
  required uint64 type = 1; //类型，见enums.proto/USER_INFO_TYPE
  optional uint32 frame = 2; //头像框
  optional string name = 3; //角色名
}

message S2C_ModifyUserInfo {
  required uint32 ret = 1;
  required uint64 type = 2;
  optional uint32 frame = 3;
  optional string name = 4;
}

message C2S_GetUserState {
  required uint32 module = 1;//自定义模块类型(1:名将传)
}

message S2C_GetUserState {
  required uint32 ret = 1;
  required uint32 module = 2;
  repeated out_base.KV states = 3;
}

message C2S_GetModuleTaskInfo {
  required uint32 module_id = 1;
}

message S2C_GetModuleTaskInfo {
  required uint32 ret = 1;
  required uint32 module_id = 2;
  repeated uint64 common_awards = 3; //终生已领奖励id
  repeated uint64 daily_awards = 4; //每日已领奖id
  repeated uint64 weekly_awards = 5; //每周已领奖id
  repeated out_base.TaskInfo common_tasks = 6; //终生任务信息
  repeated out_base.TaskInfo daily_tasks = 7; //每日任务信息
  repeated out_base.TaskInfo weekly_tasks = 8; //每周任务信息
}

message C2S_GetModuleTaskAward {
  required uint32 task_id = 1;  
	optional uint32 index = 2;//1234
}

message S2C_GetModuleTaskAward {
  required uint32 ret = 1;
  required uint32 task_id = 2;
  repeated out_base.Award awards = 3;
	optional uint32 index = 4;
}

message C2S_TestAsyncBattleBegin {
  required uint32 enemy_id = 1;
}

message S2C_TestAsyncBattleBegin {
  required uint32 ret = 1;
  optional uint64 battle_id = 2;
}

message S2C_TestAsyncBattleFinish {
  required uint32 ret = 1;
  optional bs.CheckResult result = 2;
}

message C2S_UniteToken_Awaken {
  required uint32 id = 1;
}

message S2C_UniteToken_Awaken {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_UniteToken_Upgrade {
  required uint32 id = 1;
}

message S2C_UniteToken_Upgrade {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional out_base.UniteToken token = 3;
}

message C2S_UniteToken_GetAttribute {
}

message S2C_UniteToken_GetAttribute {
  required uint32 ret = 1;
  repeated bs.Attr addition_attribute = 2;
  repeated bs.Attr combo_attribute = 3;
}

message C2S_UniteToken_StarIncrease {
  required uint32 id = 1;
}

message S2C_UniteToken_StarIncrease {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional out_base.UniteToken token = 3;
}

message C2S_Knight_Upgrade {
  required uint64 id = 1;	//武将id
  required uint32 item_id = 2;	//消耗道具id
  required uint32 item_num = 3;	//道具数量
}

message S2C_Knight_Upgrade {
  required uint32 ret = 1;
  required uint64 id = 2;	//武将id
  required uint32 item_id = 3;	//消耗道具id
  required uint32 item_num = 4;	//道具数量
}

message C2S_Knight_StarIncrease {
  required uint64 id = 1;	//武将id
  optional uint32 all_purpose_frag_num = 2;	//使用万能碎片数量
}

message S2C_Knight_StarIncrease {
  required uint32 ret = 1;
  required uint64 id = 2;	//武将id
  optional uint32 all_purpose_frag_num = 3;	//使用万能碎片数量
}

message C2S_Knight_StarTrain {
  required uint64 id = 1;	//武将id
  required uint32 num = 2;	//次数
}

message S2C_Knight_StarTrain {
  required uint32 ret = 1;
  required uint64 id = 2;	//武将id
  optional uint32 num = 3;	//实际次数
}

message C2S_Knight_StarTrainConfirm {
  required uint64 id = 1;	//武将id
  required bool confirm = 2;	//true确认、false取消
}

message S2C_Knight_StarTrainConfirm {
  required uint32 ret = 1;
  required uint64 id = 2;	//武将id
  required bool confirm = 3;	//true确认、false取消
}

message C2S_Knight_StarTrainUpgrade {
  required uint64 id = 1;	//武将id
}

message S2C_Knight_StarTrainUpgrade {
  required uint32 ret = 1;
  required uint64 id = 2;	//武将id
}

message C2S_Knight_AdvanceEquip {	// 进阶-装备
  required uint64 id = 1;	//武将id
  repeated uint32 pos = 2; //装备位置
}

message S2C_Knight_AdvanceEquip {
  required uint32 ret = 1;
  required uint64 id = 2;	//武将id
  repeated uint32 pos = 3; //装备位置
}

message C2S_Knight_AdvanceUpgrade {	// 进阶-升级
  required uint64 id = 1;	//武将id
}

message S2C_Knight_AdvanceUpgrade {
  required uint32 ret = 1;
  required uint64 id = 2;	//武将id
}

message C2S_Knight_AdvanceCompose {	// 进阶-合成装备
  required uint32 id = 1;	//进阶装备id
	optional uint32 num = 2;//数量
	optional uint32 path_id = 3;//合成渠道id 如果为0代表一键合成
}

message S2C_Knight_AdvanceCompose {
  required uint32 ret = 1;
  required uint32 id = 2;	//进阶装备id
	optional uint32 num = 3;//数量
	optional uint32 path_id = 4;
}

message C2S_Knight_AdvanceComposeOneKey {	// 进阶-合成装备-一键
	repeated C2S_Knight_AdvanceCompose compose = 1;//进阶请求
	optional C2S_Knight_AdvanceEquip equip = 2;//装备请求 
}

message S2C_Knight_AdvanceComposeOneKey {
  required uint32 ret = 1;
	repeated C2S_Knight_AdvanceCompose compose = 2;//进阶请求
	optional C2S_Knight_AdvanceEquip equip = 3;//装备请求 
}

message C2S_Formation_ChangePosition {
	repeated uint32  position = 1;
}

message S2C_Formation_ChangePosition {
	required uint32 ret = 1;
	optional out_base.Formation formation = 2;
}

message C2S_Formation_ChangeFormation {
	required uint32 tp = 1;//1武将 3装备 4宝物
	required uint32 pos = 2;
	required uint64 id = 3;//标识ID
}

message S2C_Formation_ChangeFormation {
	required uint32 ret = 1;
	optional out_base.Formation formation = 2;
	required uint32 tp = 3;
	required uint32 pos = 4;
	required uint64 id = 5;
}

message C2S_Fragment_Compose {
  required uint32 id = 1;	// 合成id
  optional uint32 num = 2;	// 合成数量
}

message S2C_Fragment_Compose {
  required uint32 ret = 1;
  required uint32 id = 2;	// 合成id
  optional uint32 num = 3;	// 合成数量
}

message S2C_CmdRet {
	required uint32 ret = 1;
	required uint32 cmd = 2;
}

message C2S_GetUserDetailInfo {
	required uint32 tp = 1;//0根据userid 1根据name
  optional uint64 player_id = 2;
	optional string player_name = 3;
}

message S2C_GetUserDetailInfo {
  required uint32 ret = 1;
	optional uint32 tp = 2;
  optional uint64 player_id = 3;
	optional string player_name = 4;
  optional out_base.BattleUser player = 5;
}

message C2S_Dungeon_GetChapterList {
}

message S2C_Dungeon_GetChapterList {
  required uint32 ret = 1;
  repeated out_base.Chapter chapters = 2;
  repeated out_base.Stage stages = 3;
  repeated uint32 flags = 4; //星数成就已领取标记 flag=id*10+index
}

message C2S_Dungeon_ChallengeStageBegin {
  required uint32 id = 1;
}

message S2C_Dungeon_ChallengeStageBegin {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint64 battle_id = 3;
}

message S2C_Dungeon_ChallengeStageFinish {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool is_win = 3;
  optional out_base.Stage stage = 4;
  optional out_base.FinishResult result = 5;
  optional uint64 knight_exp = 6;
  optional bool is_first = 7;
}

message C2S_Dungeon_ResetChallengeCount {
  required uint32 id = 1;
}

message S2C_Dungeon_ResetChallengeCount {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional out_base.Stage stage = 3;
}

message C2S_Dungeon_GetChapterChestAward {
  required uint32 id = 1;
  required uint32 tp = 2; //1星数宝箱2关卡宝箱
  required uint32 pos = 3; //宝箱位置 从1开始
}

message S2C_Dungeon_GetChapterChestAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 tp = 3;
  required uint32 pos = 4;
  repeated out_base.Award awards = 5;
  optional out_base.Chapter chapter = 6;
}


//message C2S_Dungeon_GetStageRecord {
//  required uint32 id = 1;
//  required uint32 tp = 2;
//}
//
//message S2C_Dungeon_GetStageRecord {
//  required uint32 ret = 1;
//  required uint32 id = 2;
//  required uint32 tp = 3;
//}

message C2S_Dungeon_FastChallengeStage {
  required uint32 id = 1;
  required uint32 num = 2; //1次或10次
  optional out_base.Award award = 3; //需要的进阶材料
}

message S2C_Dungeon_FastChallengeStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 num = 3; //实际扫荡次数
  repeated out_base.FinishResult results = 4; //扫荡结果
  optional uint32 knight_add_exp = 5; //武将增加经验
}

message C2S_Dungeon_FinishAchievement {
  required uint32 id = 1; //第几段
  required uint32 index = 2;//第几个
}

message S2C_Dungeon_FinishAchievement {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 index = 3;
  repeated out_base.Award awards = 4; //本次成就奖励
  repeated uint32 flags = 5; //已领取的成就标记
}

message C2S_Item_Use {
  required uint32 id = 1;	// id
  optional uint32 num = 2;	// 数量
  optional uint32 index = 3;  // 可选道具用于选择位置 非可选道具没用
}

message S2C_Item_Use {
  required uint32 ret = 1;
  required uint32 id = 2;	// id
  optional uint32 num = 3;	// 数量
  optional uint32 index = 4;  // 可选道具用于选择位置 非可选道具没用
	repeated out_base.Award awards = 5;	// 获得物品
}

message C2S_Item_Transform {
	required uint32 id = 1;//framentid
	required uint32 size = 2;
}

message S2C_Item_Transform {
	required uint32 ret = 1;
	repeated out_base.Award awards = 2;
}

message BattleResShareTitle {
  optional string own_name = 1;
  optional string enemy_name = 2;
  optional uint64 own_id = 3;
}

message BattleResShareInfo {
  required BattleResShareTitle share_title = 1;
  optional bool is_win = 2;
  repeated bs.BattleUnitResult own_teams = 3;
  repeated bs.BattleUnitResult enemy_teams = 4;
}

message ChatShare {
  required uint32 share_type = 1; //分享类型
  optional uint64 id = 2;
  optional BattleResShareTitle battle_res_share_title = 3;//分享数据
  optional BattleResShareInfo battle_res_share_info = 4; //分享数据(需缓存)
}

message C2S_Chat {
	required uint32 channel = 1;
	optional string content = 2;
	optional string name = 3;//if use username
	optional uint32 invite_id = 4;//invite 表里id 
	optional uint64 unique_id = 5;//invite相关模块里里面唯一id，跟模块相关
	optional uint32 param1 = 6;//透传字段 客户端自己用
  optional ChatShare share = 7; //分享信息
}

message S2C_Chat {
	required uint32 ret = 1;
  optional uint32 forbid_time = 2; //禁言结束时间
	optional uint32 world_left_time = 3;//世界聊天剩余次数
  optional ChatShare share = 4; //分享信息
}

message S2C_ChatBroadcast {
	required uint32 channel = 1;
	optional string content = 2;
	optional out_base.UserSnapshot user = 3; 
	optional uint32 invite_id = 4;
	optional uint64 unique_id = 5;
	optional uint32 param1 = 6;
  optional uint32 special_id = 7;//军团动态id
  repeated out_base.StringMap special_params = 8; //军团动态参数
  optional ChatShare share = 9; //分享信息
}

message C2S_GetCommonRankList {
  required uint32 id = 1;   //排行榜id
  required uint32 size = 2; //排行长度
}

message S2C_GetCommonRankList {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 size = 3;
  optional uint32 self_rank = 4;
  repeated out_base.RankUnit rank_units = 5;
}


message C2S_Recruit_Info {	// 招募信息
}

message S2C_Recruit_Info {	// 招募信息
  required uint32 ret = 1;
  repeated uint32 free_count = 2;  // 今日已使用免费次数(依次为普通、高级招募)
  repeated uint32 free_time = 3; // 上次免费抽取的时间戳(依次为普通、高级招募)
  repeated uint32 total_count = 4;  // 总招募次数(依次为普通、高级招募)
  repeated uint32 daily_count = 5;  // 每日招募次数(依次为普通、高级招募)
	repeated uint32 group_count = 6; //阵营招募次数(暂时只有高级)
}

message C2S_Recruit_Recruit {	// 招募
  required uint32 recruit_type = 1;   // 1 普通 2 高级 3456 阵营抽奖
  required uint32 consume_type = 2;   // 0 免费 1 配置表字段1 2 配置表字段2
  required uint32 num = 3;  // 数量1、10
}

message S2C_Recruit_Recruit {	// 招募
  required uint32 ret = 1;
  repeated out_base.Award awards = 2;
  required uint32 recruit_type = 3;   // 1 普通 2 高级
  required uint32 consume_type = 4;   // 0 免费 1 配置表字段1 2 配置表字段2
  required uint32 num = 5;  // 数量1、10
}

message C2S_Shop_GetShopInfo {
}

message S2C_Shop_GetShopInfo {
	required uint32 ret = 1;
	repeated out_base.KV infos = 2;
  repeated out_base.TaskInfo tasks = 3; //购买限制信息
}

message C2S_Shop_Shopping {
	optional out_base.KV info = 1;
}

message S2C_Shop_Shopping {
	required uint32 ret = 1;
	optional out_base.KV info = 2;
}

message C2S_KnightBook_Info {	// 武将图鉴信息
}

message S2C_KnightBook_Info {
  required uint32 ret = 1;
  repeated uint32 id = 2;	// advance id
  repeated uint32 level = 3;	// 等级
  required uint32 award_id = 4;	// 当前已激活奖励配置(knight_book_award_info)id
}

message C2S_KnightBook_Upgrade {	// 武将图鉴升级
  required uint32 id = 1;	// advance id
}

message S2C_KnightBook_Upgrade {
  required uint32 ret = 1;
  required uint32 id = 2;	// advance id
}

message C2S_KnightBook_Activate {	// 武将图鉴激活成就
}

message S2C_KnightBook_Activate {
  required uint32 ret = 1;
  optional uint32 target_id = 2;	// 配置id
}

message C2S_SyncTime {
	required uint32 client_time = 1;
}

message S2C_SyncTime {
	required uint32 ret = 1;
	optional uint32 client_time = 2;
	optional uint32 server_time = 3;
	optional uint32 zone = 4;
	optional uint32 open = 5;
}

message C2S_Sell {
  repeated out_base.Award consumes = 1;	// 出售的物品 *Award的Value字段填唯一id
}

message S2C_Sell {
  required uint32 ret = 1;
  repeated out_base.Award awards = 2;	// 获得的物品
}


message C2S_Arena_GetMainInfo {
}

message S2C_Arena_GetMainInfo {
  required uint32 ret = 1;
  optional uint32 rank = 2;//自己排名
  optional uint32 max_rank = 3;//最高排名
  optional uint32 challenge_count = 4;//可挑战次数
  repeated out_base.ArenaUnit arena_units = 5;//可显示的玩家
  optional out_base.ArenaUnit guide_robot = 6;//引导机器人
  optional uint32 already_challenge_count = 7; // 已挑战次数
}

message C2S_Arena_ChallengeBegin {
  required uint32 rank = 1;
}

message S2C_Arena_ChallengeBegin {
  required uint32 ret = 1;
  required uint32 rank = 2;
  optional uint64 battle_id = 3;
}

message S2C_Arena_ChallengeFinish {
  required uint32 ret = 1;
  required uint32 rank = 2;
  optional bool is_win = 3;
  optional uint32 cur_rank = 4;
  optional out_base.ArenaAward awards = 5;
  repeated out_base.Award max_rank_awards = 6;
  optional out_base.UserSnapshot guard_snapshot = 7;
}

message C2S_Arena_FastChallenge {
  required uint32 num = 1;
  required uint32 rank = 2;
}

message S2C_Arena_FastChallenge {
  required uint32 ret = 1;
  required uint32 num = 2;
  required uint32 rank = 3;
  repeated out_base.ArenaAward awards = 4;
  optional uint32 challenge_count = 5; //剩余挑战次数
  optional uint32 already_challenge_count = 6; // 已挑战次数
}

message C2S_Arena_GetTaskInfo {
}

message S2C_Arena_GetTaskInfo {
  required uint32 ret = 1;
  repeated uint64 daily_awards = 2; //每日已领奖id
  repeated uint64 weekly_awards = 3; //每周已领奖id
  repeated out_base.TaskInfo daily_tasks = 4; //每日任务信息
  repeated out_base.TaskInfo weekly_tasks = 5; //每周任务信息
}

message C2S_Arena_GetTaskAward {
  required uint32 id = 1;
}

message S2C_Arena_GetTaskAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
}

message C2S_Arena_GetRanklist {
}

message S2C_Arena_GetRanklist {
  required uint32 ret = 1;
  repeated out_base.ArenaUnit users = 2;
}

message C2S_Arena_ChallengeRecord {
  required uint32 type = 1; //1:global 2:self
}

message S2C_Arena_ChallengeRecord {
  required uint32 ret = 1;
  required uint32 type = 2;
  repeated out_base.ArenaRecord records = 3;
}

message C2S_Equipment_Upgrade {	// 装备升级
  //required uint64 id = 1;	// 唯一id
  //required uint32 times = 2;	// 次数
  repeated uint64 id = 3;	// 唯一id
  repeated uint32 times = 4;	// 次数
}

message S2C_Equipment_Upgrade {
  required uint32 ret = 1;
  //required uint64 id = 2;	// 唯一id
  //required uint32 times = 3;	// 次数
  optional uint32 upgrade_times = 4;	// 实际执行次数
  optional uint32 cri_times = 5;	// 暴击次数
  optional uint32 break_reason = 6;	// 中断原因 1资源不足 2等级达到上限
  //optional uint32 level = 7;	// 强化后等级
  repeated uint64 id = 8;	// 唯一id
  repeated uint32 times = 9;	// 次数
  repeated uint32 level = 10;	// 强化后等级
}

message C2S_Equipment_Refining {	// 装备精炼
  required uint64 id = 1;	// 唯一id
  required uint32 item_id = 2;	// 道具id
  required uint32 num = 3;	// 数量
}

message S2C_Equipment_Refining {
  required uint32 ret = 1;
  required uint64 id = 2;	// 唯一id
  required uint32 item_id = 3;	// 道具id
  required uint32 num = 4;	// 数量
}

message C2S_Equipment_Glyph {
  required uint64 id = 1;
}

message S2C_Equipment_Glyph {
  required uint32 ret = 1;
  required uint64 id = 2;
}

message C2S_Mail_Info {	// 获取邮件
  required uint32 mail_type = 1;	// 1-奖励邮件 2-系统邮件 3-好友邮件
}

message S2C_Mail_Info {
  required uint32 ret = 1;
  required uint32 mail_type = 2;	// 1-奖励邮件 2-系统邮件 3-好友邮件
  repeated out_base.Mail mails = 3;
  optional bool stranger = 4;	// 屏蔽陌生人邮件
}

message C2S_Mail_Award {	// 领取邮件奖励
  required uint32 mail_type = 1;	// 1-奖励邮件 2-系统邮件 3-好友邮件
  required uint32 id = 2;	// 邮件id
}

message S2C_Mail_Award {
  required uint32 ret = 1;
  required uint32 mail_type = 2;	// 1-奖励邮件 2-系统邮件 3-好友邮件
  required uint32 id = 3;	// 邮件id
}

message C2S_Mail_Send {	// 发送玩家邮件
  required string content = 1;	// 邮件内容
  required uint64 uid = 2;	// 玩家id
	optional string name = 3;//名字
}

message S2C_Mail_Send {
  required uint32 ret = 1;
  required string content = 2;	// 邮件内容
  required uint64 uid = 3;	// 玩家id
	optional string name = 4;
}

message C2S_Mail_Del {	// 删除邮件
  repeated uint32 mail_type = 1;	// 1-奖励邮件 2-系统邮件 3-好友邮件
  repeated uint32 id = 2;	// 邮件id
}

message S2C_Mail_Del {
  required uint32 ret = 1;
  repeated uint32 mail_type = 2;	// 1-奖励邮件 2-系统邮件 3-好友邮件
  repeated uint32 id = 3;	// 邮件id
}

message C2S_GetCommonPlayNum {

}

message S2C_GetCommonPlayNum {
	required uint32 ret = 1;
	repeated out_base.CommonPlayNum infos = 2;//所有通用次数信息
}

message C2S_BuyCommonPlayNum {
	required uint32 id = 1;//通用次数id
	required uint64 num = 2;//购买的次数数量
}

message S2C_BuyCommonPlayNum {
	required uint32 ret = 1;
	optional out_base.CommonPlayNum info = 2;//这个id相应的次数信息
}

message S2C_FlushCommonPlayNum {
	required uint32 ret = 1;
	optional out_base.CommonPlayNum info = 2;//使用后有变化的次数信息
}

message C2S_DeadBattle_GetInfo {
}

message S2C_DeadBattle_GetInfo {
	required uint32 ret = 1;
	optional out_base.DeadBattle dbattle = 2;
	repeated out_base.DeadBattleShop shops = 3;
}

message C2S_DeadBattle_ChallengeBegin {
	required uint32 index = 1;//位置 0 1 2
}

message S2C_DeadBattle_ChallengeBegin {
	required uint32 ret = 1;
	optional uint32 index = 2;//位置 0 1 2
	optional uint64 battle_id = 3;
}

message S2C_DeadBattle_ChallengeFinish {
	required uint32 ret = 1;
	optional uint32 index = 2;
  optional bool is_win = 3;
	optional out_base.DeadBattle dbattle = 4;
	optional out_base.DeadBattleShop shop = 5;//失败以及打到最后一关的时候也会刷
	repeated out_base.Award awards = 6;
	optional uint32 drop_type = 7;//暴击1 2 3
	optional uint32 result = 8; //评价用战斗结果
	optional uint32 origin_rank = 9;//原来排名
	optional uint32 new_rank = 10;//现有排名
}

message C2S_DeadBattle_PickBuff {
	required uint32 id = 1;
}

message S2C_DeadBattle_PickBuff {
	required uint32 ret = 1;
	optional uint32 id = 2;
	optional out_base.DeadBattle dbattle = 3;
}

message C2S_DeadBattle_FastChallenge {

}

message S2C_DeadBattle_FastChallenge {
	required uint32 ret = 1;
	optional out_base.DeadBattle dbattle = 2;
	repeated out_base.Award awards = 3;
	repeated out_base.Award box_awards = 4;
	repeated uint32 drop_type = 5;
	optional uint32 add_star = 6;
	optional out_base.DeadBattleShop shop = 7;//需要监听 扫荡组后一关也会刷
}

message C2S_DeadBattle_Shopping {
	required uint32 shop_id = 1;
	required uint32 item_id = 2;
}

message S2C_DeadBattle_Shopping {
	required uint32 ret = 1;
	optional out_base.DeadBattleShop shop = 2;
	repeated out_base.Award awards = 3;
}

message C2S_DeadBattle_BoxAward {
}

message S2C_DeadBattle_BoxAward {
	required uint32 ret = 1;
	repeated out_base.Award awards = 2;
	optional out_base.DeadBattle dbattle = 3;
}

message C2S_Scroll_Info {
}

message S2C_Scroll_Info {
	required uint32 ret = 1;
	repeated uint32 main_ids = 2;//主线节点激活情况
	repeated uint32 hero_ids = 3;//名将节点激活情况
}

message C2S_Scroll_Activate {
	required uint32 id = 1;//节点
	required uint32 type = 2;//见enums的SCROLL_TYPE
}

message S2C_Scroll_Activate {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 type = 3;//主线或者名将
	repeated uint32 ids = 4;
	repeated out_base.Award awards = 5;
}
//*************************************
message C2S_MainGrowth_GetInfo {
}

message S2C_MainGrowth_GetInfo {
  required uint32 ret = 1;
  repeated uint32 active_ids = 2;
}

message C2S_MainGrowth_Activate {
  required uint32 id = 1;
}

message S2C_MainGrowth_Activate {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
  repeated uint32 active_ids = 4;
}
//**************************************

message C2S_Biography_GetMainInfo {
}

message S2C_Biography_GetMainInfo {
  required uint32 ret = 1;
  repeated out_base.BioMission missions = 2; //任务信息
  repeated out_base.BioCampaign campaigns = 3; //完成战役
  repeated uint64 mission_chain_awarded = 4; //任务链奖励
  repeated uint64 mission_progress_awarded = 5;//支线任务进度奖励
	repeated out_base.KV mission_preset_condition = 6;//判断战役信息的前置条件，id为表id，num为对应要求的状态
  repeated uint64 chapter_awarded = 7;//章节通关奖励标记
}

message C2S_Biography_ExecuteMission {
  required uint32 id = 1; //任务id
}

message S2C_Biography_ExecuteMission {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint64 battle_id = 3;
  optional out_base.BioMission mission = 4;
  optional out_base.BioMissionAward award = 5;
}

message S2C_Biography_ExecuteMissionBattle {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool is_win = 3;
  optional out_base.BioMission mission = 4;
  optional out_base.BioMissionAward award = 5;
}

message C2S_Biography_FastExecuteMission {
  required uint32 id = 1;
  required uint32 num = 2;
}

message S2C_Biography_FastExecuteMission {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 num = 3;
  optional out_base.BioMission mission = 4;
  repeated out_base.BioMissionAward awards = 5;
}

message C2S_Biography_GetMissionAward {
  required uint32 id = 1;
  required uint32 tp = 2; //1:任务链奖励2:支线任务进度奖励
}

message S2C_Biography_GetMissionAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 tp = 3;
  repeated uint64 awarded = 4;
  repeated out_base.Award awards = 5;
}

message C2S_Biography_GetTeamList {
  required uint32 id = 1;
}

message S2C_Biography_GetTeamList {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.CampaignTeam teams= 3;
}

message C2S_Biography_CreateTeam {
  required uint32 id = 1;
}

message S2C_Biography_CreateTeam {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional out_base.CampaignTeam team = 3;
}

message C2S_Biography_JoinTeam {
  required uint32 id = 1;
  required uint64 teamId = 2;
}

message S2C_Biography_JoinTeam {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint64 teamId = 3;
  optional out_base.CampaignTeam team = 4;
}

message C2S_Biography_KickOutTeam {
  required uint32 id = 1; //战役id
  required uint64 kick_id = 2; //玩家id
}

message S2C_Biography_KickOutTeam {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint64 kick_id = 3;
}

message C2S_Biography_LeaveTeam {
  required uint32 id = 1; //战役id
}

message S2C_Biography_LeaveTeam {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_Biography_PrepareBattle {
  required uint32 id = 1; //战役id
  required bool prepare = 2;
}

message S2C_Biography_PrepareBattle {
  required uint32 ret = 1;
  required uint32 id = 2;
  required bool prepare = 3;
}

message C2S_Biography_AttackCampaignBegin {
  required uint32 id = 1;
}

message S2C_Biography_AttackCampaignBegin {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint64 battle_id = 3;
}

message S2C_Biography_AttackCampaignFinish {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool is_win = 3; 
  optional out_base.CampaignAward result = 4; //不管发不发奖都会有
  optional bool is_award = 5; //次数不足时不发奖，标记为false
}

message S2C_Biography_SyncTeamStatus {
  required out_base.CampaignTeam team = 1;
}

message C2S_Biography_GetCampaignFirstAward {
  required uint32 id = 1;
}

message S2C_Biography_GetCampaignFirstAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
  repeated out_base.BioCampaign campaigns = 4;
}

message C2S_Biography_MoveMember {
  required uint32 position_a = 1;
  required uint32 position_b = 2;
}

message S2C_Biography_MoveMember {
  required uint32 ret = 1;
  required uint32 position_a = 2;
  required uint32 position_b = 3;
}

message C2S_Biography_GetInviteeList {
  required uint32 id = 1; //战役id
}

message S2C_Biography_GetInviteeList {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional out_base.UserSnapshot npc_robot = 3; //npc机器人
  repeated out_base.UserSnapshot friends = 4; //好友
  repeated out_base.UserSnapshot guild_members = 5; //军团成员
}

message C2S_Biography_InviteRobot {
  required uint32 id = 1; //战役id
  optional bool npc = 2;
}

message S2C_Biography_InviteRobot {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool npc = 3;
}

message C2S_Biography_InvitePlayer {
  required uint64 invitee_id = 1;
  required uint32 campaign_id = 2;
}

message S2C_Biography_InvitePlayer {
  required uint32 ret = 1;
  required uint64 invitee_id = 2;
  required uint32 campaign_id = 3;
}

message C2S_Biography_GetInvitation {
}

message S2C_Biography_GetInvitation {
  required uint32 ret = 1;
  repeated out_base.CampaignInvitation invitations = 2;
  optional bool shield = 3; //是否屏蔽邀请
}

message C2S_Biography_ConfirmInvite {
  required uint64 team_id = 1;
  required bool join = 2;
  optional uint32 campaign_id = 3;
}

message S2C_Biography_ConfirmInvite {
  required uint32 ret = 1;
  required uint64 team_id = 2;
  required bool join = 3;
  optional uint32 campaign_id = 4;
}

message C2S_Biography_ShieldInvite {
  required bool shield = 1; //false 取消屏蔽 true 设置屏蔽
}

message S2C_Biography_ShieldInvite {
  required uint32 ret = 1;
  required bool shield = 2;
}

message C2S_Biography_SetTeamLock {
  required bool lock = 1;
}

message S2C_Biography_SetTeamLock {
  required uint32 ret = 1;
  required bool lock = 2;
}

message S2C_Biography_NotifyInvitee {
  required out_base.CampaignInvitation invitation = 1;
}

message S2C_Biography_NotifyDismiss {
  required uint64 team_id = 1;
}

message C2S_Biography_ResetMissionCount {
  required uint32 id = 1;
}

message S2C_Biography_ResetMissionCount {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional out_base.BioMission mission = 3;
}

message C2S_Biography_GetChapterAward {
  required uint32 id = 1;
}

message S2C_Biography_GetChapterAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
  repeated uint64 awarded_id = 4;
}

message C2S_Biography_Boss_Info {

}

message S2C_Biography_Boss_Info {
	required uint32 ret = 1;
	optional out_base.BioBoss boss = 2;
	repeated uint64 damage = 3; //每次攻击伤害，长度即为攻击次数
}

message C2S_Biography_Boss_ChallengeBegin {
	required uint32 id = 1;//叛军id,也是表id
}

message S2C_Biography_Boss_ChallengeBegin {
	required uint32 ret = 1;
	required uint32 id = 2;//叛军id,也是表id
	optional uint64 battle_id = 3;//战斗id
}

message S2C_Biography_Boss_ChallengeFinish {
	required uint32 ret = 1;
	optional bool is_kill = 2; //是否击杀
	repeated out_base.Award awards = 4;//击杀奖励（普通）
	optional out_base.BioBoss boss = 5;//BOSS信息
	repeated out_base.Award rare = 6;//击杀奖励（稀有）
	repeated uint64 damage = 7;//每次攻击伤害，长度即为攻击次数
}

message C2S_Treasure_Upgrade {	// 宝物升级
  required uint64 id = 1;	// 唯一id
  repeated uint64 consume_list = 2;	// 消耗的宝物唯一id
}

message S2C_Treasure_Upgrade {
  required uint32 ret = 1;
  required uint64 id = 2;	// 唯一id
  repeated uint64 consume_list = 3;	// 消耗的宝物唯一id
}

message C2S_Treasure_Refining {	// 宝物精炼
  required uint64 id = 1;	// 唯一id
  repeated uint64 consume_list = 2;	// 消耗的宝物唯一id
}

message S2C_Treasure_Refining {
  required uint32 ret = 1;
  required uint64 id = 2;	// 唯一id
  repeated uint64 consume_list = 3;	// 消耗的宝物唯一id
}

//宝石雕纹
message C2S_Treasure_Glyph {
  required uint64 id = 1;
}

message S2C_Treasure_Glyph {
  required uint32 ret = 1;
  required uint64 id = 2;
}

// --------- 夺宝 ---------
//获取抢夺列表
message C2S_ContendTreasure_GetList {
  required uint32 base_id = 1; //碎片ID
} 

message S2C_ContendTreasure_GetList {
  required uint32 ret = 1;
  required uint32 base_id = 2;
  repeated out_base.UserSnapshot rob_users = 3;
}
 
//抢夺
message C2S_ContendTreasure_RobBegin {
  required uint64 id = 1;	// 抢夺列表中的玩家id
  required uint32 base_id = 2; //碎片ID
  optional bool skip_battle = 3;	// 是否跳过战斗显示(透传参数)
}

message S2C_ContendTreasure_RobBegin {
  required uint32 ret = 1;
  required uint64 id = 2;
  required uint32 base_id = 3; //碎片ID
  optional uint64 battle_id = 4;
  optional bool skip_battle = 5;	// 是否跳过战斗显示(透传参数)
}

message S2C_ContendTreasure_RobFinish {
  required uint32 ret = 1;
  optional bool rob_result = 2;	// 是否成功抢夺
  optional out_base.ContendTreasureAward awards = 3;	// 奖励
  optional uint32 base_id = 4;
  optional bool is_win = 5;	// 是否胜利
  optional string name = 6;	// 敌方名字
  optional uint32 target_base_id = 7;	// 敌方base id
  optional bool skip_battle = 8;	// 是否跳过战斗显示(透传参数)
	optional bs.BriefReport brief_report = 9;	// 战斗简报
}

message C2S_ContendTreasure_Fast {
  required uint32 num = 1;	// 次数
  required uint32 id = 2;	// 抢夺列表中的玩家id
  required uint32 base_id = 3; //碎片ID
}

message S2C_ContendTreasure_Fast {
  required uint32 ret = 1;
  required uint32 num = 2;
  required uint32 id = 3;	// 抢夺列表中的玩家id
  required uint32 base_id = 4; //碎片ID
  repeated out_base.ContendTreasureAward awards = 5;
  repeated bool rob_result = 6;	//是否抢夺成功
}

message C2S_ContendTreasure_Info {
}

message S2C_ContendTreasure_Info {
  required uint32 ret = 1;
  optional uint32 armistice = 2;	// 免战时间戳
	repeated uint32 avenge_mail_ids = 3;	// 已复仇的邮件id
  optional uint32 avenge_times = 4;	// 今日已复仇次数
}

//复仇
message C2S_ContendTreasure_AvengeBegin {
  required uint32 id = 1;	// 复仇的邮件id
  optional bool buff = 2;	// 是否花钱买buff
}

message S2C_ContendTreasure_AvengeBegin {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool buff = 3;	// 是否花钱买buff
  optional uint64 battle_id = 4;
}

message S2C_ContendTreasure_AvengeFinish {
  required uint32 ret = 1;
  required uint32 id = 2;	// 复仇的邮件id
  optional uint32 base_id = 3;	// 碎片配置id
  optional bool is_win = 4;	// 是否胜利
  optional out_base.ContendTreasureAward awards = 5;	// 奖励
  optional string name = 6;	// 敌方名字
  optional uint32 target_base_id = 7;	// 敌方base id
}


message C2S_City_GetInfo {
}

message S2C_City_GetInfo {
  required uint32 ret = 1;
  repeated out_base.City cities = 2;
  repeated out_base.CityRecommendKnight knights = 3;
}

message C2S_City_StartPatrol {
  required uint32 id = 1;
  required uint64 knight_id = 2; //武将唯一id
  required uint32 model_id = 3;
}

message S2C_City_StartPatrol {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint64 knight_id = 3;
  required uint32 model_id = 4;
  optional out_base.City city = 5;
}

message C2S_City_FinishPatrol {
  required uint32 id = 1;
}

message S2C_City_FinishPatrol {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award recommend_award = 3;
  repeated out_base.Award common_award = 4;
  repeated out_base.Award surprise_award = 5;
  repeated out_base.Award trouble_award = 6;
}

message C2S_City_GetFriendInfo {
}

message S2C_City_GetFriendInfo {
  required uint32 ret = 1;
  repeated out_base.UserSnapshot friends = 2;
}

message C2S_City_GetFriendCity {
  required uint64 friend_id = 1;
}

message S2C_City_GetFriendCity {
  required uint32 ret = 1;
  required uint64 friend_id = 2;
  repeated out_base.City citys = 3;
}

message C2S_City_HandleTrouble {
  required uint64 friend_id = 1;
  required uint32 city_id = 2;
  required uint32 trouble_id = 3;
  required uint32 start_time = 4;
}

message S2C_City_HandleTrouble {
  required uint32 ret = 1;
  required uint64 friend_id = 2;
  required uint32 city_id = 3;
  required uint32 trouble_id = 4;
  required uint32 start_time = 5;
  repeated out_base.Award awards = 6;
}

message C2S_City_GetTroubleFriend {
}

message S2C_City_GetTroubleFriend {
  required uint32 ret = 1;
  repeated uint64 trouble_friends= 2; //存在动乱的好友
}

// ----- 好友 -----
// 信息
message C2S_Friend_Info {
}
message S2C_Friend_Info {
  required uint32 ret = 1;
  optional uint32 receive_gift_count = 2;	// 今日已领取礼物次数
  repeated uint64 friend_id = 3;	// 好友id(可能包含已删除的好友)
  repeated uint32 intimate = 4;	// 今日已增加亲密度(与friend_id对应)
  repeated bool send_gift = 5;	// 今日是否赠送礼物(与friend_id对应)
  repeated bool receive_gift = 6;	// 今日是否接受礼物(与friend_id对应)
}

// 获取好友列表
message C2S_Friend_FriendList {
}
message S2C_Friend_FriendList {
  required uint32 ret = 1;
  repeated out_base.Friend friend  = 2;
}

// 获取黑名单
message C2S_Friend_BlackList {
}
message S2C_Friend_BlackList {
  required uint32 ret = 1;
  repeated out_base.UserSnapshot user = 2;
}

// 获取好友请求列表
message C2S_Friend_RequestList {
}
message S2C_Friend_RequestList {
  required uint32 ret = 1;
  repeated out_base.UserSnapshot user = 2;
}

// 请求添加好友
message C2S_Friend_AddFriend {
  required string name = 1;	// 玩家名字
}
message S2C_Friend_AddFriend {
  required uint32 ret = 1;
}

// 删除好友
message C2S_Friend_DelFriend {
  required uint64 id = 1;	// 玩家id
}
message S2C_Friend_DelFriend {
  required uint32 ret = 1;
  required uint64 id = 2;	// 玩家id
}

// 添加黑名单
message C2S_Friend_AddBlackList {
  required uint64 id = 1;	// 玩家id
}
message S2C_Friend_AddBlackList {
  required uint32 ret = 1;
  required uint64 id = 2;	// 玩家id
}

// 删除黑名单
message C2S_Friend_DelBlackList {
  required uint64 id = 1;	// 玩家id
}
message S2C_Friend_DelBlackList {
  required uint32 ret = 1;
  required uint64 id = 2;	// 玩家id
}

// 同意、拒绝添加好友
message C2S_Friend_ConfirmFriend {
  required uint64 id = 1;	// 玩家id 传0是全部同意或拒绝
  required bool accept = 2;	// 是否同意
}
message S2C_Friend_ConfirmFriend {
  required uint32 ret = 1;
  required uint64 id = 2;	// 玩家id
  required bool accept = 3;	// 是否同意
  repeated uint64 ids = 4;	// 实际添加成功的玩家id
}

// 赠送礼物
message C2S_Friend_SendGift {
  required uint64 id = 1;	// 玩家id 传0是给所有好友赠送
}
message S2C_Friend_SendGift {
  required uint32 ret = 1;
  required uint64 id = 2;	// 玩家id
}

// 接收礼物
message C2S_Friend_ReceiveGift {
  repeated uint64 id = 1;	// 玩家id
}
message S2C_Friend_ReceiveGift {
  required uint32 ret = 1;
  repeated uint64 id = 2;	// 玩家id
  repeated out_base.Award awards = 3;
}

// 获取推荐好友
message C2S_Friend_GetRecommendList {
}
message S2C_Friend_GetRecommendList {
  required uint32 ret = 1;
  repeated out_base.UserSnapshot user = 2;
}

// 查找好友
message C2S_Friend_GetSnapshot {
  required string name = 1;	// 玩家名字
}
message S2C_Friend_GetSnapshot {
  required uint32 ret = 1;
  optional out_base.UserSnapshot user = 2;
}


// 通知：对方请求添加你为好友
message S2C_Friend_NotifyAddFriendRequest {
  optional uint64 id = 1;	// 玩家id
}

// 通知：对方通过好友请求
message S2C_Friend_NotifyAddFriend {
  optional uint64 id = 1;	// 玩家id
}

// 通知：对方将你删除
message S2C_Friend_NotifyDelFriend {
  required uint64 id = 1;	// 玩家id
}

// 通知：亲密度任务完成
//*完成任务后双方都会收到该通知，所以id和friend_id字段可能是自己的id也可能是好友的
message S2C_Friend_NotifyTask {
  required uint64 id = 1;	// 完成任务玩家的id
  required uint64 friend_id = 2;	// 好友的id
  required uint32 task_id = 3;	// 任务id
}

// 通知：对方给你赠送礼物
message S2C_Friend_NotifyGift {
  required uint64 id = 1;	// 玩家id
  required uint32 gift_id = 2;	// 礼物id
}

// 好友对战
message C2S_Friend_Duel {
  required uint64 id = 1;	// 玩家id
}
message S2C_Friend_Duel {
  required uint32 ret = 1;
  required uint64 id = 2;	// 玩家id
  optional bs.BattleTeam self = 3;
  optional bs.BattleTeam enemy = 4;
}

message C2S_Title_Info {
}

message S2C_Title_Info {
	required uint32 ret = 1;
	optional uint32 title_id = 2;
	repeated out_base.Status titles = 3;//称号id 过期时间status 
}

message C2S_Title_Wear {
	required uint32 title_id = 1;//穿戴id
}

message S2C_Title_Wear {
	required uint32 ret = 1;
	optional uint32 title_id = 2;
}

message C2S_Guild_GetInfo {
}

message S2C_Guild_GetInfo {
  required uint32 ret = 1;
  optional out_base.GuildSnapshot guild = 2;
  repeated out_base.GuildMember members = 3;
  optional uint32 join_guild_cool_time = 4; //加入军团冷却时间
  optional uint32 zero_hour_level = 5; //军团0点时间
}

message C2S_Guild_Create {
  required string name = 1; //军团名
  required uint32 icon = 2; //军团头像
  required bool confirm = 3; //是否需要审核
  required uint32 level = 4; //限制加入等级
}

message S2C_Guild_Create {
  required uint32 ret = 1;
  required string name = 2;
  required uint32 icon = 3;
  required bool confirm = 4;
  required uint32 level = 5;
  optional out_base.GuildSnapshot guild = 6;
}

message C2S_Guild_ReqJoin {
  required uint64 guild_id = 1;
}

message S2C_Guild_ReqJoin {
  required uint32 ret = 1;
  required uint64 guild_id = 2;
  optional bool join = 3;
  optional string guild_name = 4;
}

message C2S_Guild_Confirm {
  repeated uint64 apply_id = 1;
  required bool accept = 2;
}

message S2C_Guild_Confirm {
  required uint32 ret = 1;
  required bool accept = 2;
  repeated uint64 apply_id = 3;
  repeated out_base.GuildMember member = 4;
}

message C2S_Guild_KickOut {
  required uint64 kick_id = 1;
}

message S2C_Guild_KickOut {
  required uint32 ret = 1;
  required uint64 kick_id = 2;
}

message C2S_Guild_Quit {
}

message S2C_Guild_Quit {
  required uint32 ret = 1;
}

message C2S_Guild_Dismiss {
}

message S2C_Guild_Dismiss {
  required uint32 ret = 1;
}

message C2S_Guild_Appoint {
  required uint64 member_id = 1;
  required uint32 position = 2;
}

message S2C_Guild_Appoint {
  required uint32 ret = 1;
  required uint64 member_id = 2;
  required uint32 position = 3;
}

message C2S_Guild_Impeach {
}

message S2C_Guild_Impeach {
  required uint32 ret = 1;
}

message C2S_Guild_GetHistory {
  required uint32 start = 1;
}

message S2C_Guild_GetHistory {
  required uint32 ret = 1;
  required uint32 start = 2;
  repeated out_base.GuildHistory historys = 3;
}

message C2S_Guild_ModifyInfo {
  required uint32 type = 1; //类型 
  optional string name = 2; //军团名 type = 1
  optional uint32 icon = 3; //军团头像 type = 2
  optional uint32 frame = 4; //军团边框 type = 4
  optional uint32 apply_level = 5; //申请等级 type = 8
  optional string declaration = 6; //宣言 type = 16
  optional string announcement = 7; //公告(内部成员可见) type = 32
  optional uint32 confirm = 8; //1设置审核 2 取消审核 type = 64
}

message S2C_Guild_ModifyInfo {
  required uint32 ret = 1;
  required uint32 type = 2;
  optional string name = 3;
  optional uint32 icon = 4;
  optional uint32 frame = 5;
  optional uint32 apply_level = 6;
  optional string declaration = 7;
  optional string announcement = 8;
  optional uint32 confirm = 9;
}

message C2S_Guild_GetMessageBoard {
}

message S2C_Guild_GetMessageBoard {
  required uint32 ret = 1;
  repeated out_base.GuildMessage messages = 2;
}

message C2S_Guild_LeaveAMessage {
  required string message = 1;
}

message S2C_Guild_LeaveAMessage {
  required uint32 ret = 1;
  required string message = 2;
  optional out_base.GuildMessage guild_message = 3;
}

message C2S_Guild_OperateMessage {
  required uint32 id = 1; //留言id
  required uint32 type = 2; //1 删除 2 置顶 3 取消置顶
}

message S2C_Guild_OperateMessage {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 type = 3;
}

message C2S_Guild_Recommend {
  required uint32 index = 1; //从1开始 表示第几批 一批50个军团
}

message S2C_Guild_Recommend {
  required uint32 ret = 1;
  required uint32 index = 2;
  repeated out_base.GuildSnapshot guilds = 3;
  required uint32 start_join_time = 4; //加军团时间点
}

message C2S_Guild_Search {
  required string key = 1;
}

message S2C_Guild_Search {
  required uint32 ret = 1;
  required string key = 2;
  repeated out_base.GuildSnapshot guilds = 3;
}

message C2S_Guild_GetApplyList {
}

message S2C_Guild_GetApplyList {
  required uint32 ret = 1;
  repeated out_base.UserSnapshot users = 2;
}

message C2S_Guild_GetApplyHistory {
}

message S2C_Guild_GetApplyHistory {
  required uint32 ret = 1;
  repeated out_base.GuildSnapshot guilds = 2;
}

message C2S_Guild_DeleteApply {
  required uint64 guild_id = 1;
}

message S2C_Guild_DeleteApply {
  required uint32 ret = 1;
  required uint64 guild_id = 2;
}

message C2S_Guild_GetWorshipInfo {
}

message S2C_Guild_GetWorshipInfo {
  required uint32 ret = 1;
  optional uint32 progress = 2; //捐献进度
  repeated uint32 worship_id = 3; //已捐献id
  repeated uint32 awarded_id = 4; //已领取进度奖励
  optional uint32 zero_hour_level = 5; //每日0点军团等级
  optional uint32 worship_num = 6; //已祭天人数
}

message C2S_Guild_DoWorship {
  required uint32 id = 1;
}

message S2C_Guild_DoWorship {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool crit = 3;
  optional uint32 worship_num = 4; //已祭天人数
}

message C2S_Guild_GetWorshipAward {
  required uint32 index = 1;
}

message S2C_Guild_GetWorshipAward {
  required uint32 ret = 1;
  required uint32 index = 2;
  repeated out_base.Award awards = 3;
}

message S2C_Guild_NotifyJoin {
  required out_base.GuildSnapshot guild = 1;
}

message S2C_Guild_NotifyLeave {
  required uint32 type = 1; //2 表示被踢 3 表示军团被解散
}

message C2S_Guild_FastJoin {
}

message S2C_Guild_FastJoin {
  required uint32 ret = 1;
  optional out_base.GuildSnapshot guild = 2;
}

message C2S_Guild_SendGift {
  required uint64 member_id = 1;
}

message S2C_Guild_SendGift {
  required uint32 ret = 1;
  required uint64 member_id = 2;
  repeated out_base.Award awards = 3;
  optional uint32 guild_receive_count = 4; //对方收礼次数
  optional uint32 guild_send_count = 5; //自己送礼次数
}

//理论上如果激活图鉴不是手动的 都可以客户端自己做 不用服务器来维护
//服务器只要计算属性时候会计算就ok了
message C2S_Handbook_Info {
	required uint32 id = 1;//1武将 2时装 3名将传BOSS
}

message S2C_Handbook_Info {
	required uint32 ret = 1;
	optional uint32 id = 2;
	repeated out_base.Handbook hb = 3;
}

message C2S_Dress_Enhance {
	required uint32 id = 1;//advance code
}

message S2C_Dress_Enhance {
	required uint32 ret = 1;
	optional uint32 id = 2;
	optional out_base.Dress dress = 3;
}

message C2S_Dress_Wear {
	required uint32 id = 1;//advance code
}

message S2C_Dress_Wear {
	required uint32 ret = 1;
	optional uint32 id = 2;
}


message C2S_Rebel_Info { // 叛军信息
}
message S2C_Rebel_Info {
  required uint32 ret = 1;
  optional uint32 level = 2;	// 今日0点前最高击杀叛军等级
  repeated out_base.Rebel self_rebel = 3;	// 自己的叛军
  repeated out_base.Rebel friend_rebel = 4;	// 好友的叛军
  repeated uint64 award_ids = 5;	// 今日已领取的奖励配置id
  optional uint64 total_damage = 6;	// 今日累计伤害
  optional uint64 max_damage = 7;	// 今日最高伤害
}

message C2S_Rebel_AttackBegin { // 攻击叛军
  required uint64 uid = 1;	// 叛军所属的玩家id
  required uint32 id = 2;	// 叛军id
  required uint32 attack_type = 3;	// 1:普通攻击 2:全力一击
}
message S2C_Rebel_AttackBegin {
  required uint32 ret = 1;
  required uint64 uid = 2;	// 叛军所属的玩家id
  required uint32 id = 3;	// 叛军id
  required uint32 attack_type = 4;	// 1:普通攻击 2:全力一击
  optional uint64 battle_id = 5;	// 战斗id
}
message S2C_Rebel_AttackFinish {
  required uint32 ret = 1;
  optional bool is_win = 2;	// 是否胜利(最后一击)
  optional uint32 old_rank_total = 3;	// 旧排名-总伤害
  optional uint32 new_rank_total = 4;	// 新排名-总伤害
  optional uint32 old_rank_max = 5;	// 旧排名-最大伤害
  optional uint32 new_rank_max = 6;	// 新排名-最大伤害
  optional uint32 attack_type = 7;	// 1:普通攻击 2:全力一击
  optional uint64 total_damage = 8;	// 今日累计伤害
  optional uint64 max_damage = 9;	// 今日最高伤害
  optional uint64 damage = 10;	// 本次伤害
  repeated out_base.Award awards = 11;
  optional uint32 rebel_base_id = 12;	// 叛军配置表id
}

message C2S_Rebel_Share { // 分享叛军
  required uint32 id = 1;	// 叛军id
}
message S2C_Rebel_Share {
  required uint32 ret = 1;
  required uint32 id = 2;	// 叛军id
}

message C2S_Rebel_Award { // 叛军奖励
  required uint32 id = 1;	// 配置表id
}
message S2C_Rebel_Award {
  required uint32 ret = 1;
  required uint32 id = 2;	// 配置表id
}

message S2C_Rebel_NotifyCreate {	// 通知：叛军出现
  repeated out_base.Rebel rebel = 1;	// 叛军
}

message C2S_Guild_RedPacket_Info {
}

message S2C_Guild_RedPacket_Info {
	required uint32 ret = 1;
	repeated out_base.GuildRedPacket rp = 2;
	optional uint32 use_time = 3;//使用次数
	repeated uint32 pick_time = 4;//各种领取的剩余次数 依次为parameter_info表中4005-4007
	repeated uint32 guild_pick_time = 5;//军团红包已经领取的位置值 redpacket_gm_info position
	optional uint32 point = 6;//财神点
	optional uint32 luck = 7;//手气
}

message C2S_Guild_RedPacket_Detail {
	required uint64 id = 1;
}

message S2C_Guild_RedPacket_Detail {
	required uint32 ret = 1;
	optional uint64 id = 2;
	optional out_base.GuildRedPacket rp = 3;
	repeated uint64 pick = 4;//所有pick的军团成员
	repeated uint32 distribute = 5;//他们相应领取的数量
	repeated uint32 lucky = 6;//幸运值
}

message C2S_Guild_RedPacket_Pick {
	required uint64 id = 1;
}

message S2C_Guild_RedPacket_Pick {
	required uint32 ret = 1;
	optional uint64 id = 2;
	repeated out_base.Award awards = 3;
	optional out_base.GuildRedPacket rp = 4;
	repeated uint32 pick_time = 5;
	repeated uint32 guild_pick_time = 6;
	optional uint32 luck = 7;
}

message C2S_Guild_RedPacket_Use {
	required uint32 id = 1;
}

message S2C_Guild_RedPacket_Use {
	required uint32 ret = 1;
	optional uint32 id = 2;
	optional out_base.GuildRedPacket rp = 3;
	optional uint32 use_time = 4;
	optional uint32 point = 5;//财神
}

message C2S_DailyDungeon_Info {	// 日常副本-信息
}

message S2C_DailyDungeon_Info {
	required uint32 ret = 1;
  repeated uint32 ids = 2;	// 副本id
  repeated uint32 records = 3;	// 对应副本id的战斗记录(如坚持X回合等)
  repeated bool clears = 4;	// 对应副本id的通关纪录
  optional uint32 yesterday_level = 5;	// 昨日的最高等级
}

message C2S_DailyDungeon_ChallengeBegin {	// 日常副本-战斗
  required uint32 id = 1;	// 副本id
}

message S2C_DailyDungeon_ChallengeBegin {
	required uint32 ret = 1;
  required uint32 id = 2;	// 副本id
  optional uint64 battle_id = 3;	// 战斗id
}

message S2C_DailyDungeon_ChallengeFinish {
	required uint32 ret = 1;
  required uint32 id = 2;	// 副本id
  optional bool is_win = 3;	// 是否胜利
  optional uint32 record = 4;	// 战斗记录(如坚持X回合等)
	repeated out_base.Award awards = 5;
  optional uint32 old_record = 6;	// 之前的战斗记录(如坚持X回合等)
}

message C2S_DailyDungeon_Fast {
  required uint32 id = 1;	// 副本id
}

message S2C_DailyDungeon_Fast {
  required uint32 ret = 1;
  required uint32 id = 2;	// 副本id
	repeated out_base.Award awards = 3;
}

message S2C_Guild_RedPacket_Flush {
	optional out_base.GuildRedPacket rp = 1;
}

message C2S_GuildWorship_GetInfo {
}

message S2C_GuildWorship_GetInfo {
  required uint32 ret = 1;
  optional uint32 progress = 2; //捐献进度
  optional uint32 zero_hour_level = 3; //每日0点军团等级
  optional uint32 worship_num = 4; //已祭天人数
  optional out_base.GuildWorship worship = 5; //祭天信息
  repeated out_base.Task missions = 6; //当前任务 (任务类型=>任务进度)
}

message C2S_GuildWorship_FinishMission {
  required uint32 id = 1; //祭天id
  optional uint32 num = 2; //祭天次数
}

message S2C_GuildWorship_FinishMission {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
  optional out_base.GuildWorship worship = 4;
  optional uint32 num = 5;
}

message  C2S_GuildWorship_GetProgressAward {
  required uint32 index = 1;
}

message  S2C_GuildWorship_GetProgressAward {
  required uint32 ret = 1;
  required uint32 index = 2;
  repeated out_base.Award awards = 3;
}

message S2C_GuildWorship_PushMission {
  required out_base.Task task = 1;
}

message S2C_GuildWorship_PushHistory {
  required out_base.GuildHistory history = 1;
}

message C2S_GuildDungeon_GetInfo {
}

message S2C_GuildDungeon_GetInfo {
  required uint32 ret = 1;
  optional uint32 current_chapter_id = 2; //当前章节id
  optional uint64 current_chapter_hp = 3; //当前章节扣除血量
  repeated uint32 first_finish_chapter = 4; //已领取首通奖励章节
  optional uint32 rollback_chapter_id = 5; //本次回滚到哪一章，之前的章节不可查看
}

message C2S_GuildDungeon_GetChapter {
  required uint32 chapter_id = 1;
}

message S2C_GuildDungeon_GetChapter {
  required uint32 ret = 1;
  required uint32 chapter_id = 2;
  repeated out_base.GuildDungeonStage stages = 3; //关卡信息
  repeated uint64 awarded_stage = 4;
}

message C2S_GuildDungeon_AttackBegin {
  required uint32 stage_id = 1;
}

message S2C_GuildDungeon_AttackBegin {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  optional uint64 battle_id = 3;
}

message S2C_GuildDungeon_AttackFinish {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  repeated out_base.Award awards = 3;
  optional uint64 damage = 4;
  optional uint64 total_damage = 5;
  optional uint32 pre_rank = 6;
  optional uint32 cur_rank = 7;
}

message C2S_GuildDungeon_GetHarmRecord {
  required uint32 stage_id = 1;
}

message S2C_GuildDungeon_GetHarmRecord {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  repeated uint64 harms = 3;
  repeated out_base.UserSnapshot members = 4;
  optional uint64 mvp_award = 5;
}

message C2S_GuildDungeon_GetSkillInfo {
}

message S2C_GuildDungeon_GetSkillInfo {
  required uint32 ret = 1;
  repeated out_base.KV skills = 2; // id=>type num=> current exp 
}

message C2S_GuildDungeon_SkillLevelUp {
  required uint32 type = 1;
  required uint32 score = 2;
}

message S2C_GuildDungeon_SkillLevelUp {
  required uint32 ret = 1;
  required uint32 type = 2;
  required uint32 score = 3;
  optional uint32 pre_skill_id = 4;
  optional uint32 cur_skill_id = 5;
  repeated out_base.KV skills = 6;
}

message C2S_GuildDungeon_GetFinishAward {
  required uint32 chapter_id = 1;
}

message S2C_GuildDungeon_GetFinishAward {
  required uint32 ret = 1;
  required uint32 chapter_id = 2;
  repeated out_base.Award awards = 3;
}

message C2S_GuildDungeon_GetTreasureBox {
  required uint32 position = 1;
  required uint32 stage_id = 2;
}

message S2C_GuildDungeon_GetTreasureBox {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  required uint32 position = 3;
  repeated out_base.Award awards = 4;
  repeated uint32 award_id = 5;
}

message C2S_GuildDungeon_GetStageMvpAward {
  required uint32 stage_id = 1;
}

message S2C_GuildDungeon_GetStageMvpAward {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  repeated out_base.Award awards = 3;
}

message S2C_GuildDungeon_BroadcastDamage {
  required uint32 stage_id = 1; //关卡id
  required uint64 member_id = 2; //攻击者id
  required uint64 damage = 3; //本次伤害
  optional bool is_win = 4; //关卡是否通关
}

message C2S_GuildDungeon_GetMemberDamage {
  required uint32 stage_id = 1;
}

message S2C_GuildDungeon_GetMemberDamage{
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  repeated uint64 member_id = 3;
  repeated uint64 damages = 4;
  repeated out_base.UserSnapshot members = 5;
}

message C2S_Achievement_Info {

}

message S2C_Achievement_Info {
	required uint32 ret = 1;
	repeated out_base.Status status = 2;
	repeated uint64 finish = 3;
	repeated uint64 reward = 4;
}

message C2S_Achievement_Finish {
	required uint32 id = 1;
}

message S2C_Achievement_Finish {
	required uint32 ret = 1;
	optional uint32 id = 2;
	repeated uint64 finish = 3;
	repeated out_base.Award awards = 4;
}

message C2S_Achievement_Reward {
	required uint32 id = 1;
}

message S2C_Achievement_Reward {
	required uint32 ret = 1;
	optional uint32 id = 2;
	repeated uint64 reward = 3;
	repeated out_base.Award awards = 4;
}

message C2S_FlushShop_Info {	// 刷新商店-信息
  required uint32 shop_id = 1;
}
message S2C_FlushShop_Info {
  required uint32 ret = 1;
  optional out_base.Shop shop = 2;
  required uint32 shop_id = 3;
}

message C2S_FlushShop_Flush {	// 刷新商店-刷新
  required uint32 shop_id = 1;
  required uint32 flush_type = 2;	// 对应flush_cost_type 1~3，没有就填0
}
message S2C_FlushShop_Flush {
  required uint32 ret = 1;
  required uint32 shop_id = 2;
  required uint32 flush_type = 3;
  optional out_base.Shop shop = 4;
}

message C2S_FlushShop_Buy {	// 刷新商店-购买
  required uint32 shop_id = 1;
  required uint32 goods_type = 2;	// 1普通货架 2特殊货架
  required uint32 index = 3;	// 从1开始 第几个货物
  required uint32 num = 4;	// 数量
}
message S2C_FlushShop_Buy {
  required uint32 ret = 1;
  required uint32 shop_id = 2;
  required uint32 goods_type = 3;	// 1普通货架 2特殊货架
  required uint32 index = 4;
  required uint32 num = 5;	// 数量
  optional out_base.Shop shop = 6;
}

message C2S_DailyTask_GetInfo {
}

message S2C_DailyTask_GetInfo {
  required uint32 ret = 1;
  optional uint32 cur_degree = 2; //当前活跃度
  optional uint32 degree_level = 3; //活跃度解锁等级
  optional uint32 surprise_task_id = 4; //惊喜任务id
  repeated uint64 finish_rewards = 5; //当前已领取奖励的任务id
  repeated uint64 degree_rewards = 6; //当前已领取奖励的活跃度id
  repeated out_base.TaskInfo tasks = 7; //当前所有任务状态(type:任务类型 value:完成进度)
}

message C2S_DailyTask_FinishAward {
  required uint32 id = 1; //任务id
}

message S2C_DailyTask_FinishAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 cur_degree = 3; //当前活跃度
  optional uint32 degree_level = 4; //活跃度解锁等级
  repeated uint64 finish_rewards = 5; //当前已领取奖励的任务id
  repeated out_base.Award awards = 6; //本次领取的奖励
}

message C2S_DailyTask_DegreeAward {
  required uint32 id = 1; //活跃度id
}

message S2C_DailyTask_DegreeAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated uint64 degree_rewards = 3; //当前已领取奖励的活跃度id
  repeated out_base.Award awards = 4; //本次领取的奖励
}

message S2C_ActionStatusFlush {
	required uint32 tp = 1;//参考enums.ACTION_TYPE
	optional out_base.Status status = 2;
}

message C2S_Chat_LeftTimes{

}

message S2C_Chat_LeftTimes{
	required uint32 ret = 1;
	required uint32 times = 2;
}

message C2S_Reborn_Preview {
  required uint32 sys_type = 1; //模块类型1:武将 2:兵符 3:装备 4:宝物 5:时装
  required uint32 op_type = 2; //操作类型 1重生 2分解
  repeated uint64 ids = 3; //对应重生对象id
}

message S2C_Reborn_Preview {
  required uint32 ret = 1;
  required uint32 sys_type = 2;
  required uint32 op_type = 3;
  repeated uint64 ids = 4;
  repeated out_base.Award awards = 5; //重生或者分解返回资源
}

message C2S_Reborn_Execute {
  required uint32 sys_type = 1;
  required uint32 op_type = 2;
  repeated uint64 ids = 3;
}

message S2C_Reborn_Execute {
  required uint32 ret = 1;
  required uint32 sys_type = 2;
  required uint32 op_type = 3;
  repeated uint64 ids = 4;
  repeated out_base.Award awards = 5; //重生或者分解返回资源
  optional out_base.Knight knight = 6; //重生后的武将
  optional out_base.UniteToken unite_token = 7; //重生后的兵符
  optional out_base.Equipment equipment = 8; //重生后的装备
  optional out_base.Treasure treasure = 9; //重生后的宝物
  optional out_base.Dress dress = 10; //重生后的时装 
}

message C2S_GetStamina_Info {	//领取体力-信息
}
message S2C_GetStamina_Info {
  required uint32 ret = 1;
  repeated uint64 ids = 2;	// 今日已领取的id
}

message C2S_GetStamina_Get {	//领取体力-领取
  optional uint64 id = 1;	// 要补领的id,非补领的情况可以不填
}
message S2C_GetStamina_Get {
  required uint32 ret = 1;
  repeated out_base.Award awards = 2;
  optional uint64 id = 3;	// 实际领取的id
}


message C2S_SignIn_Info	{	// 签到-信息
}
message S2C_SignIn_Info {
  required uint32 ret = 1;
  required uint32 total = 2; // 已签到次数 
  required uint32 signed = 3;  // 今日已签到倍数
  repeated uint64 ids = 4;	// 已领取的礼包id
}

message C2S_SignIn_Sign	{	// 签到-签到
}
message S2C_SignIn_Sign {
  required uint32 ret = 1;
  optional uint32 signed = 2;  // 今日已签到倍数 
}

message C2S_SignIn_Award	{	// 签到-礼包
  required uint64 id = 1;
}
message S2C_SignIn_Award {
  required uint32 ret = 1;
  required uint64 id = 2;
}

message C2S_SignIn_Test	{	// 签到-重置今日已签到状态(测试用)
}
message S2C_SignIn_Test {
  required uint32 ret = 1;
}

message C2S_HallOfFame_Rank {
  required uint32 type = 1; //1:战力榜 2:等级榜
}

message S2C_HallOfFame_Rank {
  required uint32 ret = 1;
  required uint32 type = 2;
  optional uint32 self_rank = 3;
  repeated out_base.UserSnapshot users = 4;
  optional uint32 liked_num = 5;
}

message C2S_HallOfFame_Like {
  required uint32 type = 1; //点赞排行 1:战力榜 2:等级榜
  required uint64 like_id = 2; //点赞对象id
  required uint32 like_num = 3; //点赞次数
}

message S2C_HallOfFame_Like {
  required uint32 ret = 1;
  required uint32 type = 2;
  required uint64 like_id = 3;
  required uint32 like_num = 4; //实际点赞次数
  repeated out_base.Award awards = 5; //点赞奖励
  optional out_base.UserSnapshot user = 6; //被点赞人
  optional uint32 liked_num = 7; //已点赞次数
}

message C2S_GetUserConfig{
}

message S2C_GetUserConfig{
	required uint32 ret = 1;
	optional out_base.UserConfig config = 2;
}

message C2S_SetUserConfig {
	required uint32 tp = 1;//1代表chat
	optional out_base.UserConfig config = 2;
}

message S2C_SetUserConfig {
	required uint32 ret = 1;
	optional out_base.UserConfig config = 2;
}

message S2C_Notice {
  required uint32 id = 1; //模板id 
  repeated out_base.StringMap params = 2; //富文本参数key=>value
  repeated out_base.Award awards = 3; //掉落奖励显示
}


//新手引导
message C2S_Guide_Set { 	//新手引导-设置id
  required uint32 id = 1;
  optional uint32 msg_id = 2;
  optional bytes msg = 3;
}
message S2C_Guide_Set { 
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 msg_id = 3;
}

message C2S_Guide_Action { 	//新手引导-执行特殊操作
  required uint32 id = 1;	// 1:觉醒并上阵指定合击兵符
}
message S2C_Guide_Action { 
  required uint32 ret = 1;
	required uint32 id = 2;
}

message C2S_Announce_Info {
}

message S2C_Announce_Info {
  required uint32 ret = 1;
	repeated out_base.Announce announces = 2;
}

message S2C_Announce_Flush {
	repeated out_base.Announce announces = 1;
}

message C2S_GetBattleVideo {
  required uint64 battle_id = 1;
}

message S2C_GetBattleVideo {
  required uint32 ret = 1;
  required uint64 battle_id = 2;
  optional bs.BattleVideo battle_video = 3;  
}

message C2S_GetBattleRecord {
  required uint32 function_id = 1;	// function id
  required uint64 record_id = 2;	// record id, 填0是返回所有
}
message S2C_GetBattleRecord {
  required uint32 ret = 1;
  required uint32 function_id = 2;	// function id
  required uint64 record_id = 3;	// record id, 填0是返回所有
  repeated out_base.BattleRecord records = 4;
}


message C2S_Recharge_GetRecharge{
}

message S2C_Recharge_GetRecharge{
  required uint32 ret = 1;
  repeated uint32 recharge_ids = 2;
  repeated uint32 show_ids = 3;
  repeated out_base.MonthCard mc = 4;//月卡
	repeated out_base.MonthCard subs = 5;//订阅//公用一个结构体
  optional out_base.FirstRecharge first_recharge = 6;
  repeated out_base.FundRecharge  fund_recharge = 7;
  repeated out_base.DayRecharge   day_recharge = 8;
  optional out_base.TotalRecharge   total_recharge = 9;
  repeated out_base.RechargeNotify recharges = 10;
  repeated out_base.OpenPurchase open_purchase = 11;
  repeated out_base.DayBox day_box = 12;
}

//月卡/订阅
message C2S_Recharge_UseMonthCard {
  required uint32 id = 1;	// id
}

message S2C_Recharge_UseMonthCard {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
}

message C2S_Recharge_UseSubRecharge {
  required uint32 id = 1;	// id
}

message S2C_Recharge_UseSubRecharge {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
}

message S2C_Recharge_NotifySuccess {
  required uint32 ret = 1;
  required uint32 id = 2;
}

//message C2S_Activity_Info {
//}
//
//message S2C_Activity_Info {
//	required uint32 ret = 1;
//	optional out_base.Activity activitys = 2;
//}
//
//message C2S_Activity_Condition_Complete {
//	required uint64 activity_id = 1;
//	required uint64 condition_id = 2;
//	optional uint32 drop_type = 3;
//}
//
//message S2C_Activity_Condition_Complete {
//	required uint32 ret = 1;
//	optional uint64 id = 2;
//	optional uint64 list_id = 3;
//	optional out_base.Award awards = 4;
//}
//
//message C2S_Activity_Exchange {
//	required uint64 activity_id = 1;
//	required uint64 exchange_id = 2;
//}
//
//message S2C_Activity_Exchange {
//	required uint32 ret = 1;
//	optional uint64 id = 2;
//	optional uint64 ex_id = 3;
//  optional out_base.Award awards = 4;
//}

message C2S_CustomActivity_GetInfo {
}

message S2C_CustomActivity_GetInfo {
  required uint32 ret = 1;
  repeated out_base.CustomActivityInfo infos = 2; //可显示活动信息
  repeated out_base.CustomActivity activitys = 3; //玩家数据
  repeated out_base.CustomActivityHideInfo hides = 4; //隐藏活动信息
  repeated out_base.CustomCollection collections = 5; //收集活动玩家信息
}

message C2S_CustomActivity_GetAward {
  required uint32 id = 1; //对应任务id
  optional uint32 index = 2; //奖励位置
}

message S2C_CustomActivity_GetAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 index = 3;
  repeated out_base.Award awards = 4;
  optional out_base.CustomActivity activity = 5;
}

message C2S_CustomActivity_Exchange {
  required uint32 id = 1; //兑换id
  required uint32 num = 2; //兑换数量
  optional uint32 index = 3; //兑换位置
}

message S2C_CustomActivity_Exchange {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 num = 3;
  optional uint32 index = 4;
  repeated out_base.Award awards = 5;
  optional out_base.CustomActivity activity = 6;
}

message S2C_CustomActivity_SyncTask {
  required uint32 id = 1; //活动id
  required uint64 type = 2; //任务类型
  required uint64 value = 3; //任务状态
  optional bool is_special = 4; //是否特殊任务
}

message S2C_CustomActivity_UpdateInfo {
  repeated out_base.CustomActivityHideInfo updates = 1; //本次更新活动
  repeated uint32 deletes = 2; //本次删除活动
}

message C2S_CustomActivity_ReqInfo {
  repeated uint32 ids = 1;
}

message S2C_CustomActivity_ReqInfo {
  required uint32 ret = 1;
  repeated uint32 ids = 2;
  repeated out_base.CustomActivityInfo shows = 3;
}

message C2S_CustomActivity_Collection{
  required uint32 id = 1; //任务id
  required uint32 index = 2; //奖励位置1-4
}

message S2C_CustomActivity_Collection {
  required uint32 ret = 1;
  required uint32 id = 2; //任务id
  required uint32 index = 3; //奖励位置1-4
  repeated out_base.Award awards = 4; //奖励
  optional out_base.CustomCollection collection = 5; //当前活动数据
}

message C2S_GetUserBattleTeam {
  repeated uint64 players = 1;  //玩家uid(最少1个最多4个) 
}

message S2C_GetUserBattleTeam {
  required uint32 ret = 1;
  repeated bs.BattleTeam teams = 2;
}

message C2S_UpdateRandomPlayer {
}
message S2C_UpdateRandomPlayer {
  required uint32 ret = 1;
	repeated out_base.UserSnapshot random_players = 2;	// 随机玩家
}

message C2S_Proto_Test {
	optional uint64 uint_64 = 1;//一个符合uint64的值，值范围必须达到uint64
	optional uint64 non_uint_64 = 2;//一个使用uint64存储的值，但值范围没有达到uint64,此值是为了方便和上面比对
}

message S2C_Proto_Test {
	optional uint64 uint_64 = 1;//定义同C2S_PROTOBUF64_TEST
	optional uint64 non_uint_64 = 2;
}

//客户端记录的序列号信息
message C2S_SyncProto {
	optional uint64 client_id = 1;//客户端协议序列号
	optional uint64 server_id = 2;//服务器协议序列号
}

//服务器记录的序列号信息
message S2C_SyncProto {
	optional uint64 client_id = 1;
	optional uint64 server_id = 2;
}

// 战力竞赛-活动信息
message C2S_FightingCapacity_Info {
}
message S2C_FightingCapacity_Info {
  required uint32 ret = 1;
  optional uint64 fight_value = 2;	// 历史最高战力
  repeated uint32 ids = 3;	// 已领取过的战力奖励id
}

// 战力竞赛-领取战力奖励
message C2S_FightingCapacity_Award {
  optional uint32 id = 1;	// 配置表id
}
message S2C_FightingCapacity_Award {
  required uint32 ret = 1;
  optional uint32 id = 2;	// 配置表id
}

// 战力竞赛排行榜缓存(活动结束后才有数据)
message C2S_FightingCapacity_Rank {
}
message S2C_FightingCapacity_Rank {
  required uint32 ret = 1;
  repeated uint64 ids = 2;
  repeated uint64 fvs = 3;
}

//问卷信息
message C2S_Questionnaire_GetInfo {
}

message S2C_Questionnaire_GetInfo {
  required uint32 ret = 1;
  repeated out_base.QuestionnaireInfo infos = 2;
}

message S2C_Questionnaire_Notify {
}

// 礼包码奖励通知
message S2C_GiftNotify {
  required uint32 ret = 1;
	repeated out_base.Award awards = 2;
}

// 七日活动-信息
message C2S_Sevendays_Info {
  optional uint32 type = 1; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Info {
  required uint32 ret = 1;
  optional uint32 create_time = 2;	// 创角时间
  repeated out_base.SevendaysTask tasks = 3;	// 七日任务信息
  repeated uint32 fog_cleared = 4;	// 已清除迷雾的方格配置id
  repeated uint32 obstacle_broken = 5;	// 已破坏障碍的方格配置id
  repeated uint32 activated = 6;	// 已激活奖励或事件的方格配置id
  optional uint32 type = 7; //七日活动类型：1为七日活动，2为十四日活动
}

// 七日活动-领奖
message C2S_Sevendays_Award {
  required uint32 id = 1;	// 任务配置id
  optional uint32 type = 2; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Award {
  required uint32 ret = 1;
  required uint32 id = 2;	// 任务配置id
  optional uint32 type = 3; //七日活动类型：1为七日活动，2为十四日活动
}

// 七日活动-清除迷雾
message C2S_Sevendays_Clear {
  repeated uint32 ids = 1;	// 方格的配置id
  optional uint32 type = 2; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Clear {
  required uint32 ret = 1;
  repeated uint32 ids = 2;	// 方格的配置id
  optional uint32 type = 3; //七日活动类型：1为七日活动，2为十四日活动
}

// 七日活动-破坏障碍
message C2S_Sevendays_Break {
  required uint32 id = 1;	// 方格的配置id
  optional uint32 type = 2; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Break {
  required uint32 ret = 1;
  required uint32 id = 2;	// 方格的配置id
  optional uint32 type = 3; //七日活动类型：1为七日活动，2为十四日活动
}

// 七日活动-激活事件/奖励
message C2S_Sevendays_Activate {
  required uint32 id = 1;	// 方格的配置id
  repeated uint32 break_ids = 2;	// 如果是事件1、2，填上需要破坏的方格配置id
  optional uint32 type = 3; //七日活动类型：1为七日活动，2为十四日活动
}
message S2C_Sevendays_Activate {
  required uint32 ret = 1;
  required uint32 id = 2;	// 方格的配置id
  repeated uint32 break_ids = 3;	// 如果是事件1、2，填上需要破坏的方格配置id
	repeated out_base.Award awards = 4;
  optional uint32 type = 5; //七日活动类型：1为七日活动，2为十四日活动
}

message C2S_LevelUp_Info {
}

message S2C_LevelUp_Info {
	required uint32 ret = 1;
	repeated uint32 award = 2;
}

message C2S_LevelUp_Award {
	required uint32 id = 1;
}

message S2C_LevelUp_Award {
	required uint32 ret = 1;
	optional uint32 id = 2;
	repeated out_base.Award awards = 3;
}

message C2S_Phone_Info {
}

message S2C_Phone_Info {
	required uint32 ret = 1;
	optional string phone_num = 2;
	optional uint32 next_award_time = 3;
}

message C2S_Phone_Bind {
	required string phone_num = 1;
}

message S2C_Phone_Bind {
	required uint32 ret = 1;
	optional string phone_num = 2;
}

message C2S_Phone_Award {
}

message S2C_Phone_Award {
	required uint32 ret = 1;
	repeated out_base.Award awards = 2;
	optional uint32 next_award_time = 3;
}

// 抽将返利-信息
message C2S_RecruitRebate_Info {
}
message S2C_RecruitRebate_Info {
  required uint32 ret = 1;
  optional uint32 recruit_count = 2;	// 已抽将次数
  repeated uint32 ids = 3;	// 已领取奖励id
}

// 抽将返利-领奖
message C2S_RecruitRebate_Award {
  required uint32 id = 1;	// 领取的配置id
}
message S2C_RecruitRebate_Award {
  required uint32 ret = 1;
  required uint32 id = 2;	// 领取的配置id
}

//军团竞赛
message C2S_GuildCompetition_GetInfo {
}

message S2C_GuildCompetition_GetInfo {
  required uint32 ret = 1;
  repeated out_base.Task guild_tasks = 2; //军团任务状态
  repeated out_base.Task personal_tasks = 3; //个人任务状态
  repeated uint32 awarded_tasks = 4; //已领取任务id
}

message C2S_GuildCompetition_GetAward {
  required uint32 id = 1; //任务id
}

message S2C_GuildCompetition_GetAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3; //本次获得奖励
  repeated uint32 awarded_tasks = 4; //已领取任务id
}

message S2C_GuildCompetition_SyncTask {
  required out_base.Task task = 1;
}

// 登录送礼-信息
message C2S_LoginReward_Info {
}
message S2C_LoginReward_Info {
  required uint32 ret = 1;
  optional uint32 days = 2;	// 累计登录天数
  repeated uint32 ids = 3;	// 已领取奖励id
  optional uint32 last_ts = 4;	// 上次成功领奖的时间戳
}

// 登录送礼-领奖
message C2S_LoginReward_Award {
  required uint32 id = 1;	// 领取的配置id
}
message S2C_LoginReward_Award {
  required uint32 ret = 1;
  required uint32 id = 2;	// 领取的配置id
}

//铸神像-信息
message C2S_GuildStatue_GetInfo {
}

message S2C_GuildStatue_GetInfo {
  required uint32 ret = 1;
  optional out_base.GuildStatue statue = 2;
  repeated uint32 awarded_stage = 3; //各个部件进度奖励标记
  optional uint32 stone_used = 4; //今日已使用
  repeated out_base.GuildStatueContribute contributes = 5; //成员铸造贡献
  optional uint32 total_progress = 6; //当前神像铸造进度
}

message C2S_GuildStatue_DoCast {
  required uint32 type = 1; //铸造部位
  required uint32 value = 2; //增加进度值
  required uint32 stone = 3; //铸造石
}

message S2C_GuildStatue_DoCast {
  required uint32 ret = 1;
  required uint32 type = 2;
  required uint32 value = 3;
  required uint32 stone = 4;
  repeated out_base.Award awards = 5; //铸造奖励
  optional out_base.GuildStatue statue = 6; //神像详情
  optional bool upgrade = 7; //是否升级
  optional uint32 stone_used = 8; //今日已使用
}

message C2S_GuildStatue_GetStageAward {
  required uint32 type = 1;
}

message S2C_GuildStatue_GetStageAward {
  required uint32 ret = 1;
  required uint32 type = 2;
  repeated out_base.Award awards = 3; //本次进度奖励
  repeated uint32 awarded_stage = 4; //各个部件进度奖励标记
}

message C2S_GuildStatue_GetFinalAward {
  required uint32 pos = 1;
}

message S2C_GuildStatue_GetFinalAward {
  required uint32 ret = 1;
  required uint32 pos = 2;
  repeated out_base.Award awards = 3; //宝箱奖励
  optional uint32 award_id = 4; //宝箱id
}

message S2C_GuildStatue_Push {
  required string name = 1; //玩家名字
  required uint32 base_id = 2;//配置id
  required uint32 type = 3; //铸造部位
  required uint32 value = 4; //增加进度值
  optional bool upgrade = 5; //是否升级
}

message C2S_GuildStatue_OneKeyStageAward {
}

message S2C_GuildStatue_OneKeyStageAward {
  required uint32 ret = 1;
  repeated out_base.Award awards = 2; //本次进度奖励
  repeated uint32 awarded_stage = 3; //各个部件进度奖励标记
}

// 功能引导-信息
message C2S_GuideTask_Info {
}
message S2C_GuideTask_Info {
  required uint32 ret = 1;
  repeated out_base.Task tasks = 2;
  repeated uint32 ids = 3;	// 已领取奖励id
}

// 功能引导-领奖
message C2S_GuideTask_Award {
  required uint32 id = 1;	// 领取的配置id
}
message S2C_GuideTask_Award {
  required uint32 ret = 1;
  required uint32 id = 2;	// 领取的配置id
}

// 变装-穿戴
message C2S_Skin_Wear {
	required uint32 book_id = 1;//变装book id
}

message S2C_Skin_Wear {
	required uint32 ret = 1;
	optional uint32 book_id = 2;
}

// 变装-脱卸
message C2S_Skin_TakeOff {
  optional uint32 advance_id = 1;	//武将进阶id
}

message S2C_Skin_TakeOff {
	required uint32 ret = 1;
	optional uint32 advance_id = 2;
}

message C2S_Collect_GetInfo {
}

message S2C_Collect_GetInfo {
  required uint32 ret = 1;
  repeated out_base.CollectRecord records = 2; //已收集的武将或兵符
  repeated uint32 awarded_id = 3; //已领取的奖励id
}

message C2S_Collect_GetAward {
  required uint32 id = 1; //任务id
}

message S2C_Collect_GetAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
  repeated uint32 awarded_id = 4;
}

//请求分享信息 
message C2S_GetChatShare {
  required uint32 share_type = 1;
  optional uint64 own_id = 2;
  optional uint64 id = 3;
}

message S2C_GetChatShare {
  required uint32 ret = 1;
  optional ChatShare share_info = 3;
}

//头像框激活信息
message C2S_FrameInfo {
}
message S2C_FrameInfo {
  required uint32 ret = 1;
  repeated uint32 ids = 2;	// 已激活的头像框
}

//领取礼包码
message C2S_GiftCode {
  required string code = 1;
}

message S2C_GiftCode {
  required uint32 ret = 1;
  repeated out_base.Award awards = 2;
}

//领取首充阶段奖励
message C2S_Recharge_GetFirstRechargeAward {
  required uint32 id = 1; //阶段id
}

message S2C_Recharge_GetFirstRechargeAward {
  required uint32 id = 1; //阶段id
  required uint32 ret = 2;
  repeated out_base.Award awards = 3;
}

//领取基金奖励
message C2S_Recharge_GetFundRechargeAward {
  required uint32 activity_id = 1;
  required uint32 id = 2;          //基金id
}

message S2C_Recharge_GetFundRechargeAward {
  required uint32 activity_id = 1;
  required uint32 id = 2;          //基金id
  required uint32 ret = 3;
  repeated out_base.Award awards = 4;
}

message S2C_Recharge_FundBuyNotify {
  required uint32 activity_id = 1;
  required uint32 num = 2;
}

//统一处理充值相关的数据
message S2C_Recharge_OpRecharge {
  optional out_base.OpMonthCard     month_card = 1;
  optional out_base.OpFirstRecharge first_recharge = 2;
  optional out_base.OpFundRecharge  fund_recharge = 3;
  optional out_base.OpDayRecharge   day_recharge = 4;
	optional out_base.OpSubRecharge   sub_recharge = 5;
  optional out_base.OpTotalRecharge total_recharge = 6;
  optional out_base.OpOpenPurchase  open_purchase = 7;
  optional out_base.OpDayBox        day_box = 8;
}

//获取基金
message C2S_Recharge_GetFundRecharge {
}

message S2C_Recharge_GetFundRecharge {
  required uint32 ret = 1;
  repeated out_base.FundRecharge fund_recharge = 2;
}

//领取天天充值奖励
message C2S_Recharge_GetDayRechargeAward {
  required uint32 activity_id = 1;
  required uint32 id = 2;
  optional uint32 choose = 3;
}

message S2C_Recharge_GetDayRechargeAward {
  required uint32 activity_id = 1;
  required uint32 id = 2;
  required uint32 ret = 3;
  repeated out_base.Award awards = 4;
}

//天天充值信息
message C2S_Recharge_GetDayRechargeInfo {
}

message S2C_Recharge_GetDayRechargeInfo {
  required uint32 ret = 1;
  repeated out_base.DayRecharge recharges = 2;//已参与的活动数据
}

//攻城略地
// 攻城略地-信息
message C2S_Storm_Info {
}
message S2C_Storm_Info {
  required uint32 ret = 1;
  repeated uint32 finish_storm_ids = 2;	// 已通关关隘ID(已领取通关奖励)
  optional uint32 total_progress = 3;	// 总进度
  repeated uint32 clear_storm_ids = 4;	// 今日已扫荡关隘ID
  repeated out_base.StormCityUnit units = 5; // 城主信息
  optional uint32 current_city = 6; //当前所在城池
  optional uint32 current_rank = 7; //当前排名
  repeated uint32 storm_ids = 8; // 关隘id列表
  repeated uint32 max_order = 9; // 关隘id列表对应的最大配置表order数
}

// 攻城略地-关隘信息
message C2S_Storm_StormInfo {
  required uint32 storm_id = 1;	// 关隘ID
}
message S2C_Storm_StormInfo {
  required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
  repeated out_base.StormEvent events = 3;	// 地图事件
}

// 攻城略地-挑战怪物/玩家事件(类型1/5)
message C2S_Storm_ChallengeBegin {
  required uint32 storm_id = 1;	// 关隘ID
  required uint32 cell_id = 2;	// 事件ID
}
message S2C_Storm_ChallengeBegin {
	required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
  required uint32 cell_id = 3;	// 事件ID
  optional uint64 battle_id = 4;	// 战斗id
}
message S2C_Storm_ChallengeFinish {
  required uint32 ret = 1;
  optional bool is_win = 2;	// 是否胜利
  repeated uint64 hp = 3;	// 战斗结束后剩余血量
  required uint32 storm_id = 4;	// 关隘ID
  required uint32 cell_id = 5;	// 事件ID
	repeated out_base.Award awards = 6;// 挑战奖励
}

// 攻城略地-领取宝箱事件(类型2/6)
message C2S_Storm_Award {
  required uint32 storm_id = 1;	// 关隘ID
  required uint32 cell_id = 2;	// 事件ID
}
message S2C_Storm_Award {
  required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
  required uint32 cell_id = 3;	// 事件ID
	repeated out_base.Award awards = 4;// 奖励
}

// 攻城略地-清除障碍事件(类型3)
message C2S_Storm_Break {
  required uint32 storm_id = 1;	// 关隘ID
  required uint32 cell_id = 2;	// 事件ID
}
message S2C_Storm_Break {
  required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
  required uint32 cell_id = 3;	// 事件ID
}

// 攻城略地-重置并扫荡
message C2S_Storm_Clear {
  required uint32 storm_id = 1;	// 关隘ID
}
message S2C_Storm_Clear {
  required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
	repeated out_base.Award awards = 3; // 其它奖励
	repeated out_base.Awards challenge_awards = 4;// 挑战类奖励
  repeated uint64 scores = 5;
}

// 攻城略地-重置
message C2S_Storm_Reset {
  required uint32 storm_id = 1;	// 关隘ID
}
message S2C_Storm_Reset {
  required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
  repeated out_base.StormEvent events = 3;	// 地图事件
}

// 攻城略地-更新事件敌人
message C2S_Storm_GetEnemy {
  required uint32 storm_id = 1;	// 关隘ID
  repeated uint32 cell_ids = 2;	// 需要拉取的事件cell id, 只能是StormEvent.enemy为空的事件id, 建议一次只拉取当前屏幕显示的玩家
}
message S2C_Storm_GetEnemy {
  required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
  repeated uint32 cell_ids = 3;	// 实际更新成功的事件ID
  repeated out_base.StormEvent events = 4;	// 实际更新成功的事件
}

// 攻城略地-通关关隘
message S2C_Storm_NotifyFinishStorm {
  required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
  repeated out_base.Award awards = 3;	// 通关奖励
}

// 攻城略地-获取事件对应的BattleUser结构
message C2S_Storm_GetBattleUser {
  required uint32 storm_id = 1;	// 关隘ID
  required uint32 cell_id = 2;	// 需要拉取的事件cell id
}
message S2C_Storm_GetBattleUser {
  required uint32 ret = 1;
  required uint32 storm_id = 2;	// 关隘ID
  required uint32 cell_id = 3;	// 需要拉取的事件cell id
  optional out_base.BattleUser battle_user = 4;
}

message C2S_Recharge_GetTotalRechargeAward {
  required uint32 id = 1;
}

message S2C_Recharge_GetTotalRechargeAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3;
}


//技能树升级
message C2S_Storm_SkillLvUp {
  required uint32 id = 1;
  required uint32 tg_lv = 2;
}

message S2C_Storm_SkillLvUp {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 tg_lv = 3;
}

//技能书手动重置
message C2S_Storm_SkillReset {
}

message S2C_Storm_SkillReset {
  required uint32 ret = 1;
}

//获取技能树信息
message C2S_Storm_GetSkillInfo {
}

message S2C_Storm_GetSkillInfo {
  required uint32 ret = 1;
  optional out_base.StormSkill storm_skill = 2;
}

//图鉴竞赛
message C2S_KnightBook_GetInfo {
}

message S2C_KnightBook_GetInfo {
  required uint32 ret = 1;
  repeated out_base.Task personal_tasks = 2; //个人任务状态
  repeated uint32 awarded_tasks = 3; //已领取任务id
}

message C2S_KnightBook_GetAward {
  required uint32 id = 1; //任务id
}

message S2C_KnightBook_GetAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated out_base.Award awards = 3; //本次获得奖励
  repeated uint32 awarded_tasks = 4; //已领取任务id
}

message S2C_KnightBook_SyncTask {
  required out_base.Task task = 1;
}

//领取限时商人奖励
message C2S_Recharge_GetOpenPurchaseAward {
  required uint32 activity_id = 1;
  required uint32 id = 2;
}

message S2C_Recharge_GetOpenPurchaseAward {
  required uint32 activity_id = 1;
  required uint32 id = 2;
  required uint32 ret = 3;
  repeated out_base.Award awards = 4;
}

//限时商人信息
message C2S_Recharge_GetOpenPurchaseInfo {
}

message S2C_Recharge_GetOpenPurchaseInfo {
  required uint32 ret = 1;
  repeated out_base.OpenPurchase recharges = 2;//已参与的活动数据
}

//限时神将
message C2S_Recruit_RecruitKnight {
  required uint32 activity_id = 1;   //活动id
  required uint32 id = 2;            //抽卡配置id
  required uint32 draw_type = 3;     //区分免费抽，单抽，十连 0：免费 1；单抽 2：十连
}

message S2C_Recruit_RecruitKnight {
  required uint32 activity_id = 1;   //活动id
  required uint32 id = 2;            //抽卡配置id
  required uint32 draw_type = 3;     //区分免费抽，单抽，十连 0：免费 1；单抽 2：十连
  required uint32 ret = 4;
  repeated out_base.Award awards = 5;
}

message C2S_Recruit_GetRecruitKnightInfo {
}

message S2C_Recruit_GetRecruitKnightInfo {
  repeated out_base.RecruitKnight recruit_knight = 1;
}

message C2S_Recruit_GetRecruitKnightAward {
  required uint32 activity_id = 1;   //活动id
  required uint32 id = 2;
}

message S2C_Recruit_GetRecruitKnightAward {
  required uint32 activity_id = 1;   //活动id
  required uint32 id = 2;
  required uint32 ret = 3;
  repeated out_base.Award awards = 4;
}

message S2C_Recruit_NotifyRank {
  required uint32 activity_id = 1;
  required uint64 score = 2;
  required uint32 time = 3;
  required out_base.UserSnapshot user = 4;
}

//攻城掠地-城主抢夺
message C2S_StormCity_Info {
  required uint32 city= 1; //城池id
}

message S2C_StormCity_Info {
  required uint32 ret = 1;
  required uint32 city= 2; //城池id
  optional uint32 rank = 3; //自己排名
  optional uint32 lord_awarded = 4; //官职奖励领取时间
  repeated out_base.StormCityUnit units = 5; //匹配到的对手(包括前七名)
  optional uint32 preRank = 6; //之前排名
  optional uint32 current_city = 7; //当前所在城池
  optional uint32 current_rank = 8; //当前所在城池排名
}

message C2S_StormCity_ChallengeBegin {
  required uint32 city= 1; //城池id
  required uint32 rank = 2; //挑战的排名
}

message S2C_StormCity_ChallengeBegin {
  required uint32 ret = 1;
  required uint32 city = 2; //城池id
  required uint32 rank = 3; //挑战排名
  optional uint64 battle_id = 4; //本场战斗的id
}

message S2C_StormCity_ChallengeFinish {
  required uint32 ret = 1;
  required uint32 city = 2; //城池id
  required uint32 rank = 3; //挑战排名
  optional uint32 pre_rank = 4; //挑战奖励
  optional bool is_win = 5; //是否胜利
  repeated out_base.StormCityUnit units = 6; //挑战胜利时重新匹配的对手
  optional bs.BattleResult result = 7; //战斗结果
  optional out_base.StormCityUnit enemy = 8; //对手信息
}

message C2S_StormCity_GetLordAward {
}

message S2C_StormCity_GetLordAward {
  required uint32 ret = 1;
  repeated out_base.Award awards = 2; //每日官职奖励
}

message C2S_StormCity_GetRanklist {
  required uint32 city = 1;
  required uint32 index = 2; // 1:1-25, 2:26-50 3:51-75 4:76-100
  required uint32 rank_tp = 3; // 1:50个包含机器人 2:50个不包含机器人
}

message S2C_StormCity_GetRanklist {
  required uint32 ret = 1;
  required uint32 city = 2;
  required uint32 index = 3;
  required uint32 rank_tp = 4;
  optional uint32 own_city = 5;
  optional uint32 own_rank = 6;
  repeated out_base.StormCityUnit units = 7; //挑战胜利时重新匹配的对手
}

message C2S_ReturnPay_GetInfo {
}

message S2C_ReturnPay_GetInfo {
  required uint32 ret = 1;
  required bool is_open = 2; // 是否开启
  optional uint64 gold_num = 3; // 元宝数量
  optional uint64 vip_exp_num = 4; // vip经验数量
  optional string desc = 5; // 活动介绍
  repeated out_base.Award awards = 6; // 奖励 
}

message C2S_ReturnPay_GetAward {
}

message S2C_ReturnPay_GetAward {
  required uint32 ret = 1;
  repeated out_base.Award awards = 2; // 奖励
}

message C2S_OnlineGift_GetInfo {
}

message S2C_OnlineGift_GetInfo {
  required uint32 ret = 1;
  optional uint32 online_time = 2; // 在线时间
  repeated out_base.KV reward_record = 3; // 领奖记录
}

message C2S_OnlineGift_GetAward {
  required uint32 order = 1; // 顺序
}

message S2C_OnlineGift_GetAward {
  required uint32 ret = 1;
  repeated out_base.Award awards = 2; // 奖励
  repeated out_base.KV reward_record = 3; // 领奖记录
}

//领取每日直冲奖励
message C2S_Recharge_GetDayBoxAward {
  required uint32 activity_id = 1;
  required uint32 id = 2;
}

message S2C_Recharge_GetDayBoxAward {
  required uint32 activity_id = 1;
  required uint32 id = 2;
  required uint32 ret = 3;
  repeated out_base.Award awards = 4;
}

message C2S_Recharge_GetDayBoxInfo {
}

message S2C_Recharge_GetDayBoxInfo {
  required uint32 ret = 1;
  repeated out_base.DayBox recharges = 2;//已参与的活动数据
}
