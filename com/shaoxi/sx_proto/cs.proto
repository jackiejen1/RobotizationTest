//cleint <---> scene

package cs;


enum ID {
    //网关中的协议
    ID_C2S_KeepAlive = 10000;
    ID_S2C_KeepAlive = 10001;
    ID_C2S_Login = 10002;
    ID_S2C_Login = 10003;
    ID_C2S_Create = 10004;
    ID_S2C_Create = 10005;
    ID_C2S_Flush = 10006;
    ID_S2C_Flush = 10007;
    ID_S2C_GetUser = 10008;
    ID_C2S_Offline = 10009;
    ID_S2C_GetKnight = 10010;
    ID_C2S_GetServerTime = 10011;
    ID_S2C_GetServerTime = 10012;
    ID_S2C_GetFriend = 10014;
    ID_S2C_FightKnight = 10016;

    ID_C2S_ChangeFormation = 10017; //布阵
    ID_S2C_ChangeFormation = 10018;
    ID_C2S_ChangeTeamKnight = 10019; //第一阵容武将更换
    ID_S2C_ChangeTeamKnight = 10020;
    ID_C2S_ChangeSecondTeamKnight = 10021; //第二阵容武将更换
    ID_S2C_ChangeSecondTeamKnight = 10022;

    ID_S2C_GetItem = 10023;
    ID_S2C_GetFragment = 10024;
    ID_S2C_GetGem = 10025;
    ID_S2C_GetInstrument = 10026;
    ID_C2S_UseItem = 10027; //道具使用
    ID_S2C_UseItem = 10028;
    ID_S2C_GetEquipment = 10029;
    ID_S2C_RedPointNotify = 10030; //红点通知协议
    ID_S2C_RollNotice = 10031; //滚屏公告

    ID_C2S_Sell = 10033;
    ID_S2C_Sell = 10034;
    ID_C2S_CancelAvatar = 10035;
    ID_S2C_CancelAvatar = 10036;
    ID_C2S_CompositeItem = 10037;
    ID_S2C_CompositeItem = 10038;

    ID_C2S_HeXie = 10039;
    ID_S2C_HeXie = 10040;

    ID_S2C_GetTreasure = 10042;
    ID_S2C_FightResource = 10043;
    ID_S2C_GetSoul = 10044;
    ID_C2S_Test = 10048;
    ID_S2C_Test = 10049;

    ID_C2S_AddFightEquipment = 10050; //穿装备
    ID_S2C_AddFightEquipment = 10051;
    ID_C2S_ClearFightEquipment = 10052; //脱装备
    ID_S2C_ClearFightEquipment = 10053;
    ID_S2C_OpObject = 10054;
    ID_C2S_MammonEntry = 10055;
    ID_S2C_MammonEntry = 10056;
    ID_C2S_MammonReceive = 10057;
    ID_S2C_MammonReceive = 10058;
    ID_C2S_AccountCopy = 10059;
    ID_S2C_AccountCopy = 10060;

    ID_C2S_GetEncodeKey = 10080;
    ID_S2C_GetEncodeKey = 10081;

    ID_S2C_KickOutUser = 10090;
    ID_S2C_SystemMessage = 10091;

    //聊天
    ID_C2S_ChatRequest = 10100;
    ID_S2C_ChatRequest = 10101;
    ID_S2C_Chat = 10102;
    ID_S2C_Notify = 10103;

    //通用战报
    ID_C2S_CommonGetReport = 10180;
    ID_S2C_CommonGetReport = 10181;
    ID_C2S_PvpTest = 10182;
    ID_S2C_PvpTest = 10183;
    ID_C2S_PveTest = 10184;
    ID_S2C_PveTest = 10185;
    ID_C2S_PveTest2 = 10186;
    ID_S2C_PveTest2 = 10187;

    //好友
    ID_C2S_GetFriendList = 10200; //获取好友列表
    ID_S2C_GetFriendList = 10201;
    ID_C2S_GetFriendReqList = 10202; //获取好友请求列表
    ID_S2C_GetFriendReqList = 10203;
    ID_C2S_AddFriend = 10204; //添加好友
    ID_S2C_AddFriend = 10205;
    ID_C2S_DelFriend = 10206; //刪除好友
    ID_S2C_DelFriend = 10207;
    ID_C2S_ConfirmAddFriend = 10208; //確認添加好友
    ID_S2C_ConfirmAddFriend = 10209;
    ID_C2S_FriendPresent = 10210; //贈送好友精力
    ID_S2C_FriendPresent = 10211;
    ID_C2S_GetFriendPresent = 10212; //領取好友精力
    ID_S2C_GetFriendPresent = 10213;
    ID_S2C_DelFriendRespond = 10215;
    ID_S2C_AddFriendRespond = 10216;
    ID_C2S_RecommandFriend = 10217;
    ID_S2C_RecommandFriend = 10218;
    ID_C2S_PkFriend = 10221; //好友切磋
    ID_S2C_PkFriend = 10222;
    //好友（跨服）
    ID_C2S_GetCrossFriendSid = 10223; //获取分组服务器ID
    ID_S2C_GetCrossFriendSid = 10224;
    ID_C2S_PkCrossUser = 10225; //跨服切磋
    ID_S2C_PkCrossUser = 10226;

    //主线副本
    ID_C2S_GetChapterList = 10300;
    ID_S2C_GetChapterList = 10301;
    ID_C2S_ExecuteStage = 10302; //执行关卡
    ID_S2C_ExecuteStage = 10303; //执行关卡
    ID_C2S_GetChapterRank = 10304;
    ID_S2C_GetChapterRank = 10305;
    ID_C2S_FastExecuteStage = 10309;
    ID_S2C_FastExecuteStage = 10310;
    ID_C2S_FinishChapterBoxRwd = 10315; //获取箱子奖励
    ID_S2C_FinishChapterBoxRwd = 10316;
    ID_C2S_ResetStage = 10317; //重置副本次数
    ID_S2C_ResetStage = 10318;
    ID_S2C_FirstEnterChapter = 10323; //第一次进入设置TAG
    ID_C2S_FirstEnterChapter = 10324;
    ID_C2S_GetBattleReport = 10327; //拉取或者生成战报
    ID_S2C_GetBattleReport = 10328;
    ID_C2S_GetBattleUser = 10329; //通用协议 查看玩家阵容
    ID_S2C_GetBattleUser = 10330;
    ID_C2S_GetFirstKillReport = 10331; //查看首杀战报
    ID_S2C_GetFirstKillReport = 10332; //
    ID_C2S_ReceiveStageBox = 10333; //领取关卡宝箱
    ID_S2C_ReceiveStageBox = 10334; //领取关卡宝箱
    ID_C2S_DoBattleReport = 10335; //战斗
    ID_S2C_DoBattleReport = 10336;
    ID_S2C_NewFirstKill = 10337;
    ID_S2C_GetFirstKill = 10338;

    //競技場
    ID_C2S_GetArenaInfo = 10400; //進入競技場
    ID_S2C_GetArenaInfo = 10401;
    ID_C2S_ChallengeArena = 10402; //挑戰
    ID_S2C_ChallengeArena = 10403;
    ID_C2S_GetArenaTopInfo = 10404; //競技場排行榜
    ID_S2C_GetArenaTopInfo = 10405;
    ID_C2S_GetArenaUserInfo = 10406; //獲取JJC某個玩家信息
    ID_S2C_GetArenaUserInfo = 10407;
    ID_C2S_GetArenaBattleResult = 10408; //竞技场战况
    ID_S2C_GetArenaBattleResult = 10409;

    //抽卡
    ID_C2S_RecruitInfo = 10600;
    ID_S2C_RecruitInfo = 10601;
    ID_C2S_RecruitLp = 10602;
    ID_S2C_RecruitLp = 10603;
    ID_C2S_RecruitLpTen = 10604;
    ID_S2C_RecruitLpTen = 10605;
    ID_C2S_RecruitJp = 10606;
    ID_S2C_RecruitJp = 10607;
    ID_C2S_RecruitJpTen = 10608;
    ID_S2C_RecruitJpTen = 10609;
    ID_C2S_RecruitJpTw = 10610;
    ID_S2C_RecruitJpTw = 10611;
    ID_C2S_RecruitZy = 10612;
    ID_S2C_RecruitZy = 10613;
    ID_C2S_RecruitTest = 10614;
    ID_S2C_RecruitTest = 10615;
    ID_S2C_RecruitWithDialogue = 10616;
    //斗破凌霄
    ID_C2S_ExpeditionEntry = 10650;
    ID_S2C_ExpeditionEntry = 10651;
    ID_C2S_ExpeditionReset = 10652;
    ID_S2C_ExpeditionReset = 10653;
    ID_C2S_ExpeditionFight = 10654;
    ID_S2C_ExpeditionFight = 10655;
    ID_C2S_ExpeditionView = 10656;
    ID_S2C_ExpeditionView = 10657;
    ID_C2S_ExpeditionToNext = 10658;
    ID_S2C_ExpeditionToNext = 10659;
    ID_C2S_ExpeditionLoot = 10660;
    ID_S2C_ExpeditionLoot = 10661;
    //装备养成
    ID_C2S_AddEquipment = 10700;
    ID_S2C_AddEquipment = 10701;
    ID_C2S_AddKnight = 10702;
    ID_S2C_AddKnight = 10703;
    ID_C2S_UpgradeEquipment = 10704; //装备强化
    ID_S2C_UpgradeEquipment = 10705;
    ID_C2S_AwakenEquipment = 10706; //装备觉醒
    ID_S2C_AwakenEquipment = 10707;
    ID_C2S_UpRankEquipment = 10708; //装备品质提升
    ID_S2C_UpRankEquipment = 10709;
    ID_C2S_FastUpgradeEquipment = 10710; //装备一键强化
    ID_S2C_FastUpgradeEquipment = 10711;
    ID_C2S_UpgradeGoldEquipment = 10712; //装备淬金
    ID_S2C_UpgradeGoldEquipment = 10713;
    ID_C2S_UpgradePurpleGoldEquipment = 10714; //装备神淬
    ID_S2C_UpgradePurpleGoldEquipment = 10715;
    ID_C2S_ChangePurpleGoldEquipmentSuit = 10716; //紫金套装更换
    ID_S2C_ChangePurpleGoldEquipmentSuit = 10717;

    //全服boss
    ID_C2S_EnterWorldBossUI = 10800; //进入全服BOSS
    ID_S2C_EnterWorldBossUI = 10801;
    ID_C2S_AttackWorldBoss = 10802; //全服BOSS战斗
    ID_S2C_AttackWorldBoss = 10803;
    ID_C2S_GetWorldBossRank = 10804; //排行榜
    ID_S2C_GetWorldBossRank = 10805;
    ID_S2C_AddMagicValueEvent = 10806; //添加魔值
    ID_S2C_GetWorldBossState = 10807; //推送全服BOSS状态
    ID_S2C_AttackWorldBossInfo = 10808; //推送攻击boss信息
    //ID_C2S_GetWorldBossMagicCount = 10809; //领取魔值增加的次数
    //ID_S2C_GetWorldBossMagicCount = 10810;

    //宝物系统
    ID_C2S_UpgradeTreasure = 10900; //强化宝物
    ID_S2C_UpgradeTreasure = 10901;
    ID_C2S_RefiningTreasure = 10902; //精炼宝物
    ID_S2C_RefiningTreasure = 10903;
    ID_C2S_GetTreasureFragmentRobList = 10904; //获取宝物碎片抢夺列表
    ID_S2C_GetTreasureFragmentRobList = 10905;
    ID_C2S_RobTreasureFragment = 10906; //抢夺宝物碎片
    ID_S2C_RobTreasureFragment = 10907;
    ID_C2S_ComposeTreasure = 10908; //合成宝物
    ID_S2C_ComposeTreasure = 10909;
    ID_C2S_FastRobTreasureFragment = 10912; //5次夺宝
    ID_S2C_FastRobTreasureFragment = 10913;
    ID_C2S_OneKeyRobTreasureFragment = 10914; //一键夺宝
    ID_S2C_OneKeyRobTreasureFragment = 10915;
    ID_S2C_GetTreasureFragment = 10916;
    ID_C2S_EquipTreasure = 10917; //装备或卸下宝物
    ID_S2C_EquipTreasure = 10918;
    ID_S2C_UpdateForbidTime = 10919; //更新免战时间
    ID_S2C_UpdateRobInfo = 10920; //更新夺宝信息
    ID_C2S_GodcostTreasure = 10921; //神铸宝物
    ID_S2C_GodcostTreasure = 10922;
    ID_C2S_MelteTreasure = 10923; //熔炼宝物
    ID_S2C_MelteTreasure = 10924;
    ID_C2S_GoldTreasureSwallow = 10925; //金宝物吞噬
    ID_S2C_GoldTreasureSwallow = 10926;
    ID_C2S_GoldTreasureAwaken = 10927; //金宝物觉醒
    ID_S2C_GoldTreasureAwaken = 10928;
    ID_C2S_GoldTreasureTransfer = 10929; //宝物转换
    ID_S2C_GoldTreasureTransfer = 10930;
    ID_C2S_PurpleGoldTreasure = 10931;//宝物淬炼
    ID_S2C_PurpleGoldTreasure= 10932;
    //碎片合成
    ID_C2S_SyntheticFragments = 10950;
    ID_S2C_SyntheticFragments = 10951;

    //武将升级
    ID_C2S_KnightLevelUp = 11000;
    ID_S2C_KnightLevelUp = 11001;
    //武将升阶
    ID_C2S_KnightQualityUp = 11002;
    ID_S2C_KnightQualityUp = 11003;
    //武将重生
    ID_C2S_Reborn = 11004;
    ID_S2C_Reborn = 11005;
    //武将回收
    ID_C2S_Recovery = 11006;
    ID_S2C_Recovery = 11007;
    //武将天命培养
    ID_C2S_KnightDestinyUp = 11008;
    ID_S2C_KnightDestinyUp = 11009;
    //武将法宝升级
    ID_C2S_KnightInstrumentUp = 11010;
    ID_S2C_KnightInstrumentUp = 11011;
    //武将法宝突破
    ID_C2S_KnightInstrumentRankUp = 11012;
    ID_S2C_KnightInstrumentRankUp = 11013;
    //武将觉醒
    ID_C2S_KnightStarUp = 11014;
    ID_S2C_KnightStarUp = 11015;
    //武将觉醒道具装备
    ID_C2S_KnightStarEquipItem = 11016;
    ID_S2C_KnightStarEquipItem = 11017;
    //觉醒道具合成
    ID_C2S_KnightStarItemComposite = 11018;
    ID_S2C_KnightStarItemComposite = 11019;
    //法宝精炼
    ID_C2S_KnightInstrumentRefine = 11020;
    ID_S2C_KnightInstrumentRefine = 11021;
    //神将幻化
    ID_C2S_KnightMagic = 11022;
    ID_S2C_KnightMagic = 11023;
    ID_C2S_KnightMagicEntry = 11024;
    ID_S2C_KnightMagicEntry = 11025;
    //神将化红
    ID_C2S_KnightChangeLevel = 11026;
    ID_S2C_KnightChangeLevel = 11027;
    //金将升星
    ID_C2S_KnightGoldUpgradeStar = 11028;
    ID_S2C_KnightGoldUpgradeStar = 11029;
    //金将吞噬
    ID_C2S_KnightGoldSwallowed = 11030;
    ID_S2C_KnightGoldSwallowed = 11031;
    //金法宝铸魂
    ID_C2S_KnightGoldInstrumentStar = 11032;
    ID_S2C_KnightGoldInstrumentStar = 11033;
    //法宝幻化
    ID_C2S_KnightInstrumentMagic = 11034;
    ID_S2C_KnightInstrumentMagic = 11035;
    //天命10次
    ID_C2S_KnightDestinyUp10 = 11036;
    ID_S2C_KnightDestinyUp10 = 11037;

    ID_C2S_InGem = 11050; //宝石镶嵌
    ID_S2C_InGem = 11051;
    ID_C2S_SynGem = 11052; //宝石合成
    ID_S2C_SynGem = 11053;

    //商店相关
    ID_C2S_GetShopInfo = 11101;
    ID_S2C_ShopInfoNtf = 11102;
    ID_C2S_BuyShopGoods = 11103;
    ID_S2C_BuyShopGoods = 11104;
    ID_C2S_RefreshShop = 11105;
    ID_S2C_RefreshShop = 11106;
    ID_C2S_ForeverMagicShop = 11107;
    ID_S2C_ForeverMagicShop = 11108;
    ID_C2S_GetMagicShopId = 11109;
    ID_S2C_GetMagicShopId = 11110;

    //三界游商相关
    ID_C2S_GetTravelShop = 11131;
    ID_S2C_GetTravelShop = 11132;
    ID_S2C_TravelShopNtf = 11133;
    ID_C2S_RefreshTravelShop = 11134;
    ID_S2C_RefreshTravelShop = 11135;
    ID_C2S_ReduceTravelDiscount = 11136;
    ID_S2C_ReduceTravelDiscount = 11137;
    ID_C2S_BuyTravelShopGoods = 11138;
    ID_S2C_BuyTravelShopGoods = 11139;
    ID_C2S_ExchangeTravelShopMoney = 11140;
    ID_S2C_ExchangeTravelShopMoney = 11141;

    //弹幕相关
    ID_C2S_SendSubtitle = 11201;
    ID_C2S_ClickSubtitle = 11202;
    ID_C2S_GetSubtitle = 11203;
    ID_S2C_GetSubtitle = 11204;
    ID_S2C_SendSubtitle = 11205;
    ID_C2S_GetRedPacket = 11206; //拉取红包弹幕
    ID_S2C_GetRedPacket = 11207; //拉取红包弹幕回应
    ID_C2S_FetchRedPacket = 11208; //领取红包弹幕
    ID_S2C_FetchRedPacket = 11209; //领取红包弹幕回应

    //跨服中转协议
    ID_C2S_GetCrossBattleTeam = 11301;
    ID_S2C_GetCrossBattleTeam = 11302;

    //镖车相关协议
    ID_C2S_GetMyBiaocheInfo = 11401;
    ID_S2C_GetMyBiaocheInfo = 11402;
    ID_C2S_BuildBiaoChe = 11403;
    ID_S2C_BuildBiaoChe = 11404;
    ID_C2S_UpgradeBiaoChe = 11405;
    ID_S2C_UpgradeBiaoChe = 11406;
    ID_C2S_ShipBiaoChe = 11407;
    ID_S2C_ShipBiaoChe = 11408;
    ID_C2S_GetBiaoCheList = 11409;
    ID_S2C_GetBiaoCheList = 11410;
    ID_C2S_RobBiaoChe = 11411;
    ID_S2C_RobBiaoChe = 11412;
    ID_C2S_FetchBiaoCheReward = 11413;
    ID_S2C_FetchBiaoCheReward = 11414;
    ID_C2S_FinishShipBiao = 11415;
    ID_S2C_FinishShipBiao = 11416;
    ID_C2S_RemoveRobCoolTime = 11417;
    ID_S2C_RemoveRobCoolTime = 11418;
    ID_C2S_GetFriendHelpNum = 11419;
    ID_S2C_GetFriendHelpNum = 11420;
    ID_C2S_RefreshBiaoCheList = 11421;
    ID_S2C_RefreshBiaoCheList = 11422;

    //邮件系统
    ID_C2S_GetMail = 11501;
    ID_S2C_GetMail = 11502;
    ID_C2S_ProcessMail = 11503;
    ID_S2C_ProcessMail = 11504;
    ID_S2C_AddSimpleMail = 11505;
    ID_S2C_SendSimpleMail = 11506;
    ID_C2S_Mail = 11507;
    ID_S2C_Mail = 11508;
    //ID_C2S_ReadMail = 11509;
    //ID_S2C_ReadMail = 11510;
    ID_C2S_DelMail = 11511;
    ID_S2C_DelMail = 11512;

    //vip
    ID_C2S_GetVip = 11601;
    ID_S2C_GetVip = 11602;

    //tower
    ID_C2S_ExecuteTower = 11701;
    ID_S2C_ExecuteTower = 11702;
    ID_C2S_ChooseTowerBuff = 11703;
    ID_S2C_ChooseTowerBuff = 11704;
    ID_C2S_OpenTowerBox = 11705;
    ID_S2C_OpenTowerBox = 11706;
    ID_C2S_GetTower = 11709;
    ID_S2C_GetTower = 11710;

    ID_C2S_GetTowerDailyRank = 11713;
    ID_S2C_GetTowerDailyRank = 11714;

    ID_C2S_BuyTowerShop = 11716;
    ID_S2C_BuyTowerShop = 11717;
    ID_C2S_GiveUpTower = 11718;
    ID_S2C_GiveUpTower = 11719;
    ID_C2S_BuyTowerCount = 11720;
    ID_S2C_BuyTowerCount = 11721;
    ID_C2S_GiveUpTowerBox = 11722;
    ID_S2C_GiveUpTowerBox = 11723;
    ID_C2S_EnterLayer = 11724;
    ID_S2C_EnterLayer = 11725;
    ID_S2C_SendTowerShop = 11726;
    ID_C2S_GiveUpSelectBuff = 11727;
    ID_S2C_GiveUpSelectBuff = 11728;
    ID_C2S_ReceivePassReward = 11729;
    ID_S2C_ReceivePassReward = 11730;
    ID_C2S_FastExecuteTower = 11731;
    ID_S2C_FastExecuteTower = 11732;

    //treasure pk
    ID_C2S_SearchTreasurePk = 11801;
    ID_S2C_SearchTreasurePk = 11802;
    ID_C2S_GetTreasurePk = 11803;
    ID_S2C_GetTreasurePk = 11804;
    ID_C2S_FightTreasurePk = 11805;
    ID_S2C_FightTreasurePk = 11806;
    ID_C2S_TreasureCompose = 11807;
    ID_S2C_TreasureCompose = 11808;

    //DailyDungeon
    ID_C2S_EnterDailyDungeonUI = 11900;
    ID_S2C_EnterDailyDungeonUI = 11901;
    ID_C2S_FirstEnterDailyDungeon = 11902;
    ID_S2C_FirstEnterDailyDungeon = 11903;
    ID_C2S_ExecuteDailyDungeon = 11904;
    ID_S2C_ExecuteDailyDungeon = 11905;
    ID_C2S_GetDailyDungeonRank = 11906;
    ID_S2C_GetDailyDungeonRank = 11907;

    //圍剿群妖
    ID_S2C_GetDevil = 12000; //BOSS信息
    ID_C2S_EnterDevil = 12001; //入口
    ID_S2C_EnterDevil = 12002;
    ID_C2S_GetDevilRank = 12003; //排行榜
    ID_S2C_GetDevilRank = 12004;
    ID_C2S_AttackDevil = 12025; //挑戰
    ID_S2C_AttackDevil = 12026;
    ID_C2S_PublicDevil = 12027; //共享BOSS
    ID_S2C_PublicDevil = 12028;
    ID_C2S_RefreshDevil = 12031; //刷新BOSS列表
    ID_S2C_RefreshDevil = 12032; //
    ID_S2C_DevilRecord = 12033; //发送好友伤害

    //迷宫
    ID_C2S_EnterMazeUI = 12100; //进入挖宝主界面
    ID_S2C_EnterMazeUI = 12101;
    ID_C2S_GetMazeInfo = 12102; //进入具体关卡
    ID_S2C_GetMazeInfo = 12103;
    ID_C2S_ExecuteMazeOpenHyjj = 12104; //打开火眼金睛
    ID_S2C_ExecuteMazeOpenHyjj = 12105;
    ID_C2S_ExecuteMazeTask = 12106; //执行任务
    ID_S2C_ExecuteMazeTask = 12107;
    ID_C2S_PurchaseMazeCount = 12108; //购买探索次数
    ID_S2C_PurchaseMazeCount = 12109;
    ID_C2S_PurchaseActionCount = 12110; //购买行动力
    ID_S2C_PurchaseActionCount = 12111;
    ID_C2S_QuitMaze = 12112; //退出关卡
    ID_S2C_QuitMaze = 12113;
    ID_C2S_QuitBoxEvent = 12114; //退出宝箱事件
    ID_S2C_QuitBoxEvent = 12115;

    //西游真经
    ID_C2S_GetUserBible = 12300;
    ID_S2C_GetUserBible = 12301;
    ID_C2S_ReadBible = 12302;
    ID_S2C_ReadBible = 12303;
    ID_C2S_BibleGetReward = 12304;
    ID_S2C_BibleGetReward = 12305;

    //不用的功能
    ID_C2S_EnterRichListUI = 12500;
    ID_S2C_EnterRichListUI = 12501;
    ID_C2S_EnterRichUI = 12502;
    ID_S2C_EnterRichUI = 12503;
    ID_C2S_PlayRichGame = 12504;
    ID_S2C_PlayRichGame = 12505;
    ID_C2S_GetRichRandEvent = 12507;
    ID_S2C_GetRichRandEvent = 12508;
    ID_C2S_QuitRichGame = 12509;
    ID_S2C_QuitRichGame = 12510;

    //仙界副本
    ID_C2S_GetFairyland = 12600;
    ID_S2C_GetFairyland = 12601;
    ID_C2S_FairylandExecuteStage = 12602;
    ID_S2C_FairylandExecuteStage = 12603;
    ID_C2S_GetFairylandRank = 12604;
    ID_S2C_GetFairylandRank = 12605;
    ID_C2S_FairylandOpenStageBox = 12606;
    ID_S2C_FairylandOpenStageBox = 12607;
    ID_C2S_FairylandOpenChapterBox = 12608;
    ID_S2C_FairylandOpenChapterBox = 12609;

    //日常任务
    ID_C2S_GetDailyTaskInfo = 12700; //登录拉取日常任务
    ID_S2C_GetDailyTaskInfo = 12701;
    ID_C2S_GetDailyTaskAward = 12702; //领取日常任务奖励
    ID_S2C_GetDailyTaskAward = 12703;
    //	ID_C2S_GetDailyTaskUnAwardInfo = 12704;
    //	ID_S2C_GetDailyTaskUnAwardInfo = 12705;
    ID_S2C_UpdateDailyTaskInfo = 12704; //日常任务数据更新
    ID_C2S_GetDailyTaskAllAward = 12705; //批量拉取日常任务奖励
    ID_S2C_GetDailyTaskAllAward = 12706;

    //月卡
    ID_C2S_UseMonthlyCard = 12800; //领取月卡每日奖励
    ID_S2C_UseMonthlyCard = 12801;
    ID_C2S_BuyMonthlyCard = 12802; //购买月卡(临时用的接口)
    ID_S2C_BuyMonthlyCard = 12803;
    ID_C2S_GetRecharge = 12804; //获取玩家充值页面信息(包括月卡)
    ID_S2C_GetRecharge = 12805;
    ID_S2C_RechargeNotice = 12806; //充值成功提示
    ID_C2S_ReceiveFirstCharge = 12807; //领取首冲奖励
    ID_S2C_ReceiveFirstCharge = 12808;

    //
    ID_C2S_BuyCommonCount = 12900;//通用购买次数
    ID_S2C_BuyCommonCount = 12901;
    ID_C2S_ExchangeCommonCount = 12902;//通用兑换玩法次数
    ID_S2C_ExchangeCommonCount = 12903;

    //开服基金
    ID_C2S_BuyFundCoin = 13000;
    ID_S2C_BuyFundCoin = 13001;
    ID_C2S_ReceiveFundCoin = 13002;
    ID_S2C_ReceiveFundCoin = 13003;
    ID_S2C_GetFundCoin = 13004;
    ID_S2C_BroadCastBuyFundCoin = 13005;

    //巡山
    ID_C2S_CitySkillUp = 13098; //巡山技能升级
    ID_S2C_CitySkillUp = 13099;
    ID_C2S_EnterCityListUI = 13100; //进入玩法
    ID_S2C_EnterCityListUI = 13101;
    ID_C2S_PatrolCity = 13102; //巡逻城池
    ID_S2C_PatrolCity = 13103;
    ID_C2S_AttackNewCity = 13104; //攻占新城池
    ID_S2C_AttackNewCity = 13105;
    ID_C2S_GetFriendCityInfo = 13106; //得到好友数据
    ID_S2C_GetFriendCityInfo = 13107;
    ID_C2S_RepressCityRebel = 13108; //镇压暴动
    ID_S2C_RepressCityRebel = 13109;
    ID_S2C_RemoveCityRebel = 13110; //解除暴动事件
    ID_C2S_GetCityAward = 13112; //得到挂机奖励
    ID_S2C_GetCityAward = 13113;
    ID_C2S_UpdateCity = 13115; //升级城池
    ID_S2C_UpdateCity = 13116;
    ID_C2S_AwardAllCityReward = 13117; //一键领奖
    ID_S2C_AwardAllCityReward = 13118;

    //成就
    ID_C2S_GetAchievementInfo = 13200; //登录拉取成就
    ID_S2C_GetAchievementInfo = 13201;
    ID_C2S_GetAchievementReward = 13202; //得到成就奖励
    ID_S2C_GetAchievementReward = 13203;
    ID_S2C_UpdateAchievementInfo = 13204; //成就数据更新
    //ID_C2S_GetAchievementUnAwardInfo = 13204;
    //ID_S2C_GetAchievementUnAwardInfo = 13205;

    //
    ID_C2S_GetCustomActivityInfo = 13300;
    ID_S2C_GetCustomActivityInfo = 13301;
    ID_C2S_GetCustomActivityAward = 13302;
    ID_S2C_GetCustomActivityAward = 13303;
    ID_S2C_UpdateCustomActivity = 13304; //更新可配置活动
    ID_S2C_UpdateCustomActivityQuest = 13305; //更新可配置活动任务

    //法宝抽卡
    ID_S2C_GetInstrumentDropInfo = 13400;
    ID_C2S_ExeInstrumentDrop = 13401;
    ID_S2C_ExeInstrumentDrop = 13402;

    //新手指引
    ID_C2S_UpdateGuideId = 13500;
    ID_S2C_UpdateGuideId = 13501;
    ID_C2S_GeneralGuide = 13502;

    //团购
    ID_C2S_GetGroupBuy = 13550;
    ID_S2C_GetGroupBuy = 13551;
    ID_C2S_BuyGroupGoods = 13552;
    ID_S2C_BuyGroupGoods = 13553;
    ID_C2S_LootScorePrize = 13554;
    ID_S2C_LootScorePrize = 13555;
    //test
    ID_C2S_SetUserLevel = 13600; //测试用 设置玩家等级
    ID_S2C_SetUserLevel = 13601;
    ID_C2S_AwardWhatYouWant = 13602; //测试用 发奖
    ID_S2C_AwardWhatYouWant = 13603;
    ID_C2S_ChapterTest = 13604; //
    ID_S2C_ChapterTest = 13605;
    ID_C2S_SetUserFightForKingScore = 13606;
    ID_S2C_SetUserFightForKingScore = 13607;

    //点石成金
    ID_C2S_PointGoldHand = 13700;
    ID_S2C_PointGoldHand = 13701;
    ID_S2C_GetGoldHand = 13702;
    ID_C2S_ReceiveGoldHandBox = 13703;
    ID_S2C_ReceiveGoldHandBox = 13704;
    ID_C2S_GetGoldHandRecording = 13705;
    ID_S2C_GetGoldHandRecording = 13706;

    //游戏礼包
    ID_C2S_GetGameGiftBag = 13800;
    ID_S2C_GetGameGiftBag = 13801;

    //图鉴
    ID_C2S_GetHandbook = 13900;
    ID_S2C_GetHandbook = 13901;
    ID_C2S_LevelUpHandbook = 13904;
    ID_S2C_LevelUpHandbook = 13905;

    ID_C2S_Drink = 13902;
    ID_S2C_Drink = 13903;

    //签到
    ID_C2S_SignIn = 14000;
    ID_S2C_SignIn = 14001;
    ID_C2S_GetSignIn = 14002;
    ID_S2C_GetSignIn = 14003;
    ID_C2S_ReSignIn = 14004;
    ID_S2C_ReSignIn = 14005;
    ID_C2S_SignInSell = 14006;
    ID_S2C_SignInSell = 14007;
    ID_C2S_SignInAllAward = 14008;
    ID_S2C_SignInAllAward = 14009;

    //七日活动
    ID_C2S_GetSevenDaysInfo = 14100; //拉取七日活动数据
    ID_S2C_GetSevenDaysInfo = 14101;
    ID_C2S_GetSevenDaysReward = 14102; //得到七日活动奖励
    ID_S2C_GetSevenDaysReward = 14103;
    ID_S2C_UpdateSevenDaysInfo = 14104; //后端推送七日活动信息

    //补偿奖励活动
    ID_C2S_GetCompensationActivityInfo = 14200;
    ID_S2C_GetCompensationActivityInfo = 14201;
    ID_C2S_ReceiveCompensationAward = 14202;
    ID_S2C_ReceiveCompensationAward = 14203;

    //获取公会成员列表
    ID_C2S_GetGuildMember = 14300;
    ID_S2C_GetGuildMember = 14301;
    //申请加入公会
    ID_C2S_GuildApplication = 14302;
    ID_S2C_GuildApplication = 14303;
    //创建公会
    ID_C2S_CreateGuild = 14304;
    ID_S2C_CreateGuild = 14305;
    //查询公会
    ID_C2S_QueryGuild = 14306;
    ID_S2C_QueryGuild = 14307;
    //审核公会申请
    ID_C2S_GuildCheckApplication = 14308;
    ID_S2C_GuildCheckApplication = 14309;
    //退会
    ID_C2S_GuildLeave = 14310;
    ID_S2C_GuildLeave = 14311;
    //踢人
    ID_C2S_GuildKick = 14312;
    ID_S2C_GuildKick = 14313;
    //转让会长
    ID_C2S_GuildTransfer = 14314;
    ID_S2C_GuildTransfer = 14315;
    //公会升降职
    ID_C2S_GuildPromote = 14316;
    ID_S2C_GuildPromote = 14317;
    //修改公会公告
    ID_C2S_SetGuildMessage = 14318;
    ID_S2C_SetGuildMessage = 14319;
    //进入公会大厅
    ID_C2S_QueryGuildMall = 14320;
    ID_S2C_QueryGuildMall = 14321;

    //获取公会申请列表
    ID_C2S_GetGuildApplication = 14322;
    ID_S2C_GetGuildApplication = 14323;

    //解散公会
    ID_C2S_GuildDismiss = 14324;
    ID_S2C_GuildDismiss = 14325;

    //弹劾会长
    ID_C2S_LeaderImpeachment = 14326;
    ID_S2C_LeaderImpeachment = 14327;

    //审核弹劾
    ID_C2S_CheckImpeachment = 14328;
    ID_S2C_CheckImpeachment = 14329;

    //公会动态
    ID_C2S_GetGuildSystemNotify = 14330;
    ID_S2C_GetGuildSystemNotify = 14331;

    //公会排行
    ID_C2S_GetGuildRank = 14332;
    ID_S2C_GetGuildRank = 14333;

    ID_S2C_SimpleGuildChangedNotify = 14334;

    ID_C2S_GetTimeLimitShop = 14336;
    ID_S2C_GetTimeLimitShop = 14337;

    ID_C2S_BuyGuildShop = 14338;
    ID_S2C_BuyGuildShop = 14339;
    //获取帮派留言板
    ID_C2S_GetGuildMessageBoard = 14340;
    ID_S2C_GetGuildMessageBoard = 14341;
    //置顶
    ID_C2S_GuildMessageBoardTop = 14342;
    ID_S2C_GuildMessageBoardTop = 14343;
    //发送留言
    ID_C2S_ToGuildMessage = 14344;
    ID_S2C_ToGuildMessage = 14345;
    ID_S2C_GuildMessageContent = 14346;

    //公会玩法
    ID_S2C_GetUserGuildInfo = 14350;
    ID_C2S_GuildSacrifice = 14351; //公会祭祀
    ID_S2C_GuildSacrifice = 14352;
    ID_C2S_GuildGetSacrificeAward = 14353; //公会祭祀领奖
    ID_S2C_GuildGetSacrificeAward = 14354;
    ID_C2S_UserGuildSkillUp = 14355; //个人公会技能提升
    ID_S2C_UserGuildSkillUp = 14356;
    ID_C2S_GuildSkillUp = 14357; //公会技能提升
    ID_S2C_GuildSkillUp = 14358;

    //公会副本
    ID_C2S_GuildDungeonAttack = 14360; //公会副本挑战
    ID_S2C_GuildDungeonAttack = 14361;
    ID_C2S_GuildDungeonBoxAward = 14362; //公会副本关卡奖励
    ID_S2C_GuildDungeonBoxAward = 14363;
    ID_C2S_GuildDungeonAchievementAward = 14364; //公会副本通关奖励
    ID_S2C_GuildDungeonAchievementAward = 14365;
    ID_C2S_GuildDungeonBuyCount = 14366; //公会副本购买次数
    ID_S2C_GuildDungeonBuyCount = 14367;
    ID_C2S_GuildDungeonRank = 14368; //公会副本排行榜
    ID_S2C_GuildDungeonRank = 14369;
    ID_C2S_GuildDungeonResetChapter = 14370; //公会副本重置方式
    ID_S2C_GuildDungeonResetChapter = 14371;
    ID_S2C_UpdateGuildDungeonAttackInfo = 14372; //公会副本击杀广播
    ID_C2S_GetGuildDungeonInfo = 14373; //拉取公会副本信息
    ID_S2C_GetGuildDungeonInfo = 14374;
    ID_C2S_GetGuildDungeonAwardInfo = 14375; //拉取公会副本关卡宝藏信息
    ID_S2C_GetGuildDungeonAwardInfo = 14376;

    //公会聚会
    ID_C2S_GetGuildPartyInfo = 14377;
    ID_S2C_GetGuildPartyInfo = 14378;
    ID_C2S_GuildPartyJoin = 14379;
    ID_S2C_GuildPartyJoin = 14380;
    ID_C2S_GuildPartyJoinerState = 14381;
    ID_S2C_GuildPartyJoinerState = 14382;
    ID_C2S_GuildPartyCalProfit = 14383;
    ID_S2C_GuildPartyCalProfit = 14384;
    ID_S2C_GuildPartyReportJoinerState = 14385;
    ID_C2S_GetGuildPartyLog = 14386;
    ID_S2C_GetGuildPartyLog = 14387;
    //新服战力榜
    ID_S2C_GetSevenDaysTopInfo = 14400;
    ID_C2S_GetSevenDaysTopRankList = 14401;
    ID_S2C_GetSevenDaysTopRankList = 14402;

    //充值返利
    ID_C2S_GetRechargeRebateInfo = 14500;
    ID_S2C_GetRechargeRebateInfo = 14501;
    ID_C2S_GetRechargeRebateAward = 14502;
    ID_S2C_GetRechargeRebateAward = 14503;

    //定制活动
    ID_C2S_GetRandomActivityInfo = 14600;
    ID_S2C_GetRandomActivityInfo = 14601;
    ID_C2S_RandomActivityBuyGoods = 14602;
    ID_S2C_RandomActivityBuyGoods = 14603;
    ID_C2S_RefreshRandomActivity = 14604;
    ID_S2C_RefreshRandomActivity = 14605;
    ID_C2S_RandomActivityBuyCount = 14606;
    ID_S2C_RandomActivityBuyCount = 14607;
    ID_C2S_RandomActivityReceiveReward = 14608;
    ID_S2C_RandomActivityReceiveReward = 14609;
    ID_C2S_RandomActivityRecoverCount = 14610;
    ID_S2C_RandomActivityRecoverCount = 14611;

    //龙宫探宝
    ID_C2S_GetDragonInfo = 14612;
    ID_S2C_GetDragonInfo = 14613;
    ID_C2S_DragonBuyGoods = 14614;
    ID_S2C_DragonBuyGoods = 14615;
    ID_C2S_RefreshDragon = 14616;
    ID_S2C_RefreshDragon = 14617;
    ID_C2S_DragonReceiveReward = 14618;
    ID_S2C_DragonReceiveReward = 14619;
    ID_C2S_GetDragonRank = 14620;
    ID_S2C_GetDragonRank = 14621;
    ID_S2C_NewDragonActivity = 14622;

    //vip福利
    ID_C2S_GetActivityVipReward = 14700;
    ID_S2C_GetActivityVipReward = 14701;
    ID_C2S_ActivityVipRewardReceiveReward = 14702;
    ID_S2C_ActivityVipRewardReceiveReward = 14703;

    //新服登录
    ID_C2S_GetActivityOpenLogin = 14800;
    ID_S2C_GetActivityOpenLogin = 14801;
    ID_C2S_ActivityOpenLoginReceiveAward = 14802;
    ID_S2C_ActivityOpenLoginReceiveAward = 14803;

    //微信分享
    ID_C2S_WxShare = 14810;
    ID_S2C_WxShare = 14811;

    ID_S2C_StarRedPacket = 14820;
    ID_C2S_StarRedPacketCollect = 14821;
    ID_S2C_StarRedPacketCollect = 14822;

    //封测补偿(跨服)
    ID_C2S_BetaCompInfo = 14900;
    ID_S2C_BetaCompInfo = 14901;
    ID_C2S_BetaCompAward = 14902;
    ID_S2C_BetaCompAward = 14903;

    //明星签名照奖励
    ID_S2C_GetActivityStarPhotoInfo = 15000;
    ID_C2S_GetActivityStarPhotoAward = 15001;
    ID_S2C_GetActivityStarPhotoAward = 15002;

    //明星礼包码
    ID_C2S_GetStarGiftCode = 16000;
    ID_S2C_GetStarGiftCode = 16001;
    ID_C2S_OpenStarGiftCode = 16002;
    ID_S2C_OpenStarGiftCode = 16003;

    //仙灵
    ID_C2S_EquipSoul = 16100;
    ID_S2C_EquipSoul = 16101;
    ID_C2S_UpgradeSoul = 16102;
    ID_S2C_UpgradeSoul = 16103;
    ID_C2S_DrawSoul = 16104;
    ID_S2C_DrawSoul = 16105;
    ID_C2S_ActiveSouls = 16106;
    ID_S2C_ActiveSouls = 16107;
    ID_S2C_GetActivedSouls = 16108;
    ID_S2C_GetSoulDraw = 16109;
    ID_C2S_RollBackSouls = 16110;
    ID_S2C_RollBackSouls = 16111;
    ID_C2S_ActiveSoulScore = 16112;
    ID_S2C_ActiveSoulScore = 16113;
    ID_S2C_GetSoulScore = 16114;
    ID_C2S_GetSoulRank = 16115;
    ID_S2C_GetSoulRank = 16116;
    ID_C2S_GetCommonCrossRank = 16117;
    ID_S2C_GetCommonCrossRank = 16118;
    ID_C2S_SamsaraSoul = 16119; //仙灵轮回
    ID_S2C_SamsaraSoul = 16120;
    ID_C2S_IncubateSoul = 16121; //仙灵孵化
    ID_S2C_IncubateSoul = 16122;
    ID_C2S_CancelIncubateSoul = 16123; //仙灵孵化撤回
    ID_S2C_CancelIncubateSoul = 16124;
    ID_C2S_RefineSoul = 16125; //仙灵洗练
    ID_S2C_RefineSoul = 16126;
    ID_C2S_SaveRefineSoul = 16127; //仙灵洗练保存
    ID_S2C_SaveRefineSoul = 16128;
    ID_C2S_LockRefineSoul = 16129; //仙灵洗练加锁
    ID_S2C_LockRefineSoul = 16130;
    ID_C2S_SoulRefinePurple = 16131;//仙灵炼体
    ID_S2C_SoulRefinePurple = 16132;
    ID_C2S_CancelSoulRefinePurple = 16133;//仙灵炼体撤回
    ID_S2C_CancelSoulRefinePurple = 16134;

    ID_C2S_GetSoulDungeonInfo = 16150;
    ID_S2C_GetSoulDungeonInfo = 16151;
    ID_C2S_FlushSoulDungeon = 16152;
    ID_S2C_FlushSoulDungeon = 16153;
    ID_C2S_ChallengeSoulDungeon = 16154;
    ID_S2C_ChallengeSoulDungeon = 16155;

    //综合排行榜
    ID_C2S_GetUserLevelRank = 16200;
    ID_S2C_GetUserLevelRank = 16201;
    ID_C2S_GetUserPowerRank = 16202;
    ID_S2C_GetUserPowerRank = 16203;

    //名人堂
    ID_C2S_GetFameHallInfo = 16300;
    ID_S2C_GetFameHallInfo = 16301;
    ID_C2S_FameHallGiveHeart = 16302;
    ID_S2C_FameHallGiveHeart = 16303;
    ID_C2S_FameHallChangeSign = 16304;
    ID_S2C_FameHallChangeSign = 16305;

    //撒豆成兵
    ID_C2S_LotteryEntry = 16350;
    ID_S2C_LotteryEntry = 16351;
    ID_C2S_LotteryJoin = 16352;
    ID_S2C_LotteryJoin = 16353;
    ID_C2S_LotteryExchange = 16354;
    ID_S2C_LotteryExchange = 16355;
    ID_C2S_LotteryRebate = 16356;
    ID_S2C_LotteryRebate = 16357;
    ID_C2S_LotteryLadder = 16358;
    ID_S2C_LotteryLadder = 16359;
    ID_S2C_LotteryNotify = 16360;

    //节日活动
    ID_C2S_GetHolidayActivityInfo = 16400;
    ID_S2C_GetHolidayActivityInfo = 16401;
    ID_C2S_GetHolidayActivityReward = 16402;
    ID_S2C_GetHolidayActivityReward = 16403;
    ID_S2C_UpdateHolidayActivityInfo = 16404;
    ID_S2C_GetHolidayActivityPublish = 16405;

    //新节日活动
    ID_C2S_GetNewHolidayActivityInfo = 16406;
    ID_S2C_GetNewHolidayActivityInfo = 16407;
    ID_C2S_GetNewHolidayActivityReward = 16408;
    ID_S2C_GetNewHolidayActivityReward = 16409;
    ID_S2C_UpdateNewHolidayActivityInfo = 16410;
    ID_S2C_GetNewHolidayActivityPublish = 16411;

    //天宫炼宝
    ID_C2S_GetActivityLianBaoInfo = 16500;
    ID_S2C_GetActivityLianBaoInfo = 16501;
    ID_C2S_ActivityLianBaoBuyGood = 16502;
    ID_S2C_ActivityLianBaoBuyGood = 16503;
    ID_C2S_ActivityLianBaoRefresh = 16504;
    ID_S2C_ActivityLianBaoRefresh = 16505;
    ID_C2S_GetActivityLianBaoRank = 16506;
    ID_S2C_GetActivityLianBaoRank = 16507;
    ID_S2C_FlushUserResource = 16508;

    //八卦祈福
    ID_C2S_GetPrayInfo = 16510;
    ID_S2C_GetPrayInfo = 16511;
    ID_C2S_PrayBuyGood = 16512;
    ID_S2C_PrayBuyGood = 16513;
    ID_C2S_GetPrayRank = 16514;
    ID_S2C_GetPrayRank = 16515;
    ID_S2C_GetPrayGoldPool = 16516;
    ID_S2C_NewPrayActivity = 16517;

    //南天门（PVP）
    ID_C2S_GetFierceFullInfo = 16600; //得到详细信息
    ID_S2C_GetFierceFullInfo = 16601;
    ID_C2S_FierceSelectRace = 16602; //选择种族
    ID_S2C_FierceSelectRace = 16603;
    ID_C2S_ChallengeFierce = 16604; //挑战
    ID_S2C_ChallengeFierce = 16605;
    ID_C2S_RefreshFierceChallengeList = 16606; //刷新挑战列表
    ID_S2C_RefreshFierceChallengeList = 16607;
    ID_C2S_PurchaseFierceChallengeCount = 16608; //购买挑战次数
    ID_S2C_PurchaseFierceChallengeCount = 16609;
    //ID_C2S_GetFierceScoreReward = 16610; //得到积分奖励
    //ID_S2C_GetFierceScoreReward = 16611;
    ID_C2S_GetFierceRank = 16612; //得到排行榜
    ID_S2C_GetFierceRank = 16613;
    ID_S2C_UpdateFierceRank = 16614; //更新排行
    ID_S2C_OpenFierce = 16615; //开启玩法

    //头衔系统
    ID_C2S_GetWeekTaskInfo = 16700;
    ID_S2C_GetWeekTaskInfo = 16701; //推送目标信息
    ID_S2C_UpdateWeekTask = 16702; //更新目标信息
    ID_C2S_GetWeekTaskAward = 16703; //领奖
    ID_S2C_GetWeekTaskAward = 16704; //更新目标信息
    ID_C2S_UpgradeTitle = 16705; //升级头衔
    ID_S2C_UpgradeTitle = 16706;

    //称号系统
    ID_C2S_GetCoolName = 16707;
    ID_S2C_GetCoolName = 16708;
    ID_C2S_ActiveCoolName = 16709;
    ID_S2C_ActiveCoolName = 16710;
    ID_C2S_UseCoolName = 16711;
    ID_S2C_UseCoolName = 16712;

    //头像框
    ID_C2S_ChangeShowVip = 16713;
    ID_S2C_ChangeShowVip = 16714;

    //限时优惠
    ID_C2S_GetDailySale = 16800; //拉信息
    ID_S2C_GetDailySale = 16801;
    ID_C2S_BuyDailySale = 16802; //买商品
    ID_S2C_BuyDailySale = 16803;
    ID_C2S_GetDailySaleAward = 16804; //领奖励
    ID_S2C_GetDailySaleAward = 16805;
    ID_C2S_RefreshDailySale = 16806; //刷新
    ID_S2C_RefreshDailySale = 16807;

    ID_C2S_GetWeekShopInfo = 16808; //查看周商店
    ID_S2C_GetWeekShopInfo = 16809;
    ID_C2S_BuyWeekShop = 16810; //周商店购买
    ID_S2C_BuyWeekShop = 16811;

    //问卷调查
    ID_S2C_GetQuestionUrl = 16900;
    ID_C2S_QuestionSurvey = 16901;
    ID_S2C_QuestionSurvey = 16902;

    //家园系统
    ID_C2S_GetHomelandInfo = 16950; //得到基础信息
    ID_S2C_GetHomelandInfo = 16951;
    ID_C2S_BuildHomelandBuilding = 16952; //建造建筑
    ID_S2C_BuildHomelandBuilding = 16953;
    ID_C2S_UpgradeHomelandBuilding = 16954; //升级建筑
    ID_S2C_UpgradeHomelandBuilding = 16955;
    ID_C2S_PurchaseHomelandCount = 16956; //购买次数
    ID_S2C_PurchaseHomelandCount = 16957;
    ID_C2S_GetFriendAndGuildMemberInfo = 16958; //得到好友和军团成员信息
    ID_S2C_GetFriendAndGuildMemberInfo = 16959;
    ID_C2S_GetFriendAndGuildMemberDetailInfo = 16960; //得到具体信息
    ID_S2C_GetFriendAndGuildMemberDetailInfo = 16961;
    ID_C2S_AssistFriendAndGuildMember = 16962; //驱鬼
    ID_S2C_AssistFriendAndGuildMember = 16963;
    ID_C2S_AwardBuildingProduction = 16964; //领取建筑产出奖励
    ID_S2C_AwardBuildingProduction = 16965;
    ID_C2S_CompleteHomeTask = 16966; //完成家园任务
    ID_S2C_CompleteHomeTask = 16967;
    ID_C2S_PurchaseMyHomeTaskCount = 16968; //购买自己家园可完成次数
    ID_S2C_PurchaseMyHomeTaskCount = 16969;
    ID_C2S_PurchaseCompleteCount = 16970; //购买自己可完成任务次数
    ID_S2C_PurchaseCompleteCount = 16971;
    ID_C2S_WearHomeStyle = 16972; //佩戴风格
    ID_S2C_WearHomeStyle = 16973;
    ID_C2S_UpdateStyle = 16974; //风格数据更新
    ID_S2C_UpdateStyle = 16975;
    ID_C2S_GetHomeTaskInfo = 16976; //得到家园任务数据
    ID_S2C_GetHomeTaskInfo = 16977;
    ID_C2S_GetHomeMessageInfo = 16978; //得到留言板信息
    ID_S2C_GetHomeMessageInfo = 16979;
    ID_C2S_SetHomeMessageInfo = 16980; //设置留言板信息
    ID_S2C_SetHomeMessageInfo = 16981;

    ID_C2S_HomeWaterPlant = 16982; //植物浇水
    ID_S2C_HomeWaterPlant = 16983;
    ID_C2S_HomeGetFriendFruit = 16984; //摘取好友果实
    ID_S2C_HomeGetFriendFruit = 16985;
    ID_C2S_HomeGetFruit = 16986; //收获果实
    ID_S2C_HomeGetFruit = 16987;
    ID_C2S_HomeOtherBuyFruit = 16988; //求购事件
    ID_S2C_HomeOtherBuyFruit = 16989;
    ID_C2S_PurchaseGetFriendFruitCount = 16990; //购买自己可摘取好友果实次数
    ID_S2C_PurchaseGetFriendFruitCount = 16991;
    ID_C2S_HomePlantSeed = 16992; //种植种子
    ID_S2C_HomePlantSeed = 16993;
    ID_C2S_HomeBuildingReborn = 16994; //建筑物重生
    ID_S2C_HomeBuildingReborn = 16995;

    //公会活跃
    ID_C2S_GetGuildDailyTaskInfo = 17000;
    ID_S2C_GetGuildDailyTaskInfo = 17001;
    ID_C2S_GetGuildDailyTaskAward = 17002;
    ID_S2C_GetGuildDailyTaskAward = 17003;
    ID_C2S_GetGuildActiveInfo = 17004;
    ID_S2C_GetGuildActiveInfo = 17005;
    ID_S2C_UpdateGuildDailyTaskInfo = 17006;

    //争霸赛
    ID_C2S_EnterFierceMainUI = 17050; //进入主界面（积分赛和争霸赛都能看到的界面）
    ID_S2C_EnterFierceMainUI = 17051;
    ID_C2S_EnterFierceArenaUI = 17052; //进入争霸赛界面
    ID_S2C_EnterFierceArenaUI = 17053;
    ID_C2S_ChallengeFierceArenaUser = 17054; //挑战玩家
    ID_S2C_ChallengeFierceArenaUser = 17055;
    ID_C2S_EnterFierceArenaRank = 17056; //进入前100名排行榜界面
    ID_S2C_EnterFierceArenaRank = 17057;
    ID_C2S_EnterFierceArenaCheerUI = 17058; //进入助威界面
    ID_S2C_EnterFierceArenaCheerUI = 17059;
    ID_C2S_ExecuteFierceArenaCheer = 17060; //助威
    ID_S2C_ExecuteFierceArenaCheer = 17061;
    ID_C2S_PurchaseFierceArenaCount = 17062; //购买挑战次数
    ID_S2C_PurchaseFierceArenaCount = 17063;
    ID_C2S_PurchaseFierceArenaCheerCount = 17064; //购买助威次数
    ID_S2C_PurchaseFierceArenaCheerCount = 17065;
    ID_S2C_GetFierceArenaFlushInfo = 17066; //登录时 推送信息

    //月基金
    ID_C2S_GetMonthFund = 17100;
    ID_S2C_GetMonthFund = 17101;
    ID_C2S_GetMonthFundAward = 17102;
    ID_S2C_GetMonthFundAward = 17103;

    //神兽洞天
    ID_C2S_AcientEntry = 17150; //入口
    ID_S2C_AcientEntry = 17151;
    ID_C2S_AcientReset = 17152; //刷新对手
    ID_S2C_AcientReset = 17153;
    ID_C2S_AcientFight = 17154; //战斗
    ID_S2C_AcientFight = 17155;
    ID_C2S_AcientView = 17156; //查看
    ID_S2C_AcientView = 17157;
    ID_C2S_AcientLoot = 17158; //开宝箱
    ID_S2C_AcientLoot = 17159;
    ID_C2S_AcientRank = 17162; //排行榜
    ID_S2C_AcientRank = 17163;
    //时装
    ID_C2S_GetDress = 17200; //基础信息
    ID_S2C_GetDress = 17201;
    ID_C2S_UseDress = 17202; //装备时装
    ID_S2C_UseDress = 17203;
    ID_C2S_DressLevelUp = 17204; //时装强化
    ID_S2C_DressLevelUp = 17205;
    ID_C2S_DressStarUp = 17206; //时装升星
    ID_S2C_DressStarUp = 17207;
    ID_C2S_DressReborn = 17208; //时装重生
    ID_S2C_DressReborn = 17209;
    ID_S2C_OpDress = 17210;
    ID_C2S_DressAutoLevelUp = 17211; //时装自动强化
    ID_S2C_DressAutoLevelUp = 17212;

    //精英副本Boss
    ID_C2S_GetStageBoss = 17300; //基础信息
    ID_S2C_GetStageBoss = 17301;
    ID_C2S_AngryStageBoss = 17302; //激怒
    ID_S2C_AngryStageBoss = 17303;
    ID_C2S_FightStageBoss = 17304; //战斗
    ID_S2C_FightStageBoss = 17305;

    //神兽养成
    ID_C2S_GetUserPet = 17400;
    ID_S2C_GetUserPet = 17401;
    ID_C2S_PetUse = 17402;
    ID_S2C_PetUse = 17403;
    ID_C2S_PetLevelUp = 17404;
    ID_S2C_PetLevelUp = 17405;
    ID_C2S_PetRankUp = 17406;
    ID_S2C_PetRankUp = 17407;
    ID_C2S_PetStarUp = 17408;
    ID_S2C_PetStarUp = 17409;
    ID_C2S_PetProtect = 17410;
    ID_S2C_PetProtect = 17411;
    ID_S2C_SendHandBook = 17412;
    ID_C2S_PetSwallow = 17413;
    ID_S2C_PetSwallow = 17414;
    ID_C2S_PetEquipIncar = 17415; //神兽装备化身
    ID_S2C_PetEquipIncar = 17416;
    ID_C2S_PetEquipMagic = 17418; //神兽携带法术
    ID_S2C_PetEquipMagic = 17419;
    ID_C2S_PetSwapIncar = 17420; //神兽交换化身
    ID_S2C_PetSwapIncar = 17421;

    //周基金
    ID_C2S_GetWeekFund = 17501;
    ID_S2C_GetWeekFund = 17502;
    ID_C2S_GetWeekFundAward = 17503; //领取周基金
    ID_S2C_GetWeekFundAward = 17504;

    //封神之战
    ID_C2S_GetFightForKing = 17600; //进入主界面
    ID_S2C_GetFightForKing = 17601;
    ID_C2S_GetFightForKingSkill = 17602; //进入技能主界面
    ID_S2C_GetFightForKingSkill = 17603;
    ID_C2S_LearnFightForKingSkill = 17604; //学习技能
    ID_S2C_LearnFightForKingSkill = 17605;
    ID_C2S_GetFightForKingBattle = 17606; //进入巅峰对决
    ID_S2C_GetFightForKingBattle = 17607;
    ID_C2S_GetFightForKingBattleInfo = 17608; //巅峰对决详细战报
    ID_S2C_GetFightForKingBattleInfo = 17609;
    ID_C2S_GetFightForKingHonor = 17610; //进入王者荣誉
    ID_S2C_GetFightForKingHonor = 17611;
    ID_C2S_GetFightForKingLog = 17612; //拉日志
    ID_S2C_GetFightForKingLog = 17613;
    ID_C2S_GetFightForKingTaskAward = 17614; //领取任务奖励
    ID_S2C_GetFightForKingTaskAward = 17615;
    ID_C2S_GetFightForKingRank = 17616; //排行榜
    ID_S2C_GetFightForKingRank = 17617;
    ID_C2S_FightForKingMatch = 17618; //匹配
    ID_S2C_FightForKingMatch = 17619;
    ID_C2S_GetFightForKingInfo = 17620; //个人信息
    ID_S2C_GetFightForKingInfo = 17621; //
    ID_S2C_SendFightForKingBattle = 17622; //推送战报
    ID_C2S_GetFightForKingShop = 17623; //赛季商店
    ID_S2C_GetFightForKingShop = 17624;
    ID_C2S_FightForKingShopBuy = 17625; //赛季商店
    ID_S2C_FightForKingShopBuy = 17626;
    ID_S2C_FightForKingBeMatch = 17627;

    //老玩家召回
    ID_C2S_GetRecallInfo = 17700; //得到老玩家召回信息（福利追回、回归西游）
    ID_S2C_GetRecallInfo = 17701;
    ID_C2S_GetRecallReward = 17702; //得到老玩家召回奖励（包括领奖、兑换等）
    ID_S2C_GetRecallReward = 17703;
    ID_S2C_UpdateRecallInfo = 17704; //更新信息
    ID_C2S_GetRecallThankAward = 17705;//领取感谢信
    ID_S2C_GetRecallThankAward = 17706;

    //三界乱斗
    ID_C2S_GetScuffleInfo = 17800;
    ID_S2C_GetScuffleInfo = 17801;
    ID_C2S_GetScuffleEnemyInfo = 17802;
    ID_S2C_GetScuffleEnemyInfo = 17803;
    ID_C2S_ScuffleFight = 17804;
    ID_S2C_ScuffleFight = 17805;
    ID_C2S_GetScuffleDailyReward = 17806;
    ID_S2C_GetScuffleDailyReward = 17807;
    ID_C2S_GetScuffleLog = 17808;
    ID_S2C_GetScuffleLog = 17809;
    ID_C2S_GetScuffleRank = 17810;
    ID_S2C_GetScuffleRank = 17811;

    //等级礼包
    ID_C2S_GetLevelPrize = 17900;
    ID_S2C_GetLevelPrize = 17901;
    ID_C2S_LevelPrizeBuy = 17902;
    ID_S2C_LevelPrizeBuy = 17903;

    //改名字
    ID_C2S_ReName = 18000;
    ID_S2C_ReName = 18001;

    //大战火焰山
    ID_S2C_UpdateFlameTeamInfo = 18100; //后端强推更新队伍信息
    ID_C2S_GetFlameUIInfo = 18101; //主界面信息
    ID_S2C_GetFlameUIInfo = 18102;
    ID_C2S_CreateFlameTeam = 18103; //创建队伍
    ID_S2C_CreateFlameTeam = 18104;
    ID_C2S_UserMatchFlameTeam = 18105; //自动匹配队伍(个人匹配队伍)
    ID_S2C_UserMatchFlameTeam = 18106;
    ID_C2S_FlameTeamMatchFlameTeam = 18107; //队伍匹配队伍(队伍匹配)
    ID_S2C_FlameTeamMatchFlameTeam = 18108;
    ID_C2S_FlameOneKeyRequest = 18109; //一键邀请
    ID_S2C_FlameOneKeyRequest = 18110;
    ID_C2S_BuyFlameChallengeCount = 18111; //购买挑战次数
    ID_S2C_BuyFlameChallengeCount = 18112;
    ID_C2S_GetFlameVideoBaseInfo = 18113; //得到录像回放基本信息(拉取录像列表)
    ID_S2C_GetFlameVideoBaseInfo = 18114;
    ID_C2S_GetFlameVideoSpeciInfo = 18115; //得到录像回放具体信息(观看录像)
    ID_S2C_GetFlameVideoSpeciInfo = 18116;
    ID_C2S_GetFlameFriendList = 18117; //得到好友列表
    ID_S2C_GetFlameFriendList = 18118;
    ID_C2S_FlameRequestFriend = 18119; //邀请好友加入队伍
    ID_S2C_FlameRequestFriend = 18120;
    ID_C2S_GetFlameRequestUI = 18121; //得到好友邀请界面
    ID_S2C_GetFlameRequestUI = 18122;
    ID_C2S_DealFlameFriendRequest = 18123; //处理好友邀请信息
    ID_S2C_DealFlameFriendRequest = 18124;
    ID_C2S_GetFlameRankInfo = 18125; //得到排行榜信息
    ID_S2C_GetFlameRankInfo = 18126;
    ID_C2S_FlameTeamMemberReady = 18127; //队员准备 或者 取消准备 或者 退出队伍
    ID_S2C_FlameTeamMemberReady = 18128;
    ID_C2S_ChangeFlameTeamState = 18129; //开放或者关闭房间
    ID_S2C_ChangeFlameTeamState = 18130;
    ID_C2S_KickFlameTeamMember = 18131; //踢出队员
    ID_S2C_KickFlameTeamMember = 18132;
    ID_C2S_MoveFlameTeamMemberLocation = 18133; //队长移动站位
    ID_S2C_MoveFlameTeamMemberLocation = 18134;
    ID_C2S_GetMyServerFlameTeamUI = 18135; //得到本服队伍信息（未组队玩家所见）
    ID_S2C_GetMyServerFlameTeamUI = 18136;
    ID_C2S_RequestJoinMyServerFlameTeam = 18137; //申请加入本服队伍（未组队玩家所见）
    ID_S2C_RequestJoinMyServerFlameTeam = 18138;
    ID_C2S_GetJoinFlameTeamRequestList = 18140; //得到申请加入队伍申请列表
    ID_S2C_GetJoinFlameTeamRequestList = 18141;
    ID_C2S_DealJoinFlameTeamRequest = 18142; //处理加入队伍申请（队长权限）
    ID_S2C_DealJoinFlameTeamRequest = 18143;
    ID_S2C_FlameUpdateMyRank = 18144; //后端强推更新排名
    ID_C2S_GetFlameShopInfo = 18145; //得到商店信息
    ID_S2C_GetFlameShopInfo = 18146;
    ID_C2S_BuyFlameShopGoods = 18147; //购买商品
    ID_S2C_BuyFlameShopGoods = 18148;
    ID_S2C_FlameUpdateAddCoe = 18149; //组队奖励加成
    ID_S2C_FlameCrossServerStop = 18150; //跨服挂掉广播推送
    ID_S2C_FlameTeamMatchBattle = 18151; //队伍与队伍匹配战斗结果返回

    ID_C2S_GetWealthGodUI = 18200; //得到财神送礼界面信息
    ID_S2C_GetWealthGodUI = 18201;
    ID_C2S_DrawWealthGod = 18202; //财神送礼抽奖
    ID_S2C_DrawWealthGod = 18203;
    ID_S2C_WealthGodNotice = 18205; //GM配置活动时 广播活动开放通知
    ID_C2S_DrawWealthBuy = 18206; //财神送礼贩售
    ID_S2C_DrawWealthBuy = 18207;

    //法术系统
    ID_C2S_LevelUpMagic = 18300; //强化
    ID_S2C_LevelUpMagic = 18301;
    ID_C2S_StarUpMagic = 18302; //升星
    ID_S2C_StarUpMagic = 18303;
    ID_C2S_EquipMagic = 18304; //穿戴
    ID_S2C_EquipMagic = 18305;
    ID_C2S_StrongMagic = 18306; //增幅
    ID_S2C_StrongMagic = 18307;
    ID_C2S_GetMagic = 18308; //
    ID_S2C_GetMagic = 18309;
    ID_C2S_AssistMagic = 18310; //穿戴辅修法术
    ID_S2C_AssistMagic = 18311;


    //五行山
    ID_C2S_FiveFingerGetInfo = 18400;
    ID_S2C_FiveFingerGetInfo = 18401;
    ID_C2S_FiveFingerExecuteStage = 18402; //挑战关卡
    ID_S2C_FiveFingerExecuteStage = 18403;
    ID_C2S_FiveFingerBuyCount = 18404; //购买挑战次数
    ID_S2C_FiveFingerBuyCount = 18405;
    ID_C2S_FiveFingerBuyDailyBox = 18406; //购买每日宝箱
    ID_S2C_FiveFingerBuyDailyBox = 18407;
    ID_C2S_FiveFingerGetRank = 18408; //获取排行榜
    ID_S2C_FiveFingerGetRank = 18409;
    ID_C2S_FiveFingerAutoStage = 18430; //扫荡
    ID_S2C_FiveFingerAutoStage = 18431;
    ID_C2S_FiveFingerExecuteChallenge = 18432; //挑战秘境
    ID_S2C_FiveFingerExecuteChallenge = 18433;

    //帮派天赋
    ID_C2S_GetGuildTalent = 18410;
    ID_S2C_GetGuildTalent = 18411;
    ID_C2S_LearnGuildTalent = 18412;
    ID_S2C_LearnGuildTalent = 18413;
    ID_C2S_ResetGuildTalent = 18414;
    ID_S2C_ResetGuildTalent = 18415;

    //法术书兑换
    ID_C2S_GetMagicChange = 18420;
    ID_S2C_GetMagicChange = 18421;
    ID_C2S_DoMagicChange = 18422;
    ID_S2C_DoMagicChange = 18423;

    //帮战
    ID_S2C_UpdateGuildBattleInfo = 18500; //后端强推
    ID_C2S_GetGuildBattleInfo = 18501; //拉取信息
    ID_S2C_GetGuildBattleInfo = 18502;
    ID_C2S_GuildBattleSign = 18503; //报名
    ID_S2C_GuildBattleSign = 18504;
    ID_C2S_GuildBattleArray = 18505; //布阵
    ID_S2C_GuildBattleArray = 18506;
    ID_C2S_GuildBattleAttack = 18507; //攻击对手
    ID_S2C_GuildBattleAttack = 18508;
    ID_C2S_GuildBattleFire = 18509; //帮主或者副帮主集火
    ID_S2C_GuildBattleFire = 18510;
    ID_C2S_GetGuildBattleEnemyInfo = 18511; //得到敌方城池信息
    ID_S2C_GetGuildBattleEnemyInfo = 18512;
    ID_C2S_GetGuildBattleRank = 18513; //帮战排行榜
    ID_S2C_GetGuildBattleRank = 18514;
    ID_S2C_GuildBattleEndAccount = 18515; //帮战结束后的奖励结算
    ID_C2S_GetGuildBattleStateInfo = 18516; //拉取帮战状态信息
    ID_S2C_GetGuildBattleStateInfo = 18517;
    ID_C2S_GetGuildBattleTeamView = 18518; //拉取跨服玩家信息
    ID_S2C_GetGuildBattleTeamView = 18519;
    ID_C2S_GetGuildBattleReport = 18520; //帮战结算
    ID_S2C_GetGuildBattleReport = 18521;
    ID_C2S_GetGuildBattleSeasonAward = 18522; //领取赛季奖励
    ID_S2C_GetGuildBattleSeasonAward = 18523;
    ID_C2S_GetGuildBattleHistory = 18524;
    ID_S2C_GetGuildBattleHistory = 18525;

    //身份验证
    ID_C2S_GetUserIdentity = 18530;
    ID_S2C_GetUserIdentity = 18531;
    ID_C2S_ModifyUserIdentity = 18532;
    ID_S2C_ModifyUserIdentity = 18533;
    ID_C2S_GetIdentityAward = 18534;
    ID_S2C_GetIdentityAward = 18535;

    //宝石抽奖
    ID_C2S_GetGemDrawInfo = 18600; //基本信息
    ID_S2C_GetGemDrawInfo = 18601;
    ID_C2S_DrawGemDraw = 18602; //抽奖
    ID_S2C_DrawGemDraw = 18603;
    ID_C2S_PurchaseGemDrawGoods = 18604; //购买商品
    ID_S2C_PurchaseGemDrawGoods = 18605;
    ID_C2S_GetGemDrawRank = 18606; //得到排行榜
    ID_S2C_GetGemDrawRank = 18607;
    ID_S2C_NoticeGemDrawActivity = 18608; //通知

    //巡游天地
    ID_S2C_GetKnightCard = 18620; //刷新魂卡数据
    ID_C2S_ActiveKnightCardTeam = 18621; //激活魂卡队伍
    ID_S2C_ActiveKnightCardTeam = 18622;
    ID_C2S_GetParadeInfo = 18625; //刷新巡游数据
    ID_S2C_GetParadeInfo = 18626;
    ID_C2S_GetParadeRecharge = 18627; //奇遇充值领奖
    ID_S2C_GetParadeRecharge = 18628;
    ID_C2S_ExecuteParade = 18629; //巡游走一步
    ID_S2C_ExecuteParade = 18630;
    ID_C2S_ExecuteParadeEvent = 18631; //执行历史事件
    ID_S2C_ExecuteParadeEvent = 18632;
    ID_C2S_GetParadeRechargeInfo = 18633; //请求奇遇充值数据
    ID_S2C_GetParadeRechargeInfo = 18634;
    ID_C2S_GetKnightCardTeamScoreRank = 18635; //魂卡队伍图鉴积分排行榜
    ID_S2C_GetKnightCardTeamScoreRank = 18636;
    ID_C2S_RollBackKnightCardTeam = 18637; //重生魂卡队伍
    ID_S2C_RollBackKnightCardTeam = 18638;
    ID_C2S_GetActivedKnightCardTeams = 18639; //拉取魂卡队伍信息
    ID_S2C_GetActivedKnightCardTeams = 18640;

    //翅膀
    ID_C2S_WingGetInfo = 18700;
    ID_S2C_WingGetInfo = 18701;
    ID_C2S_WingWear = 18702;
    ID_S2C_WingWear = 18703;
    ID_C2S_WingUpgrade = 18704;
    ID_S2C_WingUpgrade = 18705;
    ID_C2S_WingReset = 18706;
    ID_S2C_WingReset = 18707;
    ID_S2C_WingInfoUpdate = 18708;

    //宝石
    ID_C2S_GemGetInfo = 18800; //获取宝石数量信息
    ID_S2C_GemGetInfo = 18801;
    ID_C2S_GemGetInteam = 18802; //获取宝石上阵信息
    ID_S2C_GemGetInteam = 18803;
    ID_C2S_GemSync = 18804; //宝石合成
    ID_S2C_GemSync = 18805;
    ID_C2S_GemChange = 18806; //宝石炼化
    ID_S2C_GemChange = 18807;
    ID_C2S_GemEquip = 18808; //宝石镶嵌
    ID_S2C_GemEquip = 18809;
    ID_C2S_GemUp = 18810; //快速合成
    ID_S2C_GemUp = 18811;
    ID_S2C_GemUpdateInteam = 18812; //更新宝石上阵信息
    ID_C2S_GemFastSync = 18813; //宝石批量合成
    ID_S2C_GemFastSync = 18814;
    ID_C2S_GemAssociation = 18815; // 宝石缘分激活
    ID_S2C_GemAssociation = 18816;

    //诸神争霸
    ID_C2S_GodStriveGetInfo = 18900; //获取信息 测试用
    ID_S2C_GodStriveGetInfo = 18901; //flush 推送下来的数据
    ID_S2C_GodStriveUpdateStage = 18902; //更新状态信息 全局广播用
    ID_C2S_GodStriveGetHonor = 18903; //获取名人堂数据
    ID_S2C_GodStriveGetHonor = 18904;
    ID_C2S_GodStriveGetApplyInfo = 18905; //打开报名界面
    ID_S2C_GodStriveGetApplyInfo = 18906;
    ID_C2S_GodStriveApply = 18907; //报名
    ID_S2C_GodStriveApply = 18908;
    ID_C2S_GodStriveGetLastRound = 18909; //上一轮晋级信息
    ID_S2C_GodStriveGetLastRound = 18910;
    ID_C2S_GodStriveGetBetInfo = 18911; //自己的投注信息
    ID_S2C_GodStriveGetBetInfo = 18912;
    ID_C2S_GodStriveGetBetList = 18913; //自己的投注列表 和排行榜公用一个协议
    ID_S2C_GodStriveGetBetList = 18914;
    ID_C2S_GodStriveBetUser = 18915; //投注
    ID_S2C_GodStriveBetUser = 18916;
    ID_C2S_GodStriveGetPreBattle = 18917; //进入预赛战场房间
    ID_S2C_GodStriveGetPreBattle = 18918;
    ID_C2S_GodStriveGetPreBattleRank = 18919; //预赛战斗中的排行榜 显示前16名
    ID_S2C_GodStriveGetPreBattleRank = 18920;
    ID_C2S_GodStriveGetRobUser = 18921; //抢夺列表
    ID_S2C_GodStriveGetRobUser = 18922;
    ID_C2S_GodStriveGetRobLog = 18923; //抢夺日志
    ID_S2C_GodStriveGetRobLog = 18924;
    ID_C2S_GodStriveFightUser = 18925; //攻占旗子
    ID_S2C_GodStriveFightUser = 18926;
    ID_C2S_GodStriveRobUser = 18927; //抢夺玩家
    ID_S2C_GodStriveRobUser = 18928;
    ID_S2C_GodStriveUpdatePreBattleInfo = 18929; //更新每个玩家的战场里信息
    ID_S2C_GodStrivePreBattleEnd = 18930; //战斗结束 显示晋级信息
    ID_S2C_GodStriveRobedNotice = 18931; //被抢夺通知

    //决赛开始
    ID_C2S_GodStriveGetFinalBattle = 18950; //进入决赛战场
    ID_S2C_GodStriveGetFinalBattle = 18951;
    ID_S2C_GodStriveUpdateFinalMatch = 18952; //实时更新比赛
    ID_C2S_GodStriveGetReport = 18953; //查看比赛录像
    ID_S2C_GodStriveGetReport = 18954;
    ID_C2S_GodStriveMyGuess = 18955; //我的竞猜
    ID_S2C_GodStriveMyGuess = 18956;
    ID_C2S_GodStriveGuessChampion = 18957; //冠军竞猜
    ID_S2C_GodStriveGuessChampion = 18958;
    ID_C2S_GodStriveGuessMatch = 18959; //比赛竞猜
    ID_S2C_GodStriveGuessMatch = 18960;
    ID_C2S_GodStriveGetReportInfo = 18961; //获取比赛详情
    ID_S2C_GodStriveGetReportInfo = 18962;
    ID_S2C_GodStriveFinalUserNtf = 18963;
    ID_S2C_GodStriveBigChangeNtf = 18964;

    ID_C2S_GodStriveApplyTest = 18965; //报名测试
    ID_S2C_GodStriveApplyTest = 18966; //

    //福利月
    ID_C2S_GetAnniversaryInfo = 18970; //获得周年庆信息
    ID_S2C_GetAnniversaryInfo = 18971;
    ID_C2S_GetAnniversarySignAward = 18972; //周年庆签到奖励
    ID_S2C_GetAnniversarySignAward = 18973;
    ID_C2S_BuyAnniversaryShop = 18974; //购买周年庆商店商品 （1 折扣商店 2 字卡商店）
    ID_S2C_BuyAnniversaryShop = 18975;
    ID_S2C_UpdateAnniversaryWeekTask = 18976; //周年庆更新周任务
    ID_C2S_GetAnniversaryWeekTaskAward = 18977; //周年庆周任务领奖
    ID_S2C_GetAnniversaryWeekTaskAward = 18978;
    ID_C2S_GetAnniversaryEventAward = 18979; //西游之路前进领奖
    ID_S2C_GetAnniversaryEventAward = 18980;
    ID_S2C_UpdateAnniversaryActive = 18981; //更新活跃度
    ID_C2S_GetAnniversaryThanksAward = 18982; //领取感谢信
    ID_S2C_GetAnniversaryThanksAward = 18983;
    ID_S2C_NoticeAnniversaryActivity = 18984; //通知周年庆开始
    ID_C2S_BuyLastAnniversaryShop = 18985; //购买上届周年庆商店商品 （2 字卡商店）
    ID_S2C_BuyLastAnniversaryShop = 18986;
    ID_C2S_GetAnniversaryWeekTaskAllAward = 18987;//西游之路一键领取周任务奖励
    ID_S2C_GetAnniversaryWeekTaskAllAward = 18988;

    ID_S2C_GetServerSuperStatus = 18990;

    //噩梦副本
    ID_C2S_GetNightmareInfo = 19000;
    ID_S2C_GetNightmareInfo = 19001;
    ID_C2S_NightmareExecuteStage = 19002;
    ID_S2C_NightmareExecuteStage = 19003;
    ID_C2S_GetNightmareRank = 19004;
    ID_S2C_GetNightmareRank = 19005;
    ID_C2S_NightmareGetStageBox = 19006;
    ID_S2C_NightmareGetStageBox = 19007;

    //天天返利
    ID_C2S_DayRebateGetInfo = 19100; //获取信息
    ID_S2C_DayRebateGetInfo = 19101;
    ID_S2C_DayRebateUpdate = 19102; //更新玩家数据
    ID_S2C_DayRebateNew = 19103; //更新系统数据
    ID_C2S_DayRebateGetDayAward = 19104; //领取每天奖励
    ID_S2C_DayRebateGetDayAward = 19105; //
    ID_C2S_DayRebateGetTotalAward = 19106; //领取累计奖励
    ID_S2C_DayRebateGetTotalAward = 19107; //
    ID_C2S_DayRebateGetDrawAward = 19108; //领取转盘奖励
    ID_S2C_DayRebateGetDrawAward = 19109; //

    //公会boss
    ID_C2S_GetGuildBossInfo = 19120;
    ID_S2C_GetGuildBossInfo = 19121; //获取公会boss数据
    ID_S2C_GuildBossUpdateStage = 19122; //更新状态信息
    ID_C2S_GetGuildBossRankInfo = 19123; //拉取排行榜数据
    ID_S2C_GetGuildBossRankInfo = 19124;
    ID_C2S_GuildBossGetRobUser = 19125; //拉取抢夺列表
    ID_S2C_GuildBossGetRobUser = 19126;
    ID_C2S_GuildBossRobUser = 19127; //抢夺玩家
    ID_S2C_GuildBossRobUser = 19128;
    ID_S2C_GuildBossUpdateInfo = 19129; //更新抢夺列表玩家数据 每次有积分变化都给在线玩家推一次这个数据
    ID_S2C_GuildBossRobedNotice = 19130; //被抢夺通知
    ID_C2S_GuildBossAttack = 19131; //攻打BOSS
    ID_S2C_GuildBossAttack = 19132;
    ID_C2S_GuildBossGetSubTitle = 19133; //拉取弹幕
    ID_S2C_GuildBossGetSubTitle = 19134;
    ID_C2S_GetGuildBossLog = 19135; //查看日志
    ID_S2C_GetGuildBossLog = 19136;
    ID_C2S_GetGuildBossGuildAttendInfo = 19137; //查看帮派参与情况
    ID_S2C_GetGuildBossGuildAttendInfo = 19138;

    //珍宝阁
    ID_C2S_GetRareshopPrayUI = 19190;
    ID_S2C_GetRareshopPrayUI = 19191;
    ID_C2S_UserPrayRareshop = 19192;
    ID_S2C_UserPrayRareshop = 19193;
    ID_C2S_GetRareshopPrayexpReward = 19194;
    ID_S2C_GetRareshopPrayexpReward = 19195;
    ID_C2S_GetRareShopInfo = 19196;
    ID_S2C_GetRareshopInfo = 19197;
    ID_C2S_BuyRareshopItem = 19198;
    ID_S2C_BuyRareshopItem = 19199;
    ID_S2C_SendPrayBoxIdsToClient = 19200;

    //大闹天宫
    ID_C2S_TempleGetInfo = 19150;
    ID_S2C_TempleGetInfo = 19151; //大闹天宫信息
    ID_C2S_TempleUserMatch = 19152; //自动匹配
    ID_S2C_TempleUserMatch = 19153;
    ID_C2S_TempleBuyChallengeCount = 19154; //购买挑战次数
    ID_S2C_TempleBuyChallengeCount = 19155;
    ID_C2S_TempleGetOnlineList = 19156; //获取在线玩家列表
    ID_S2C_TempleGetOnlineList = 19157;
    ID_C2S_TempleInviteOnlineUser = 19158; //邀请在线玩家
    ID_S2C_TempleInviteOnlineUser = 19159;
    ID_C2S_TempleGetInvitedList = 19160; //获取被邀请的信息
    ID_S2C_TempleGetInvitedList = 19161;
    ID_C2S_TempleTeamMemberReady = 19162; //是否准备, 退出
    ID_S2C_TempleTeamMemberReady = 19163;
    ID_C2S_TempleTeamOpen = 19164; //开放房间
    ID_S2C_TempleTeamOpen = 19165;
    ID_C2S_TempleKickTeamMember = 19166; //踢人
    ID_S2C_TempleKickTeamMember = 19167;
    ID_C2S_TempleSwitchTeamMemberPos = 19168; //交换位置
    ID_S2C_TempleSwitchTeamMemberPos = 19169;
    ID_C2S_TempleGetSelfServerTeamInfo = 19170; //获取本服队伍信息
    ID_S2C_TempleGetSelfServerTeamInfo = 19171;
    ID_C2S_TempleReqJoinTeam = 19172; //请求加入队伍
    ID_S2C_TempleReqJoinTeam = 19173;
    ID_C2S_TempleReqJoinTeamOp = 19174;
    ID_S2C_TempleReqJoinTeamOp = 19175;
    ID_C2S_TempleGetReqJoinTeamInfo = 19176; //获取玩家请求信息
    ID_S2C_TempleGetReqJoinTeamInfo = 19177;
    ID_C2S_TempleBattleBegin = 19178; //开启战斗
    ID_S2C_TempleBattleBegin = 19179;
    ID_C2S_TempleGetRankInfo = 19180; //获取排行榜
    ID_S2C_TempleGetRankInfo = 19181;
    ID_C2S_TempleGetTeamInfo = 19182;
    ID_S2C_TempleGetTeamInfo = 19183;
    ID_C2S_TempleCreateTeam = 19184;
    ID_S2C_TempleCreateTeam = 19185;
    ID_S2C_TempleUpdateMyRank = 19186;
    ID_C2S_TempleGetLayerAward = 19187;
    ID_S2C_TempleGetLayerAward = 19188;
    ID_C2S_TempleInvitedTeamOp = 19210;
    ID_S2C_TempleInvitedTeamOp = 19211;
    ID_S2C_TempleBattleReport = 19212;
    ID_S2C_TempleUpdateTeamAdd = 19213;
    ID_C2S_TempleOneKeyInvite = 19214;
    ID_S2C_TempleOneKeyInvite = 19215;

    //降妖伏魔
    ID_C2S_GetEliminateDemonList = 19220;
    ID_S2C_GetEliminateDemonList = 19221;
    ID_C2S_EliminateDemonExecuteStage = 19222;
    ID_S2C_EliminateDemonExecuteStage = 19223;
    ID_C2S_EliminateDemonFinishChapterBoxRwd = 19224; //获取箱子奖励
    ID_S2C_EliminateDemonFinishChapterBoxRwd = 19225;
    ID_C2S_EliminateDemonGetStageBox = 19226;
    ID_S2C_EliminateDemonGetStageBox = 19227;
    ID_C2S_BuyEliminateDemonShopItem = 19228;
    ID_S2C_BuyEliminateDemonShopItem = 19229;

    //战斗力测试
    ID_C2S_Test_Power = 19240;
    ID_S2C_Test_Power = 19241;

    //折扣狂欢
    ID_C2S_GetDiscountCarnivalInfo = 19250;
    ID_S2C_GetDiscountCarnivalInfo = 19251;
    ID_C2S_BuyDiscountCarnivalItem = 19252;
    ID_S2C_BuyDiscountCarnivalItem = 19253;
    ID_C2S_BuyDiscountCarnivalCoupon = 19254;
    ID_S2C_BuyDiscountCarnivalCoupon = 19255;
    ID_S2C_GetDiscountCarnivalTaskInfo = 19257;
    ID_C2S_GetDiscountCarnivalTaskReward = 19258;
    ID_S2C_GetDiscountCarnivalTaskReward = 19259;

    //老玩家回归
    ID_C2S_PlayerRecallInfo = 19260;
    ID_S2C_PlayerRecallInfo = 19261;
    ID_C2S_PlayerRecallGetVipExp = 19262;
    ID_S2C_PlayerRecallGetVipExp = 19263;
    ID_C2S_PlayerRecallGetGift = 19264;
    ID_S2C_PlayerRecallGetGift = 19265;
    ID_C2S_PlayerRecallShop = 19266;
    ID_S2C_PlayerRecallShop = 19267;
    ID_C2S_PlayerRecallRecharge = 19268;
    ID_S2C_PlayerRecallRecharge = 19269;

    //法术奇门
    ID_C2S_GetMagicSpecialInfo = 19270;
    ID_S2C_GetMagicSpecialInfo = 19271;
    ID_C2S_UpgradeMagicSpecial = 19272;
    ID_S2C_UpgradeMagicSpecial = 19273;
    ID_C2S_RebornMagicSpecial = 19274;
    ID_S2C_RebornMagicSpecial = 19275;
    ID_C2S_GetMagicSpecialRank = 19276;
    ID_S2C_GetMagicSpecialRank = 19277;

    //仙灵图腾
    ID_C2S_GetTotemInfo = 19280;
    ID_S2C_GetTotemInfo = 19281;
    ID_C2S_TotemUpgrade = 19282;
    ID_S2C_TotemUpgrade = 19283;
    ID_C2S_TotemRefining = 19284;
    ID_S2C_TotemRefining = 19285;
    ID_C2S_TotemReplace = 19286;
    ID_S2C_TotemReplace = 19287;
    ID_C2S_TotemMultiRefining = 19288; //多次洗练
    ID_S2C_TotemMultiRefining = 19289;

    //雷音寺论道
    ID_C2S_GetThunderTempleInfo = 19290; //进入界面
    ID_S2C_GetThunderTempleInfo = 19291;
    ID_S2C_ThunderTempleUpdateState = 19292; //更新状态信息
    ID_C2S_ThunderTempleChangeFormation = 19293; //布阵（如果没报名顺便报名）
    ID_S2C_ThunderTempleChangeFormation = 19294;
    ID_S2C_ThunderTempleUpdatePreBattle = 19295; //实时更新预赛
    ID_C2S_GetThunderTempleGetYesterdayPreBattle = 19296; //查看昨天预赛录像
    ID_S2C_GetThunderTempleGetYesterdayPreBattle = 19297;
    ID_C2S_GetThunderTempleGetFinalBattle = 19298; //查看决赛录像
    ID_S2C_GetThunderTempleGetFinalBattle = 19299;
    ID_S2C_ThunderTempleUpdateFinalBattle = 19300; //实时更新决赛
    ID_C2S_ThunderTempleGetReportInfo = 19301; //查看战报
    ID_S2C_ThunderTempleGetReportInfo = 19302;
    ID_C2S_ThunderTempleGetBattleBoxAward = 19303; //预赛开箱子
    ID_S2C_ThunderTempleGetBattleBoxAward = 19304;
    ID_C2S_GetThunderTempleRankInfo = 19305; //获取排行榜
    ID_S2C_GetThunderTempleRankInfo = 19306;
    ID_C2S_GetThunderTempleFormation = 19307; //获取雷音寺论道玩家布阵信息(未实现)
    ID_S2C_GetThunderTempleFormation = 19308;
    ID_C2S_ThunderTemplePreBattleTest = 19309; //雷音寺论道
    ID_S2C_ThunderTemplePreBattleTest = 19310;
    ID_C2S_ThunderTempleUpdateKnightData = 19311; //更新武将数据
    ID_S2C_ThunderTempleUpdateKnightData = 19312;
    ID_S2C_ThunderTempleUserDataChange = 19313; //玩家信息更新
    ID_S2C_GetThunderTempleSimpleInfo = 19314; //flush
    ID_C2S_ThunderTempleGetFinalBattleBoxAward = 19315; //决赛开箱子
    ID_S2C_ThunderTempleGetFinalBattleBoxAward = 19316;
    ID_C2S_GetThunderTempleFinalBattleFormation = 19317; //获取雷音寺论道决赛玩家布阵信息
    ID_S2C_GetThunderTempleFinalBattleFormation = 19318;

    ID_C2S_ThunderTempleOneKeyGetBattleBoxAward = 19319; //预赛一键开箱子
    ID_S2C_ThunderTempleOneKeyGetBattleBoxAward = 19320; //预赛一键开箱子
    //法宝幻化
    ID_C2S_TreasureMagic = 19330; //法宝幻化
    ID_S2C_TreasureMagic = 19331;

    //限时找回
    ID_C2S_GetRetrieveInfo = 19340;
    ID_S2C_GetRetrieveInfo = 19341;
    ID_C2S_GetRetrieveAward = 19342;
    ID_S2C_GetRetrieveAward = 19343;

    //神将悟道
    ID_C2S_GetKnightWudaoInfo = 19350; //获得神将悟道信息
    ID_S2C_GetKnightWudaoInfo = 19351;
    ID_C2S_UpdateKnightWudaoNode = 19352; //升级节点
    ID_S2C_UpdateKnightWudaoNode = 19353;
    ID_C2S_RebornKnightWudao = 19354; //重置技能树
    ID_S2C_RebornKnightWudao = 19355;

    //地府试炼
    ID_C2S_NetherWorldInfo = 19360;
    ID_S2C_NetherWorldInfo = 19361;
    ID_C2S_NetherWorldMove = 19362; // 移动事件
    ID_S2C_NetherWorldMove = 19363;
    ID_C2S_NetherWorldOp = 19364; // 关卡操作
    ID_S2C_NetherWorldOp = 19365;
    ID_C2S_NetherWorldAward = 19366; // 章节奖励
    ID_S2C_NetherWorldAward = 19367;
    ID_C2S_NetherWorldBuy = 19368; // 购买挑战次数
    ID_S2C_NetherWorldBuy = 19369;
    ID_C2S_NetherWorldRank = 19370; // 本服排行榜
    ID_S2C_NetherWorldRank = 19371;
    ID_C2S_NetherWorldTop = 19372; // 首通记录
    ID_S2C_NetherWorldTop = 19373;

    //帮派抢矿
    ID_C2S_GetCrystalMultiAward = 19374;
    ID_S2C_GetCrystalMultiAward = 19375;
    ID_C2S_GetCrystalInfo = 19400;
    ID_S2C_GetCrystalInfo = 19401;
    ID_C2S_GetCrystalGuilds = 19402;
    ID_S2C_GetCrystalGuilds = 19403;
    ID_C2S_RefreshCrystal = 19404;
    ID_S2C_RefreshCrystal = 19405;
    ID_C2S_SetFocusCrystal = 19406;
    ID_S2C_SetFocusCrystal = 19407;
    ID_C2S_GetCrystalUsers = 19408;
    ID_S2C_GetCrystalUsers = 19409;
    ID_C2S_RobCrystal = 19410;
    ID_S2C_RobCrystal = 19411;
    ID_C2S_GetCrystalAward = 19412;
    ID_S2C_GetCrystalAward = 19413;
    ID_C2S_GetGuildCrystalLog = 19414;
    ID_S2C_GetGuildCrystalLog = 19415;
    ID_C2S_GetUserCrystalLog = 19416;
    ID_S2C_GetUserCrystalLog = 19417;
    ID_S2C_UpdateCrystal = 19418;
    ID_C2S_CrystalBuyCount = 19419;
    ID_S2C_CrystalBuyCount = 19420;
    ID_C2S_RevengeCrystal = 19421;
    ID_S2C_RevengeCrystal = 19422;
    ID_C2S_GetCrystalLastInfo = 19423;
    ID_S2C_GetCrystalLastInfo = 19424;
    ID_C2S_GetGuildCrystalRank = 19425;
    ID_S2C_GetGuildCrystalRank = 19426;
    ID_C2S_GetCrystalLastStoreInfo = 19427;
    ID_S2C_GetCrystalLastStoreInfo = 19428;
     //属性模块测试
    ID_C2S_GetBattleMouldInfo = 19430;
    ID_S2C_GetBattleMouldInfo = 19431;

    //翅膀护阵
    ID_C2S_WingBless = 19440;
    ID_S2C_WingBless = 19441;
    ID_C2S_GetWingBlessInfo = 19442;
    ID_S2C_GetWingBlessInfo = 19443;

    //H5活动界面查看
    ID_C2S_GetH5ActivityView = 19446;
    ID_S2C_GetH5ActivityView = 19447;

    //获取微信绑定码
    ID_C2S_GetWeChatBindCode = 19450;
    ID_S2C_GetWeChatBindCode = 19451;

    //金时装祈福
    ID_C2S_GoldPrayGetInfo = 19460;
    ID_S2C_GoldPrayGetInfo = 19461;
    ID_C2S_GoldPrayBuyGood = 19462;
    ID_S2C_GoldPrayBuyGood = 19463;
    ID_C2S_GoldPrayRank = 19464;
    ID_S2C_GoldPrayRank = 19465;
    ID_S2C_GoldPrayGoldPool = 19466;
    ID_S2C_GoldPrayNewActivity = 19467;

    //主角升金
    ID_C2S_GetPracticeBuddhismInfo = 19480; //获得升金任务信息
    ID_S2C_GetPracticeBuddhismInfo = 19481;
    ID_C2S_CompleteBuddhismTask = 19482; //完成升金任务
    ID_S2C_CompleteBuddhismTask = 19483;

    //神符系统
    ID_C2S_GetRuneInfo = 19485; //获得神符信息 （测试）
    ID_S2C_GetRuneInfo = 19486;
    ID_C2S_LevelUpRune = 19487; //强化神符
    ID_S2C_LevelUpRune = 19488;
    ID_C2S_AdvanceLevelUpRune = 19489; //进阶神符
    ID_S2C_AdvanceLevelUpRune = 19490;
    ID_C2S_EquipRune = 19491; //装备神符
    ID_S2C_EquipRune = 19492;

    //神符灵界
    ID_C2S_RealmAction = 19500; //关卡操作
    ID_S2C_RealmAction = 19501;
    ID_C2S_GetRealmInfo = 19502;
    ID_S2C_GetRealmInfo = 19503;
    ID_C2S_RealmRefresh = 19504; //刷新
    ID_S2C_RealmRefresh = 19505;
    ID_C2S_RealmRank = 19506; // 排行榜
    ID_S2C_RealmRank = 19507;
    ID_C2S_RealmGrade = 19508; // 段位奖励领取
    ID_S2C_RealmGrade = 19509;
    //通用排行榜
    ID_C2S_GetNewCommonRank = 19600;
    ID_S2C_GetNewCommonRank = 19601;

    //新年跨服活动
    ID_C2S_GetFeedBeastInfo = 19610;
    ID_S2C_GetFeedBeastInfo = 19611;
    ID_C2S_FeedBeast = 19612;
    ID_S2C_FeedBeast = 19613;
    ID_C2S_BuyFeedBeastBone = 19614;
    ID_S2C_BuyFeedBeastBone = 19615;
    ID_C2S_GetFeedBeastBox = 19616;
    ID_S2C_GetFeedBeastBox = 19617;
    ID_C2S_SendFeedBeastRedPacket = 19618;
    ID_S2C_SendFeedBeastRedPacket = 91619;
    //ID_C2S_CanGetRedPacket = 19620;
    ID_S2C_CanGetRedPacket = 19621;
    ID_C2S_GetFeedBeastRedPacket = 19622;
    ID_S2C_GetFeedBeastRedPacket = 19623;
    ID_C2S_GetFeedBeastRedPacketLog = 19624;
    ID_S2C_GetFeedBeastRedPacketLog = 19625;
    ID_C2S_GetFeedBeastRank = 19626;
    ID_S2C_GetFeedBeastFeedValueRank = 19627;
    ID_S2C_GetFeedBeastRedPacketRank = 19628;
    ID_C2S_GetAllFeedBeastInfo = 19629;
    ID_S2C_GetAllFeedBeastInfo = 19630;
    ID_S2C_GetRedPacketBullet = 19631;
    ID_C2S_FeedBeastExchangeItem = 19632;
    ID_S2C_FeedBeastExchangeItem = 19633;

    //国战
    ID_C2S_CountryWarGetInfo = 19650; //国战个人信息
    ID_S2C_CountryWarGetInfo = 19651;
    ID_C2S_CountryWarMove = 19652; //移动
    ID_S2C_CountryWarMove = 19653;
    ID_C2S_CountryWarGetCityInfo = 19657; //获取城池信息
    ID_S2C_CountryWarGetCityInfo = 19658;
    ID_C2S_CountryWarGetRankInfo = 19659; //获取排行榜信息
    ID_S2C_CountryWarGetRankInfo = 19660;
    ID_C2S_CountryWarGetUserRankInfo = 19661; //获取用户排行
    ID_S2C_CountryWarGetUserRankInfo = 19662;
    ID_C2S_CountryWarGetAward = 19663; //领取奖励
    ID_S2C_CountryWarGetAward = 19664;
    ID_C2S_CountryWarGetLog = 19665; //获取日志
    ID_S2C_CountryWarGetLog = 19666;
    ID_C2S_CountryWarGetComments = 19667; //获取留言板
    ID_S2C_CountryWarGetComments = 19668;
    ID_C2S_CountryWarExitCountry = 19669; //离开玩法
    ID_S2C_CountryWarExitCountry = 19670;
    ID_C2S_CountryWarGetMapInfo = 19671; //国战地图基础信息
    ID_S2C_CountryWarGetMapInfo = 19672;
    ID_C2S_CountryWarBattle = 19673; //国战战斗
    ID_S2C_CountryWarBattle = 19674;
    ID_S2C_CountryWarDanmuku = 19675; //弹幕
    ID_C2S_CountryWarGiveUp = 19676; //放弃
    ID_S2C_CountryWarGiveUp = 19677;
    ID_C2S_CountryWarGetScoreAward = 19678; //联盟积分奖励
    ID_S2C_CountryWarGetScoreAward = 19679;
    ID_C2S_CountryWarGetCountryInfo = 19680; //获取联盟基础信息
    ID_S2C_CountryWarGetCountryInfo = 19681;
    ID_C2S_CountryWarGetOccupyInfo = 19682; //获取城池攻占信息
    ID_S2C_CountryWarGetOccupyInfo = 19683;
    ID_C2S_CountryWarComment = 19684; //留言板留言
    ID_S2C_CountryWarComment = 19685;
    ID_C2S_CountryWarUseItem = 19686; //道具使用
    ID_S2C_CountryWarUseItem = 19687;
    ID_C2S_CountryWarGetAttackCityRank = 19688; //获取攻城战排行榜
    ID_S2C_CountryWarGetAttackCityRank = 19689;
    ID_S2C_CountryWarUpdateCityInfo = 19690; //更新城市信息
    ID_C2S_CountryWarBuyChallengeCount = 19691; //购买次数
    ID_S2C_CountryWarBuyChallengeCount = 19692;
    ID_S2C_CountryWarUpdateUserTask = 19693; //更新个人任务信息
    ID_S2C_CountryWarUpdateUserInfo = 19694; //更新个人积分信息
    ID_S2C_CountryWarUpdateActInfo = 19695; //更新活动信息
    ID_C2S_CountryWarGetProvokeEnemyList = 19696; //拉取盟前挑衅敌人信息
    ID_S2C_CountryWarGetProvokeEnemyList = 19697; 
    ID_C2S_CountryWarRefreshProvokeEnemyList = 19698; //刷新盟前挑衅敌人信息
    ID_S2C_CountryWarRefreshProvokeEnemyList = 19699; 
    ID_C2S_CountryWarAttackProvokeEnemy = 19702; //挑衅别的盟玩家
    ID_S2C_CountryWarAttackProvokeEnemy = 19703; 
    ID_C2S_CountryWarGetUserMoraleRankInfo = 19704; //获取用户士气排行
    ID_S2C_CountryWarGetUserMoraleRankInfo = 19705;
    ID_C2S_CountryWarSetCountrySlogan = 19706; //设置仙盟口号
    ID_S2C_CountryWarSetCountrySlogan = 19707;

    ID_C2S_GetBlessKnightInfo = 19640;
    ID_S2C_GetBlessKnightInfo = 19641;
    ID_C2S_ChangeBlessKnight = 19642;
    ID_S2C_ChangeBlessKnight = 19643;

    //神符护佑
    ID_C2S_RuneBless = 19700;
    ID_S2C_RuneBless = 19701;

    //赛季商店
    ID_C2S_GetSeasonShopInfo = 19710;
    ID_S2C_GetSeasonShopInfo = 19711;
    ID_C2S_BuySeasonShopGoods = 19712;
    ID_S2C_BuySeasonShopGoods = 19713;

    //变性
    ID_C2S_GenderChange = 19720;
    ID_S2C_GenderChange = 19721;
    ID_C2S_GenderChangeInfo = 19722;
    ID_S2C_GenderChangeInfo = 19723;

    //玄灵仙岛
    ID_C2S_GetSoulIslandsInfo = 19730;
    ID_S2C_GetSoulIslandsInfo = 19731;
    ID_C2S_EnterSoulIslandsChapter = 19732;
    ID_S2C_EnterSoulIslandsChapter = 19733;
    ID_C2S_ChallengeSoulIslandsStage = 19734;
    ID_S2C_ChallengeSoulIslandsStage = 19735;
    ID_C2S_CheckSoulIslandsStage = 19736;
    ID_S2C_CheckSoulIslandsStage = 19737;
    ID_C2S_GetSoulIslandsChapterAward = 19738;
    ID_S2C_GetSoulIslandsChapterAward = 19739;
    ID_C2S_GiveUpSoulIslandsChapter = 19740;
    ID_S2C_GiveUpSoulIslandsChapter = 19741;
    ID_C2S_BuySoulIslandsCount = 19742;
    ID_S2C_BuySoulIslandsCount = 19743;
    ID_C2S_BuySoulIslandsCheckCount = 19744;
    ID_S2C_BuySoulIslandsCheckCount = 19745;
    ID_C2S_FastSoulIslandsChapter = 19746;
    ID_S2C_FastSoulIslandsChapter = 19747;
    ID_C2S_GetSoulIslandsRank = 19748;
    ID_S2C_GetSoulIslandsRank = 19749;
    ID_C2S_ChooseSoulIslandsAward = 19750;
    ID_S2C_ChooseSoulIslandsAward = 19751;

    //新的跨服通用排行榜
    ID_C2S_GetNewCommonCrossRank = 19760;
    ID_S2C_GetNewCommonCrossRank = 19761;

    //激斗狮驼岭
    ID_S2C_UpdateLionRidgeTeamInfo = 19770; //后端强推更新队伍信息
    ID_C2S_GetLionRidgeUIInfo = 19771; //主界面信息
    ID_S2C_GetLionRidgeUIInfo = 19772;
    ID_C2S_CreateLionRidgeTeam = 19773; //创建队伍
    ID_S2C_CreateLionRidgeTeam = 19774;
    ID_C2S_UserMatchLionRidgeTeam = 19775; //自动匹配队伍(个人匹配队伍)
    ID_S2C_UserMatchLionRidgeTeam = 19776;
    ID_C2S_LionRidgeTeamMatchLionRidgeTeam = 19777; //队伍匹配队伍(队伍匹配)
    ID_S2C_LionRidgeTeamMatchLionRidgeTeam = 19778;
    ID_C2S_LionRidgeOneKeyRequest = 19779; //一键邀请
    ID_S2C_LionRidgeOneKeyRequest = 19780;
    ID_C2S_BuyLionRidgeChallengeCount = 19781; //购买挑战次数
    ID_S2C_BuyLionRidgeChallengeCount = 19782;
    ID_C2S_GetLionRidgeVideoBaseInfo = 19783; //得到录像回放基本信息(拉取录像列表)
    ID_S2C_GetLionRidgeVideoBaseInfo = 19784;
    ID_C2S_GetLionRidgeFriendList = 19785; //得到好友列表
    ID_S2C_GetLionRidgeFriendList = 19786;
    ID_C2S_LionRidgeRequestFriend = 19787; //邀请好友加入队伍
    ID_S2C_LionRidgeRequestFriend = 19788;
    ID_C2S_GetLionRidgeRequestUI = 19789; //得到好友邀请界面
    ID_S2C_GetLionRidgeRequestUI = 19790;
    ID_C2S_DealLionRidgeFriendRequest = 19791; //处理好友邀请信息
    ID_S2C_DealLionRidgeFriendRequest = 19792;
    ID_C2S_SetLionRidgeUserBuff = 19793; //上buff
    ID_S2C_SetLionRidgeUserBuff = 19794;
    ID_C2S_LionRidgeTeamMemberReady = 19795; //队员准备 或者 取消准备 或者 退出队伍
    ID_S2C_LionRidgeTeamMemberReady = 19796;
    ID_C2S_ChangeLionRidgeTeamState = 19797; //开放或者关闭房间
    ID_S2C_ChangeLionRidgeTeamState = 19798;
    ID_C2S_KickLionRidgeTeamMember = 19799; //踢出队员
    ID_S2C_KickLionRidgeTeamMember = 19800;
    ID_C2S_MoveLionRidgeTeamMemberLocation = 19801; //队长移动站位
    ID_S2C_MoveLionRidgeTeamMemberLocation = 19802;
    ID_C2S_GetMyServerLionRidgeTeamUI = 19803; //得到本服和好友队伍信息（未组队玩家所见）
    ID_S2C_GetMyServerLionRidgeTeamUI = 19804;
    ID_C2S_RequestJoinMyServerLionRidgeTeam = 19805; //申请加入本服和好友队伍（未组队玩家所见）
    ID_S2C_RequestJoinMyServerLionRidgeTeam = 19806;
    ID_C2S_GetJoinLionRidgeTeamRequestList = 19807; //得到申请加入队伍申请列表
    ID_S2C_GetJoinLionRidgeTeamRequestList = 19808;
    ID_C2S_DealJoinLionRidgeTeamRequest = 19809; //处理加入队伍申请
    ID_S2C_DealJoinLionRidgeTeamRequest = 19810;
    //ID_S2C_LionRidgeUpdateAddCoe = 19811; //组队奖励加成
    ID_S2C_LionRidgeUpdateMyRank = 19812; //后端强推更新排名
    ID_S2C_LionRidgeCrossServerStop = 19813; //跨服挂掉广播推送
    ID_S2C_LionRidgeTeamMatchBattle = 19814; //队伍与队伍匹配战斗结果返回
    ID_S2C_LionRidgeInviteNotify = 19815; //有邀请的红点通知
    ID_C2S_GetLionRidgeRankInfo = 19816; //得到排行榜信息
    ID_S2C_GetLionRidgeRankInfo = 19817;
    ID_C2S_GetLionRidgeVideoSpeciInfo = 19818; //得到录像回放具体信息(观看录像)
    ID_S2C_GetLionRidgeVideoSpeciInfo = 19819;

    ID_S2C_UUZU_TV_Broadcast = 19820; //送礼物广播

    //分解法宝为法宝碎片
    ID_C2S_ResolveInstrument = 19830;
    ID_S2C_ResolveInstrument = 19831;

    //符石
    ID_C2S_RuneStoneInfo = 19840;
    ID_S2C_RuneStoneInfo = 19841;
    ID_C2S_RuneStoneWear = 19842; //穿、脱
    ID_S2C_RuneStoneWear = 19843;
    ID_C2S_RuneStoneComposite = 19844; //合成(背包)
    ID_S2C_RuneStoneComposite = 19845;
    ID_C2S_RuneStoneCompositeKey = 19846; //合成(上阵的)
    ID_S2C_RuneStoneCompositeKey = 19847;
    ID_C2S_RuneStoneCompositeAll = 19848; //合成(背包所有)
    ID_S2C_RuneStoneCompositeAll = 19849;

    //灭世妖圣
    ID_C2S_DevilBossGetInfo = 19850;
    ID_S2C_DevilBossGetInfo = 19851;
    ID_C2S_DevilBossChooseRace = 19852;
    ID_S2C_DevilBossChooseRace = 19853;
    ID_C2S_DevilBossBattle = 19854;
    ID_S2C_DevilBossBattle = 19855;
    ID_C2S_DevilBossGetRank = 19856;
    ID_S2C_DevilBossGetRank = 19857;
    ID_C2S_DevilBossBuyChallengeCount = 19858;
    ID_S2C_DevilBossBuyChallengeCount = 19859;
    ID_C2S_DevilBossGetLog = 19860;
    ID_S2C_DevilBossGetLog = 19861;
    ID_C2S_DevilBossExit = 19862;
    ID_S2C_DevilBossExit = 19863;
    ID_C2S_DevilBossHonor = 19864;
    ID_S2C_DevilBossHonor = 19865;

    //周年庆典
    ID_C2S_CelebrateGetInfo = 19870;
    ID_S2C_CelebrateGetInfo = 19871;
    ID_C2S_CelebrateGetGold = 19872;
    ID_S2C_CelebrateGetGold = 19873;
    ID_C2S_CelebrateSignIn = 19874;
    ID_S2C_CelebrateSignIn = 19875;
    //ID_C2S_CelebrateReapplySignIn = 19876;
    //ID_S2C_CelebrateReapplySignIn = 19877;
    ID_C2S_CelebrateGetWishInfo = 19878;
    ID_S2C_CelebrateGetWishInfo = 19879;
    ID_C2S_CelebrateChooseWish = 19880;
    ID_S2C_CelebrateChooseWish = 19881;
    ID_C2S_CelebrateGetWishAwards = 19882;
    ID_S2C_CelebrateGetWishAwards = 19883;
    ID_C2S_CelebrateAssistOtherFriend = 19884;
    ID_S2C_CelebrateAssistOtherFriend = 19885;
    ID_C2S_CelebrateInviteFriend = 19886;
    ID_S2C_CelebrateInviteFriend = 19887;
    ID_S2C_CelebrateSendInvitation = 19888;
    ID_C2S_CelebrateGetFriendWishData = 19889;
    ID_S2C_CelebrateGetFriendWishData = 19890;
    ID_C2S_CelebrateGetMazeInfo = 19891;
    ID_S2C_CelebrateGetMazeInfo = 19892;
    ID_C2S_CelebrateThrowDice = 19893;
    ID_S2C_CelebrateThrowDice = 19894;
    ID_C2S_CelebrateGridEvent = 19895;
    ID_S2C_CelebrateGridEvent = 19896;
    ID_C2S_CelebrateUseCard = 19897;
    ID_S2C_CelebrateUseCard = 19898;
    ID_C2S_CelebrateBuyItem = 19899;
    ID_S2C_CelebrateBuyItem = 19900;
    ID_C2S_CelebrateGetAchievementAward = 19901;
    ID_S2C_CelebrateGetAchievementAward = 19902;
    ID_C2S_CelebrateGetShopData = 19903;
    ID_S2C_CelebrateGetShopData = 19904;
    ID_C2S_CelebrateBuyShopGood = 19905;
    ID_S2C_CelebrateBuyShopGood = 19906;
    ID_S2C_CelebrateReceiveAssistData = 19907;

    //变身卡界面
    ID_C2S_GetAvatarCardInfo = 19910;
    ID_S2C_GetAvatarCardInfo = 19911;
    ID_C2S_ActiveAvatarCard = 19912;
    ID_S2C_ActiveAvatarCard = 19913;
    ID_C2S_UseAvatarCard = 19914;
    ID_S2C_UseAvatarCard = 19915;

    //神符重生活动
    ID_C2S_DoRuneRebornActivity = 19920;
    ID_S2C_DoRuneRebornActivity = 19921;

    //金将立绘拼图
    ID_C2S_KnightDrawInfo = 19918;
    ID_S2C_KnightDrawInfo = 19919;
    ID_C2S_KnightDrawAchievement = 19922; //领取成就
    ID_S2C_KnightDrawAchievement = 19923;
    ID_C2S_ActivateKnightDraw = 19924; //激活拼图
    ID_S2C_ActivateKnightDraw = 19925;
    ID_C2S_LikeKnightDraw = 19926; //拼图红星
    ID_S2C_LikeKnightDraw = 19927;
    ID_C2S_KnightDrawMessage = 19928; //拼图留言
    ID_S2C_KnightDrawMessage = 19929;
    ID_C2S_KnightDrawPraise = 19930; //顶、踩
    ID_S2C_KnightDrawPraise = 19931;
    ID_C2S_KnightDrawMessageInfo = 19932; //画卷评价信息
    ID_S2C_KnightDrawMessageInfo = 19933;
    ID_S2C_UpdateKnightDrawAchievement = 19934;

    //主角法宝封灵
    ID_C2S_InstrumentSealSprite = 19940;
    ID_S2C_InstrumentSealSprite = 19941;

    //通天之路
    ID_C2S_GetRoadToWestInfo = 19951; //主界面信息
    ID_S2C_GetRoadToWestInfo = 19952;
    ID_C2S_GetRoadToWestFriendList = 19953; //查看好友列表
    ID_S2C_GetRoadToWestFriendList = 19954;
    ID_C2S_LendRoadToWestKnight = 19955; //出租神将
    ID_S2C_LendRoadToWestKnight = 19956;
    ID_C2S_ChallengeRoadToWestStage = 19961; //战斗
    ID_S2C_ChallengeRoadToWestStage = 19962;
    ID_C2S_GetRoadToWestFriendShipCoin = 19963; //收获友谊币
    ID_S2C_GetRoadToWestFriendShipCoin = 19964;
    ID_C2S_GetRoadToWestRank = 19965; //查看排行榜
    ID_S2C_GetRoadToWestRank = 19966;
    ID_C2S_GetRoadToWestGradeAward = 19967; // 段位奖励领取
    ID_S2C_GetRoadToWestGradeAward = 19968;
    ID_S2C_SendRoadToWestStateChange = 19969; //周一零点状态切换
    ID_C2S_GetRoadToWestAchievementAward = 20100;// //通天之路发奖
    ID_S2C_GetRoadToWestAchievementAward = 20101;
  

   //暗金养成
    ID_C2S_InstrumentSuperCast = 19970; //紫金法宝神铸
    ID_S2C_InstrumentSuperCast = 19971;
    ID_C2S_KnightZhuLing = 19972; //紫金将注灵
    ID_S2C_KnightZhuLing = 19973;
    ID_C2S_KnightZhuLingAdvance = 19974; //紫金将注灵升阶
    ID_S2C_KnightZhuLingAdvance = 19975;

    //特殊每日签到
    ID_C2S_GetDayLoginSignInfo = 19976; //每日签到信息
    ID_S2C_GetDayLoginSignInfo = 19977;
    ID_C2S_GetDayLoginSignAward = 19978; //领取每日签到奖励
    ID_S2C_GetDayLoginSignAward = 19979;
    ID_C2S_GetDayLoginReSignAward = 19980; //补签每日签到奖励
    ID_S2C_GetDayLoginReSignAward = 19981;

    //方寸山学艺
    ID_C2S_GetSquareInchData = 19990; //玩法数据
    ID_S2C_GetSquareInchData = 19991;
    ID_C2S_ChallengeSquareInchEnemy = 19992; //挑战
    ID_S2C_ChallengeSquareInchEnemy = 19993;
    ID_C2S_RefreshSquareInch = 19994; //刷新
    ID_S2C_RefreshSquareInch = 19995;
    ID_C2S_GetSquareInchPassAward = 19998; //获得通关奖励
    ID_S2C_GetSquareInchPassAward = 19999;
    ID_C2S_GetSquareInchLuckAward = 20000; //获得幸运奖励
    ID_S2C_GetSquareInchLuckAward = 20001;
    ID_C2S_GetSquareInchEnemiesData = 20002; //获得敌人数据
    ID_S2C_GetSquareInchEnemiesData = 20003;
    ID_C2S_SquareInchGiveUp = 20004; //放弃挑战
    ID_S2C_SquareInchGiveUp = 20005;
    ID_C2S_SquareInchGetTicket = 20006; //获得满分券
    ID_S2C_SquareInchGetTicket = 20007;
    ID_C2S_SquareInchUseTicket = 20008; //使用满分券
    ID_S2C_SquareInchUseTicket = 20009;

    //跨服排行榜（根据funcid获得排行榜）
    ID_C2S_GetNewCommonCrossRankInfoByFuncId = 20010;
    ID_S2C_GetNewCommonCrossRankInfoByFuncId = 20011;

    //许愿树
    ID_C2S_PromiseTreeGetInfo = 20020;
    ID_S2C_PromiseTreeGetInfo = 20021;
    ID_C2S_PromiseTreeDrop = 20022;
    ID_S2C_PromiseTreeDrop = 20023;
    ID_C2S_PromiseTreeGetTaskAward = 20024;
    ID_S2C_PromiseTreeGetTaskAward = 20025;
    ID_C2S_PromiseTreeGetNodeAward = 20026;
    ID_S2C_PromiseTreeGetNodeAward = 20027;
    ID_S2C_PromiseTreeUpdateTaskInfo = 20028;
    ID_S2C_PromiseTreeUpdateNodeInfo = 20029;
    ID_S2C_PromiseTreeUpdateOtherInfo = 20030;

    //通用任务系统
    ID_S2C_UpdateCommonTask = 16361; //更新任务
    ID_C2S_GetCommonTaskAward = 16362; //任务领奖
    ID_S2C_GetCommonTaskAward = 16363; 
    ID_C2S_GetCommonTaskList = 16364; //获取所有任务列表
    ID_S2C_GetCommonTaskList = 16365;
    ID_C2S_GetCommonTaskSystemList = 16366; //获取指定任务系统列表
    ID_S2C_GetCommonTaskSystemList = 16367;

    //盘丝洞
    ID_C2S_SpiderCaveGetInfo = 20040;
    ID_S2C_SpiderCaveGetInfo = 20041;
    ID_C2S_SpiderCaveGetStageInfo = 20042;
    ID_S2C_SpiderCaveGetStageInfo = 20043;
    ID_C2S_SpiderCaveResult = 20044;
    ID_S2C_SpiderCaveResult = 20045;
    ID_C2S_SpiderCaveGetAward = 20046;
    ID_S2C_SpiderCaveGetAward = 20047;
    ID_C2S_SpiderCaveTryBattle = 20048;
    ID_S2C_SpiderCaveTryBattle = 20049;
    ID_C2S_SpiderCaveAutoStage = 20050;
    ID_S2C_SpiderCaveAutoStage = 20051;
    ID_C2S_SpiderCaveBuyChallengeCount = 20052;
    ID_S2C_SpiderCaveBuyChallengeCount = 20053;
   
    //仙阵养成
    ID_C2S_UpdateMatrix = 20060; //升级仙阵
    ID_S2C_UpdateMatrix = 20061;
    ID_C2S_GetMatrixData = 20062; //仙阵数据
    ID_S2C_GetMatrixData = 20063;

     //神翼升星
    ID_C2S_UpdateWingStar = 20070; //神翼升星
    ID_S2C_UpdateWingStar = 20071;
   
    //公会技能重置
    ID_C2S_ResetGuildSkill = 20075;
    ID_S2C_ResetGuildSkill = 20076;

    //金宝石
    ID_C2S_GemGrowthGold = 20080;//不在阵上升金
    ID_S2C_GemGrowthGold = 20081;
    ID_C2S_GemGrowthGoldOnWing =20082 ;//在阵上升金
    ID_S2C_GemGrowthGoldOnWing = 20083;
    ID_C2S_RollBackGemGold = 20084;//重生
    ID_S2C_RollBackGemGold = 20085;

	//砍价商店
    ID_C2S_GetBargainShopInfo = 20090;//获得砍价商店信息
    ID_S2C_GetBargainShopInfo = 20091;
    ID_S2C_NotifyBargainShopActInfo = 20092;//广播砍价商店活动时间
    ID_C2S_BuyBargainShopGoods = 20093;//购买砍价商品
    ID_S2C_BuyBargainShopGoods = 20094;
    ID_S2C_BargainShopReturnGoldInfo = 20095;//通知砍价商店当前返还元宝


    //三界夺宝
    ID_C2S_GetForTreasureInfo = 20110; //获取数据
    ID_S2C_GetForTreasureInfo = 20111;
    ID_C2S_UseForTreasureTicket = 20112; //使用券
    ID_S2C_UseForTreasureTicket = 20113;
    ID_S2C_DrawForTreasureLottery = 20114; //开奖
    ID_C2S_GetForTreasureNewData = 20115; //拉取最新数据
    ID_S2C_GetForTreasureNewData = 20116;
    ID_C2S_GetForTreasureLog = 20117; //拉取日志
    ID_S2C_GetForTreasureLog = 20118;
    ID_C2S_OperateForTreasureInterface = 20119;

    //客户端登录拉简易数据,s2c_flush协议的优化
    ID_C2S_GetPlayInfoBase = 20130;
    ID_S2C_GetPlayInfoBase = 20131;

    //烈焰秘窟
    ID_C2S_FlameCaveGetInfo = 20140;
    ID_S2C_FlameCaveGetInfo = 20141;
    ID_C2S_FlameCaveAttackEnemy = 20142;
    ID_S2C_FlameCaveAttackEnemy = 20143;
    ID_C2S_FlameCaveBuyHp = 20144;
    ID_S2C_FlameCaveBuyHp = 20145;
    ID_C2S_FlameCaveBuyAttr = 20146;
    ID_S2C_FlameCaveBuyAttr = 20147;
    ID_C2S_FlameCaveGetBox = 20148;
    ID_S2C_FlameCaveGetBox = 20149;
    ID_C2S_FlameCaveFlushInfo = 20150;
    ID_S2C_FlameCaveFlushInfo = 20151;

    //星君
    ID_C2S_StarKnightGetInfo = 20160;
    ID_S2C_StarKnightGetInfo = 20161;
    ID_C2S_StarKnightUpgrade = 20162;
    ID_S2C_StarKnightUpgrade = 20163;
    ID_C2S_StarKnightEquip = 20164;
    ID_S2C_StarKnightEquip = 20165;

     //遣云宫
    ID_C2S_CloudPalaceGetInfo = 20168;
    ID_S2C_CloudPalaceGetInfo = 20169;
    ID_C2S_CloudPalaceGetEnemyData = 20170;
    ID_S2C_CloudPalaceGetEnemyData = 20171;
    ID_C2S_CloudPalaceChallengeEnemy = 20172;
    ID_S2C_CloudPalaceChallengeEnemy = 20173;
    ID_C2S_CloudPalaceUp = 20174;
    ID_S2C_CloudPalaceUp = 20175;
    ID_C2S_CloudPalaceChangeRoom = 20176;
    ID_S2C_CloudPalaceChangeRoom = 20177;
    ID_S2C_CloudPalaceUpdateUserData = 20178;
    ID_C2S_CloudPalaceGetSegAward = 20179;
    ID_S2C_CloudPalaceGetSegAward = 20180;
    ID_C2S_CloudPalaceGetLog = 20181;
    ID_S2C_CloudPalaceGetLog = 20182;
    ID_C2S_CloudPalaceGetBatchData = 20183;
    ID_S2C_CloudPalaceGetBatchData = 20184;
    ID_C2S_CloudPalaceQuitModule = 20185;
    ID_S2C_CloudPalaceQuitModule = 20186;
    ID_C2S_CloudPalaceEndBatchChallenge = 20187;
    ID_S2C_CloudPalaceEndBatchChallenge = 20188;
    ID_C2S_CloudPalaceApplyTest = 20189; //方便加机器人进行测试协议，平时不要用

    //储蓄罐
    ID_C2S_DepositGetInfo = 20190;
    ID_S2C_DepositGetInfo = 20191;
    ID_C2S_Deposit = 20192;//投资储蓄罐
    ID_S2C_Deposit = 20193;
    ID_C2S_GetDepositAward = 20194;//领取储蓄罐奖励
    ID_S2C_GetDepositAward = 20195;
    ID_C2S_GetDepositAwardLog = 20196;//领取记录日志
    ID_S2C_GetDepositAwardLog = 20197;
    //ID_S2C_NotifyDepositActInfo = 20198;//广播砍价商店活动时间

    //星君副本
    ID_C2S_StarGodLegendGetInfo = 20200;//拉取信息
    ID_S2C_StarGodLegendGetInfo = 20201;
    ID_C2S_StarGodLegendMove = 20202;//事件点移动
    ID_S2C_StarGodLegendMove = 20203;
    ID_C2S_StarGodLegendOp = 20204;//操作关卡
    ID_S2C_StarGodLegendOp = 20205;
    ID_C2S_StarGodLegendFirstStagePassAward = 20206;//领取关卡首通奖励
    ID_S2C_StarGodLegendFirstStagePassAward = 20207;

    //遣云宫
    ID_S2C_CloudPalaceIssueRankOver = 20209; //通知前端排行榜发奖结束
    ID_C2S_CloudPalaceGetFirstUidTest = 20210; //测试用协议，平时不要用，前端用不到，后端自己测试用的
    ID_S2C_CloudPalaceGetFirstUidTest = 20211;

    //记忆挖宝
    ID_C2S_HomeDigGetInfo = 20220;
    ID_S2C_HomeDigGetInfo = 20221;
    ID_C2S_HomeDigResult = 20222;
    ID_S2C_HomeDigResult = 20223;
    ID_C2S_HomeDigGetAward = 20224;
    ID_S2C_HomeDigGetAward = 20225;

    //防沉迷
    ID_S2C_AntiAddictionNotify = 20230;

    //主角升紫金
    ID_C2S_PulseGetInfo = 20240;
    ID_S2C_PulseGetInfo = 20241;
    ID_C2S_PulseUpdate = 20242;
    ID_S2C_PulseUpdate = 20243;

    //须弥幻境
    ID_C2S_IllusoryLandGetInfo = 20250;//拉取信息
    ID_S2C_IllusoryLandGetInfo = 20251;
    ID_C2S_IllusoryLandEnter = 20252;//进入
    ID_S2C_IllusoryLandEnter = 20253;
    ID_C2S_IllusoryLandChallenge = 20254;//关卡挑战
    ID_S2C_IllusoryLandChallenge = 20255;
    ID_C2S_IllusoryLandFastChallenge = 20256;//扫荡
    ID_S2C_IllusoryLandFastChallenge = 20257;
    ID_C2S_IllusoryLandRefresh = 20258;//刷新
    ID_S2C_IllusoryLandRefresh = 20259;
    ID_C2S_IllusoryLandGiveUp = 20260;//放弃
    ID_S2C_IllusoryLandGiveUp = 20261;
    ID_C2S_IllusoryLandGetHideRewards = 20262;//领取隐藏奖励
    ID_S2C_IllusoryLandGetHideRewards = 20263;
	ID_C2S_IllusoryLandEliteEnter = 20264;
	ID_S2C_IllusoryLandEliteEnter = 20265;
	ID_C2S_IllusoryLandEliteChallenge = 20266;
	ID_S2C_IllusoryLandEliteChallenge = 20267;
	ID_C2S_IllusoryLandEliteFastChallenge = 20268;
	ID_S2C_IllusoryLandEliteFastChallenge = 20269;
    ID_C2S_IllusoryLandEliteChooseBuff = 20246;
    ID_S2C_IllusoryLandEliteChooseBuff = 20247;
    ID_C2S_IllusoryLandEliteRefresh = 20248;
    ID_S2C_IllusoryLandEliteRefresh = 20249;

    //紫金时装转盘
    ID_C2S_DressDrawGetInfo = 20270;
    ID_S2C_DressDrawGetInfo = 20271;
    ID_C2S_DressDrawGetAward = 20272;
    ID_S2C_DressDrawGetAward = 20273;
    ID_S2C_DressDrawLogNotify = 20274;
    ID_S2C_DressDrawDanmuNotify = 20275;
    ID_C2S_DressDrawExit = 20276;
    ID_S2C_DressDrawExit = 20277;


    //一键炼器一键炼魂
    ID_C2S_KnightZhuLingFast = 20278;
    ID_S2C_KnightZhuLingFast = 20279;
    ID_C2S_InstrumentSuperCastFast = 20280;
    ID_S2C_InstrumentSuperCastFast = 20290;

    //西游天卷
    ID_C2S_ManualScrollGetInfo = 20300;
    ID_S2C_ManualScrollGetInfo = 20301;
    ID_C2S_ManualScrollGetAward = 20302;
    ID_S2C_ManualScrollGetAward = 20303;
    ID_S2C_ManualScrollModifyTaskData = 20304;

    //魂卡化金和化紫金
    ID_C2S_KnightCardUpdate = 20310;
    ID_S2C_KnightCardUpdate = 20311;

    //616少年节
    ID_C2S_GetActivityYouthInfo = 20320;//信息
    ID_S2C_GetActivityYouthInfo = 20321;
    ID_C2S_GetActivityYouthAward = 20322;//领奖
    ID_S2C_GetActivityYouthAward = 20323;
    ID_C2S_GetActivityYouthNext = 20324;//进入下一关
    ID_S2C_GetActivityYouthNext = 20325;
    ID_S2C_GetActivityYouthTaskInfo = 20326;//具体的任务信息
    ID_C2S_FinshActivityYouthTask= 20327;//测试协议
    ID_S2C_FinshActivityYouthTask = 20328;


    //星君星格
    ID_C2S_StarKnightPulseUseItem = 20340; //星格  使用道具
    ID_S2C_StarKnightPulseUseItem = 20341;
    ID_C2S_StarKnightPulseSave = 20342; //星格 保存变更
    ID_S2C_StarKnightPulseSave = 20343;
    ID_C2S_GetUserStarKnightPulseInfo = 20344; //拉取玩家当前保存星格信息
    ID_S2C_GetUserStarKnightPulseInfo = 20345;

    //三界悬赏
    ID_C2S_RandomTaskGetData = 20350; //进入界面获得数据
    ID_S2C_RandomTaskGetData = 20351;
    ID_C2S_RandomTaskGetAward = 20352; //获得奖励
    ID_S2C_RandomTaskGetAward = 20353;
    ID_S2C_RandomTaskReceiveInvitation = 20354;  //收到好友邀请
    ID_C2S_RandomTaskGetFriend = 20355; //拉取好友列表
    ID_S2C_RandomTaskGetFriend = 20356;
    ID_S2C_RandomTaskUpdateTaskValue = 20357; //任务数据更新
    ID_C2S_RandomTaskGetFriendInvitation = 20358; //拉取好友邀请数据
    ID_S2C_RandomTaskGetFriendInvitation = 20359;
    ID_C2S_RandomTaskUserOperate = 20360; //接受或者拒绝好友邀请
    ID_S2C_RandomTaskUserOperate = 20361;
    ID_S2C_RandomTaskUserOperateNotifyFriend = 20362; //接受或者拒绝或者被替换后通知给好友
    ID_C2S_RandomTaskInviteFriend = 20363; //邀请好友
    ID_S2C_RandomTaskInviteFriend = 20364;
    ID_C2S_RandomTaskResetTaskTest = 20365; //刷新任务，测试用！！！！！！！
    ID_S2C_RandomTaskResetTaskTest = 20366;

    //三周年广场
    ID_C2S_GetCeremonyInfo = 20370;
    ID_S2C_GetCeremonyInfo = 20371;
    ID_C2S_CeremonySign = 20372;
    ID_S2C_CeremonySign = 20373;
    ID_C2S_CeremonyAnswer = 20374;
    ID_S2C_CeremonyAnswer = 20375;
    ID_C2S_CeremonyOpenCard = 20376;
    ID_S2C_CeremonyOpenCard = 20377;
    ID_C2S_CeremonyGoCardStage = 20378;
    ID_S2C_CeremonyGoCardStage = 20379;
    ID_C2S_CeremonyGetHotAward = 20380;
    ID_S2C_CeremonyGetHotAward = 20381;
    ID_C2S_CeremonyGetFireworksAward = 20382;
    ID_S2C_CeremonyGetFireworksAward = 20383;
    ID_C2S_CeremonyGetCardFirstAward = 20384;
    ID_S2C_CeremonyGetCardFirstAward = 20385;


    //血月妖界
    ID_C2S_BloodDemonGetData = 20390;
    ID_S2C_BloodDemonGetData = 20391;
    ID_C2S_BloodDemonAttackMonster = 20392;
    ID_S2C_BloodDemonAttackMonster = 20393;
    ID_C2S_BloodDemonAttackBoss = 20394;
    ID_S2C_BloodDemonAttackBoss = 20395;
    ID_C2S_BloodDemonRankTest = 20397;//测试排行榜发奖用协议！！！！
    ID_S2C_BloodDemonRankTest = 20398;

    //玩家登陆弹窗
    ID_S2C_LoginPopActData = 20396;

    //神器
    ID_C2S_ArtifactInfo=20400;
    ID_S2C_ArtifactInfo=20401;
    ID_C2S_ArtifactCompose=20402;
    ID_S2C_ArtifactCompose=20403;
    ID_C2S_ArtifactUpLevel= 20404;
    ID_S2C_ArtifactUpLevel=20405;
    ID_C2S_ArtifactUpStar= 20406;
    ID_S2C_ArtifactUpStar=20407;
    ID_C2S_ArtifactEquip=20408;
    ID_S2C_ArtifactEquip=20409;

    //神器抽宝箱
    ID_C2S_ArtifactDrawInfo = 20421;
    ID_S2C_ArtifactDrawInfo = 20422;
    ID_C2S_ArtifactDraw = 20423;
    ID_S2C_ArtifactDraw = 20424;
    ID_C2S_ArtifactDrawTest = 20425;
    ID_S2C_ArtifactDrawTest = 20426;

    //开服7日的天天返利
    ID_C2S_Days7RebateGetInfo = 20430;
    ID_S2C_Days7RebateGetInfo = 20431;
    ID_S2C_Days7RebateUpdate = 20432;
    ID_C2S_Days7RebateGetDayAward = 20433;
    ID_S2C_Days7RebateGetDayAward = 20434;
    ID_C2S_Days7RebateGetTotalAward = 20435;
    ID_S2C_Days7RebateGetTotalAward = 20436;
    ID_C2S_Days7RebateGetTurnAward = 20437;
    ID_S2C_Days7RebateGetTurnAward = 20438;

    //胚子试炼场
    ID_C2S_ProvingGroundGetInfo = 20440;
    ID_S2C_ProvingGroundGetInfo = 20441;
    ID_C2S_ProvingGroundEquip = 20442;
    ID_S2C_ProvingGroundEquip = 20443;
    ID_C2S_ProvingGroundGetEnemy = 20444;
    ID_S2C_ProvingGroundGetEnemy = 20445;
    ID_C2S_ProvingGroundAttackEnemy = 20446;
    ID_S2C_ProvingGroundAttackEnemy = 20447;
    ID_C2S_ProvingGroundSelectEnemy = 20448;
    ID_S2C_ProvingGroundSelectEnemy = 20449;
    ID_C2S_ProvingGroundChangeStar = 20450;
    ID_S2C_ProvingGroundChangeStar = 20451;

    //前端配置版本号
    ID_C2S_GetPatchNum = 20460;
    ID_S2C_GetPatchNum = 20461;

    //异兽来袭
    ID_C2S_GodBeastGetInfo = 20470;
    ID_S2C_GodBeastGetInfo = 20471;
    ID_C2S_GodBeastGetFloorInfo = 20472; //获得每个难度的信息
    ID_S2C_GodBeastGetFloorInfo = 20473;
    ID_C2S_GodBeastSearchSmallBoss = 20474; //搜寻
    ID_S2C_GodBeastSearchSmallBoss = 20475;
    ID_C2S_GodBeastAttackSmallBoss = 20476; //攻打小boss
    ID_S2C_GodBeastAttackSmallBoss = 20477;
    ID_C2S_GodBeastGetSmallBossRank = 20478; //获得小boss排行榜
    ID_S2C_GodBeastGetSmallBossRank = 20479;
    ID_C2S_GodBeastAttackBigBoss = 20480; //攻打大boss
    ID_S2C_GodBeastAttackBigBoss = 20481;
    ID_C2S_GodBeastLeaveFloor = 20482; //离开难度界面
    ID_S2C_GodBeastLeaveFloor = 20483;
    ID_S2C_GodBeastSmallBossNtf = 20484; //小boss信息推送
    ID_S2C_GodBeastBigBossNtf = 20485; //大boss信息推送

    //双11福利副本
    ID_C2S_ActiveChapterGetInfo = 20500;
    ID_S2C_ActiveChapterGetInfo = 20501;
    ID_C2S_ActiveChapterChallengeStage = 20502;
    ID_S2C_ActiveChapterChallengeStage = 20503;
    ID_C2S_ActiveChapterFastChallenge = 20504;
    ID_S2C_ActiveChapterFastChallenge = 20505;
}

message User {
    required uint64 id = 1;
    required string name = 2;
    required uint32 level = 3;
    required uint32 vit = 4; //体力
    required uint32 spirit = 5; //精力
    required uint32 refresh_vit_time = 6;
    required uint32 refresh_spirit_time = 7;
    required uint32 exp = 8;
    required uint64 money = 9;
    required uint32 gold = 10;
    required uint64 power = 11;
    required uint32 mana = 12; //法力(魔界BOSS)
    required uint32 prestige = 13; //聲望(竞技场)
    required uint32 tower_resource = 14; //
    //required uint32 fra1 = 15; //宝物资源1
    //required uint32 fra2 = 16; //宝物资源2
    //required uint32 fra3 = 17; //宝物资源3
    required uint32 viagra = 18; //丹药(围剿群妖)
    required uint32 refresh_viagra_time = 19;
    //required uint32 arena_honor = 20;//跨服竞技荣誉
    required uint32 soul = 21; //将魂(武将分解)
    required uint32 medal = 22; //战功(围剿群妖)
    required uint32 forbid_battle_time = 24; //免战时间
    required uint32 jade = 25; //魂玉
    required uint32 guide_id = 26; //新手指导
    required uint32 first_boss = 27; //是否触发过全服boss
    required uint32 world_boss_fight_time = 28; //全服boss可攻击时间
    required uint32 last_drink_time = 29; //上次吃体力时间
    required uint32 recruiting_zy_point = 30; //阵营抽将积分
    required uint32 guild_contribution = 31; //公会贡献
    required uint32 guild_leave_time = 32; // 退会时间
    optional uint64 guild_id = 33; //公会id
    optional uint32 sacrifice_time = 34; //上次祭祀时间
    optional uint32 create_time = 35; //创角时间
    optional uint32 wx_share = 36; //微信分享
    optional uint32 avatar = 37; //变身
    optional uint32 last_star_redpacket_time = 38; //上次领取明星红包时间
    optional uint32 soul_jade = 39; //灵玉
    //repeated Int64Map user_resource = 40; //玩家资源（仙丹等）
    optional uint32 fierce_medal = 41; //大闹天宫勋章
    optional uint32 title = 42; //头衔
    optional CoolName cool_name = 43; //称号系统
    optional uint32 show_vip = 44; //vip头像框
    optional uint32 dress_id = 45; //时装id
    optional uint64 battle_pet = 46; //上阵神兽
    optional uint32 tiny_charge_count = 47; //小额充值次数 零点重置
    optional string guild_name = 48; //公会名称
    optional uint32 guild_position = 49; //公会职位
    optional uint32 rename_time = 50; //改名时间
    optional uint32 rename_count = 51; //改名次数
    optional uint32 parade_count = 52; //巡游次数
    optional uint32 refresh_parade_count_time = 53; //巡游次数恢复时间
    optional uint32 wing_id = 54; //翅膀ID
    optional uint32 identity_award = 55; //是否领取了身份验证奖励
    repeated uint32 drink_type = 56; //吃了哪几个人参果
    optional uint32 pray_rareshop_count = 57; //拜访珍宝阁次数
    optional uint32 refresh_pray_count_time = 58; //拜访珍宝阁次数恢复时间
    optional uint32 plant_exp = 59; //种植经验
    optional uint32 plant_level = 60; //种植等级
    optional uint32 wudao_name_id = 61; //悟道技能树id
    optional bool wechat_frame = 62; //微信头像框是否激活
    repeated IntMap frame_active_time = 63; //头像框激活时间
    optional uint32 glory_level = 64; //荣耀等级
}

message Chapter {
    required uint32 id = 1; //章节Id
    required uint32 total_star = 2; //章节总星数
    required uint32 breward = 3; //3个箱子奖励领取情况
    required uint32 sreward = 4;
    required uint32 greward = 5;
    repeated Stage stages = 6; //关卡列表
    optional bool has_entered = 7; //是否进入过
}

message Stage {
    required uint32 id = 1; //关卡id
    required uint32 star = 2; //星数
    required uint32 execute_count = 3; //今日已经挑战次数
    required bool is_finished = 4; //是否完成 如果完成 开启下一个关卡和章节
    optional uint32 reset_count = 5; //今日已经重置次数
    optional bool receive_box = 6; //是否领取了宝箱
}

//心跳 10s
message C2S_KeepAlive {
}

message S2C_KeepAlive {
}

//登陆
message C2S_Login {
    required string token = 1;
    required uint64 sid = 2;
    required string channel_id = 3;
    required string device_id = 4;
    optional uint32 version = 5;
}

message S2C_Login {
    required uint32 ret = 1;
    optional uint64 uid = 2;
    optional uint32 sid = 3; //gateway client id
    optional string yzuid = 4;
    optional string platform_uid = 5;
    optional uint32 version = 6;
}

//创建角色
message C2S_Create {
    required string name = 1;
    required uint32 type = 2;
}

message S2C_Create {
    required uint32 ret = 1;
    optional uint64 uid = 2;
    optional uint32 sid = 3;
}

//获取秘钥
message C2S_GetEncodeKey {
}

message S2C_GetEncodeKey {
    required int32 encode_key = 1;
}

message C2S_Offline {
}

message C2S_GetServerTime {
}

message S2C_GetServerTime {
    required uint32 time = 1;
    required uint32 zone = 2;
}
//刷新玩家信息
message C2S_Flush {
    required bool user = 1;  //玩家基本信息
    required bool chapter = 2;  //副本
    required bool equipment = 3; //装备
    required bool knight = 4; //神将
    required bool treasure = 5; //宝物
    required bool fragment = 6; //碎片
    //required bool gem = 7;
    required bool fight_knight = 8;  //上阵武将
    required bool fight_resource = 9; //上阵阵容资源（team_resource）
    required bool item = 10; //道具
    optional bool mail = 11; //邮件
    optional bool vip = 12; //VIP信息
    optional bool tower = 13; //九重天
    optional bool instrument_materials = 14; //法宝胚子列表
    optional bool stars = 15; //星宿
    //optional bool server_arena = 16;
    optional bool bible = 17; //真经
    optional bool fairyland = 19; //仙界
    optional bool fund_coin = 20; //开服基金
    optional bool recharge = 21; //充值(包括月卡)
    optional bool friends = 23; //好友和黑名单
    optional bool achievement_pool = 25; //成就池
    optional bool treasure_fragment = 26; //宝物碎片
    optional bool activity = 27; //活动
    optional bool instrument_drop = 28; //法宝抽卡
    optional bool gold_hand_count = 29; //点金手已用次数
    optional bool daily_dungeon = 30; //日常副本信息
    optional bool recruit = 31; //抽将信息
    optional bool daily_task = 32; //日常任务信息
    optional bool red_point = 33; //红点
    optional bool first_kill = 34; //首杀战报
    optional bool sign_in = 35; //签到信息
    optional bool seven_days = 36; //七日活动
    optional bool compensation_activity = 37; //补偿奖励活动
    optional bool seven_days_top = 38; //开服战力排行活动
    optional bool guild_info = 39; //公会信息
    optional bool random_activity = 40; //定制活动
    optional bool activity_vip_reward = 41; //vip福利
    optional bool activity_open_login = 42; //新服登录
    optional bool star_photo = 43; //明星签名照
    optional bool activity_star_redpacket = 44; //明星红包活动
    optional bool activity_star_gift = 45; //明星礼包码
    optional bool soul = 46; //仙灵
    optional bool soul_draw = 48; //仙灵抽卡
    optional bool holiday_activity = 49; //欢庆佳节
    //optional bool activity_lianBao = 50;
    optional bool actived_souls = 51; //仙灵图鉴
    optional bool user_resource = 52; //新资源
    optional bool fierce_is_open = 53; //南天门是否开启
    optional bool daily_sale = 54; //限时贩售
    optional bool group_buy = 55; //团购
    optional bool week_task = 56; //周任务
    optional bool cool_name = 57; //称号系统
    optional bool soul_score = 58; //仙灵得分
    optional bool question_url = 59; //调查问卷url
    optional bool guild_task = 60; //帮派任务
    optional bool homeland = 61; //家园
    optional bool dragon = 62; //龙宫探宝
    optional bool month_fund = 63; //月基金
    optional bool dress = 64; //时装
    optional bool stage_boss = 65; //精英副本的Boss
    optional bool pray = 66; //八卦祈福
    optional bool fierce_arena = 67; //南天门争霸赛
    optional bool travel_shop = 68; //三界游商
    optional bool fight_for_king = 69; //封神之战
    optional bool pets = 70; //神兽
    optional bool week_fund = 71; //周基金
    optional bool hand_book = 72; //图鉴
    optional bool lottery = 73; //撒豆成兵
    optional bool level_prize = 74; //等级礼包
    optional bool mammon = 75; //财神送礼
    optional bool magic = 76; //神将幻化
    optional bool flame = 77; //大战火焰山
    optional bool magic_book = 78; //法术书
    optional bool five_finger = 79; //五行山
    optional bool wealth_god = 80; //财神到
    optional bool guild_talent = 81; //帮派天赋
    optional bool guild_battle = 82; //帮战
    optional bool magic_change = 83; //法术书兑换
    optional bool user_identity = 84; //身份验证
    optional bool gem_draw = 85; //宝石抽奖
    optional bool gem = 86; //宝石信息
    optional bool gem_inteam = 87; //宝石上阵信息
    optional bool wing = 88; //翅膀
    optional bool knight_card = 89; //魂卡数据
    optional bool anniversary_info = 90; //周年庆
    optional bool god_strive = 91; //诸神争霸
    optional bool super_status = 92; //超级服状态
    optional bool nightmare = 93; //噩梦副本
    optional bool knight_card_team = 94; //魂卡队伍图鉴
    optional bool day_rebate = 95; //天天返利
    optional bool week_shop = 96; //周商店
    optional bool rare_shop = 97; //珍宝商店
    optional bool eliminate_demon = 98; //降妖伏魔
    optional bool temple = 99; //大闹天宫信息
    optional bool discount_carnival = 100; //折扣狂欢信息
    optional bool scuffle = 101; //三界斗法信息
    optional bool magic_special = 102; //法术奇门信息
    optional bool totem = 103; //仙灵英魂
    optional bool thunder_temple = 104; //雷音寺论道信息
    optional bool player_recall = 105; //老玩家召回
    optional bool nether_world = 106; //地府试炼
    optional bool retrieve = 107; //限时找回
    optional bool guild_crystal = 108; //帮派抢矿
    optional bool wing_bless = 109; //翅膀护阵
    optional bool h5_activity_view = 110; //H5活动界面信息
    optional bool practice_buddhism = 111; //主角升金信息
    optional bool rune = 112; //符文
    optional bool gold_pray = 113; //金时装转盘
    optional bool realm = 114; //神符灵界
    optional bool country_war = 115; //国战
    optional bool knight_bless = 116; //神将护佑
    optional bool feed_beast = 117; //春节活动
    optional bool soul_islands = 118; //玄灵仙岛
    optional bool gender_change = 119; //变性
    //optional bool cross_friend = 120;//跨服好友
    optional bool lion_ridge = 121; //狮驼岭
    optional bool rune_stone = 122; //符石
    optional bool devil_boss = 123; //灭世妖圣
    optional bool celebrate = 124; //周年庆典
    optional bool avatar_card = 125; //变身卡
    optional bool knight_draw = 126; //金将立绘拼图
    optional bool road_to_west = 127; //通天之路
    optional bool day_login_sign = 128; //特殊每日签到
    optional bool square_inch = 129; //方寸山弈数
    optional bool promise_tree = 130; //许愿树
    optional bool common_task = 131; //通用任务
    optional bool spider_cave = 132; //盘丝洞
    optional bool matrix = 133; //仙阵养成
    optional bool bargain_shop = 134; //砍价商店
    optional bool for_treasure = 135; //三界夺宝
    optional bool star_knight = 136; //星君
    //optional bool deposit = 137;//储蓄罐
    optional bool new_holiday_activity = 138;//新节日狂欢
    optional bool pulse = 139; //主角升紫金
    // optional bool illusory_land = 140;//须弥幻境
    optional bool login_pop_act = 141; //玩家登陆弹窗
    optional bool artifact = 142; //神器
    optional bool days7_rebate = 143; //开服7日的天天返利
    optional bool patch_num = 144; //前端配置版本号
    optional bool star_rebate = 145; //定制礼包
    optional bool avatar = 146; //变身卡
    optional bool weapon_loft = 147; //藏器阁
    optional bool new_week_fund = 148; //新周基金
    optional bool three_group = 149; //三界势力战
    optional bool push_gift = 150; //限时推送礼包
    optional bool nirvana_task = 151; //主角升赤金
}

message S2C_Flush {
    required uint32 ret = 1;
    required bool user = 2;
    optional uint32 first_open_time = 3; //server open time
}

message S2C_RedPointNotify {
    required uint32 mask = 1;
}

message S2C_GetFriend {
    repeated uint64 friend = 1;
    repeated uint64 blacklist = 2;
}

//玩家基础信息
message S2C_GetUser {
    required User user = 1;
}

message S2C_GetEquipment {
    repeated Equipment equipments = 1;
}

message S2C_GetKnight {
    repeated Knight knights = 1;
}

message S2C_GetTreasure {
    repeated Treasure treasures = 1;
}

message S2C_GetSoulScore {
    repeated uint32 id = 1;
}

message S2C_GetSoul {
    repeated Soul souls = 1;
}

message S2C_GetActivedSouls {
    repeated ActivedSoul actived_soul = 1;
}

message ActivedSoul {
    required uint32 id = 1;
    required uint32 star = 2;
}

message S2C_GetFragment {
    repeated Fragment fragments = 1;
}

message S2C_GetGem {
    repeated Gem gems = 1;
}

message C2S_GetChapterList {

}

message S2C_GetChapterList {
    required uint32 ret = 1;
    optional uint32 total_star = 2; //主线总星数
    optional uint32 total_e_star = 3; //精英主线总星数
    repeated Chapter chapters = 4; //主线副本
    repeated Chapter e_chapters = 5; //精英副本
}

message C2S_ExecuteStage {
    required uint32 stage_id = 1; //关卡id
    //optional uint32 star = 2; //挑战的星数
    optional uint32 wave_id = 2; //第几波怪几星
}

message S2C_ExecuteStage {
    required uint32 ret = 1; //
    required uint32 stage_id = 2; //关卡id
    //optional uint32 star = 3; //挑战的星数
    optional uint32 wave_id = 4; //第几波怪
    optional uint32 type = 5; //关卡类型 如果是宝箱类型 直接显示奖励 如果是战斗类型 判断next_wave_id 在做显示
    optional Stage stage = 6; //刷新当前关卡信息
    optional uint32 stage_money = 7; //获得的金钱
    optional uint32 stage_exp = 8; //获得的经验
    optional uint32 stage_star = 9; //星数
    optional BattleReport battle = 10; //战报
    repeated Award awards = 11; //奖励
    optional uint32 next_wave_id = 12; //下拨怪WAVE ID 0则无
    repeated Award chapter_awards = 13; //通关奖励
    repeated AddAward add_awards = 14; //额外奖励
}

//扫荡
message C2S_FastExecuteStage {
    required uint32 stage_id = 1; //关卡id
    //required uint32 star = 2; //星数
}

message S2C_FastExecuteStage {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    //required uint32 star = 3;
    optional Stage stage = 5;
    repeated Award awards = 6;
    optional uint32 stage_money = 7;
    optional uint32 stage_exp = 8;
    optional uint32 stage_star = 9;
    repeated AddAward add_awards = 14; //额外奖励

}

//首次进入新章节
message C2S_FirstEnterChapter {
    required uint32 ch_id = 1; //章节id
}

message S2C_FirstEnterChapter {
    required uint32 ret = 1;
    required uint32 ch_id = 2; //章节id
}

//领取关卡宝箱
message C2S_FinishChapterBoxRwd {
    required uint32 ch_id = 1; //章节id
    required uint32 box_type = 2; //1铜箱子 2银箱子 3金箱子
}

message S2C_FinishChapterBoxRwd {
    required uint32 ret = 1;
    required uint32 ch_id = 2; //章节id
    required uint32 box_type = 3; //1铜箱子 2银箱子 3金箱子
    repeated Award awards = 4; //奖励
}

//重置副本
message C2S_ResetStage {
    required uint32 stage_id = 1; //关卡id
}

message S2C_ResetStage {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    optional Stage stage = 3; //这个副本
    optional uint32 next_reset_cost = 4; //下次重置消耗元宝
}

//查看星数排行榜
message ChapterRank {
    required uint64 UserId = 1;
    optional SimpleUser simple_user = 2; //用户基础信息
    optional uint32 star = 3; //星数
    optional uint32 rank = 4; //排名
}

message C2S_GetChapterRank {
    required uint32 ch_type = 1; //主线类型 1 普通主线 2 精英主线
}

message S2C_GetChapterRank {
    required uint32 ret = 1;
    required uint32 ch_type = 2;
    optional uint32 self_rank = 3; //自己的排名 0 未上榜
    repeated ChapterRank ranks = 4; //排行榜
}

//获取首杀战报
message C2S_GetFirstKillReport {
    required uint32 stage_id = 1;
}

message FirstKillReport {
    required uint32 id = 1; //关卡id
    required uint64 uid = 2; //uid
    required string name = 3; //玩家姓名
    required uint64 power = 4; //玩家战力
    required uint32 timestamp = 5;
    optional uint32 knight_id = 6; //武将id
    required uint64 report_id = 7; //战报
    repeated SimpleFormation formations = 8;
    optional uint32 rank_lv = 9; //武将突破等级

}

message SimpleFirstKill {
    required uint32 id = 1; //关卡id
    required string name = 3; //玩家姓名
}

message SimpleFormation {
    required uint32 pos = 1; //位置
    required uint32 knight_id = 2; //武将id
    required uint32 level = 3; //武将等级
    optional uint32 rank_lv = 4; //武将突破等级
}
message S2C_GetFirstKillReport {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    optional FirstKillReport report = 3;
}

//领取关卡宝箱
message C2S_ReceiveStageBox {
    required uint32 stage_id = 1; //关卡id
}

message S2C_ReceiveStageBox {
    required uint32 ret = 1;
    required uint32 stage_id = 2; //章节id
}

message S2C_NewFirstKill {
    required uint32 stage_id = 1;
    required string first_kill_name = 2;
}

message S2C_GetFirstKill {
    repeated SimpleFirstKill first_kill = 1;
}

message S2C_GetItem {
    repeated Item items = 1;
}

message S2C_GetInstrument {
    repeated Instrument instrument_materials = 1;
}

//奖励
message Award {
    required uint32 type = 1; //5 装备
    required uint32 value = 2; //
    required uint32 size = 3;
}

//装备
message Equipment {
    required uint64 id = 1;
    required uint32 base_id = 2; //装备系统id
    required uint64 user_id = 3; //玩家ID
    required uint32 level = 4; //装备等级
    required uint32 star = 5; //星级
    required uint32 rank = 6; //品质
    required uint64 money = 7; //出售价格
    required uint32 time = 8;
    required uint32 gold_lv = 9; //淬金等级
    required uint32 purple_gold_lv = 10; //神淬等级
    required uint32 upgrade_purple_gold_fail_count = 11; //当前神淬失败次数
    required uint32 purple_gold_suit_id = 12; //紫金套装ID
    repeated Award upgrade_purple_gold_log = 13; //神淬消耗记录
}

message C2S_FastUpgradeEquipment {
    required uint64 id = 1; //装备id
    required uint32 req_level = 2; //强化到的等级
}

message S2C_FastUpgradeEquipment {
    required uint32 ret = 1;
}

//装备强化
message C2S_UpgradeEquipment {
    required uint64 id = 1; //强化装备ID
    required uint32 times = 2; //强化次数
}

message S2C_UpgradeEquipment {
    required uint32 ret = 1; //返回结果
    optional uint32 times = 2; //强化次数
    optional uint32 crit_times = 3; //暴击次数
    optional uint32 break_reason = 4; //结束理由
    optional uint32 level = 5; //强化后等级
    repeated uint32 crits = 6; //暴击日志
}

//装备品质提升
message C2S_UpRankEquipment {
    required uint64 id = 1; //提升品质装备
}

message S2C_UpRankEquipment {
    required uint32 ret = 1; //返回结果
}

//装备觉醒
message C2S_AwakenEquipment {
    required uint64 id = 1; //道具ID
}

message S2C_AwakenEquipment {
    required uint32 ret = 1;
}

//穿装备
message C2S_AddFightEquipment {
    required uint32 team = 1; //第一阵容, 第二阵容
    required uint32 pos = 2; //阵容位置
    required uint32 slot = 3; //装备位置
    required uint64 id = 4; //装备ID
}

message S2C_AddFightEquipment {
    optional uint32 team = 1;
    optional uint32 pos = 2;
    optional uint32 slot = 3;
    optional uint64 id = 4;
    required uint32 ret = 5;
    optional uint64 old_id = 6;
}

message C2S_ClearFightEquipment {
    required uint32 team = 1;
    required uint32 pos = 2;
    required uint32 slot = 3;
}

message S2C_ClearFightEquipment {
    required uint32 ret = 1;
    required uint32 team = 2;
    required uint32 pos = 3;
    required uint32 slot = 4;
    optional uint64 old_id = 5;
}

message C2S_UpgradeGoldEquipment {
    required uint64 id = 1; //装备id
}

message S2C_UpgradeGoldEquipment {
    required uint32 ret = 1;
    optional uint32 gold_lv = 2; //淬金后的等级
}

message C2S_UpgradePurpleGoldEquipment {
    required uint64 id = 1; //装备id
    optional uint32 suit_id = 2; //变紫金时选择技能
}

message S2C_UpgradePurpleGoldEquipment {
    required uint32 ret = 1;
    optional uint32 purple_gold_lv = 2; //淬金后的等级
    optional uint32 suit_id = 3; //变紫金时选择套装
}

message C2S_ChangePurpleGoldEquipmentSuit {
    required uint64 id = 1; //装备id
    optional uint32 suit_id = 2; //变紫金时选择套装
}

message S2C_ChangePurpleGoldEquipmentSuit {
    required uint32 ret = 1;
    optional uint32 suit_id = 2; //变紫金时选择套装
}

//碎片
message Fragment {
    required uint32 id = 1;
    required uint32 num = 2;
}

//碎片合成
message C2S_SyntheticFragments {
    required uint32 id = 1;
    required uint32 num = 2;
}

//魂卡
message KnightCard {
    required uint32 id = 1; //系统ID
    required uint32 num = 2;
}

message S2C_SyntheticFragments {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 num = 3;
}

message OpEquipment {
    repeated Equipment insert = 1;
    repeated Equipment update = 2;
    repeated uint64 delete = 3;
}

message OpFragment {
    repeated Fragment insert = 1;
    repeated Fragment update = 2;
    repeated uint32 delete = 3;
}

message OpTreasure {
    repeated Treasure insert = 1;
    repeated Treasure update = 2;
    repeated uint64 delete = 3;
}

message OpSoul {
    repeated Soul insert = 1;
    repeated Soul update = 2;
    repeated uint64 delete = 3;
}

message OpItem {
    repeated Item insert = 1;
    repeated Item update = 2;
    repeated uint32 delete = 3;
}

message OpInstrument {
    repeated Instrument insert = 1;
    repeated Instrument update = 2;
    repeated uint32 delete = 3;
}

message OpKnight {
    repeated Knight insert = 1;
    repeated Knight update = 2;
    repeated uint64 delete = 3;
}

message OpGem {
    repeated Gem insert = 1;
    repeated Gem update = 2;
    repeated uint32 delete = 3;
}

message OpVip {
    required Vip update = 1;
}

message OpGuildMember {
    repeated GuildMember insert = 1;
    repeated GuildMember update = 2;
    repeated uint64 delete = 3;
}

message OpGuild {
    repeated Guild insert = 1;
    repeated Guild update = 2;
    repeated uint64 delete = 3;
}

message OpPet {
    repeated Pet insert = 1;
    repeated Pet update = 2;
    repeated uint64 delete = 3;
}

message OpKnightCard {
    repeated KnightCard insert = 1;
    repeated KnightCard update = 2;
    repeated uint32 delete = 3;
}

message OpRune {
    repeated Rune insert = 1;
    repeated Rune update = 2;
    repeated uint64 delete = 3;
}

message OpRuneStone {
    repeated RuneStone update = 2;
    repeated uint64 delete = 3;
}

message OpStarKnight {
    repeated StarKnight insert = 1;
}

message OpArtifact {
    repeated Artifact insert = 1;
    repeated Artifact update = 2;
    repeated uint64 delete = 3;
}

message S2C_OpObject {
    required uint64 user_id = 1;
    optional OpEquipment equipment = 2;
    optional OpFragment fragment = 3;
    optional OpTreasure treasure = 4;
    optional OpItem item = 5;
    optional OpKnight knight = 6;
    optional OpGem gem = 7;
    optional OpInstrument instrument = 8;
    optional OpSoul soul = 9;
    optional OpTreasureFragment treasure_fragment = 12;
    optional OpVip vip = 13; //获得的vip经验
    optional OpPet pet = 14; //神兽
    optional OpMagic magic = 15; //法术
    optional OpKnightCard knight_card = 16; //魂卡
    optional OpRune rune = 17; //符文
    optional OpRuneStone rune_stone = 18; //符石
    optional OpStarKnight star_knight = 19; //星君
    optional OpArtifact artifact = 20;//神器
}

//宝物
message Treasure {
    required uint64 id = 1; //自增id
    required uint32 base_id = 2; //系统id
    required uint64 user_id = 3; //玩家id
    required uint32 level = 4; //当前等级
    required uint32 exp = 5; //当前经验
    required uint32 refine_level = 6; //精炼等级
    optional uint32 awaken_lv = 7; //金宝物觉醒等级
    optional uint32 swallow_lv = 8; //金宝物吞噬等级
    optional uint32 swallow_exp = 9; //金宝物吞噬当前经验
    repeated Award swallow_log = 10; //金宝物吞噬材料记录
    optional uint32 update_sliver = 11; //升级消耗银币
    optional uint32 purplegold_lv =12;//金宝物淬炼等级
}

//仙灵
message Soul {
    optional uint64 id = 1;
    optional uint32 level = 2;
    optional uint32 exp = 3;
    optional uint32 base_id = 4;
    optional uint32 rank = 5;
    optional uint32 incubate_level = 7; //孵化等级
    repeated IntMap potential_attrs = 8; // （锁|潜能属性id） => 潜能属性值
    optional uint32 old_base_id = 9; //之前的红仙灵ID
    optional uint32 soul_refine_lv = 10;//炼体等级
    repeated Award soul_refine_award = 11;//炼体消耗材料
}

//装备或卸下宝物
message C2S_EquipTreasure {
    required uint64 id = 1; //宝物id
    required uint32 team = 2; //阵容
    required uint32 pos = 3; //哪个武将身上
    required uint32 slot = 4; //哪个槽位
}

message S2C_EquipTreasure {
    required uint32 ret = 1;
    optional uint64 id = 2; //宝物id
    optional uint32 team = 3; //阵容
    optional uint32 pos = 4; //哪个武将身上
    optional uint32 slot = 5; //哪个槽位
    optional uint64 old_id = 6; //原来在这个位置上的宝物
}

//宝物升级
message C2S_UpgradeTreasure {
    required uint64 id = 1; //宝物id
    repeated uint64 materials = 2; //升级材料
}

message S2C_UpgradeTreasure {
    required uint32 ret = 1;
}

//宝物精炼
message C2S_RefiningTreasure {
    required uint64 id = 1; //宝物id
    repeated uint64 materials = 2; //精炼材料
}

message S2C_RefiningTreasure {
    required uint32 ret = 1;
}

//获取抢夺列表
message C2S_GetTreasureFragmentRobList {
    required uint32 treasure_fragment_id = 1; //碎片ID
}

message S2C_GetTreasureFragmentRobList {
    required uint32 ret = 1;
    required uint32 treasure_fragment_id = 2;
    repeated TreasureFragmentRobUser rob_users = 3;
}

message TreasureFragmentRobUser {
    required uint32 index = 1; //索引
    repeated uint32 knights = 2; //武将列表
    repeated uint32 rank_lv = 3;
    optional uint32 rob_rate = 4; //抢夺概率
    optional bool is_robot = 5; //是否机器人
    optional SimpleUser simple_user = 6;
}

//五次抢夺
message C2S_FastRobTreasureFragment {
    required uint32 index = 1;
}

message S2C_FastRobTreasureFragment {
    required uint32 ret = 1;
    optional uint32 treasure_fragment_id = 2; //抢夺宝物碎片id
    optional uint32 battle_times = 3; //战斗次数
    optional uint32 break_reason = 4; //中断原因(0:无中断/1:抢夺成功/2:精力不足)
    repeated bool rob_result = 5; //每次抢夺结果
    repeated Award turnover_rewards = 6; //每次翻牌结果
    repeated AwardList rewards = 7; //每次奖励
    repeated uint32 exp = 8;
    repeated SumAddAward sum_add_awards = 9; //额外奖励
}

//抢夺宝物碎片
message C2S_RobTreasureFragment {
    required uint32 index = 1;
}

message S2C_RobTreasureFragment {
    required uint32 ret = 1;
    required bool rob_result = 2;
    optional BattleReport battle_report = 3;
    optional AwardList turnover_rewards = 4;
    repeated Award rewards = 5;
    optional uint32 treasure_fragment_id = 6;
    optional uint32 exp = 7;
    repeated AddAward add_awards = 8; //额外奖励
}

//一键抢夺
message C2S_OneKeyRobTreasureFragment {
    repeated uint32 treasure_fragment_id = 1; //碎片id
    optional bool auto_use_item = 2; //自动使用精力丹
}

message S2C_OneKeyRobTreasureFragment {
    required uint32 ret = 1;
    required bool rob_result = 2;
    repeated Award turnover_rewards = 3;
    repeated Award rewards = 4;
    repeated uint32 treasure_fragment_id = 5;
    optional string rob_name = 6;
    optional uint32 exp = 7;
    repeated AddAward add_awards = 8; //额外奖励
    optional uint32 items = 9; //精力丹数量
    optional uint32 nums = 10; //次数
    repeated uint32 ids = 11;
}

//宝物合成
message C2S_ComposeTreasure {
    required uint32 treasure_id = 1;
    required uint32 count = 2;
}

message S2C_ComposeTreasure {
    required uint32 ret = 1;
    required uint32 treasure_id = 2;
    required uint32 count = 3;
}


message TreasureFragment {
    required uint32 id = 1;
    required uint32 num = 2;
}

message S2C_GetTreasureFragment {
    repeated TreasureFragment treasure_fragments = 1;
}

message S2C_UpdateForbidTime {
    required uint32 ret = 1;
    required uint32 forbid_time = 2;
}

message S2C_UpdateRobInfo {
    required uint32 ret = 1;
    optional uint64 user_id = 2;
    optional string name = 3;
    optional uint32 treasure_fragment_id = 4;
}

message OpTreasureFragment {
    repeated TreasureFragment insert = 1; //添加
    repeated TreasureFragment update = 2; //更新
    repeated uint32 delete = 3; //删除
}

//物品
message Item {
    required uint32 id = 1;
    required uint32 num = 2;
}

//法宝胚子
message Instrument {
    required uint32 id = 1;
    required uint32 num = 2;
}

//武将
message Knight {
    optional uint64 id = 1; //唯一ID
    optional uint32 base_id = 2; //静态表ID
    optional uint32 level = 3; //等级
    optional uint32 exp = 4; //经验
    optional uint32 rank_lv = 6; //突破等级
    repeated uint32 association = 7; //羁绊信息
    optional uint32 destiny_lv = 8; //天命等级
    optional uint32 destiny_exp = 9; //天命当前经验
    optional uint32 destiny_time = 10; //天命刷新时间
    optional uint32 history_materials_num = 11; //历史天命消耗的材料
    optional uint32 instrument_lv = 12; //法宝等级
    optional uint32 instrument_rank = 13; //法宝突破等级
    optional uint32 quality = 14; //品质
    //以下三个字段是查看玩家详情的时候需要给前端
    optional uint32 hp = 15;
    optional uint32 atk = 16;
    optional uint32 def = 17;
    optional uint32 instrument_exp = 18; //法宝经验
    optional uint32 awaken_lv = 19; //觉醒阶数
    repeated uint32 items = 20; //觉醒道具列表
    repeated uint32 refine_attr = 21; //法宝精炼的3个属性池
    optional uint32 instrument_refine = 22; //精炼等级
    repeated Award instrument_refine_materials = 23; //法宝精炼消耗的材料
    optional uint32 change_level = 24; //化红等级
    optional uint32 star_level = 25; //金将升星等级
    optional uint32 swallow_exp = 26; //金将吞噬经验
    repeated Award swallow_items = 27; //金将吞噬消耗记录
    optional uint32 instrument_star = 28; //金
    optional uint32 wudao_tree_id = 29; //神将悟道技能树id
    repeated IntMap wudao_node_update = 30; //神将悟道节点信息（节点id => 节点等级）
    optional uint32 seal_sprite_id = 31; //主角法宝封灵节点ID
    repeated Award zhu_ling_log = 32; //神将注灵消耗的碎片记录
    repeated IntMap zhu_ling_value = 33; //神将注灵（属性类型=>属性值）
    optional uint32 zhu_ling_rank = 34; //神将注灵的阶数
    repeated IntMap super_cast_log = 35; //暗金法宝神铸消耗的法宝 id => num
    optional uint32 super_cast_rank = 36; //暗金法宝神铸阶数
    optional uint32 update_sliver = 37; //升级消耗银币
}

//武将升级
message C2S_KnightLevelUp {
    required uint64 id = 1; //武将唯一id
    repeated uint64 materials = 2; //升级材料
}

message S2C_KnightLevelUp {
    required uint32 ret = 1;
}

//神将觉醒
message C2S_KnightStarUp {
    required uint64 id = 1; //武将自增id
    repeated uint64 cards = 2; //同名卡(武将自增id)
}

message S2C_KnightStarUp {
    required uint32 ret = 1;
}

//装备觉醒道具
message C2S_KnightStarEquipItem {
    required uint64 id = 1; //武将自增id
    repeated uint32 index = 2; // 位置0-3
}

message S2C_KnightStarEquipItem {
    required uint32 ret = 1;
    repeated uint32 index = 2;
}

message C2S_KnightStarItemComposite {
    required uint32 id = 1; //道具id
    required uint32 num = 2; //合成数量
}

message S2C_KnightStarItemComposite {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 num = 3;
}

//武将突破
message C2S_KnightQualityUp {
    required uint64 id = 1; //武将唯一id
    repeated uint64 knight_id = 2; //消耗同名卡
}

message S2C_KnightQualityUp {
    required uint32 ret = 1;
}

//武将天命培养
message C2S_KnightDestinyUp {
    required uint64 id = 1; //武将唯一ID
    required bool auto = 2; //是否开启消耗黄金自动培养
}

message S2C_KnightDestinyUp {
    required uint32 ret = 1;
}

//武将天命培养10次
message C2S_KnightDestinyUp10 {
    required uint64 id = 1; //武将唯一ID
    required bool auto = 2; //是否开启消耗黄金自动培养
}

message S2C_KnightDestinyUp10 {
    required uint32 ret = 1;
    required uint32 num = 2; //实际培养次数
}

//法宝升级
message C2S_KnightInstrumentUp {
    required uint64 id = 1; //武将唯一id
    repeated Award materials = 2;
}

message S2C_KnightInstrumentUp {
    required uint32 ret = 1;
}

//法宝突破
message C2S_KnightInstrumentRankUp {
    required uint64 id = 1; //武将唯一id
}

message S2C_KnightInstrumentRankUp {
    required uint32 ret = 1; //
}

//法宝化灵
message C2S_KnightInstrumentRefine {
    required uint64 id = 1; //武将唯一id
    required uint32 refine_type = 2; // 0 普通精炼 1 元宝精炼 2 精炼突破
    optional bool speed_up = 3; //是否加速十倍
}

message S2C_KnightInstrumentRefine {
    required uint32 ret = 1;
    optional uint32 refine_type = 2;
    optional uint32 crit = 3; //暴击倍率
    optional bool speed_up = 4; //是否加速十倍
}

//金法宝铸魂
message C2S_KnightGoldInstrumentStar {
    required uint64 id = 1; //武将唯一id
}

message S2C_KnightGoldInstrumentStar {
    required uint32 ret = 1; //
    optional uint32 star_level = 2; //铸魂等级
}

//法宝幻化
message C2S_KnightInstrumentMagic {
    repeated IntMap ids = 1;
    required uint32 to_id = 2;
}

message S2C_KnightInstrumentMagic {
    required uint32 ret = 1;
    repeated Award awards = 2;
}

//武将重生
message C2S_Reborn {
    required uint32 type = 1; //类型 对应resource_type表里的类型
    required uint64 id = 2;
}

message S2C_Reborn {
    required uint32 ret = 1;
    repeated Award awards = 2;
}

//炼化台
message C2S_Recovery {
    repeated RecoveryItem recovery_items = 1;
}

message RecoveryItem {
    required uint32 type = 1; //类型
    required uint64 value = 2; //物品id
    required uint32 size = 3; //数量
}

message S2C_Recovery {
    required uint32 ret = 1;
    repeated Award awards = 2;
}

//第一阵容 武将上阵或更换
message C2S_ChangeTeamKnight {
    required uint32 pos = 1;
    required uint64 knight_id = 2; //knight_id 必须 > 0
}

message S2C_ChangeTeamKnight {
    required uint32 ret = 1;
    required uint32 pos = 2;
    required uint64 knight_id = 3;
    optional uint64 old_knight_id = 4;
}

//第二阵容 武将 上,下,更换
message C2S_ChangeSecondTeamKnight {
    required uint32 pos = 1;
    required uint64 knight_id = 2; //下阵时 knight_id = 0
}

message S2C_ChangeSecondTeamKnight {
    required uint32 ret = 1;
    required uint32 pos = 2;
    required uint64 knight_id = 3;
    optional uint64 old_knight_id = 4;
}

//布阵
message C2S_ChangeFormation {
    repeated uint32 indexs = 1;
    optional uint32 type = 2; //为1时是试炼场功能，不发则为原来的布阵
}

message S2C_ChangeFormation {
    required uint32 ret = 1;
    optional uint32 type = 2;
    repeated uint32 formation = 3; //布好的阵容
}

message C2S_HeXie {
    required uint32 id = 1;
    required uint32 num = 2;
}

message S2C_HeXie {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional uint32 id = 3;
    optional uint32 num = 4;
    optional CommonCount common_count = 5; //次数
}

//物品使用
message C2S_UseItem {
    required uint32 id = 1; //道具ID
    optional uint32 amount = 2; //数量
    optional uint32 box_id = 3; //box_id
    optional uint32 idx = 4; //N选1的选择项
}

message S2C_UseItem {
    required uint32 ret = 1;
    repeated Award awards = 2; //返回獎勵格式
    optional uint32 amount = 3; //实际使用个数
    optional uint32 box_id = 4; //box_id
    optional uint32 id = 5; //道具ID
}

message C2S_CompositeItem {
    required uint32 id = 1; //道具合成规则id
    optional uint32 num = 2; //合成数量
}

message S2C_CompositeItem {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 num = 3;
}

message C2S_CancelAvatar {
}

message S2C_CancelAvatar {
    required uint32 ret = 1;
}

message S2C_FightKnight {
    repeated uint64 first_team = 1;
    repeated uint64 second_team = 2;
    repeated uint32 first_formation = 3;
    repeated uint32 second_formation = 4;
}

message S2C_FightResource {
    repeated UserTeamResource resources = 1;
}

message UserTeamResource {
    // flags + team + pos +  slot   flags上阵装备类型(1=装备, 2=宝物, 3=宝石, 4=星宿 7=护佑神兽 8=法术 9=神符 10=化身神兽) team阵容 1,2  pos阵位1-6神将 7神兽, slot槽位
    // uint8  uint8  uint8  uint8
    required uint32 index = 1; //位置
    required uint64 id = 2; //ID
}

//test
//發裝備
message C2S_AddEquipment {
    required uint32 id = 1;
}

message S2C_AddEquipment {
    required uint32 ret = 1;
}

//發武將
message C2S_AddKnight {
    required uint32 id = 1;
}

message S2C_AddKnight {
    required uint32 ret = 1;
}
message BattleOneRoundSlice {
  repeated BattleOneRound rounds = 1;
}

//战报相关 相关的数据全部用optional 数据存储
message BattleReport {
    repeated BattleMember attack_members = 1; //攻击方队伍
    repeated BattleMember defense_members = 2; //防守方队伍
    optional uint32 pk_type = 3; //战斗类型 1 pve 2 pvp
    repeated Award awards = 4; //战斗的奖励
    optional bool is_win = 5; //攻击方是否胜利
    repeated BattleOneRound rounds = 6;
    optional uint32 first_order = 7; //谁先手 1 攻击方先手 2 防守方先手
    repeated BattleMember attack_members_final = 8; //攻击方队伍最终信息
    repeated BattleMember defense_members_final = 9; //防守方队伍最终信息
    optional string attack_name = 10; //攻击方姓名
    optional string defense_name = 11; //防守方姓名
    repeated uint32 skill_ids = 12; //战斗使用的技能
    optional uint32 attack_title = 13; //攻击方头衔
    optional uint32 defense_title = 14; //防守方头衔
    optional BattlePet attack_pet = 15; //攻击方宠物
    optional BattlePet defense_pet = 16; //防守方宠物
    optional BattleZeroRound zero_round = 17; //零回合
    repeated BattleHurtStatistics hurt_statistics = 18; //伤害统计
    optional uint64 attack_sid = 19; //攻击方sid
    optional uint64 defense_sid = 20; //防守方sid
    optional uint64 attack_uid = 21; //攻击方uid
    optional uint64 defense_uid = 22; //防守方uid
    repeated BattleSummon attack_summons = 23; //攻击方召唤物
    repeated BattleSummon defense_summons = 24; //防守方召唤物
    repeated BattleSummon attack_summons_final = 25; //攻击方召唤物最终信息
    repeated BattleSummon defense_summons_final = 26; //防守方召唤物最终信息	
    optional bytes compress = 99; //rounds字段压缩后的字符串,compress如果有值,则rounds字段为空
}

message NewBattleMember {
    optional BattleMemberPos pos = 1; //召唤者
    repeated BattleMember new_members = 2; //召唤出来的成员
}

message NewBattleSummon {
    optional BattleMemberPos pos = 1; //召唤者
    repeated uint32 summon_orders = 2; //召唤出来的成员序列
}

message BattleArtifact {
  optional uint32 suit_id = 1; //套装id
  repeated IntMap attr = 2;  //属性加成

}

message BattleMember {
    optional uint32 pos = 1; //武将位置
    optional uint32 knight_id = 2; //武将id
    optional uint64 max_hp = 3; //最大血量
    optional uint64 hp = 4; //当前血量
    optional uint32 anger = 5; //初始怒气
    optional uint32 rank_lv = 6; //武将突破等级
    optional uint32 instrument_id = 7; //法宝Id
    optional uint32 instrument_rank = 8; //法宝突破等级
    optional uint32 avatar = 9; //变身卡
    optional uint32 dress_id = 10; //时装id
    optional uint32 dress_level = 11; //时装等级
    optional uint32 dress_star = 12; //时装星数
    optional uint32 magic_id = 13; //装备的法术模板id
    optional bool magic_active = 14; //装备的法术是否激活奥秘
    optional uint32 wing_id = 15; //翅膀ID
    optional uint32 energy = 16; //初始法术能量
    optional uint32 star_lv = 17; //金将星级
    optional uint32 wudao = 18; //悟道的类型
    optional uint32 rune_id = 19; //装备的符文模板id
    repeated uint32 rune_bless_ids = 20; //符文护佑ID
    optional uint32 seal_node_id = 21; //封灵ID
    optional uint32 assist_magic_id = 22; //装备的辅修法术id
    optional uint32 star_knight_id = 23; //星君ID
    optional bool is_star_knight = 24; //是否是星君
    optional BattleArtifact artifact = 25; //神器加成
}

message BattlePet {
    optional uint32 id = 1; //宠物系统id
    optional uint32 rank_lv = 2; //突破等级
    optional uint32 star_lv = 3; //神通等级
    optional uint32 magic_id = 4; //装备的法术模板id
    optional bool magic_active = 5; //装备的法术是否激活奥秘
    optional uint32 assist_magic_id = 6; //装备的辅修法术id
}


message BattleSummon {
    optional uint32 id = 1; //宠物系统id
    optional uint32 base_id = 2; //宠物baseid
    optional uint64 max_hp = 3; //最大血量
    optional uint64 hp = 4; //当前血量
	optional uint32 pos = 5; //武将位置
	optional uint32 anger = 6; //初始怒气
	optional bool  is_initial = 7;//开始就有
}

message BattleOneRound {
    optional uint32 round_index = 1; //回合数
    repeated BattleOneAttack attacks = 2;
    repeated NewBattleMember new_members = 3; //分身情况 在回合开始的时候判断
}

//跟血量相关的结构最好放在attack_info, 其他的效果可以放在OneAttack
message BattleOneAttack {
    optional BattleMemberPos attack_pos = 1; //攻击方
    repeated uint32 unite_pos = 2; //配合方
    optional uint32 type = 3; //攻击类型 1 技能攻击 2 反击(反击作为一个新的battleRoundUnit) 3天赋攻击(前端不做表现) 4反弹(额外伤害)
    optional uint32 skill_id = 4; //技能id
    repeated BattleBuff del_buff_init = 5; //最开始的时候删除的buff 为了模拟攻击者释放的buff效果 流水id 全局的效果
    repeated BattleBuffEffect buff_effects = 6; //攻击前 buff 效果   攻击者自己的效果
    repeated BattleBuff del_buff_before = 7; //攻击前删除buff 主要是dot类的 攻击者自己的效果 这个可以修改
    repeated BattleAttackInfo attack_infos = 8; //攻击事件列表
    repeated BattleBuff add_buffs = 9; //攻击后增加的buff 需要指明buff 对象 增对这次攻击触发的 这些全部放在攻击事件里面 全局的效果
    repeated BattleBuff del_buff = 10; //攻击后删除的buff 需要指明删除对象 这些全部放在攻击事件里面  全局的效果
    repeated BattleAnger angers = 11; //攻击后怒气变化 这些全部放在攻击事件里面 全局的效果
    optional bool is_live = 12;
    repeated Award awards = 13; //攻击者死亡掉落
    optional uint32 talent_id = 14; //攻击者触发的天赋id 为0 或者没有就不是的
    repeated BattleAttackInfo attack2_infos = 15; //攻击事件2列表 延迟表现
    repeated BattleBuff add_buffs2 = 16; //攻击后增加的buff2列表 延迟表现
    optional bool is_dead = 17; //
    repeated BattleEnergy energys = 18; //能量变化
    repeated BattleEnergyBuff energy_buffs = 19; //特殊技能效果
    optional uint32 next_pos = 20; //下一个追加攻击者的位置 女娲特殊技能效果专用
    repeated BattleAttr attack_attrs = 21; //属性变化
    repeated BattleAttr magic_charge = 22; //金法术吸收属性
    repeated BattleAttr magic_charge_back = 23; //金法术吸收 返还
    repeated BattleTalent del_talent = 24; //删除天赋(图标)
    repeated BattleModel models = 25; //三金变身、分身、隐身
    repeated BattleShield shield = 26; //金将4护盾
    repeated BattleSorcery sorcery = 27; //金将4法宝大招
    repeated BattleSorcerySub sorcery_sub = 28; //金将4法宝附加效果
    repeated BattleMemberStamp gold_stamp = 29; //暗金印记
    repeated BattleEnergyStatus energy_status = 30; //法宝状态
    repeated BattleBuff update_buffs = 31; //buff回合数更新
    optional bool star_knight = 32; //星君出场
    repeated BattleTempShield temp_shield = 33; //临时护盾
    optional uint32 sub_type = 34; //攻击子类型 (1 扣护盾表现)
    optional uint32 extra_skill_pos = 35; //关联位置
    optional uint32 extra_skill_type = 36; //0偷取技能 1代出手
    repeated NewBattleSummon summon_members = 37; //召唤物
}

message BattleMemberPos {
    optional uint32 order = 1; // 1 攻击方 2 防守方
    optional uint32 pos = 2; //位置 1-6代表正常玩家 7 代表宠物
    optional uint32 indicate = 3; //标示
}

//dot 类buff 效果
message BattleBuffEffect {
    optional uint32 id = 1; //buff的流水id 如果为0 就是非buff 效果 直接飘字
    optional uint32 type = 2; //事件类型 1扣血 2 加血 3 加怒气 4减怒气
    optional uint32 value = 3; //加减的数值
    optional bool is_crit = 4; //是否暴击
    optional bool is_holy_crit = 5; //是否致命一击
    optional bool is_holy_defend_crit = 6; //是否绝对防御
    optional BattleMemberPos member = 7; //不为空表示buff效果不是自己
    repeated BattleHurtInfo hurt_infos = 8;
    optional uint32 show_type = 9; //0回合开始前表现  1技能释放完表现
}

message BattleAttackInfo {
    optional BattleMemberPos defense_member = 1; //被攻击方
    optional uint32 type = 2; //事件类型 1扣血 2 加血 6加额外一回合 7加血量上限和加血  
    optional uint64 value = 3; //加减的数值
    repeated BattleHurtInfo hurt_infos = 4; //攻击修正
    optional bool is_live = 5; //是否存活
    repeated Award awards = 6; //掉落
    optional BattleMemberPos real_defense_member = 7; //被保护的人
    optional bool is_dead = 8; //是否死亡
    optional BattleMemberStatusReset status_reset = 9; //状态重置
    optional bool is_dot_buff = 10; //是dotbuff的附加效果
    optional uint64 value_witchcraft = 11; //魔法伤害
    optional BattleSkillParam test_skill_param = 12; //test环境下技能参数统计
    optional uint64 value_real = 13; //真实伤害
}

message BattleSkillParam {
    optional string attack_pos = 1;
    optional string defend_pos = 2;
    optional uint32 attack = 3; //攻击方攻击力
    optional uint32 defend = 4; //防守方防御值
    optional uint32 param0 = 5; //公式第0层
    optional uint32 param1 = 6; //公式第1层
    optional uint32 param2 = 7; //公式第2层
    optional uint32 param3 = 8; //公式第3层
    optional string param4 = 9; //json格式
}

message BattleHurtInfo {
    //1 闪避 2 暴击 3 招架 4 无敌 5 反弹 6吸血 7 吸收 8 达到最大值 9 九天玄女护盾吸收 10 致命一击
    //11 绝对防御 12 天赋穿透 13 阳书护盾 14 迷惑 15 造化 16 鸿钧突13效果加血效果 类似于吸血 17 鸿钧突13效果减血效果 额外伤害 18 混乱
    //19,20,21 金时装仙/妖/人族护盾的吸收伤害值
    //22 齐天大圣吸血，需要位置
    //23 分身挡伤害, 24 金神兽5的反弹效果, 25 金将4的护盾吸收值, 26 观音大士的甘露生效, 27 孔雀妖神的孔雀翎生效, 28 女儿国国王牡丹花生效
    //29 类似造化效果,就是字不一样, 30 情殇效果 治疗转伤害, 31 凤火回满血
    //32 被秒杀 33 护盾4 34 护盾5 35:免伤 36:免疫间接伤害 37:威压 38:魅惑 39:固守 40:妖火 41:豁免伤害 42:噬毒 43:噬毒暴击 44:王母无视 45: 炽焰爆炸 46:临时护盾吸收
    //47:buff[祷]吸收 48:buff[告]吸收 49:附加伤害 50:焚心 51:冻伤 52:豁免 53:吸收2 54:立即结算buff 55:代替承受伤害 56:盾破
    optional uint32 id = 1;
    optional uint64 value = 2; //5 6 代表具体的数值
    optional BattleMemberPos pos = 3; //效果生效方 (22,23用), id为23时，pos是分身的位置
}

//战斗增加新的buff
message BattleBuff {
    required uint32 id = 1; //每增加一个buff 增加一个全局的id
    optional BattleMemberPos member = 2; //buff 受益者,  member有可能不是回合的攻击者
    optional uint32 buff_id = 3; //buff 系统id
    optional uint32 remove_id = 4; //上新buff的时候被顶掉的老的buff的流水id
    optional bool is_resist = 5; //buff 是否被免疫
    repeated uint32 remove_ids = 6; //添加一个buff, 移除掉的其他buff
    optional uint32 remove_type = 7; //移除类型 1:混沌驱散， 2:转移buff(8->2)
    optional BattleMemberPos src_member = 8; //buff来源
    optional uint32 buff_round = 9; //buff当前回合数
    optional uint32 resist_type = 10; //免疫类型, 0:就飘免疫, 1:王母无视
}

//技能怒气变化
message BattleAnger {
    optional BattleMemberPos member = 1;
    optional uint32 stype = 2; //0正常情况 1 需要提示
    optional uint32 type = 3; //1扣 2 加
    optional uint32 value = 4; //数值
    optional uint32 effect_type = 5; // 1=buff被免疫, 2=悲咒
}

//技能星数变化
message BattleStar {
    optional BattleMemberPos member = 1;
    optional uint32 type = 3; //1扣 2 加
    optional uint32 value = 4; //数值
}

//技能属性变化
message BattleAttr {
    // 如果defense_pos为nil表示增加属性， 不为空表示吸取属性
    optional BattleMemberPos attack_pos = 1; // 吸收者、增加者
    optional BattleMemberPos defense_pos = 2; // 被吸收者、减少者
    optional uint32 type = 3; // 属性类型 敌方被吸的属性类型
    optional uint32 attack_value = 4; // 数值 吸收增加
    optional uint32 defense_value = 5; // 数值 被吸收减少
    optional uint32 attack_attr_type = 6; // 如果>0(吸和被吸的属性不一样),表示我方吸取加的属性类型
}

//能量变化
message BattleEnergy {
    optional BattleMemberPos member = 1;
    optional uint32 type = 2; //1扣 2 加
    optional uint32 value = 3; //数值
    optional uint32 change_type = 4; //扣除类型, 1=转换, 2=扣减
}

//护盾情况
message BattleEnergyBuff {
    optional uint32 id = 1; //全局效果特殊类型  1 护盾 2 阵法 3:金将4护盾 4:护盾4 5:护盾5, 6:王母, 7:白骨, 8:唐僧
    optional uint32 index = 2; //攻击方还是防守方 1 攻击  2防守
    optional uint64 value = 3; //(type = 1 总血量)(type = 2 免伤百分比)
    optional bool is_add = 4; // true 增加 false 消失
}

message BattleEnergyStatus {
    optional BattleMemberPos attack = 1;
    optional BattleMemberPos defend = 2;
    optional bool is_lock = 3; //是否锁定法宝
}

// 删除天赋
message BattleTalent {
    optional BattleMemberPos member = 1;
    optional uint32 id = 2; // 天赋ID
    optional uint32 num = 3; //已触发次数
}

//三金变身、分身、隐身
message BattleModel {
    optional BattleMemberPos member = 1;
    optional uint32 tp = 2; //1 变为牛神 2 牛神变回来 3 召唤分身 4 分身代替死亡 5 [空着，新加的用编号5] 6 隐身 7 显形 8 分身攻击 9 分身挡伤害 10 嫦娥变身 11 红孩儿变身 12 天蓬变身 
    optional uint64 hp = 3; //变化后的生命值
    optional uint32 pos = 4; //分身位置1，2，3
    optional uint64 max_hp = 5; //如果不为空，表示最大血量发生变化
}

//金将4护盾
message BattleShield {
    optional BattleMemberPos member = 1;
    optional uint64 cur_shield_value = 2; //当前护盾值
    optional uint32 type = 3; //盾类型 0 默认护盾  1特殊护盾
    optional uint32 sub_type = 4; 
}

//临时护盾
message BattleTempShield {
    optional BattleMemberPos member = 1;
    optional uint64 cur_shield_value = 2; //当前护盾值
    optional bool first_show = 3; //提前表现
}

//金将4 牡丹, 孔雀翎, 甘露
message BattleSorcery {
    optional BattleMemberPos member = 1;
    optional uint32 op_type = 2; //1=更新, 2=替换, 3=删除
    optional uint32 sorcery_type = 3; //效果类型 1=牡丹, 2=孔雀翎, 3=甘露
    optional uint32 add_scocery_num = 4; //增加【孔雀翎/甘露】的数量
    optional uint32 del_scocery_num = 5; //减少【孔雀翎/甘露】的数量
}

//金将4 法宝子效果
message BattleSorcerySub {
    optional BattleMemberPos member = 1;
    optional uint32 sorcery_sub_type = 2; //附加效果 1=甘露不死
    optional uint64 amrita_cur_hp = 3; //对应位置的当前血量值
}

message BattleMemberStatusReset {
    optional BattleMemberPos member = 1;
    optional uint32 anger_num = 2; //当前怒气值
    optional uint32 energy_num = 3; //当前能量数
    optional uint64 hp = 4; //当前hp
    optional uint32 skill_round = 5; //技能轮次 0,1,2,3
    optional BattleMemberPos src_member = 7;
    optional uint32 type = 8; //0六道 1斩妖 2鬼炁
}

//暗金印记
message BattleMemberStamp {
    optional BattleMemberPos member = 1;
    optional uint32 stamp_type = 2; //印记类型, 1:炎珠 2:残刃 3:法印 4:紫金星君 5:魂-嫦娥 6:魂-红孩儿 7:魂-天蓬 8:星君-落英 9:飞廉-羽刺
    optional uint32 stamp_num = 3; //当前印记层数
    optional uint32 stamp_op = 4; //1=更新, 2=替换, 3=删除
}

// 战前效果
message BattleZeroRound {
    repeated BattlePetZeroRound rounds = 1;
}

// 神兽战前效果
message BattlePetZeroRound {
    optional BattleMemberPos attack_pos = 1; //战吼释放者
    repeated BattleRoar roars = 2; //受影响武将
}

message BattleRoar {
    optional BattleMemberPos member = 1; //被战吼单位
    optional uint32 type = 2; //战吼类型 1 给武将增加天赋, 2 删除天赋
    repeated uint32 talents = 3; //天赋id, gold_pet_play_info.xml里的id
}

message BattleTeam {
    repeated BattleMember members = 1; //队伍成员信息
}

message BattleHurtStatistics {
    optional BattleMemberPos attack = 1; //0:未知伤害来源， 比如金法术4的自残
    optional BattleMemberPos defense = 2;
    optional uint32 hurt_class = 3; // 1:伤害, 2:治疗
    optional uint32 hurt_type = 4; //伤害类型1，2，3，4
    optional uint64 hurt_value = 5; //伤害值
    optional bool is_star_knight = 6; //是星君
    optional uint32 summon_id = 7; //召唤物ID
}

message Object {
    required uint32 mode = 1;
    required uint64 value = 2;
    required uint32 size = 3;
}

message Goods {
    required uint32 type = 1;
    required uint64 value = 2;
    required uint32 size = 3;
}

//出售
message C2S_Sell {
    repeated Goods goods = 2;
}

message S2C_Sell {
    required uint32 ret = 1;
}

message C2S_DoBattleReport {
    optional uint32 id = 1; //战报的id
    optional uint64 attack_id = 2; //攻击方uid
    optional uint64 defense_id = 3; //防守方team_id
}

message S2C_DoBattleReport {
    required uint32 ret = 1;
    required BattleReport report = 2; //战报内容
}

message C2S_GetBattleReport {
    required uint64 id = 1;
}

message S2C_GetBattleReport {
    required uint32 ret = 1;
    required uint64 id = 2;
    optional BattleReport battle_report = 3;
}

// 查询招募信息
message C2S_RecruitInfo {
}

message S2C_RecruitInfo {
    required uint32 ret = 1;
    optional uint32 lp_free_count = 2; // 良品剩余免费次数次数-每日 每日会送3次免费次数
    optional uint32 lp_free_time = 3; // 良品免费时间 下次可以免费抽奖的时间戳
    optional uint32 jp_free_time = 4; // 极品免费时间 下次可以免费抽奖的时间戳
    optional uint32 jp_recruited_times = 5; // 极品已招募次数
    optional uint32 zy_recruited_times = 6; // 今日已抽次数
    optional uint32 jp_free_count = 7; //极品抽将剩余次数 每日重置
    optional uint32 zy_left_time = 8; // 各阵营抽奖剩余时间
    repeated uint32 recruit_zy = 9; //用来显示主打神将
    repeated IntMap zy_use_count = 10; //阵营抽将已使用次数
    repeated uint32 next_recruit_zy = 11; //下一次的招募阵营
    optional bool is_zy_activity = 12; //是否是活动阵营抽将时间
}

// 良品招一次
message C2S_RecruitLp {
    required uint32 consume_type = 1; // 0 免费 1 招募令 2 币
}

message S2C_RecruitLp {
    required uint32 ret = 1;
    repeated Award awards = 2; //或得的奖励
    required uint32 consume_type = 3; // 0 免费 1 招募令 2 币
    optional uint32 lp_free_time = 4; //良品免费时间 下次可以免费抽奖的时间戳
    optional uint32 money = 5; // 招募获得的银两
}

// 良品招十次
message C2S_RecruitLpTen {
    required uint32 consume_type = 1; // 1 招募令 2 币
}

message S2C_RecruitLpTen {
    required uint32 ret = 1;
    repeated Award awards = 2; //或得的奖励
    required uint32 consume_type = 3; // 1 招募令 2 币
    optional uint32 money = 4;
}

// 极品招一次
message C2S_RecruitJp {
    required uint32 consume_type = 1; // 0 免费 1 招募令 2 币
}

message S2C_RecruitJp {
    required uint32 ret = 1;
    repeated Award awards = 2; //或得的奖励
    required uint32 consume_type = 3; // 0 免费 1 招募令 2 币
    optional uint32 jp_free_time = 4; //极品免费时间 下次可以免费抽奖的时间戳
    optional uint32 money = 5;
}

// 极品招十次
message C2S_RecruitJpTen {
    required uint32 consume_type = 1; // 1 招募令 2 币
}

message S2C_RecruitJpTen {
    required uint32 ret = 1;
    repeated Award awards = 2; //或得的奖励
    required uint32 consume_type = 3; // 1 招募令 2 币
    optional uint32 money = 4;
}

// 极品招二十次
message C2S_RecruitJpTw {
    required uint32 consume_type = 1; // 1 招募令 2 币
}

message S2C_RecruitJpTw {
    required uint32 ret = 1;
    repeated Award awards = 2; //或得的奖励
    required uint32 consume_type = 3; // 1 招募令 2 币
    optional uint32 money = 4;
}

// 阵营抽将
message C2S_RecruitZy {
    required uint32 type = 1; //抽取类型
    required uint32 recruit_zy = 2; //抽将的阵营
}

message RecruitZyAward {
    repeated Award awards = 1; //单抽的奖励
}

message S2C_RecruitZy {
    required uint32 ret = 1;
    repeated RecruitZyAward awards = 2; //或得的奖励
    repeated IntMap use_count = 3; //已使用的阵营次数
    optional uint32 money = 4; //获得银两
}

message S2C_RecruitWithDialogue {
    required uint32 knight_id = 1;
}

//测试抽将
message C2S_RecruitTest {
    required uint32 recruit_times = 1; //抽将次数
}

message S2C_RecruitTest {
    required uint32 ret = 1;
    repeated Award awards = 2;
}

message WorldBossUser {
    required uint32 user_exploit_rank = 1; //玩家贡献排名
    required uint64 exploit = 2; //玩家挑战所累积的贡献值
    required uint32 last_fight_count = 3; //玩家剩余攻击次数
    required uint64 uid = 4; //玩家ID
    //optional uint32 fight_time = 5; //下次攻击时间
}

message WorldBossRankInfo {
    required uint64 uid = 1; //玩家ID
    required uint64 value = 2; //伤害或者贡献
    optional SimpleUser simple_user = 3;
}

message C2S_GetWorldBossRank {
}

message S2C_GetWorldBossRank {
    required uint32 ret = 1;
    repeated WorldBossRankInfo exploit_rank = 2;
    optional uint32 my_exploit_rank = 3;
}

//魔界BOSS
message WorldBoss {
    optional uint32 id = 1; //boss ID
    //optional uint64 hp = 2; //boss当前血量
    //optional bool state = 3; //boss状态
    //optional uint32 level = 4; //BOSS等级
    //optional uint64 max_hp = 5; //BOSS最大血量
    optional uint32 magic_value = 6; //当前魔值
    optional uint32 max_magic_value = 7; //魔值上限
    //optional uint32 first_boss_condition = 8; //第一次激活条件
    //optional uint32 start_time = 9; //激活时间
    //repeated WorldBossRecord WorldBoss_record = 10; //降魔录需要使用(每个类型的BOSS被击杀次数)
}

message WorldBossRecord {
    required uint32 boss_id = 1; //BOSS类型
    required uint32 killed_count = 2; //击杀次数
}

message S2C_AttackWorldBossInfo {
    optional string name = 1;
    optional uint64 exploit = 2;
    optional uint32 id = 3;
    //optional bool dead = 4; //BOSS是否死亡
   optional uint32 quality = 5; //品质

}

message S2C_GetWorldBossState {
    required uint32 boss_id = 1; //BOSSid
    //required uint64 user_id = 2; //发现者id
}

//进入魔界BOSS
message C2S_EnterWorldBossUI {
}

message S2C_EnterWorldBossUI {
    required uint32 ret = 1;
    optional WorldBossUser world_boss_user = 2;
    optional WorldBoss world_boss = 3;
    //repeated IntMap get_magic_count = 4; //已经领取的次数（key:具体的魔值  value:该魔值领取的次数）
    //repeated IntMap total_magic_count = 5; //魔值增加的总次数
}

message C2S_AttackWorldBoss {

}

message S2C_AttackWorldBoss {
    required uint32 ret = 1;
    optional BattleReport report = 2; //战报
    optional uint64 exploit = 3; //贡献
    repeated Award award = 4; //奖励
    //optional bool dead = 5; //BOSS是否死亡
    repeated AddAward add_awards = 6; //随机额外奖励
    optional uint32 last_fight_count = 7; //玩家剩余攻击次数
    //optional uint32 fight_time = 8; //下次攻击时间
}

//魔值添加
message S2C_AddMagicValueEvent {
    required uint32 magic_value = 1;
}

//message C2S_GetWorldBossMagicCount {
//  required uint32 magic_value = 1;
//}

//message S2C_GetWorldBossMagicCount {
//  required uint32 ret = 1;
//  repeated IntMap get_magic_count = 2; //已经领取的次数（key:具体的魔值  value:该魔值领取的次数）
//  repeated IntMap total_magic_count = 3; //魔值增加的总次数
//}

message C2S_KnightMagicEntry {
}

message S2C_KnightMagicEntry {
    required uint32 ret = 1;
    optional uint32 start = 2;
    optional uint32 end = 3;
}

message C2S_KnightMagic {
    repeated uint64 id = 1; //被幻化的神将唯一id
    optional uint32 to_base_id = 2; //想幻化的神将baseid
}

message S2C_KnightMagic {
    required uint32 ret = 1;
    repeated Award awards = 2;
}

message C2S_GetBattleUser {
    required uint64 target_id = 1; //目标玩家ID
    required uint32 type = 2; //1 - 只显示玩家信息 2- 所有信息
    optional uint64 sid = 3; //服务器ID，本服不发或者发0
    optional uint32 param1 = 4;//客户端参数
    optional uint32 module = 5; //显示阵容的模块（默认不发，1：试炼场）
}

message S2C_GetBattleUser {
    required uint32 ret = 1;
    optional BattleUser battle_user = 2;
    required uint32 type = 3;
    optional uint32 param1 = 4;//客户端参数
    optional uint32 module = 5;
}

message SimpleUser {
    required uint64 uid = 1;
    required string name = 2;
    optional uint64 power = 3;
    optional uint32 level = 4;
    optional uint64 sid = 5; //sid
    optional string server_name = 6; //服务器名称
    optional uint32 base_id = 7; //主角武将系统id
    optional string guild_name = 8; //公会名称
    optional uint32 rank_lv = 9; //突破等级
    optional uint32 avatar = 10; //变身icon
    optional uint32 avatar_deadline = 11; //avatar结束时间
    optional uint32 offline = 12; //离线时间
    optional uint32 vip = 13; //vip等级
    optional uint32 title = 14; //title
    optional uint32 cool_name_id = 15; //称号Id
    optional uint32 cool_name_end_time = 16; //称号过期时间
    optional uint32 show_vip = 17; //选择的vip头像框
    optional uint32 dress_id = 18; //时装id
    optional uint32 pet_base_id = 19; //神兽baseid
    optional uint32 wing_id = 20; //翅膀Id
    optional uint32 glory_level = 21; //荣耀等级
}

message BlessKnight {
    required uint32 pos = 1; //护阵神将位置
    required Knight bless_knight = 2; //护阵神将
}

message BattleUser {
    required SimpleUser user = 1;
    repeated Knight knights = 2; //上阵武将信息
    repeated Equipment equipments = 3; //上阵装备信息
    repeated Treasure treasures = 4; //上阵宝物
    repeated Knight second_team = 5; //援军
    repeated UserTeamResource resources = 6; //上阵装备 宝物 法术 符文 化身神兽的位置
    repeated Soul souls = 7; //仙灵
    optional uint64 battle_pet = 8;
    repeated Pet pets = 9; //上阵、护佑神兽
    repeated Magic magics = 10; //法术
    repeated GemInteam wing_gems = 11; //翅膀上阵宝石
    repeated Totem totems = 12; //仙灵英魂
    repeated Rune runes = 13; //符文
    repeated BlessKnight bless_knights = 14; //护阵神将
    repeated StarKnight star_knights = 15;
    repeated Artifact artifacts = 16;
}

//固定商品购买信息
message FixedGoodsBuyInfo {
    required uint32 goods_id = 1; //商店商品id
    required uint32 buy_count = 2; //已购买数量
}

//随机商品购买信息
message RandomGoodsBuyInfo {
    required uint32 goods_id = 1; //商店商品id
    required uint32 buy_count = 2; //已购买数量
}

//固定商店信息
message FixedShopInfo {
    repeated FixedGoodsBuyInfo goods = 1;
}

//随机商店信息
message RandomShopInfo {
    required uint32 born_time = 1; //生成时间
    required uint32 today_manual_count = 2; //今天手动刷新累积次数
    required bool forever = 3; //是否永久存在
    repeated RandomGoodsBuyInfo goods = 4; //刷新出的商品
}

//获得商店信息
message C2S_GetShopInfo {
    required uint32 shop_id = 1;
}

//获得商店信息的回应(或者主动通知客户端商店信息变更协议 触发了一个动态随机商店也用此通知)
message S2C_ShopInfoNtf {
    required uint32 shop_id = 1;
    required uint32 ret = 2;
    optional FixedShopInfo fixed_shop = 3; //如果商店是固定商店，则返回此
    optional RandomShopInfo random_shop = 4; //如果商店是随机商店，则返回此
}

//统一购买商品请求
message C2S_BuyShopGoods {
    required uint32 shop_id = 1; //购买商品所属商店
    required uint32 goods_id = 2; //购买商品id
    required uint32 buy_count = 3; //购买数量
}

//统一购买商品回应
message S2C_BuyShopGoods {
    required uint32 shop_id = 1; //购买商品所属商店
    required uint32 goods_id = 2; //购买商品id
    required uint32 buy_count = 3; //购买数量
    required uint32 ret = 4;
}

//刷新商店请求
message C2S_RefreshShop {
    required uint32 shop_id = 1;
    required bool refresh_by_item = 2; //false表示通过金币刷新，true表示通过道具刷新
}

//刷新商店回应
message S2C_RefreshShop {
    required uint32 shop_id = 1;
    required uint32 ret = 2; //成功时，还会发送 S2C_ShopInfoNtf 通知被刷新商店最新信息
}

//永久化神秘商店请求
message C2S_ForeverMagicShop {
    required uint32 shop_id = 1;
}

//永久化神秘商店回应
message S2C_ForeverMagicShop {
    required uint32 shop_id = 1;
    required uint32 ret = 2;
}

//拉取玩家拥有的神秘商店id
message C2S_GetMagicShopId {

}

//返回玩家拥有的神秘商店id
message S2C_GetMagicShopId {
    repeated uint32 shop_ids = 1;
}

message C2S_GetTravelShop {
}

message TravelShopGoods {
    required uint32 goods_id = 1;
    required uint32 cur_discount = 2;
    required uint32 reduce_count = 3;
    required uint32 buy_count = 4;
}

message S2C_GetTravelShop {
    required uint32 ret = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    repeated TravelShopGoods goods = 4;
    optional uint32 today_manual_count = 5;
}

//通知新增了三界游商活动或者被删除，收到后如果在三界游商界面且为新增活动时应通过C2S_GetTravelShop重新拉取数据
message S2C_TravelShopNtf {
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
}

message C2S_RefreshTravelShop {
    required bool use_resource1 = 1; //是否使用资源1刷新，否则使用资源2刷新
}

message S2C_RefreshTravelShop {
    required uint32 ret = 1;
}

message C2S_ReduceTravelDiscount {
    required uint32 goods_id = 1;
}

message S2C_ReduceTravelDiscount {
    required uint32 ret = 1;
    optional uint32 goods_id = 2;
    optional uint32 cur_discount = 3;
}

message C2S_BuyTravelShopGoods {
    required uint32 goods_id = 1;
}

message S2C_BuyTravelShopGoods {
    required uint32 ret = 1;
    optional uint32 goods_id = 2;
}

message C2S_ExchangeTravelShopMoney {
    required uint32 exchange_id = 1;
    required uint32 exchange_count = 2;
}

message S2C_ExchangeTravelShopMoney {
    required uint32 ret = 1;
}

//发送弹幕
message C2S_SendSubtitle {
    required uint32 pool_id = 1; //弹幕池id
    required string subtitle = 2; //弹幕内容
}

//发送弹幕回应
message S2C_SendSubtitle {
    required uint32 pool_id = 1; //弹幕池id
    required uint32 ret = 2;
}

//点击弹幕，无回应
message C2S_ClickSubtitle {
    required uint32 pool_id = 1; //弹幕池id
}

//请求弹幕
message C2S_GetSubtitle {
    required uint32 pool_id = 1; //弹幕池id
    required uint32 ask_num = 2; //请求数目
}

message ClientSubtitle {
    required string subtitle = 1; //弹幕内容
    required uint32 type = 2; //0表示玩家弹幕，其他待定
    required uint64 scene_id = 3; //弹幕来源scene服务器id
}

//请求弹幕回应
message S2C_GetSubtitle {
    required uint32 pool_id = 1; //弹幕池id
    repeated ClientSubtitle titles = 2; //弹幕内容
}

message C2S_GetRedPacket {
}

message S2C_GetRedPacket {
    required uint32 ret = 1;
    required uint64 user_id = 2; //触发红包的玩家id(为0表示没有红包可领取)
}

message C2S_FetchRedPacket {
    required uint64 user_id = 1;
}

message S2C_FetchRedPacket {
    required uint32 ret = 1;
    required uint32 gold = 2; //领取成功时获得的元宝
    required bool fetch_over = 3; //是否达到领取上限
}

//拉取跨服玩家阵容
message C2S_GetCrossBattleTeam {
    required uint64 scene_id = 1; //跨服sceneid
    required uint64 user_id = 2; //跨服userid
    optional uint32 timed_out_handle = 3; //客户端不用理会该字段，只是服务器需要
    optional string user_name = 4;
}

//拉取跨服玩家阵容回应
message S2C_GetCrossBattleTeam {
    required uint32 ret = 1; //拉取回应
    required uint64 scene_id = 2; //同上
    required uint64 user_id = 3; //同上
    optional BattleUser team_info = 4; //阵容信息
    optional uint32 timed_out_handle = 5; //客户端不用理会该字段，只是服务器需要
}

//镖车状态
enum BiaoCheState {
    Idle = 0; //空闲
    Build = 1; //镖车已建立
    Ship = 2; //镖车运送中
    Over = 3; //镖车运送结束，待领取
}

//获取自己的镖车信息请求
message C2S_GetMyBiaocheInfo {

}

//获取自己的镖车信息回应
message S2C_GetMyBiaocheInfo {
    required uint32 rob_num = 1; //已劫镖次数
    required uint32 ship_num = 2; //已运送次数
    required uint32 help_num = 3; //帮助好友护镖次数
    required uint32 last_rob_time = 4; //上次劫镖时间戳(客户端自行决定是否要显示剩余冷却时间)
    required uint32 can_refresh_num = 5; //当前可刷新镖车次数
    required uint32 last_refresh_time = 6; //上次刷新刷新次数时间
    required uint32 upgrade_num = 7; //提升镖车品质总次数
    required uint32 state = 8; //镖车状态
    required uint32 quality = 9; //镖车品质
    repeated uint32 profit = 10; //预期收益
    required uint32 ship_time = 11; //运镖开始时间戳(客户端计算镖车剩余时间)
    required uint32 robbed_num = 12; //被抢次数
    required uint32 helped_num = 13; //被护镖次数
}

//建立镖车请求
message C2S_BuildBiaoChe {

}

//建立镖车回应
message S2C_BuildBiaoChe {
    required uint32 ret = 1;
}

//升级镖车请求
message C2S_UpgradeBiaoChe {

}

//升级镖车回应
message S2C_UpgradeBiaoChe {
    required uint32 ret = 1;
}

//运送镖车请求
message C2S_ShipBiaoChe {
    required uint64 friend_id = 1; //护镖人id，自己或好友id
}

//运送镖车回应
message S2C_ShipBiaoChe {
    required uint32 ret = 1;
}

//正在护送的镖车信息
message ShippingBiaoChe {
    required uint64 scene_id = 1; //镖车所属sceneid
    required string scene_name = 2; //scene服务器名
    required uint64 owner_id = 3; //镖车所属玩家id
    required uint32 quality = 4; //镖车品质
    required uint32 level = 5; //镖车主人等级
    required string user_name = 6; //镖车主人名
    required uint64 friend_id = 7; //护镖人id(可能是玩家自己或玩家好友id)
    required uint64 fight_power = 8; //护镖人战斗力
    required uint64 friend_scene_id = 9; //护镖人所属sceneid
    required uint32 ship_time = 10; //运镖起始时间
}

//获取镖车列表请求
message C2S_GetBiaoCheList {

}

//获取镖车列表回应
message S2C_GetBiaoCheList {
    required uint32 ret = 1;
    repeated ShippingBiaoChe biao = 2;
}

//劫镖请求
message C2S_RobBiaoChe {
    required uint64 owner_id = 1; //镖车所属玩家id
}

//劫镖回应
message S2C_RobBiaoChe {
    required uint32 ret = 1;
    optional BattleReport report = 2; //战报
    repeated Award awards = 3; //翻牌奖励，如果有第一个物品即为奖励，其他两个只是显示
    repeated uint32 profit = 4; //收益
}

//领取镖车奖励请求
message C2S_FetchBiaoCheReward {

}

//领取镖车奖励回应
message S2C_FetchBiaoCheReward {
    required uint32 ret = 1;
    required uint32 extra_gold = 2; //额外元宝
}

//立刻完成运镖请求
message C2S_FinishShipBiao {

}

//立刻完成运镖回应
message S2C_FinishShipBiao {
    required uint32 ret = 1;
}

//消除劫镖冷却时间请求
message C2S_RemoveRobCoolTime {

}

//消除劫镖冷却时间回应
message S2C_RemoveRobCoolTime {
    required uint32 ret = 1;
}

//获取好友剩余帮助运镖次数请求
message C2S_GetFriendHelpNum {
    repeated uint64 friend_ids = 1;
}

//好友剩余帮助次数
message FriendHelpNum {
    required uint64 friend_id = 1;
    required uint32 left_help_num = 2;
}

//获取好友剩余帮助运镖次数回应
message S2C_GetFriendHelpNum {
    repeated FriendHelpNum help_nums = 1;
}

//刷新镖车列表
message C2S_RefreshBiaoCheList {

}

//刷新镖车列表
message S2C_RefreshBiaoCheList {
    required uint32 ret = 1;
    repeated ShippingBiaoChe biao = 2;
}

//镖车战报类型
enum BiaoCheReport {
    RobSuc = 0; //抢劫成功
    RobFail = 1; //抢劫失败
    RobedSuc = 2; //被抢成功
    RobedFail = 3; //被抢失败
}

//镖车战报内容
message BiaoCheBattleReport {
    required uint32 report_type = 1;
    required uint64 report_id = 2;
    optional uint32 base_id = 3;
    optional uint32 level = 4;
    optional string name = 5;
    repeated uint32 profit = 6;
}


message S2C_Notify {
    required uint32 id = 1; //模板ID
    required string name = 2; //玩家昵称
    required uint32 base_id = 3; //主角ID
    repeated uint32 args = 4; //模板参数

}


message Mail {
    required uint64 id = 1; //邮件全局id
    required uint64 sender_id = 2; //发送方
    required uint32 mid = 3; //邮件模板id
    required uint32 time = 4; //邮件时间戳
    repeated KvPair mail_contents = 5; //邮件内容
    repeated KvPair mail_title = 6; //邮件标题
    repeated KvPair mail_name = 7; //邮件发送者
    repeated Award awards = 8; //邮件奖励
    optional bool is_deal = 9; //是否处理
}


message SimpleMail {
    required uint64 id = 1; //邮件全局id
    required uint32 mid = 2; //邮件模板id
    optional bool is_deal = 3; //是否处理
}

message KvPair {
    required string key = 1; //key
    required string value = 2; //value
}

//获取邮件详细信息
message C2S_GetMail {
    repeated uint64 ids = 1; //邮件的自增id
}

message S2C_GetMail {
    required uint32 ret = 1;
    repeated Mail mails = 2;
}

//给玩家发送邮件
message C2S_Mail {
    required uint64 uid = 1; //收件方的uid
    required string content = 2; //邮件内容
    optional uint64 sid = 3; //服务器id, 本服不填或为0
    //optional uint64 from_uid = 4;//这个前端不要传
    optional string from_name = 5; //这个前端不要传
    optional uint32 from_base_id = 6; //这个前端不要传
}

message S2C_Mail {
    required uint32 ret = 1; //返回结果
}

//推送给前端简单邮件列表
message S2C_SendSimpleMail {
    repeated SimpleMail mails = 1;
    optional uint64 last_mail_id = 2; //上次看到的邮件id
}
//玩家获得新邮件后端推送过来
message S2C_AddSimpleMail {
    repeated SimpleMail mails = 1;
}

//领取领奖邮件 或者查看普通邮件
message C2S_ProcessMail {
    repeated uint64 id = 1; //邮件全局id
}

message S2C_ProcessMail {
    required uint32 ret = 1;
    repeated uint64 id = 2; //成功的id
    optional bool del = 3; //是否删除掉
    repeated Award awards = 4; //所有奖励
}

//删除邮件
message C2S_DelMail {
    required uint64 id = 1; //
}

message S2C_DelMail {
    required uint32 ret = 1;
    required uint64 id = 2;
}

//好友
message Friend {
    required uint64 id = 1;
    required string name = 2;
    required uint32 level = 3;
    required uint32 vip = 4;
    required uint64 power = 5; //戰力
    required uint32 online = 6; //離線時間  0 表示在線  >0 需前端需計算時間差
    optional bool present = 7; //是否可贈送玩家精力
    optional bool getpresent = 8; //是否可領取玩家贈送的精力
    optional uint32 base_id = 9;
    optional string guild_name = 10; //公會名稱
    optional uint32 friend_count = 11; //好友數量
    optional uint32 rank_lv = 12; //突破等级
    optional uint32 avatar = 13; //变身卡
}

//好友专用simpleUser by hsn
message FriendSimpleUser {
    optional SimpleUser simple_user = 1; //好友信息
    optional uint32 friendship_val = 2; //友情值
    optional uint32 friendship_daily_count = 3; //每日单对单次数
}

message SimpleFriend {
    required uint64 id = 1;
    optional bool present = 2; //是否可贈送玩家精力
    optional bool getpresent = 3; //是否可領取玩家贈送的精力
    optional FriendSimpleUser simple_user = 4; //好友信息
}

//好友列表
message C2S_GetFriendList {
}

message S2C_GetFriendList {
    repeated SimpleFriend friend = 1; //好友
    repeated SimpleFriend blacklist = 2; //黑名單
    required uint32 get_present_num = 3; //已領取精力次數
    optional uint32 ignore = 4; //大于0，前端忽略此包
}

//好友请求列表
message C2S_GetFriendReqList {
}

message S2C_GetFriendReqList {
    repeated SimpleFriend friend = 1;
}

//添加好友
message C2S_AddFriend {
    required string name = 1; //添加玩家的昵称
    required uint32 friend_type = 2; //好友或者黑名单
    optional uint64 sid = 3;
}

message S2C_AddFriend {
    required uint32 ret = 1;
    optional uint32 friend_type = 2; //好友或者黑名单
    optional uint64 uid = 3; //玩家ID
    optional uint64 sid = 4;
}

//刪除好友
message C2S_DelFriend {
    required uint64 id = 1; //好友UID
    required uint32 friend_type = 2; //好友類型 1 好友 2 黑名單
}

message S2C_DelFriend {
    required uint32 ret = 1;
    optional uint64 id = 2;
    optional uint32 friend_type = 3;
}

//接受或者拒絕好友請求
message C2S_ConfirmAddFriend {
    required uint64 id = 1; //好友ID
    required bool accept = 2; //是否接受好友 true 同意  false 拒絕
    optional bool is_all = 3; //一键 true 是 false 否
}

message S2C_ConfirmAddFriend {
    required uint32 ret = 1;
    optional bool accept = 2; //是否接受好友 true 同意  false 拒絕
    optional uint64 id = 3;
    optional bool is_all = 4; //
}

message S2C_AddFriendRespond {
}

message S2C_DelFriendRespond {
}

//贈送好友禮物
message C2S_FriendPresent {
    required uint64 id = 1; //好友ID
}

message S2C_FriendPresent {
    required uint32 ret = 1;
    required uint64 id = 2; // 好友ID
}

//領取好友禮物
message C2S_GetFriendPresent {
    required uint64 id = 1; // 好友ID  0 表示一键领取 > 0 领取某个玩家
}

message S2C_GetFriendPresent {
    required uint32 ret = 1;
    repeated uint64 uid = 2; //一键领取情况下 实际领取哪些玩家的体力
}

message BattleKnightAttrs {
    required uint32 indicate = 1;
    repeated IntMap attrs = 2;
}

//好友切磋
message C2S_PkFriend {
    required uint64 id = 1; //好友ID
    repeated BattleKnightAttrs my_attrs = 2;//攻方属性 测试环境生效
    repeated BattleKnightAttrs friend_attrs = 3;//守方属性 测试环境生效
}

message S2C_PkFriend {
    required uint32 ret = 1;
    optional BattleReport report = 2; //戰報
    optional uint32 last_fight_time = 3; //上次挑战时间
}

//推薦好友
message C2S_RecommandFriend {
    required bool init = 1;
}

message S2C_RecommandFriend {
    required uint32 ret = 1;
    repeated SimpleFriend friends = 2; //推薦好友列表
}

//获取分组服务器ID
message C2S_GetCrossFriendSid {
}

message S2C_GetCrossFriendSid {
    required uint32 ret = 1;
    repeated uint64 sid = 2;
}

message C2S_PkCrossUser {
    required uint64 uid = 1;
    required uint64 sid = 2;
}

message S2C_PkCrossUser {
    required uint32 ret = 1;
    optional BattleReport report = 2;
    optional uint32 last_fitht_time = 3;
}

message ArenaToChallengeUser {
    required uint64 user_id = 1; //玩家ID
    required uint32 rank = 2; //排名
    repeated uint32 knights = 3;
    optional SimpleUser simple_user = 4;
}

//競技場-排行榜
message C2S_GetArenaTopInfo {
    optional bool flag = 1; //false 综合排行榜显示 true 竞技场内部显示
    optional uint32 idx = 2;
}

message S2C_GetArenaTopInfo {
    required uint32 ret = 1;
    repeated ArenaToChallengeUser user_list = 2;
    optional uint32 idx = 3;
    optional bool flag = 4;
    optional uint32 user_arena_rank = 5; //综合排行榜需要显示 玩家自己排名
}

//競技場-入口信息
message C2S_GetArenaInfo {

}

message S2C_GetArenaInfo {
    required uint32 ret = 1;
    optional uint64 user_id = 2; //玩家ID
    optional uint32 rank = 3; //当前排名
    optional uint32 max_rank = 4; //历史最高排名
    optional uint32 prestige = 5; //声望
    repeated ArenaToChallengeUser to_challenge_list = 6; //对手列表
}

//競技場-玩家信息
message C2S_GetArenaUserInfo {
    required uint64 user_id = 1;
}

message S2C_GetArenaUserInfo {
    required uint32 ret = 1;
    optional BattleUser user = 2;
}

message ArenaBreakRecord {
    required uint32 old_rank = 1;
    required uint32 new_rank = 2;
    repeated Award break_rewards = 3;
}

message AwardList {
    repeated Award rewards = 1;
}

//競技場-挑戰
message C2S_ChallengeArena {
    required uint32 rank = 1;
    required uint32 num = 2; // 挑战次数
    required bool hotkey = 3; //是否一键 true 是 false 否
}

message S2C_ChallengeArena {
    required uint32 ret = 1;
    repeated ArenaFight arena_fight = 2;
    optional uint32 wins = 3; //赢的次数
    optional uint32 items = 4; //使用的丹
}

message ArenaFight {
    optional BattleReport battle_report = 1; //戰報(只会在战一次的时候传)
    repeated Award rewards = 2; //戰鬥獎勵
    optional ArenaBreakRecord break_record = 3; //刷新最新排名
    repeated Award turnover_rewards = 4;
    repeated Award extra_rewards = 5; //戰鬥額外獎勵
    optional uint32 exp = 6; //获取的主角经验(只会在战一次的时候传)
    optional bool result = 7; //true- 赢 false- 输 (战5次时用)
    repeated AddAward add_awards = 8; //随机额外奖励
}

//竞技场战况
message ArenaBattleResult {
    required uint32 win = 1; //几胜
    required uint32 lose = 2; //几负
    required ArenaToChallengeUser user = 3; //对手的信息
    required uint32 timenano = 4;
}

//获取全部战况
message C2S_GetArenaBattleResult {
}

message S2C_GetArenaBattleResult {
    required uint32 ret = 1;
    repeated ArenaBattleResult battle_results = 2;
}

//競技場戰報
message ArenaReport {
    required uint32 change_rank = 1; //改變排名(相對于玩家自己)
    required uint64 report_id = 2; //戰報ID
    optional uint32 base_id = 3; //頭像
    optional uint32 level = 4; //等級
    optional uint32 fight_time = 5; //戰鬥時間差
    optional string name = 6; //敵方暱稱
    optional uint32 rank_lv = 7; //突破等级
    required uint64 uid = 8; //玩家id
    required bool win = 9; //true 赢 false 输
}

message C2S_Test {
    optional uint64 id = 1;
    optional string str = 2;
}

message S2C_Test {
    optional uint64 id = 1;
    optional uint64 id2 = 2;
    optional BattleTeamReport report = 3;
}


message Vip {
    required uint32 level = 1; //vip 等级
    required uint32 exp = 2; //总经验
}

message C2S_GetVip {
}

message S2C_GetVip {
    required uint32 ret = 1;
    required Vip vip = 2;
    //optional uint32 level = 2;  //vip 等级
    //optional uint32 exp = 3;    //总经验
}

message IntKvPair {
    required uint32 key = 1;
    required uint32 value = 2;
}

message Tower {
    required uint32 layer = 1; //通关的层数
    optional uint32 max_layer = 2; //历史通过的最高层
    optional uint32 max_stage = 3; //历史通过最大关卡
    required uint32 now_layer = 4; //当前正在挑战的层数 没有开始挑战为0 主要以这个为判断
    required uint32 now_stage = 5; //当前层数的第几关
    required uint32 now_star = 6; //当前获得的星数
    required uint32 now_left_star = 7; //当前剩余的星数
    repeated uint32 buffs = 8; //当前buff加成
    repeated IntMap select_buffs = 9; //玩家可选的buff id 不为空要弹出来 key 为buff id value 为0 和1 0没有为选过 1 被选过
    required uint32 stage_box = 10; //当前关卡宝箱是否开启
    required uint32 open_count = 11; //当前隐藏宝箱的开启次数

    repeated uint32 layer_stars = 12; //每一层对应的历史最大星数
    repeated uint32 perfect_stage = 13; //每一层可扫荡的最大关卡
    repeated uint32 pass_reward = 14; //每层通关奖励领取情况 0-> 未领取  1-> 已领取
    //optional bool   free = 15; //最高层是否有免费次数  true->有免费次数 false代表没有免费次数
    required CommonCount common_count = 16; //次数
    repeated IntMap shop_buy = 17; //商店是否购买 0 没有购买 1 已经购买
}

message MapSlice {
    required uint32 id = 1; //map id
    repeated uint32 ids = 2; //slice ids
}

message IntMap {
    required uint32 Key = 1; //map id
    required uint32 Value = 2; //map value
}

message Int64Map {
    required uint32 Key = 1; //map id
    required uint64 Value = 2; //map value
}

message IntIntMap {
    required uint32 Key = 1; //map id
    repeated IntMap Values = 2; //map map
}

//获取关卡数据
message C2S_GetTower {

}
message S2C_GetTower {
    required Tower tower = 1;
}

//进入锁妖塔layer
message C2S_EnterLayer {
    required uint32 layer = 1;
}

message S2C_EnterLayer {
    required uint32 ret = 1;
    required uint32 layer = 2;
    optional Tower tower = 3;
}

//购买次数
message C2S_BuyTowerCount {
}
message S2C_BuyTowerCount {
    required uint32 ret = 1;
    optional CommonCount common_count = 2;
}

//挑战关卡
message C2S_ExecuteTower {
    optional uint32 star = 1; //挑战的星数
}

message S2C_ExecuteTower {
    required uint32 ret = 1;
    required uint32 layer = 2; //挑战的层数
    optional uint32 stage = 3; //挑战的关卡
    optional uint32 type = 4; //关卡类型 1 战斗 2 宝箱 3 加buff
    optional BattleReport battle_report = 5; //战报
    optional uint32 star = 6; //获得的星数
    optional uint32 money = 7; //奖励的白银
    optional uint32 tower_resource = 8; //奖励的玉石
    repeated Award box_awards = 9; //宝箱的奖励
    repeated uint32 buffs = 10; //buff加成 3个选一个
    repeated Award total_award = 11; //当前累积的奖励
    optional Tower tower = 12; //通关或者挑战失败的时候传给前端
    repeated AddAward add_awards = 13; //暴击奖励
    optional uint32 first_award = 14; //首通奖励
    repeated Award activity_awards = 15; //活动的奖励
}

//扫荡关卡
message C2S_FastExecuteTower {
}

message S2C_FastExecuteTower {
    required uint32 ret = 1;
    required uint32 layer = 2; //扫荡的层数
    optional uint32 stage = 3; //扫荡的关卡
    optional uint32 money = 4; //奖励的白银
    optional uint32 tower_resource = 5; //奖励的玉石
    repeated Award box_awards = 6; //关卡宝箱奖励
    repeated uint32 buffs = 7; //三个可选buff
    repeated Award total_award = 8; //累积奖励
    optional Tower tower = 9; //通关显示
    repeated AddAward add_awards = 10; //暴击奖励
    repeated Award activity_awards = 11; //活动的奖励
}

//选择buff
message C2S_ChooseTowerBuff {
    required uint32 buff_id = 1; //选中的buff id
}

message S2C_ChooseTowerBuff {
    required uint32 ret = 1;
    optional uint32 buff_id = 2; //选中的buff id
    optional uint32 left_star = 3; //剩余星数
}

//开启锁妖塔宝箱
message C2S_OpenTowerBox {
    required uint32 count = 1; //1->开一次； 5->开5次
}

message S2C_OpenTowerBox {
    required uint32 ret = 1;
    repeated Award awards = 2; //宝箱开出的奖励
    optional uint32 open_count = 3; //已经开的次数
    optional uint32 crit = 4; //暴击系数
}

//从商店购买
message C2S_BuyTowerShop {
    required uint32 buy_id = 1;
}

message S2C_BuyTowerShop {
    required uint32 ret = 1;
    optional uint32 buy_id = 2;
}

//查看每日排行榜
message C2S_GetTowerDailyRank {

}

//查看每日排行榜
message TowerDailyRank {
    required uint64 user_id = 1;
    optional uint32 layer = 2;
    optional uint32 stage = 3;
    required uint32 rank = 4;
    optional SimpleUser simple_user = 5;
}

message S2C_GetTowerDailyRank {
    required uint32 ret = 1;
    repeated TowerDailyRank tower_daily_rank = 2;
    optional uint32 in_rank = 3; //玩家排名 未上榜为0
    optional uint32 layer = 4;
    optional uint32 stage = 5;
}

//折扣商店信息
message S2C_SendTowerShop {
    repeated IntMap shop_buy = 1; //折扣商店的购买情况
}

//放弃挑战该层
message C2S_GiveUpTower {

}
message S2C_GiveUpTower {
    required uint32 ret = 1;
    optional Tower tower = 2;
}


message C2S_ReceivePassReward {
    required uint32 layer = 1;
}

message S2C_ReceivePassReward {
    required uint32 ret = 1;
    optional uint32 layer = 2;
    repeated Award pass_award = 3;
}

//圍剿群妖--入口
message C2S_EnterDevil {

}

message S2C_EnterDevil {
    required uint32 ret = 1;
    optional uint32 exploit_rank = 2; //玩家功勛排行 0 未在排行榜  >0 排行榜中的排名
    optional uint32 max_harm_rank = 3; //玩家單次最大傷害排行  0 未在排行榜  >0 排行榜中的排名
    optional uint64 exploit = 4; //累積功勛
    optional uint64 max_harm = 5; //单次最大伤害
}

//圍剿群妖--排行榜
message DevilRankInfo {
    required uint64 uid = 1; //玩家ID
    required uint64 value = 2; //伤害或者贡献
    optional SimpleUser simple_user = 3;
}

message C2S_GetDevilRank {
}

message S2C_GetDevilRank {
    required uint32 ret = 1;
    repeated DevilRankInfo exploit_rank = 2;
    repeated DevilRankInfo max_harm_rank = 3;
    optional uint32 my_exploit_rank = 4;
    optional uint32 my_max_harm_rank = 5;
    optional uint64 devil_exploit = 6;
}

//圍剿群妖--挑戰
message C2S_AttackDevil {
    required uint64 uid = 1; //玩家ID
    required uint32 mode = 2; //挑戰模式 1 普通攻擊 2 全力一擊
    optional uint32 attack_type = 3; //挑戰模式 0 正常挑战 1 扫荡
}

message S2C_AttackDevil {
    required uint32 ret = 1;
    optional BattleReport report = 2; //戰報
    optional uint64 exploit = 3; //功勛
    optional uint64 harm = 4; //單次傷害
    optional bool public = 5; //是否共享
    optional bool new_record = 6; //傷害是否破記錄
    optional uint32 mode = 7; //挑戰模式
    repeated Award awards = 8; //獎勵
    optional uint32 status = 9; // 当前BOSS状态 0 未击杀 1 击杀
    optional uint64 uid = 10; //玩家ID
    repeated AddAward add_awards = 11; //额外奖励
    optional uint32 old_exploit_rank = 12; //
    optional uint32 old_harm_rank = 13; //
    optional uint32 exploit_rank = 14; //
    optional uint32 harm_rank = 15; //
    optional uint32 attack_type = 16;
}

//圍剿群妖-共享BOSS
message C2S_PublicDevil {

}

message S2C_PublicDevil {
    required uint32 ret = 1;
}

message S2C_DevilRecord {
    required string name = 1; //好友名称
    required uint32 quality = 2; //好友主角品质
    required uint32 harm = 3; //好友攻击的伤害
}


message Devil {
    optional uint32 id = 1;
    optional uint64 hp = 2;
    optional uint64 user_id = 3;
    optional uint32 level = 4;
    optional uint64 max_hp = 5;
    optional string name = 6;
    optional uint32 end_time = 7;
    optional bool public = 8;
    optional uint32 base_id = 9;
}

message S2C_GetDevil {
    required Devil devil = 1;
}

//围剿群妖-刷新BOSS列表
message C2S_RefreshDevil {

}

message S2C_RefreshDevil {
    required uint32 ret = 1;
    repeated Devil devils = 2;
}

message C2S_EnterDailyDungeonUI {
}

message DailyDungeon {
    required uint32 type = 1;
    required uint32 today_rank = 2; //今日排名
    required uint32 remain_count = 3; //剩余挑战次数
    optional uint32 last_battle_time = 4; //上次战斗时间（用于计算CD时间）
    optional uint32 first_enter_max_level = 5; //最高关卡ID（第一次进入）
    optional uint32 max_level = 6; //最高通关关卡ID
}

message S2C_EnterDailyDungeonUI {
    required uint32 ret = 1;
    repeated DailyDungeon dds = 2;
    optional uint32 level = 3; //今日初始等级
}

message C2S_FirstEnterDailyDungeon {
    required uint32 id = 1;
}

message S2C_FirstEnterDailyDungeon {
    required uint32 ret = 1;
    required uint32 id = 2;
}

message C2S_ExecuteDailyDungeon {
    required uint32 id = 1; //副本关卡ID
    optional uint32 wave = 2; //第几波挑战
}

message S2C_ExecuteDailyDungeon {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional uint32 wave = 3;
    optional uint32 next_wave = 4; //下次波数 0则结束
    optional bool is_pass = 5; //是否通关
    optional BattleReport battle_report = 6; //战报
    repeated Award awards = 7; //奖励
    optional uint32 remain_count = 8; //剩余挑战次数
    optional uint32 rank_score = 9; //排名积分
    optional uint32 before_today_rank = 10; //挑战前 今日排名
    optional uint32 after_today_rank = 11; //挑战后 今日排名
    optional uint32 before_history_rank = 12; //挑战前 历史排名
    optional uint32 after_history_rank = 13; //挑战后 历史排名
}

message C2S_GetDailyDungeonRank {
    required uint32 dtype = 1; //副本类型
    required uint32 rtype = 2; //1:今日排行榜 2:历史排行榜
}

message DailyDungeonScoreRank {
    required uint32 rank = 1;
    required uint64 uid = 2;
    required string name = 3;
    required uint32 level = 4;
    required uint32 score = 5;
    required uint32 knight_id = 6;
    required uint32 rank_lv = 7;
}

message S2C_GetDailyDungeonRank {
    required uint32 ret = 1;
    required uint32 dtype = 2;
    required uint32 rtype = 3;
    repeated DailyDungeonScoreRank ranks = 4;
    optional uint32 my_rank = 5; //0 未上榜 非0 即排名
    optional uint32 my_score = 6; //积分
}

message C2S_EnterMazeUI {
}

message Maze {
    required uint32 id = 1;
    repeated Track tracks = 2; //已翻牌的格子
    repeated Award awards = 3; //已领取奖励
    required bool is_open_hyjj = 4; //是否开启火眼金睛
    required uint32 action_count = 5; //移动次数(行动力)
    required uint32 purchase_acount = 6; //购买行动力次数
}

message Track {
    required uint32 x = 1; //X坐标
    required uint32 y = 2; //Y坐标
    required bool is_draw = 3; //是否翻牌
    required uint32 info_id = 4; //事件ID
    required uint32 do_count = 5; //格子事件处理次数，宝箱多次，其他最多一次
    optional bool is_quit = 6; //只针对宝箱，其他事件不处理关注此字段
}

message S2C_EnterMazeUI {
    required uint32 ret = 1;
    optional bool is_first = 2; //第一次进入玩法
    optional uint32 current_level_id = 3; //当前挑战级别
    optional uint32 purchase_ecount = 4; //购买的探索次数
    optional uint32 explore_count = 5; //可探索次数
    optional bool is_explore = 6; //是否在探索中
    optional Maze maze = 7; //迷宫信息
}

message C2S_GetMazeInfo {
    required uint32 id = 1;
}

message S2C_GetMazeInfo {
    required uint32 ret = 1;
    optional uint32 explore_count = 2;
    optional Maze maze = 3;
}

//开火眼金睛
message C2S_ExecuteMazeOpenHyjj {
}

message S2C_ExecuteMazeOpenHyjj {
    required uint32 ret = 1;
    optional Maze maze = 2;
}

enum MAZE_TASK {
    MAZE_DRAW = 1; //翻格子牌
    MAZE_DO_EVENT = 2; //处理格子的事件
}

message C2S_ExecuteMazeTask {
    required uint32 task_type = 1; //对应MAZE_TASK类型
    required uint32 pos_x = 2; //请求点击位置的X坐标
    required uint32 pos_y = 3; //请求点击位置的Y坐标
}

message S2C_ExecuteMazeTask {
    required uint32 ret = 1;
    optional uint32 task_type = 2; //对应MAZE_TASK类型
    optional bool is_explore = 3; //是否在探索中
    optional uint32 action_count = 4; //行动力数
    optional Track track = 5; //格子数据

    //战斗类型才有的返回
    optional BattleReport battle_report = 6;
    repeated Award awards = 7; //打赢BOSS后的掉落
    repeated Track tracks = 8; //打赢BOSS后显示未打开的格子
}

message C2S_PurchaseMazeCount {
}

message S2C_PurchaseMazeCount {
    required uint32 ret = 1;
    optional uint32 explore_count = 2; //可探索次数
    optional uint32 purchase_ecount = 3; //购买探索次数
}

message C2S_PurchaseActionCount {
}

message S2C_PurchaseActionCount {
    required uint32 ret = 1;
    optional uint32 action_count = 2;
    optional uint32 purchase_acount = 3;
}

message C2S_QuitBoxEvent {
    required uint32 x = 1;
    required uint32 y = 2;
}

message S2C_QuitBoxEvent {
    required uint32 ret = 1;
    required uint32 x = 2;
    required uint32 y = 3;
    optional Track track = 4; //更新宝箱事件的数据
}

message C2S_QuitMaze {
}

message S2C_QuitMaze {
    required uint32 ret = 1;
    optional uint32 current_level_id = 2;
    repeated Award awards = 3;
}

//通用战报接口
message C2S_CommonGetReport {
    required uint32 report_type = 1; //战报类型 1- 竞技场 2- 镖车
}

message S2C_CommonGetReport {
    required uint32 ret = 1;
    required uint32 report_type = 2; //战报类型
    repeated ArenaReport arena_reports = 3; //竞技场战报
    repeated BiaoCheBattleReport biaoche_reports = 4; //镖车战报
}

message C2S_EnterRichListUI {
}

message S2C_EnterRichListUI {
    required uint32 ret = 1;
    optional uint32 remain_count = 2; //剩余次数
    optional Rich rich = 3; //关卡数据
}

message C2S_EnterRichUI {
    required uint32 rich_id = 1;
}

message Rich {
    required uint32 rich_id = 1;
    required uint32 position = 2; //当前位置
    repeated IntMap npc_event = 3; //NPC事件, k: 地图位置，v: NPC事件ID
    repeated IntMap npc_count = 4; //已触发NPC事件的剩余次数, k: NPC事件类型，v: 剩余次数
    repeated uint32 poses = 5; //踩过的位置集合
    required uint32 boss_fcount = 6; //剩余BOSS挑战失败次数
    repeated uint32 batt_buffs = 7; //战斗BUFF
    required uint32 res_buff = 8; //资源BUFF
    required bool is_end = 9; //玩法是否结束
    optional uint32 shop_id = 10; //商店ID
}

message S2C_EnterRichUI {
    required uint32 ret = 1;
    required uint32 rich_id = 2;
    optional Rich rich = 3;
}

message C2S_PlayRichGame {
    required uint32 rich_id = 1;
    required uint32 position = 2; //当前位置
    required uint32 play_type = 3; //1:骰子 2:色子
    optional uint32 dice = 4; //当play_type=2时,dice代表玩家选择的点数
}

enum RICH_EVENT {
    //基础事件                       event                  value         size
    TYPE_FORWARD_MOVE = 1; //向前移动             位置          空
    TYPE_BACKWARD_MOVE = 2; //向后移动             位置          空
    TYPE_CAI_POS = 3; //踩格子               位置          空

    //固定事件
    FIX_TYPE_PLAY_DICE = 4; //置骰子               点数          空
    FIX_TYPE_PLAY_RUYI_DICE = 5; //置色子               点数          空
    FIX_TYPE_AWARD_RESOURCE = 6; //得到资源             INFOID        空
    FIX_TYPE_COME_BOSS = 7; //遇到BOSS             INFOID        空
    FIX_TYPE_COME_RAND_EVENT = 8; //遇到随机事件         INFOID        空

    //随机事件
    RAND_TYPE_GET_RAND_EVENT = 9; //得到随机事件         INFOID        空
    RAND_TYPE_AWARD_RESOURCE = 10; //获得资源             INFOID        空
    RAND_TYPE_RES_BUFF = 11; //下次获得资源的系数   INFOID        空
    RAND_TYPE_BAT_BUFF = 12; //战斗BUFF             INFOID        空

    //NPC事件
    NPC_TYPE_SHOP = 13; //商人                 SHOPID        剩余次数
    NPC_TYPE_ADD_DICE = 14; //下3次投掷骰子数为6   TYPE          剩余次数
    NPC_TYPE_DEC_DICE = 15; //下3次投掷骰子数为1-3 TYPE          剩余次数
    NPC_TYPE_BAT_BUFF = 16; //下1次战斗BUFF        TYPE          剩余次数
    NPC_TYPE_RES_BUFF = 17; //下3次获得资源翻3倍   TYPE          剩余次数
    NPC_TYPE_RAND_BACK = 18; //后退任意步长         TYPE          位置

    //生成事件 非原生事件
    PRO_TYPE_DEC_FBOSS_COUNT = 19; //减少BOSS攻击次数     空            剩余次数
    PRO_TYPE_DEL_RAND_RES_BUFF = 20; //删除随机资源BUFF     空            空
    PRO_TYPE_DEC_NPC_BUFF = 21; //减少NPCBUFF          TYPE          剩余次数
    PRO_TYPE_DEL_NPC_BUFF = 22; //删除NPCBUFF          TYPE          空
    PRO_TYPE_GAME_OVER = 23; //玩法结束             关卡ID        失败(0) 胜利(1)
}

message RichEvent {
    required uint32 event = 1; //上文RICH_EVENT
    optional uint32 value = 2; //value
    optional uint32 size = 3; //size
    optional BattleReport battle = 4;
    repeated Award award = 5;
}

message S2C_PlayRichGame {
    required uint32 ret = 1;
    required uint32 rich_id = 2;
    repeated RichEvent events = 3;
    //	optional Rich rich = 3;
}

message C2S_GetRichRandEvent {
    required uint32 rich_id = 1;
    required uint32 position = 2;
}

message S2C_GetRichRandEvent {
    required uint32 ret = 1;
    required uint32 rich_id = 2;
    repeated RichEvent events = 3;
    //	optional Rich rich = 4;
}

message C2S_QuitRichGame {
    required uint32 rich_id = 1;
}

message S2C_QuitRichGame {
    required uint32 ret = 1;
    required uint32 rich_id = 2;
}

//聊天
message C2S_ChatRequest {
    required uint32 channel = 1; //频道 1-世界 2-私聊 3-军团 5-大战火焰山 6-大闹天宫
    required string content = 2; //内容
    optional string reciver = 3; //接收者(私聊用)
}

message S2C_ChatRequest {
    required uint32 ret = 1;
    optional uint32 channel = 2;
}

message S2C_Chat {
    required uint32 channel = 1; //频道
    required string sender = 2; //发送者昵称
    required uint64 sender_id = 3; //发送者id
    required uint32 base_id = 4; //主角base_id
    required uint32 rank_lv = 5; //主角突破等级
    required string content = 6; //聊天内容
    optional SimpleUser simple_user = 7; //发送者基础信息
}

//月光宝盒
//列表
message C2S_GetUserBible {
}

message S2C_GetUserBible {
    required uint32 ret = 1;
    repeated Bible got_bibles = 2;
}


message Bible {
    required uint32 id = 1;
    required uint32 reward_flag = 2; //1 未领取 2 已领取
}

//点亮宝珠
message C2S_ReadBible {
    required uint32 id = 1; //宝珠ID
}

message S2C_ReadBible {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award awards = 3; //奖励
}

//领取宝珠节点奖励
message C2S_BibleGetReward {
    required uint32 id = 1; //节点ID
    optional uint32 idx = 2; //奖励N选1的索引 从1开始
}

message S2C_BibleGetReward {
    required uint32 ret = 1;
    optional uint32 id = 2; //节点ID
    optional uint32 idx = 3; //奖励N选1的索引
    repeated Award awards = 4; //奖励
}

message Fairyland {
    required uint32 id = 1;
    required uint32 total_star = 2;
    required uint32 copper_box = 3; //0 -> 未领取 1-> 已领取
    required uint32 silver_box = 4;
    required uint32 gold_box = 5;
    repeated FairylandStage stages = 6;
    optional uint32 guard = 7; //0->未挑战成功   1-> 已挑战成功
}

message FairylandStage {
    required uint32 id = 1;
    required uint32 star_a = 2; //各星级的达成情况   0 -> 没达成  1-> 已达成
    required uint32 star_b = 3;
    required uint32 star_c = 4;
    required uint32 star = 5; //总星数
    required uint32 box = 6; //宝箱领取情况   0 -> 未领取 1-> 已领取
}

//获取仙界章节
message S2C_GetFairyland {
    required uint32 ret = 1;
    repeated Fairyland fairylands = 2;
    optional uint32 use_count = 3; // 使用的挑战次数
}

//获取仙界副本
message C2S_GetFairyland {

}

//挑战仙界关卡
message C2S_FairylandExecuteStage {
    required uint32 stage_id = 1;
    required uint32 type = 2; //3->关卡boss 4-> 仙界守卫
    optional uint32 wave_id = 3;
    optional bool is_fast = 4; //是否是一键扫荡 true 是
}

message S2C_FairylandExecuteStage {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    optional uint32 wave_id = 3;
    optional uint32 type = 4;
    optional uint32 stage_money = 5;
    optional uint32 stage_exp = 6;
    repeated Award awards = 7;
    optional uint32 soul_award = 8;
    optional BattleReport battle = 9; //战报
    optional uint32 next_wave_id = 10; //下一波monster的id
    optional uint32 star_a = 11; //星级a是否达成   1->达成 0->未达成
    optional uint32 star_b = 12;
    optional uint32 star_c = 13;
    repeated AddAward add_awards = 14; //暴击奖励
    optional bool is_fast = 15; //是否是一键扫荡 true
    optional bool is_win = 16; //是否胜利
}


message C2S_FairylandOpenStageBox {
    required uint32 stage_id = 1;
}

message S2C_FairylandOpenStageBox {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    repeated Award awards = 3;
}

//获取仙界排行榜
message C2S_GetFairylandRank {

}

message FairylandRank {
    required uint64 user_id = 1;
    required uint32 star = 2;
    required uint32 rank = 3;
    optional SimpleUser simple_user = 4;
}
message S2C_GetFairylandRank {
    required uint32 ret = 1;
    repeated FairylandRank ranks = 2;
    required uint32 star = 3; //玩家的星数
    optional uint32 self_rank = 4; //玩家的排名
}

//领取章节宝箱
message C2S_FairylandOpenChapterBox {
    required uint32 chapter_id = 1; //仙界章节
    required uint32 box_type = 2; //宝箱类型 1->铜宝箱 2->银宝箱 3->金宝箱
}

message S2C_FairylandOpenChapterBox {
    required uint32 ret = 1;
    optional uint32 chapter_id = 2;
    optional uint32 box_type = 3;
    repeated Award awards = 4;
}

//message C2S_GetDailyTaskUnAwardInfo {
//}

//message S2C_GetDailyTaskUnAwardInfo {
//	required uint32 ret = 1;
//	optional bool   have_unaward = 2;//存在未领取的奖励
//}

//拉取(所有)日常任务
message C2S_GetDailyTaskInfo {
}

message DailyTask {
    required uint32 type = 1; //任务类型,与daily_reward_info.xml的类型一致
    required uint64 value = 2; //对应类型的当前积累值
    repeated uint32 reward_id = 3; //已领取过的ID集合
}

message S2C_GetDailyTaskInfo {
    required uint32 ret = 1;
    optional uint32 level = 2; //重置时间点的玩家等级
    repeated DailyTask tasks = 3; //各模块日常任务数据
}

//领取日常任务奖励
message C2S_GetDailyTaskAward {
    required uint32 id = 1; //任务ID
}

message S2C_GetDailyTaskAward {
    required uint32 ret = 1;
    optional uint32 id = 2; //任务ID
    repeated Award awards = 3; //奖励
}

message S2C_UpdateDailyTaskInfo {
    repeated DailyTask tasks = 1; //有改变的日常任务信息
}

message C2S_GetDailyTaskAllAward {
    repeated uint32 id = 1;
}

message S2C_GetDailyTaskAllAward {
    required uint32 ret = 1;
    repeated uint32 id = 2; //任务ID
    repeated Award awards = 3; //奖励
}

//月卡
message C2S_UseMonthlyCard {
    required uint32 id = 1; //月卡ID
}

message S2C_UseMonthlyCard {
    required uint32 ret = 1;
    required uint32 id = 2;
}

//买月卡(暂时用这个接口)
message C2S_BuyMonthlyCard {
    required uint32 id = 1; //月卡ID
}

message S2C_BuyMonthlyCard {
    required uint32 ret = 1;
    optional uint32 id = 2;
}

//获取充值相关数据(包括月卡 是否首冲)
message C2S_GetRecharge {

}

message S2C_GetRecharge {
    required uint32 ret = 1;
    repeated MonthlyCard mc = 2; //月卡
    repeated string recharge_money = 3; //首冲的档位
    optional bool has_charge = 4; //是否有充值
    optional bool receive_first_charge = 5; //是否领过首冲的奖励
}

message S2C_RechargeNotice {
    required uint32 ret = 1; //
    required uint64 uid = 2; //玩家id
    required string order_id = 4; //订单号
    required uint32 gold = 5; //黄金数量
    required string product_id = 7; //商品编号
    required uint32 charge_time = 8; //充值时间
    optional uint32 recharge_type = 9; //充值类型
}


message MonthlyCard {
    required uint32 id = 1; //静态表ID
    required uint32 expire_days = 2; //剩余天数 0 无限
    required bool using_state = 3; //领取状态  true 可领取 false 不可领取
}

//某个玩法的次数
message CommonCount {
    required uint32 func_id = 1; //功能id
    required uint32 left_count = 2; //剩余次数
    required uint32 buy_count = 3; //购买次数
}

message C2S_BuyCommonCount {
    required uint32 func_id = 1; //vip 功能id
    optional uint32 buy_count = 2;//购买次数
}

message S2C_BuyCommonCount {
    required uint32 ret = 1;
    optional CommonCount common_count = 2;
}

message C2S_ExchangeCommonCount {
    required uint32 item_id = 1;
    required uint32 num = 2;
}

message S2C_ExchangeCommonCount {
    required uint32 ret = 1;
    optional CommonCount common_count = 2;
}

//开服基金
message C2S_BuyFundCoin {

}

message S2C_BuyFundCoin {
    required uint32 ret = 1;
}

message C2S_ReceiveFundCoin {
    required uint32 id = 1;
}

message S2C_ReceiveFundCoin {
    required uint32 ret = 1;
    required uint32 received_id = 2;
    repeated Award awards = 3;
}

message S2C_GetFundCoin {
    required uint32 ret = 1;
    required uint32 buy = 2; //是否购买
    repeated uint32 received_id = 3; //领取的id
    required uint32 total_num = 4; //购买的总人数
    required uint32 open_time = 5; //开服时间
}

message S2C_BroadCastBuyFundCoin {
    required uint32 ret = 1;
    required uint32 total_num = 2;
}

message CityEvent {
    required uint32 id = 1; //自增ID
    required uint32 time = 2; //发生时间
    required uint32 info_id = 3; //事件ID
    optional bool is_riot = 4; //是否已经镇压
    optional string fname = 5; //镇压好友名字
    optional uint32 is_double = 7; //是否双倍
}

message City {
    required uint32 city_id = 1; //城池ID
    optional uint32 base_id = 2; //巡逻将 BASEID
    repeated CityEvent events = 3; //事件
    optional uint32 patrol_start = 4; //巡逻开始时间
    optional uint32 remain_time = 5; //巡逻持续时间
    repeated Award awards = 6; //武将掉落
    optional uint32 level = 7; //等级
    optional uint32 tm = 8; //每个城的单独累计时间
}

message C2S_EnterCityListUI {
    required uint64 user_id = 1; //玩家UID 或者 好友UID
    required string user_name = 2; //玩家名字
}

message S2C_EnterCityListUI {
    required uint32 ret = 1;
    required uint64 user_id = 2;
    required string user_name = 3;
    required uint32 remain_assist_count = 4; //剩余协助次数
    repeated City citys = 5; //城池信息
    optional uint32 time_out = 6;
    optional uint64 from_sid = 7;
    optional uint64 from_uid = 8;
}

message C2S_PatrolCity {
    required uint32 city_id = 1;
    required uint64 knight_id = 2; //巡逻将ID
    required uint32 patrol_type = 3; //1:精力 2:元宝
    required uint32 patrol_value = 4; //1:30分钟获益一次 2:20分钟获益一次 3:10分钟获益一次
    required uint32 patrol_size = 5; //1:4小时 2:8小时 3:12小时
}

message S2C_PatrolCity {
    required uint32 ret = 1;
    required uint32 city_id = 2;
    optional City city = 3;
}

message C2S_AttackNewCity {
    required uint32 city_id = 1;
}

message S2C_AttackNewCity {
    required uint32 ret = 1;
    required uint32 city_id = 2;
    optional BattleReport battle_report = 3;
    repeated Award award = 4;
}

message C2S_GetFriendCityInfo {
}

//好友占山为王信息
message CityFriendUser {
    required SimpleUser simple_user = 1;
    required uint32 patrol_num = 2; //攻占城池数
    required uint32 rebel_num = 3; //暴力城池数
}

message S2C_GetFriendCityInfo {
    required uint32 ret = 1;
    repeated CityFriendUser friends = 2;
}

message C2S_RepressCityRebel {
    required uint64 user_id = 1; //好友USERID
    required uint32 city_id = 4;
    required uint32 event_id = 5;
}

message S2C_RepressCityRebel {
    required uint32 ret = 1;
    required uint64 user_id = 2;
    required uint32 city_id = 3;
    required uint32 event_id = 4;
    repeated Award awards = 5;
    optional uint32 remain_assist_count = 6;
    optional uint32 award_crit_step = 7; //奖励暴击档位
    optional uint32 time_out = 8;
    optional uint64 from_uid = 9;
}

message S2C_RemoveCityRebel {
    required uint32 ret = 1;
    optional uint32 city_id = 2;
    optional CityEvent event = 3;
}

message C2S_GetCityAward {
    required uint32 city_id = 1;
}

message S2C_GetCityAward {
    required uint32 ret = 1;
    required uint32 city_id = 2;
    repeated Award rewards = 3;
    repeated Award ex_rewards = 4; //额外奖励
    optional uint32 tm = 5; //总时间
}

message C2S_UpdateCity {
    required uint32 city_id = 1;
}

message S2C_UpdateCity {
    required uint32 ret = 1;
    required uint32 city_id = 2;
    optional City city = 3;
}

message C2S_AwardAllCityReward {
}

message S2C_AwardAllCityReward {
    required uint32 ret = 1;
    repeated Award award = 2;
    repeated City citys = 3; //城池信息
    repeated Award ex_rewards = 4; //额外奖励
    optional uint32 tm = 5; //总时间
}

message C2S_CitySkillUp {
    required uint32 city_id = 1;
}

message S2C_CitySkillUp {
    required uint32 ret = 1;
    optional uint32 city_id = 2;
    optional uint32 level = 3;
}

message Food {
    required uint32 id = 1;
    required uint32 num = 2;
}

message Achievement {
    required uint32 type = 1; //成就类型
    repeated uint32 values = 2; //成就值
    repeated uint32 reward_ids = 3; //已领奖ID集合
}

message C2S_GetAchievementInfo {
}

message S2C_GetAchievementInfo {
    required uint32 ret = 1;
    repeated Achievement achs = 2;
}

message C2S_GetAchievementReward {
    required uint32 id = 1;
}

message S2C_GetAchievementReward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award awards = 3;
}

message S2C_UpdateAchievementInfo {
    repeated Achievement achs = 1;
}

//message C2S_GetAchievementUnAwardInfo {
//}

//message S2C_GetAchievementUnAwardInfo {
//	required uint32 ret = 1;
//	optional bool   have_unaward = 2;//存在未领取的奖励
//}

message CustomActivity {
    required uint32 act_id = 1; //活动ID
    required uint32 act_type = 2; //活动类型
    optional uint32 icon_type = 3; //活动图标类型
    optional uint32 icon_value = 4; //活动图标
    required string title = 5; //活动标题
    required string sub_title = 6; //小标题
    required string desc = 7; //活动描述
    required uint32 preview_time = 8; //活动预览时间
    required uint32 start_time = 9; //活动开始时间
    required uint32 end_time = 10; //活动结束时间
    required uint32 award_time = 11; //活动奖励领取结束时间
    required uint32 vip_level = 12; //活动Vip等级限制
    optional uint32 button_id = 13; //未达成显示id
    optional uint32 if_daily_refresh = 14; //是否每日重置
}

message CustomActivityQuest {
    required uint32 quest_id = 1; //任务ID
    required uint32 act_id = 2; //活动ID
    required uint32 quest_type = 3; //任务类型
    required string param1 = 4; //参数1
    required uint32 param2 = 5; //参数2
    required uint32 param3 = 6; //参数3
    required uint32 consume_type1 = 7; //消耗道具
    required uint32 consume_value1 = 8;
    required uint32 consume_size1 = 9;
    required uint32 consume_type2 = 10;
    required uint32 consume_value2 = 11;
    required uint32 consume_size2 = 12;
    required uint32 consume_type3 = 13;
    required uint32 consume_value3 = 14;
    required uint32 consume_size3 = 15;
    required uint32 consume_type4 = 16;
    required uint32 consume_value4 = 17;
    required uint32 consume_size4 = 18;
    required uint32 award_type1 = 19; //奖励道具
    required uint32 award_value1 = 20;
    required uint32 award_size1 = 21;
    required uint32 award_type2 = 22;
    required uint32 award_value2 = 23;
    required uint32 award_size2 = 24;
    required uint32 award_type3 = 25;
    required uint32 award_value3 = 26;
    required uint32 award_size3 = 27;
    required uint32 award_type4 = 28;
    required uint32 award_value4 = 29;
    required uint32 award_size4 = 30;
    required uint32 award_select = 31; //奖励道具是否可选
    required uint32 award_limit = 32; //奖励限制次数
    required uint32 server_limit = 33; //奖励全服限制次数
    required uint32 server_times = 34; //奖励全服领取次数
    optional string quest_des = 35; //任务描述
    optional string discout_id = 36; //折扣标签
    optional uint32 vip_level = 37; //Vip等级限制
    optional uint32 award_type5 = 38; //奖励道具
    optional uint32 award_value5 = 39;
    optional uint32 award_size5 = 40;
    optional uint32 award_type6 = 41;
    optional uint32 award_value6 = 42;
    optional uint32 award_size6 = 43;
    optional uint32 award_type7 = 44;
    optional uint32 award_value7 = 45;
    optional uint32 award_size7 = 46;
}

message UserCustomActivityQuest {
    required uint32 act_id = 1; //活动ID
    required uint32 quest_id = 2; //任务ID
    required uint32 time = 3; //活动初始化时间
    required string progress = 4; //活动完成进度
    required uint32 award_time = 5; //奖励领取时间
    required uint32 award_times = 6; //奖励领取次数
    required string progress_second = 7; //活动完成进度2
}

//获取活动信息
message C2S_GetCustomActivityInfo {
}

message S2C_GetCustomActivityInfo {
    required uint32 ret = 1;
    repeated CustomActivity activity = 2; //活动信息
    repeated CustomActivityQuest quest = 3; //任务信息
    repeated UserCustomActivityQuest user_quest = 4; //用户进度和领奖相关信息
}

//活动领奖
message C2S_GetCustomActivityAward {
    required uint32 act_id = 1; //活动id
    required uint32 quest_id = 2; //任务id
    optional uint32 award_id = 3; //可选奖励的第几个奖励 从0开始
    optional uint32 award_num = 4; //兑换奖励兑换次数
}

message S2C_GetCustomActivityAward {
    required uint32 ret = 1;
    required uint32 act_id = 2;
    required uint32 quest_id = 3;
    optional uint32 award_id = 4;
    optional uint32 award_num = 5; //兑换奖励兑换次数
}

//活动有修改的时候 全局广播
message S2C_UpdateCustomActivity {
    repeated CustomActivity activity = 1;
    repeated CustomActivityQuest quest = 2;
    repeated uint32 delete_activity = 3;
}

message S2C_UpdateCustomActivityQuest {
    repeated UserCustomActivityQuest user_quest = 1;
}

//战斗测试
message C2S_PvpTest {
    required uint64 aid = 1; //攻击方uid
    required uint64 did = 2; //防守方uid
    required uint32 count = 3; //pk次数
    optional string a_uuid = 4; //攻击方uid
    optional string d_uuid = 5; //防守方uid
}

message S2C_PvpTest {
    required uint32 ret = 1;
    required uint64 aid = 2; //攻击方uid
    required uint64 did = 3; //防守方uid
    required uint32 count = 4; //pk次数
    required uint32 awin = 5; //攻击方胜利次数
    required uint32 dwin = 6; //防守方胜利次数
    required uint32 aleft = 7; //攻击方最后一场战斗剩余人数
    required uint32 dleft = 8; //防守方最后一场战斗剩余人数
    optional BattleReport battle = 9; //战报
    repeated string battle_result = 10; //战斗结果
    optional string a_uuid = 11; //攻击方uid
    optional string d_uuid = 12; //防守方uid
}

//战斗测试
message C2S_PveTest {
    required uint64 aid = 1; //攻击方uid
    required uint32 monster_team_id = 2; //防守方uid
    required uint32 count = 3; //pk次数
}

message S2C_PveTest {
    required uint32 ret = 1;
    required uint64 aid = 2; //攻击方uid
    required uint32 monster_team_id = 3; //防守方uid
    required uint32 count = 4; //pk次数
    required uint32 awin = 5;
    required uint32 dwin = 6;
    required uint32 aleft = 7;
    required uint32 dleft = 8;
    optional BattleReport battle = 9; //战报
}

message C2S_ExeInstrumentDrop {
    required uint32 type = 1; //1 单抽 2 十连抽
}

message S2C_ExeInstrumentDrop {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated Award consume_awards = 3; //消耗物品信息
    repeated Award rand_awards = 4; //抽卡得到的奖励
    repeated Award fix_awards = 5; //固定奖励
    optional uint32 free_count = 6; //剩余免费次数
    optional uint32 crit = 7; //再抽多少次出觉醒石保底
    optional uint32 crit2 = 8; //再抽多少次出武器之魂保底
    optional uint32 gold_draw_count = 9; //元宝抽卡次数
    //	optional uint32 ten_draw_count = 8;          //10连抽了多少次
    //	optional uint32 ten_draw_drop_type = 9; //10连抽特殊掉落所在类型
    //	optional uint32 ten_draw_drop_count = 10; //10连抽特殊掉落所在档次
}

message S2C_GetInstrumentDropInfo {
    required uint32 ret = 1;
    optional uint32 free_count = 2; //剩余免费次数
    optional uint32 crit = 3; //再抽多少次出觉醒石保底
    optional uint32 crit2 = 4; //再抽多少次出武器之魂保底
    optional uint32 gold_draw_count = 5; //元宝抽卡次数
    //	optional uint32 ten_draw_count = 4;//10连抽了多少次
    //	optional uint32 ten_draw_drop_type = 5; //10连抽特殊掉落所在类型
    //	optional uint32 ten_draw_drop_count = 6; //10连抽特殊掉落所在档次
}

message C2S_UpdateGuideId {
    required uint32 guide_id = 1;
}

message S2C_UpdateGuideId {
    required uint32 ret = 1;
    required uint32 guide_id = 2;
}

message C2S_GeneralGuide {
    required uint32 guideid = 1;
    required uint32 sub_msgid = 2;
    required bytes sub_msg = 3;
}

message C2S_SetUserLevel {
    required uint32 level = 1;
}

message S2C_SetUserLevel {
    required uint32 ret = 1;
    required uint32 level = 2;
}

message C2S_AwardWhatYouWant {
    repeated uint32 type = 1; //
    repeated uint32 value = 2; //
    repeated uint32 size = 3;
}

message S2C_AwardWhatYouWant {
    required uint32 ret = 1;
}

message C2S_SetUserFightForKingScore {
    required uint32 score = 1;
}

message S2C_SetUserFightForKingScore {
    required uint32 ret = 1;
    required uint32 score = 2;
}


message C2S_PointGoldHand {

}

message S2C_PointGoldHand {
    required uint32 ret = 1;
    optional uint32 cost_gold = 2;
    optional uint32 silver = 3;
    optional uint32 count = 4;
    optional uint32 crit = 5;
}

message S2C_GetGoldHand {
    required uint32 ret = 1;
    optional uint32 count = 2; //点金次数
    repeated uint32 boxs = 3; //领取的宝箱
    optional uint32 total_silver = 4; //总共获得的银两
}

message C2S_ReceiveGoldHandBox {
    required uint32 id = 1;
}

message S2C_ReceiveGoldHandBox {
    required uint32 ret = 1;
    optional uint32 id = 2;
}

message GoldHandRecording {
    required uint32 timestamp = 1; //时间
    optional uint32 crit = 2; //暴击
    optional uint32 costGold = 3; //消耗元宝
    optional uint32 getSilver = 4; //获得银两
}

message C2S_GetGoldHandRecording {
}

message S2C_GetGoldHandRecording {
    required uint32 ret = 1;
    repeated GoldHandRecording recordings = 2; //点金记录
}

message C2S_GetGameGiftBag {
    required string code_id = 1;
}

message S2C_GetGameGiftBag {
    required uint32 ret = 1;
    required string code_id = 2;
    repeated Award awards = 3;
}

message C2S_ChapterTest {
    required uint32 stage_id = 1;
}

message S2C_ChapterTest {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    required uint32 next_wave = 3;
    optional bool is_win = 4;
    optional uint32 init_attack_num = 5;
    optional uint32 init_defense_num = 6;
    optional uint32 final_attck_num = 7;
    optional uint32 final_defense_num = 8;
    optional uint32 round = 9;
    repeated uint32 attack_dead_order = 10;
    repeated uint32 defense_dead_order = 11;
    repeated MapSlice attack_unite_skill = 12;
    repeated MapSlice defense_unit_skill = 13;
    repeated uint32 final_attack_alive_poses = 14;
    repeated uint32 final_defense_alive_poses = 15;
}

message C2S_GetHandbook {
    required uint32 type = 1; // 0 - 武将 1 - 神将觉醒材料 2 - 神兽 4 - 宝石  5 - 宝石缘分 6 - 符文 //以后都策划配 下面的type也一样
}

message S2C_GetHandbook {
    required uint32 ret = 1;
    repeated uint32 knight_base_id = 2;
}

message HandBook {
    required uint32 type = 1; // 2 - 神兽 6-符文
    repeated uint32 base_id = 2;
    repeated IntMap handbook_levels = 3; //一级及以上的图鉴等级(collecionId=>level)
}

message S2C_SendHandBook {
    required uint32 ret = 1;
    repeated HandBook books = 2; //图鉴信息
}

message C2S_LevelUpHandbook {
    required uint32 type = 1; // 6 - 符文
    required uint32 collection_id = 2;
}

message S2C_LevelUpHandbook {
    required uint32 ret = 1;
    required uint32 collection_id = 2;
    required uint32 type = 3;
    optional uint32 level = 4;
}

//滚屏公告
message S2C_RollNotice {
    required string msg = 1;
    repeated uint32 location = 2; //1- 主城  2- 聊天
    required uint32 notice_type = 3; //公告类型
}

//掉落的额外奖励
message AddAward {
    required uint32 index = 1; //档次
    required Award award = 2; //奖励
}

//掉落的额外奖励
message SumAddAward {
    required uint32 index = 1; //次数
    repeated AddAward add_awards = 2; //额外奖励
}

message S2C_KickOutUser {
    required uint64 user_id = 1; //被踢玩家
    optional uint32 reason = 2; //原因 1 GM踢玩家 2 服务器断开 3:防沉迷 4:未成年 5:被禁玩
    optional uint32 start_time = 3; //防沉迷 允许玩的时间段
    optional uint32 end_time = 4;
}

message SevenDaysTask {
    required uint32 type = 1;
    required string value = 2;
    repeated uint32 reward_ids = 3; //已领取ID集合
    required string value2 = 4;
}

message SevenDaysShop {
    required uint32 id = 1; //商品ID
    required uint32 count = 2; //购买人数
    required bool is_purchased = 3; //自己是否购买
}

message SevenDaysSale {
    optional uint32 id = 1; //折扣贩卖任务id
    optional uint32 count = 2; //购买次数
}

message C2S_GetSevenDaysInfo {
}

message S2C_GetSevenDaysInfo {
    required uint32 ret = 1;
    repeated SevenDaysTask tasks = 2; //任务类
    repeated SevenDaysShop shops = 3; //商店类
    repeated SevenDaysSale sales = 4; //折扣贩卖类
    optional uint32 start_time_1 = 5; //七日活动开始时间（开服时间）
    optional uint32 start_time_2 = 6; //七日活动2开始时间
    optional uint32 end_time_1 = 7; //七日活动结束时间
    optional uint32 end_time_2 = 8; //七日活动2结束时间
    optional uint32 reward_time_1 = 9; //七日活动领奖结束时间
    optional uint32 reward_time_2 = 10; //七日活动2领奖结束时间
    optional uint32 current_day = 11; //当前天数
    optional uint32 days7_id = 12; //对应配表的days7_id
    optional uint32 shop_days7_id = 13; //贩售对应配表的days7_id
}

message C2S_GetSevenDaysReward {
    required uint32 id = 1;
    required uint32 type = 2; //1代表任务 2代表商店 3代表折扣贩卖
    optional uint32 sub_id = 3; //奖励N选1的索引 从1开始
    optional uint32 buy_num = 5; //折扣商店购买次数
}

message S2C_GetSevenDaysReward {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 type = 3;
    repeated Award awards = 4;
}

message S2C_UpdateSevenDaysInfo {
    repeated SevenDaysTask tasks = 1;
    repeated SevenDaysShop shops = 2;
    repeated SevenDaysSale sales = 3;
}

//签到信息
message SignIn {
    optional uint32 simple_last_time = 1; //普通上次签到时间
    optional uint32 simple_days = 2; //普通签到天数
    optional uint32 simple_sum_days = 3; //普通签到累计天数
    optional uint32 luxury_last_time = 4; //豪华上次签到时间
    repeated uint32 luxury_award = 5; //豪华签到奖励
    optional string luxury_recharge = 6; //豪华签到充值
    optional uint32 simple_resignin = 7; //普通签到是否可补签 1可以补签
    optional uint32 luxury_sell_id = 8; //贩卖商品
    optional uint32 luxury_sell = 9; //今日是否购买
    optional uint32 luxury_all_id = 10; //累计商品
    optional uint32 luxury_all_count = 11; //累计次数
    optional uint32 luxury_all_award = 12; //累计奖励是否领取
}

message C2S_SignIn {
    optional uint32 type = 1; //签到类型 0 普通签到  1 豪华签到
}

message S2C_SignIn {
    required uint32 ret = 1;
    optional SignIn sign_in = 2;
    repeated Award awards = 3;
    optional uint32 type = 4; //签到类型
}

message C2S_ReSignIn {
    optional uint32 type = 1; //补签类型
}

message S2C_ReSignIn {
    required uint32 ret = 1;
    optional SignIn sign_in = 2;
    repeated Award awards = 3;
    optional uint32 type = 4; //签到类型
}

message C2S_GetSignIn {

}

message S2C_GetSignIn {
    required uint32 ret = 1;
    optional SignIn sign_in = 2;
}

message C2S_SignInSell {

}

message S2C_SignInSell {
    required uint32 ret = 1;
    optional Award award = 2;
}

message C2S_SignInAllAward {
    required uint32 index = 1;
}

message S2C_SignInAllAward {
    required uint32 ret = 1;
    optional uint32 index = 2;
    optional Award award = 3;
}

//吃体力
message C2S_Drink {
    optional uint32 drink_type = 1; //第几个人参果
}

message S2C_Drink {
    required uint32 ret = 1;
    optional uint32 gold = 2; //有概率获取元宝
    optional uint32 drink_type = 3;
}

//补偿奖励
message CompensationActivity {
    required bool is_trigger = 1; //false 代表未触发活动 true 触发活动
    optional uint32 receive_count = 2; //已领取的次数
    optional bool today_receive = 3; //今日是否领取 false 未领取 true 已领取
}

message C2S_GetCompensationActivityInfo {
}

message S2C_GetCompensationActivityInfo {
    required uint32 ret = 1;
    optional CompensationActivity activity_info = 2;
}

message C2S_ReceiveCompensationAward {
}

message S2C_ReceiveCompensationAward {
    required uint32 ret = 1;
    repeated Award awards = 3;
}

message GuildPartyLog {
    required uint32 log_type = 1;
    required uint32 log_time = 2;
    required string name = 3;
    required uint32 value = 4;
    optional string drink_text = 5;
}

message C2S_GetGuildPartyLog {
}

message S2C_GetGuildPartyLog {
    required uint32 ret = 1;
    repeated GuildPartyLog party_log = 2;
}

//公会
message Guild {
    optional uint64 id = 1; //公会id
    optional string name = 2; //公会名称
    optional uint32 exp = 3; //公会经验
    optional string announcement = 4; //公告
    optional string declaration = 5; //宣言
    optional uint64 leader = 6; //会长id
    optional string leader_name = 7; //会长名称
    optional uint32 member_num = 8; //公会人数
    optional uint32 contribution = 9; //公会贡献
    optional uint32 sacrifice = 10; //公会祭祀进度
    repeated GuildSkill guild_skill = 11; //公会技能上限
    optional uint32 sacrifice_level = 12; //公会祭祀等级
    optional uint32 has_application = 13; //是否已经有入会申请 0 没有 1 有
    optional uint32 icon = 14; //公会图标
    repeated Impeacher impeacher = 15; //弹劾发起者
    optional uint32 guild_rank = 16; //公会排名
    optional uint32 sacrifice_num = 17; //公会祭祀人数
    optional uint32 created = 18; //创建时间
    repeated uint64 impeach_checker = 19; //审核弹劾
    optional uint32 msg_num = 20; //留言板更新数量
    optional bool has_reset = 21; //是否重置过帮派技能
}

message Impeacher {
    required uint64 uid = 1;
    required uint32 time = 2;
}

//公会申请
message GuildApplication {
    required uint64 uid = 1; //申请人id
    required string name = 2; //申请人昵称
    required uint64 power = 3; //战力
    required uint32 offline = 4; // 离线时间  0 表示在线
    required uint32 base_id = 5;
    required uint32 rank_lv = 6;
    required uint32 level = 7;
    optional uint32 avatar = 8;
}

//公会成员
message GuildMember {
    optional uint32 position = 1; //职位
    optional uint32 contribution = 2; //贡献
    optional uint32 time = 3; //加入时间
    optional uint32 today_contribution = 4; //今日贡献
    optional SimpleUser user = 5;
    optional uint64 uid = 6;
}

//公会限时商店
message GuildRandomShop {
    optional uint32 goods_id = 1; //商品id
    repeated GuildShopUserInfo uids = 2; // 已购买名单
}

message GuildShopUserInfo {
    required uint64 uid = 1;
    required uint32 purchase_num = 2;
}

//进入公会大厅
message C2S_QueryGuildMall {
}

message S2C_QueryGuildMall {
    required uint32 ret = 1;
    optional Guild guild = 2; //公会信息
    optional GuildMember member = 3; //会员自身信息
    optional uint32 has_applicaiton = 4; //是否有公会申请
    optional UserGuildInfo guild_info = 5;
}

//获取公会申请列表
message C2S_GetGuildApplication {
}

message S2C_GetGuildApplication {
    required uint32 ret = 1;
    repeated SimpleUser applications = 2;
}

//创建公会
message C2S_CreateGuild {
    required string guild_name = 1; //公会名称
    required uint32 icon = 2; //图标
}

message S2C_CreateGuild {
    required uint32 ret = 1;
    optional Guild guild = 2;
}

//查询公会
message C2S_QueryGuild {
    required uint32 op = 1; //1 查询  2 列表
    optional string guild_name = 2; //公会名称
    optional uint32 skip = 3; //从0开始
}

message S2C_QueryGuild {
    required uint32 ret = 1;
    repeated Guild guild = 2;
    optional uint32 op = 3;
    optional uint32 total_num = 4;
}

//获取公会成员列表
message C2S_GetGuildMember {
}

message S2C_GetGuildMember {
    required uint32 ret = 1;
    repeated GuildMember members = 2;
}

//申请公会
message C2S_GuildApplication {
    required uint64 guild_id = 1; //公会id
    required uint32 op = 2; //1- 申请 2 取消申请
}

message S2C_GuildApplication {
    required uint32 ret = 1;
    optional uint64 guild_id = 2;
    optional uint32 op = 3;
}

//审核入会申请
message C2S_GuildCheckApplication {
    required uint64 application_id = 1; //入会申请人id
    required uint32 op = 2; //1 允许 2 拒绝
}

message S2C_GuildCheckApplication {
    required uint32 ret = 1;
    optional uint64 application_id = 2;
}

//退会
message C2S_GuildLeave {
}

message S2C_GuildLeave {
    required uint32 ret = 1;
}

//解散公会
message C2S_GuildDismiss {
}

message S2C_GuildDismiss {
    required uint32 ret = 1;
}

//踢玩家
message C2S_GuildKick {
    required uint64 uid = 1; //被踢玩家id
}

message S2C_GuildKick {
    required uint32 ret = 1;
}

//转让会长
message C2S_GuildTransfer {
    required uint64 uid = 1; //玩家id
}

message S2C_GuildTransfer {
    required uint32 ret = 1;
}

//公会升降职
message C2S_GuildPromote {
    required uint64 uid = 1; //玩家id
    required uint32 op = 2; //1 - 提升  2 - 降级
}

message S2C_GuildPromote {
    required uint32 ret = 1;
    optional uint64 uid = 2;
    optional uint32 op = 3;
}

//修改公会公告或者宣言
message C2S_SetGuildMessage {
    required string content = 1; //内容
    required uint32 type = 2; //1 -公告 2 - 宣言
}

message S2C_SetGuildMessage {
    required uint32 ret = 1;
}

//弹劾会长
message C2S_LeaderImpeachment {
}

message S2C_LeaderImpeachment {
    required uint32 ret = 1;
}

//审核弹劾
message C2S_CheckImpeachment {
}

message S2C_CheckImpeachment {
    required uint32 ret = 1;
}

//公会限时商品列表
message C2S_GetTimeLimitShop {
}

message S2C_GetTimeLimitShop {
    required uint32 ret = 1;
    repeated GuildRandomShop shop = 2;
}

message C2S_BuyGuildShop {
    required uint32 id = 1;
}

message S2C_BuyGuildShop {
    required uint32 ret = 1;
    optional GuildRandomShop goods = 2;
}

//玩家公会信息
message UserGuildInfo {
    repeated UserGuildSkill guild_skill = 1; //公会技能
    optional uint32 sacrifice_time = 2; //上次祭祀时间
    repeated uint32 sacrifice_award = 3; //已领取的祭祀id
    optional uint32 sacrifice_id = 4; //上次祭祀的id
}

//玩家公会技能
message UserGuildSkill {
    optional uint32 id = 1;
    optional uint32 level = 2;
}

//公会技能
message GuildSkill {
    optional uint32 id = 1;
    optional uint32 level = 2;
}

//公会祭祀
message C2S_GuildSacrifice {
    required uint32 id = 1;
}
message S2C_GuildSacrifice {
    required uint32 ret = 1;
    optional uint32 user_guild_contribution = 2; //个人总贡献
    optional uint32 id = 3; //祭祀id
    optional uint32 sacrifice_crit = 4; //祭祀暴击 1暴击
}
//公会祭祀领奖
message C2S_GuildGetSacrificeAward {
    required uint32 id = 1;
}
message S2C_GuildGetSacrificeAward {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional uint32 id = 3; //领奖id
}
//个人公会技能提升
message C2S_UserGuildSkillUp {
    required uint32 id = 1;
}
message S2C_UserGuildSkillUp {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 level = 3;
}
//公会技能提升
message C2S_GuildSkillUp {
    required uint32 id = 1;
}
message S2C_GuildSkillUp {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 level = 3;
}

message S2C_GetUserGuildInfo {
    required uint32 ret = 1;
    optional UserGuildInfo guild_info = 2;
}

//新服战力榜
message SevenDaysTopInfo {
    optional bool is_avaliable = 1; //活动是否可见
    optional uint32 end_time = 2; //活动结束时间（战力榜不再变化）
    optional uint32 close_time = 3; //活动关闭时间(战力榜不可见)
    optional uint32 days7_id = 4; //对应配表的days7_id
}

message S2C_GetSevenDaysTopInfo {
    required uint32 ret = 1;
    optional SevenDaysTopInfo info = 2;
}

message SevenDaysTopRank {
    required uint64 user_id = 1;
    optional uint64 power = 2; //战力
    optional uint32 rank = 3; //排名
    repeated uint32 knights = 4;
    optional SimpleUser simple_user = 5;
}

message C2S_GetSevenDaysTopRankList {
}

message S2C_GetSevenDaysTopRankList {
    required uint32 ret = 1;
    repeated SevenDaysTopRank rank_list = 2;
    optional uint32 user_rank = 3; //玩家排名
    optional uint64 user_power = 4; //玩家战力
}


message GuildSystemNotify {
    required uint32 sn_type = 1;
    optional string name = 2;
    optional uint32 fete_id = 3;
    optional uint32 exp = 4;
    optional uint32 time = 5;
}

message GuildMessageBoard {
    optional uint32 id = 1;
    optional string content = 2;
    optional uint32 time = 3;
    optional string name = 4;
    optional uint32 pos = 5; // 1- 会长  2 - 副会长
    optional uint32 top = 6; // 0 - 未置顶 1 -置顶
}

message C2S_GetGuildMessageBoard {
}

message S2C_GetGuildMessageBoard {
    required uint32 ret = 1;
    repeated GuildMessageBoard messages = 2;
}

message C2S_GuildMessageBoardTop {
    required uint32 top = 1; //1 置顶  0 取消置顶
    required uint32 id = 2;
}

message S2C_GuildMessageBoardTop {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 top = 3;
}

message C2S_ToGuildMessage {
    required string content = 1;
    optional uint32 id = 2; //需要删除的id
}

message S2C_ToGuildMessage {
    required uint32 ret = 1;
}

message S2C_GuildMessageContent {
    repeated GuildMessageBoard msg = 1;
    optional uint32 action = 2; // 1- 添加  2 - 置顶 3 - 删除
}


message C2S_GetGuildSystemNotify {
}

message S2C_GetGuildSystemNotify {
    required uint32 ret = 1;
    repeated GuildSystemNotify notify = 2;
}

message GuildRankData {
    required string name = 1; //公会名称
    required string leader_name = 2; //会长名称
    required uint32 member_num = 3; //公会人数
    optional uint32 icon = 4; //公会图标
    optional uint32 exp = 5; //公会经验
    required uint64 id = 6; //公会id
}

message C2S_GetGuildRank {
}

message S2C_GetGuildRank {
    required uint32 ret = 1;
    repeated GuildRankData guild_rank = 2;
    optional uint32 user_guild_rank = 3; //综合排行榜中的公会排行要显示自己所在公会排名
    optional uint32 user_guild_exp = 4;
}

message S2C_SimpleGuildChangedNotify {
    optional OpGuild guild = 1;
    optional OpGuildMember member = 2;
}

message C2S_GetRechargeRebateInfo {
}

message RechargeRebate {
    required uint32 id = 1; //info_id
    required string money = 2; //充值金额
    required uint32 rebate = 3; //返利值
    required bool is_award = 4; //是否领奖
}

message S2C_GetRechargeRebateInfo {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    repeated RechargeRebate rebates = 4;
}

message C2S_GetRechargeRebateAward {
    required uint32 id = 1;
}

message S2C_GetRechargeRebateAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated Award award = 3;
}

//定制活动
message RandomActivity {
    optional bool is_avaliable = 1; //活动是否开始
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 next_recover_time = 4; //恢复购买次数剩余时间
    repeated IntMap opens = 5; //宝箱的开启情况
    repeated uint32 reward_ids = 6; //已领奖id
    optional uint32 score = 7;
    optional uint32 free_refresh_count = 8; //今日使用的免费刷新次数
    optional CommonCount common_count = 9; //购买次数信息
    repeated uint32 jp_id = 10; //极品商品id
}

message C2S_GetRandomActivityInfo {
}

message S2C_GetRandomActivityInfo {
    required uint32 ret = 1;
    optional RandomActivity info = 2;
}

message C2S_RandomActivityBuyGoods {
    required uint32 index = 1;
}

message S2C_RandomActivityBuyGoods {
    required uint32 ret = 1;
    optional uint32 index = 2;
    optional uint32 good_id = 3;
    optional uint32 next_recover_time = 4; //购买后下次恢复时间需要修改时传给前端
}

//重置商品
message C2S_RefreshRandomActivity {
}

message S2C_RefreshRandomActivity {
    required uint32 ret = 1;
    repeated uint32 jp_id = 10; //极品商品id
    optional uint32 free_refresh_count = 3; //免费刷新次数
}

//购买购买次数
message C2S_RandomActivityBuyCount {
    required uint32 num = 1; //购买次数
}

message S2C_RandomActivityBuyCount {
    required uint32 ret = 1;
    optional CommonCount common_count = 2;
    optional uint32 next_recover_time = 3;
}

//领取积分奖励
message C2S_RandomActivityReceiveReward {
    required uint32 id = 1;
}

message S2C_RandomActivityReceiveReward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award awards = 3;
}

//恢复购买次数
message C2S_RandomActivityRecoverCount {
}

message S2C_RandomActivityRecoverCount {
    required uint32 ret = 1;
    optional uint32 next_recover_time = 2;
    optional CommonCount common_count = 3;
}

//领取首冲奖励
message C2S_ReceiveFirstCharge {

}

message S2C_ReceiveFirstCharge {
    required uint32 ret = 1;
    repeated Award awards = 2;
}
//vip福利
message C2S_GetActivityVipReward {
}

message S2C_GetActivityVipReward {
    required uint32 ret = 1;
    required bool is_avaliable = 2; //活动是否开启
    required bool is_receive = 3;
    repeated uint32 replacement_reward = 4; //领取的补领奖励
}

message C2S_ActivityVipRewardReceiveReward {
    required uint32 id = 1;
}

message S2C_ActivityVipRewardReceiveReward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award awards = 3;
}

//开服登录
message ActivityOpenLogin {
    required bool is_avaliable = 1; //活动是否开始
    required uint32 total_login = 2; //总共登录几天
    repeated uint32 rewards_id = 3; //领取的登录奖励
}

message C2S_GetActivityOpenLogin {
}

message S2C_GetActivityOpenLogin {
    required uint32 ret = 1;
    optional ActivityOpenLogin open_login = 2;
}

message C2S_ActivityOpenLoginReceiveAward {
    required uint32 id = 1;
}

message S2C_ActivityOpenLoginReceiveAward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award awards = 3;
}

message C2S_WxShare {
    required uint32 id = 1;
}

message S2C_WxShare {
    required uint32 ret = 1;
    repeated Award award = 2;
    required uint32 id = 3;
}

message BetaCompActivity {
    required uint32 type = 1;
    required uint32 start_time = 2;
    required uint32 end_time = 3;
}

message C2S_BetaCompInfo {
}

message S2C_BetaCompInfo {
    required uint32 ret = 1;
    repeated BetaCompActivity infos = 2; //活动信息
    repeated uint32 ids = 3;
}

message C2S_BetaCompAward {
    required uint32 id = 1;
}

message S2C_BetaCompAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated Award awards = 3;
}

message S2C_GetActivityStarPhotoInfo {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
    optional uint32 activity_start = 3; //活动期限开始
    optional uint32 activity_end = 4; //活动期限结束
}
message C2S_GetActivityStarPhotoAward {
    required uint32 id = 1;
}
message S2C_GetActivityStarPhotoAward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award awards = 3;
}

message S2C_StarRedPacket {
    required uint32 ret = 1;
    optional uint32 activity_start = 2; //活动期限开始
    optional uint32 activity_end = 3; //活动期限结束
    repeated uint32 collection_deadline = 4; //领奖时间以及明星 [开始时间,结束时间,明星, 开始时间, 结束时间, 明星]
}

message C2S_StarRedPacketCollect {
}

message S2C_StarRedPacketCollect {
    required uint32 ret = 1;
    optional uint32 gold = 2;
}

message StarGiftCode {
    required uint32 gift_id = 1;
    required string code = 2;
    required bool is_open = 3;
}

message C2S_GetStarGiftCode {
}

message S2C_GetStarGiftCode {
    required uint32 ret = 1;
    repeated StarGiftCode gifts = 2;
    optional uint32 start_time = 3;
    optional uint32 end_time = 4;
}

message C2S_OpenStarGiftCode {
    required uint32 id = 1;
}

message S2C_OpenStarGiftCode {
    required uint32 ret = 1;
    optional uint32 id = 2;
}

//公会副本挑战
message C2S_GuildDungeonAttack {
    required uint32 id = 1; //关卡id
    optional uint32 auto = 2; //扫荡 0:默认, 1:扫荡
}

message S2C_GuildDungeonAttack {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional BattleReport battle_report = 3; //戰報
    optional uint64 max_harm = 4; //最大伤害
    optional uint64 sum_harm = 5; //累计伤害
    optional uint32 count = 6; //攻击次数;
    repeated Award awards = 7; //奖励
    optional uint64 harm = 8; //单次伤害
    optional uint32 left_count = 9; //剩余挑战次数
    optional uint32 auto = 10; //扫荡
}

//公会副本关卡奖励
message C2S_GuildDungeonBoxAward {
    required uint32 id = 1; //关卡id
    required uint32 index = 2; //奖励位置
}

message S2C_GuildDungeonBoxAward {
    required uint32 ret = 1;
    required uint32 id = 2; //关卡id
    required uint32 index = 3; //奖励位置
    repeated Award awards = 4; //奖励
}

//公会副本通关奖励
message C2S_GuildDungeonAchievementAward {
    required uint32 id = 1; //章节id
}

message S2C_GuildDungeonAchievementAward {
    required uint32 ret = 1;
    required uint32 id = 2; //章节id
    repeated Award awards = 3; //奖励
}

//公会副本购买次数
message C2S_GuildDungeonBuyCount {
    required uint32 count = 1; //购买次数
}

message S2C_GuildDungeonBuyCount {
    required uint32 ret = 1;
    required uint32 count = 2; //购买次数
}

//公会副本排行榜
message C2S_GuildDungeonRank {

}

message S2C_GuildDungeonRank {
    required uint32 ret = 1;
    repeated GuildDungeonRankUser rank_users = 2;
}

message GuildDungeonRankUser {
    optional string name = 1;
    optional uint64 max_harm = 2;
    optional uint64 harm = 3;
    optional uint32 count = 4;
    optional uint64 uid = 5;
    optional uint32 base_id = 6;
}

//公会副本重置方式
message C2S_GuildDungeonResetChapter {
    required uint32 id = 1; //章节id 前置章节id 或者最大章节id
}

message S2C_GuildDungeonResetChapter {
    required uint32 ret = 1;
    required uint32 id = 2; //章节id
}

//公会副本击杀广播
message S2C_UpdateGuildDungeonAttackInfo {
    required uint32 id = 1; //关卡id
    required string name = 2;
}

//拉取公会副本信息
message C2S_GetGuildDungeonInfo {

}

message S2C_GetGuildDungeonInfo {
    required uint32 ret = 1;
    repeated GuildDungeonInfo dungeon_infos = 2; //关卡信息
    optional uint32 max_chapter_id = 3; //最高章节
    optional uint32 now_chapter_id = 4; //当前章节
    optional uint32 reset_chapter_id = 5; //每日重置章节
    optional uint64 max_hp = 6; //最大血量
    optional uint64 hp = 7; //当前血量
    repeated uint32 chapter_ids = 8; //通关章节
    optional uint64 max_harm = 9;
    optional uint64 harm = 10;
    optional uint32 count = 11;
    repeated uint32 guild_dungeon_award = 12; //公会副本通关奖励
    optional uint32 buy_count = 13; //公会副本购买次数
    optional uint32 left_count = 14; //公会副本剩余挑战次数
    optional uint32 last_recover_time = 15; //公会副本上次恢复时间
    optional uint32 today_chapter = 16; //今日开始章节
    repeated uint32 award_stage_ids = 17; //已领取宝藏的关卡
}

message GuildDungeonInfo {
    optional uint32 id = 1; //关卡id
    optional uint64 max_hp = 2; //最大血量
    optional uint64 hp = 3; //当前血量
    optional string name = 4; //击杀者
}

//拉取公会副本关卡宝藏信息
message C2S_GetGuildDungeonAwardInfo {
    required uint32 id = 1; //章节id
}

message S2C_GetGuildDungeonAwardInfo {
    required uint32 ret = 1;
    required uint32 id = 2; //章节id
    repeated GuildDungeonAwardInfo award_infos = 3; //宝箱信息
}

message GuildDungeonAwardInfo {
    optional uint32 id = 1; //关卡id
    optional uint32 award_count = 2; //宝箱数量
    repeated GuildDungeonAward awards = 3; //领取情况
    optional uint32 index = 4; //领取位置
    optional bool award_permission = 5; //领取权限
}

message GuildDungeonAward {
    optional uint32 id = 1; //id   //奖励id
    optional uint32 index = 2; //位置
    optional string name = 3;
    optional uint32 base_id = 4;
}

message C2S_EquipSoul {
    required uint64 id = 1; //装备 id > 0 卸载 id = 0
    required uint32 pos = 2;
    required uint32 slot = 3;
}

message S2C_EquipSoul {
    required uint32 ret = 1;
    optional uint64 id = 2;
    optional uint32 pos = 3;
    optional uint32 slot = 4;
    optional uint64 previous = 5; //原来的仙灵
}

message C2S_UpgradeSoul {
    required uint64 id = 1;
    repeated RecoveryItem materials = 2;
    optional uint32 mode = 3; // 1 - 升级 2- 突破
}

message S2C_UpgradeSoul {
    required uint32 ret = 1;
    optional uint64 id = 2;
    optional uint32 mode = 3;
}

message S2C_GetSoulDraw {
    required uint32 ret = 1;
    optional uint32 money_draw_num = 2; //白银抽卡已抽次数
    optional uint32 money_draw_ten_num = 3; //白银10连已抽次数
    optional uint32 gold_free_draw_num = 4; //黄金免费抽卡已抽次数
    optional uint32 total_gold_draw_num = 5; //黄金抽卡总共抽了多少次
}


message C2S_DrawSoul {
    required uint32 payment = 1;
}

message S2C_DrawSoul {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional uint32 payment = 3;
    repeated uint32 point = 4;
    repeated Award other_awards = 5;
}

message C2S_ActiveSouls {
    required uint32 id = 1;
    repeated uint64 materials = 2;
}

message S2C_ActiveSouls {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 star = 3;
}

message C2S_RollBackSouls {
    required uint32 id = 1; //图鉴id
}

message S2C_RollBackSouls {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award materials = 3;
}

message C2S_ActiveSoulScore {
    required uint32 id = 1;
}

message S2C_ActiveSoulScore {
    required uint32 ret = 1;
    optional uint32 id = 2;
}

message C2S_GetSoulRank {
}

message SoulRank {
    optional uint32 score = 1; //伤害或者贡献
    optional SimpleUser simple_user = 2;
}

message S2C_GetSoulRank {
    required uint32 ret = 1;
    repeated SoulRank rank = 2;
}

//仙灵轮回
message C2S_SamsaraSoul {
    required uint64 id = 1;
    required uint32 base_id = 2; //目标蛋
}

message S2C_SamsaraSoul {
    required uint32 ret = 1;
    optional uint64 id = 2;
    optional uint32 base_id = 3;
    repeated Award left_awards = 4; //剩余材料
}

//仙灵孵化
message C2S_IncubateSoul {
    required uint64 id = 1;
}

message S2C_IncubateSoul {
    required uint32 ret = 1;
    optional uint64 id = 2;
    repeated Award left_awards = 3; //剩余材料
}

//仙灵孵化撤回
message C2S_CancelIncubateSoul {
    required uint64 id = 1;
}

message S2C_CancelIncubateSoul {
    required uint32 ret = 1;
    optional uint64 id = 2;
    repeated Award left_awards = 3; //剩余材料
    optional Soul soul_info = 4;
}

//仙灵洗练
message C2S_RefineSoul {
    required uint64 id = 1;
}

message S2C_RefineSoul {
    required uint32 ret = 1;
    optional uint64 id = 2;
    repeated IntMap potential_attrs = 3;
}

//仙灵洗练确认
message C2S_SaveRefineSoul {
    required uint64 id = 1;
}

message S2C_SaveRefineSoul {
    required uint32 ret = 1;
    optional uint64 id = 2;
}

//仙灵洗练加锁
message C2S_LockRefineSoul {
    required uint64 id = 1;
    required uint32 pos = 2; //第几条属性
    required bool lock = 3; //锁
}

message S2C_LockRefineSoul {
    required uint32 ret = 1;
    required uint64 id = 2;
    required uint32 pos = 3; //第几条属性
    required bool lock = 4; //锁
}

//仙灵炼体
message C2S_SoulRefinePurple {
    required uint64 id = 1;
}

message S2C_SoulRefinePurple {
    required uint32 ret = 1;
    optional uint64 id = 2;
    repeated Award left_awards = 3;
}

//仙灵炼体撤回
message C2S_CancelSoulRefinePurple {
    required uint64 id = 1; 
}

message S2C_CancelSoulRefinePurple{
    required uint32 ret = 1;
    optional uint64 id = 2;
    optional Soul soul_info = 3;
    repeated Award left_awards = 4;//剩余材料
}

message C2S_GetCommonCrossRank {
    required uint32 type = 1;
}

message S2C_GetCommonCrossRank {
    required uint32 ret = 1;
    repeated SoulRank soul_rank = 2;
}


message C2S_GetSoulDungeonInfo {
}

message S2C_GetSoulDungeonInfo {
    required uint32 ret = 1;
    optional uint32 dungeon_id = 2;
    optional bool is_kill = 3;
    optional uint32 flush_count = 4;
    optional uint32 challenge_count = 5;
}

message C2S_FlushSoulDungeon {
}

message S2C_FlushSoulDungeon {
    required uint32 ret = 1;
    optional uint32 dungeon_id = 2;
    optional bool is_kill = 3;
    optional uint32 flush_count = 4;
    optional uint32 challenge_count = 5;
}

message C2S_ChallengeSoulDungeon {
    required uint32 id = 1;
}

message S2C_ChallengeSoulDungeon {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    repeated Award awards = 3;
    optional uint32 challenge_count = 4;
    optional uint32 dungeon_id = 5;
}

message UserLevelRankInfo {
    required uint64 user_id = 1;
    optional uint32 rank = 2; //排名
    optional SimpleUser simple_user = 3;
}

message C2S_GetUserLevelRank {
}

message S2C_GetUserLevelRank {
    required uint32 ret = 1;
    repeated UserLevelRankInfo rank_list = 2;
    optional uint32 user_level = 3;
    optional uint32 user_rank = 4;
}

message UserPowerRankInfo {
    required uint64 user_id = 1;
    optional uint64 power = 2; //战力
    optional uint32 rank = 3; //排名
    optional SimpleUser simple_user = 4;
}

message C2S_GetUserPowerRank {
}

message S2C_GetUserPowerRank {
    required uint32 ret = 1;
    repeated UserPowerRankInfo rank_list = 2;
    optional uint64 user_power = 3;
    optional uint32 user_rank = 4;
}

message FameHallRank {
    required uint64 user_id = 1;
    optional uint64 power = 2; //战力
    optional uint32 rank = 3; //排名
    optional uint32 heart_num = 4; //获得点赞次数
    optional string sign = 5; //口号
    optional SimpleUser simple_user = 6; //玩家基础信息
}

message C2S_GetFameHallInfo {
}

message S2C_GetFameHallInfo {
    required uint32 ret = 1;
    repeated FameHallRank rank_list = 2;
    optional uint32 left_heart_num = 3; //玩家使用的点赞次数
}

message C2S_FameHallGiveHeart {
    required uint64 user_id = 1; //点赞的玩家
}

message S2C_FameHallGiveHeart {
    required uint32 ret = 1;
    optional uint64 user_id = 2;
    optional uint32 left_heart_num = 3;
    optional uint32 silver = 4; //银两奖励
    repeated AddAward add_award = 5; //银两暴击奖励
}

message C2S_FameHallChangeSign {
    required string sign = 1;
}

message S2C_FameHallChangeSign {
    required uint32 ret = 1;
    optional string sign = 2;
}


message HolidayActivityTask {
    required uint32 type = 1; //任务类型
    required uint32 count = 2; //领奖次数
    repeated uint32 vls = 3; //累积值
    repeated uint32 ids = 4; //已领取过的ID集合
}

message HolidayActivityShop {
    required uint32 id = 1;
    required uint32 count = 2;
}

message HolidayActivity {
    required uint32 id = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 reward_time = 4;
    repeated HolidayActivityTask tasks = 5;
    repeated HolidayActivityShop counts = 6;
	optional NewHolidayActivityInfo info = 7;//活动信息 新版有效
	repeated NewHolidayActivityTaskInfo task_infos = 8;//活动任务信息 新版有效
}

message C2S_GetHolidayActivityInfo {
}

message S2C_GetHolidayActivityInfo {
    required uint32 ret = 1;
    repeated HolidayActivity activitys = 2;
    repeated HolidayActivityShop counts = 3;
}

message C2S_GetHolidayActivityReward {
    required uint32 id = 1;
    required uint32 count = 2;
}

message S2C_GetHolidayActivityReward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 count = 3;
    repeated Award awards = 4;
}

message S2C_UpdateHolidayActivityInfo {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    repeated HolidayActivityTask tasks = 3;
    repeated HolidayActivityShop counts = 4;
}

message S2C_GetHolidayActivityPublish {
    required uint32 ret = 1;
    repeated HolidayActivity activitys = 2;
}


message NewHolidayActivityInfo {
	required string holiday_name = 1;
    required string name_id = 2;
    required uint32 spine_type = 3;	//Spine类型
    required uint32 spine_id = 4;	//人物形象
    required string type1 = 5;		//任务页签1
    required uint32 recharge_mode_type = 6;//充值模板id
    required string type2 = 7;		//任务页签2
    required uint32 exchange_type = 8;//兑换模板id
    required string type3 = 9;		//任务页签3
    required uint32 task_type = 10;	//任务模板id
    required string type4 = 11;		//任务页签4
    required uint32 sale_type = 12;	//贩售模板id
    required string describe1 = 13;	//灵活描述1
    required string describe2 = 14;	//灵活描述2
    required string describe3 = 15;	//灵活描述3
    required uint32 recharge_coin = 16;//充值金币
    required uint32 active_coin = 17;//充值银币
}

message NewHolidayActivityTaskInfo {
    required uint32 id = 1;           
    required string directions = 2;	//任务描述
    required uint32 tag = 3;	//所属页签
    required uint32 order = 4; //显示顺序（对应任务页签下的任务排列顺序，编号越小，排序越在上）
    required uint32 task_type = 5;      
    required uint32 task_value = 6;    
    required uint32 task_condition = 7;//验证条件
    required uint32 task_count = 8; //领奖次数
    required uint32 task_discrete = 9; //是否聚合 或 离散
    required uint32 show_discount = 10;  //显示折扣

	repeated Award 	rewards = 11; //奖励
	repeated Award 	costs = 12; //消耗
}

message C2S_GetNewHolidayActivityInfo {
}

message S2C_GetNewHolidayActivityInfo {
    required uint32 ret = 1;
    repeated HolidayActivity activitys = 2;
}

message C2S_GetNewHolidayActivityReward {
    required uint32 id = 1;
    required uint32 count = 2;
    required uint32 activity_id = 3;
}

message S2C_GetNewHolidayActivityReward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 count = 3;
    repeated Award awards = 4;
}

message S2C_UpdateNewHolidayActivityInfo {
    required uint32 ret = 1;
    required uint32 activity_id = 2;
    repeated HolidayActivityTask tasks = 3;
    repeated HolidayActivityShop counts = 4;
}

message S2C_GetNewHolidayActivityPublish {
    required uint32 ret = 1;
    repeated HolidayActivity activitys = 2;
}

//天宫炼宝
message ActivityLianBaoRank {
    required uint64 user_id = 1;
    optional string name = 2;
    //optional uint32 level = 3;
    //optional uint32 power = 4;
    optional uint32 base_id = 5;
    optional uint32 rank_lv = 6;
    optional uint32 score = 7;
    optional uint32 rank = 8;
}

message ActivityLianBao {
    optional uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 reward_time = 4;
    repeated uint32 all_goods = 5; //全部商品
    repeated IntMap buy_goods = 6; //已经购买的商品和位置
    optional uint32 rank = 7; //积分排行
    optional uint32 score = 8; //积分
    optional uint32 use_count = 9; //今天已经炼宝次数
    optional uint32 free_refresh = 10; //剩余免费刷新次数
    optional uint32 timestamp = 11; //记录玩家最后一次修改炼宝数据的时间戳，用以判断是否为过期数据
}

message C2S_GetActivityLianBaoInfo {
}

message S2C_GetActivityLianBaoInfo {
    required uint32 ret = 1;
    optional ActivityLianBao info = 2;
}

//炼宝
message C2S_ActivityLianBaoBuyGood {
    required uint32 index = 1; //位置 1-8 表示单开的位置  0代表 全开
    required uint32 consume_type = 2; //消耗资源类型 1->炼金石 2->元宝
}

message S2C_ActivityLianBaoBuyGood {
    required uint32 ret = 1;
    optional uint32 index = 2;
    repeated uint32 buy_id = 3;
    optional uint32 score = 4;
    optional uint32 use_count = 5;
    optional uint32 rank = 6; //玩家的排名
}

//刷新
message C2S_ActivityLianBaoRefresh {
}

message S2C_ActivityLianBaoRefresh {
    required uint32 ret = 1;
    repeated uint32 all_goods = 2;
    optional uint32 free_refresh = 3; //剩余免费刷新次数
}

//获取排行榜
message C2S_GetActivityLianBaoRank {
}

message S2C_GetActivityLianBaoRank {
    required uint32 ret = 1;
    repeated ActivityLianBaoRank rank_list = 3;
    optional uint32 user_rank = 4;
    optional uint32 user_score = 5;
}

//八卦祈福
message PrayScoreRank {
    required uint64 user_id = 1;
    optional SimpleUser simple_user = 2;
    optional uint32 score = 3;
    optional uint32 rank = 4;
}

message Pray {
    optional uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 reward_time = 4;
    optional uint32 good_type = 5;
    optional uint32 child_count = 6;
    optional uint32 old_count = 7;
    optional uint32 rank = 8; //积分排行
    optional uint32 score = 9; //今日积分
    optional uint32 total_score = 10; //总积分
    //optional uint32 timestamp = 10; //本次炼宝活动的时间标志
    optional uint32 child_gold_pool = 11; //童子祈福池元宝
    optional uint32 old_gold_pool = 12; //老君祈福池元宝
}

message C2S_GetPrayInfo {
}

message S2C_GetPrayInfo {
    required uint32 ret = 1;
    optional Pray info = 2;
}

//祈福
message C2S_PrayBuyGood {
    required uint32 pray_type = 1; //2 -> 童子祈福  3 -> 老君祈福
    required uint32 count = 2; //1-> 祈福一次 10-> 祈福10次
}

message S2C_PrayBuyGood {
    required uint32 ret = 1;
    repeated uint32 buy_id = 2;
    repeated Award awards = 3;
    optional uint32 rank = 4; //玩家的排名
    optional uint32 total_score = 5;
    optional uint32 child_count = 6;
    optional uint32 old_count = 7;
}

//祈福池元宝变化
message S2C_GetPrayGoldPool {
    optional uint32 child_gold_num = 1;
    optional uint32 old_gold_num = 2;
}

message S2C_NewPrayActivity {
    optional uint32 start_time = 1;
    optional uint32 end_time = 2;
    optional uint32 reward_time = 3;
    optional uint32 good_type = 4;
}

//获取排行榜
message C2S_GetPrayRank {
}

message S2C_GetPrayRank {
    required uint32 ret = 1;
    repeated PrayScoreRank rank_list = 2;
    optional uint32 user_rank = 3;
    optional uint32 user_score = 4; //总积分
}

message FierceSimpleInfo {
    optional uint32 remain_challenge_count = 2; //剩余挑战次数
    optional uint32 purchase_challenge_count = 3; //购买挑战次数
    optional uint32 remain_refresh_count = 4; //剩余刷新次数
    optional uint32 refresh_count = 5; //用过的刷新次数
    optional uint32 race = 6; //种族  0未定义 1仙族 3妖族 4人族
    optional uint32 score = 7; //积分
    optional uint32 race_score_rank = 8; //积分 种族排名
    optional uint32 status = 9; //1 开启中  2 休战中
    optional uint32 remain_time = 10; //剩余时间
}


message FierceRank {
    required uint32 race = 1; //种族
    required uint32 score = 2; //积分
    required uint32 score_rank = 3; //积分排名
    required SimpleUser user = 4;
}

message FierceUser {
    optional SimpleUser user = 1;
    optional uint32 score = 11; //积分
    optional bool be_win = 12; //是否被战胜
    optional uint32 race = 14; //种族
    optional uint32 win_add_score = 15; //战胜所得积分
    optional uint32 avatar_deadline = 16;
    optional bool is_challenge = 17; //是否挑战过
}

message C2S_GetFierceFullInfo {
}

message S2C_GetFierceFullInfo {
    required uint32 ret = 1;
    optional FierceSimpleInfo info = 2;
    repeated FierceUser users = 3;
    repeated FierceRank ranks = 4;
}

message C2S_FierceSelectRace {
    required uint32 race = 1; //种族
}

message S2C_FierceSelectRace {
    required uint32 ret = 1;
    required uint32 race = 2;
    optional FierceSimpleInfo info = 3;
    repeated FierceUser users = 4;
}

message C2S_ChallengeFierce {
    required uint64 uid = 1; //挑战的玩家
}

message S2C_ChallengeFierce {
    required uint32 ret = 1;
    optional uint64 uid = 2;
    optional BattleReport battle_report = 3;
    repeated Award rewards = 4;
    optional uint32 add_score = 5; //积分
    optional uint32 rank = 6;
}

message C2S_RefreshFierceChallengeList {
}

message S2C_RefreshFierceChallengeList {
    required uint32 ret = 1;
    optional FierceSimpleInfo info = 2;
    repeated FierceUser users = 3;
}

message C2S_PurchaseFierceChallengeCount {
    required uint32 count = 1;
}

message S2C_PurchaseFierceChallengeCount {
    required uint32 ret = 1;
    optional FierceSimpleInfo info = 2;
}

message C2S_GetFierceRank {
    required uint32 race = 1;
}

message S2C_GetFierceRank {
    required uint32 ret = 1;
    required uint32 race = 2;
    repeated FierceRank ranks = 3;
    optional uint32 my_rank = 4;
}

message S2C_FlushUserResource {
    repeated Int64Map resources = 1;
}

message S2C_UpdateFierceRank {
    required uint32 ret = 1;
    required uint64 uid = 2;
    required uint32 rank = 3;
}

message S2C_OpenFierce {
    required uint32 ret = 1;
    required bool is_open = 2;
}

message DailySale {
    repeated uint32 all_goods = 1; //全部商品
    repeated IntMap buy_goods = 2; //已经购买的商品和位置
    repeated uint32 daily_recharge = 3; //每日充值档位
    repeated uint32 daily_recharge_award = 4; //每日充值档位领奖（包括每日首冲奖励）
    optional uint32 week_recharge = 5; //每周充值
    repeated uint32 week_recharge_award = 6; //每周充值领奖
    optional uint32 refresh_count = 7; //刷新次数
}

//拉信息
message C2S_GetDailySale {
}

message S2C_GetDailySale {
    required uint32 ret = 1;
    optional DailySale daily_sale = 2;
    optional uint32 open_days = 3;
}

//买商品
message C2S_BuyDailySale {
    required uint32 id = 1; //商品id
}

message S2C_BuyDailySale {
    required uint32 ret = 1;
    optional uint32 id = 2; //商品id
    repeated Award awards = 3;
}

//领奖励
message C2S_GetDailySaleAward {
    required uint32 id = 1; //奖励id
}

message S2C_GetDailySaleAward {
    required uint32 ret = 1;
    optional uint32 id = 2; //商品id
    repeated Award awards = 3;
}

//刷新
message C2S_RefreshDailySale {

}

message S2C_RefreshDailySale {
    required uint32 ret = 1;
    optional DailySale daily_sale = 2;
}


message WeekTask {
    required uint32 type = 1;
    required uint32 value = 2;
    repeated uint32 reward_id = 3;
}

message C2S_GetWeekTaskInfo {

}

message S2C_GetWeekTaskInfo {
    required uint32 ret = 1;
    repeated WeekTask tasks = 2;
}

message S2C_UpdateWeekTask {
    repeated WeekTask tasks = 1;
}

message C2S_GetWeekTaskAward {
    repeated uint32 id = 1;
}

message S2C_GetWeekTaskAward {
    required uint32 ret = 1;
    repeated uint32 id = 2;
    repeated Award awards = 3;
}

message C2S_UpgradeTitle {

}

message S2C_UpgradeTitle {
    required uint32 ret = 1;
    optional uint32 title = 2; //新的头衔id
}

message CoolName {
    required uint32 id = 1;
    required uint32 end_time = 2; //到期时间 0 永远不到期
}

message C2S_GetCoolName {

}

message S2C_GetCoolName {
    required uint32 ret = 1;
    repeated CoolName names = 2;
}

message C2S_ActiveCoolName {
    required uint32 id = 1;
}

message S2C_ActiveCoolName {
    required uint32 ret = 1;
    optional CoolName name = 2;
}

message C2S_UseCoolName {
    required uint32 id = 1;
}

message S2C_UseCoolName {
    required uint32 ret = 1;
    optional CoolName name = 2;
}

//团购信息
message C2S_GetGroupBuy {
}

message S2C_GetGroupBuy {
    optional uint32 points = 1; //每日积分
    optional uint32 rebate = 2; //返利
    repeated GroupBuyGoodsInfo goods = 3; //商品信息
    optional uint32 rebate_end_time = 4; //返利结束时间
    optional uint32 end_time = 5; //活动结束时间
    optional uint64 point_prize = 6; //积分奖励领取情况
    required uint32 ret = 7;
    optional uint32 start_time = 8; //开始时间
}

message GroupBuyGoodsInfo {
    required uint32 id = 1; //商品id
    required uint32 total_num = 2; //当前该商品购买总数量
    required uint32 buy_num = 3; //玩家今天已购买数量
}

//购买团购商品
message C2S_BuyGroupGoods {
    required uint32 id = 1; //商品id
    required uint32 num = 2; //购买数量
}

message S2C_BuyGroupGoods {
    required uint32 ret = 1;
    repeated Award goods = 2;
}

//领取积分奖励
message C2S_LootScorePrize {
    required uint32 id = 1;
}

message S2C_LootScorePrize {
    required uint32 ret = 1;
    repeated Award prizes = 2;
    optional uint64 point_prize = 3;
}

//更换头像框
message C2S_ChangeShowVip {
    required uint32 frame_id = 1; //头像框的id
}

message S2C_ChangeShowVip {
    required uint32 ret = 1;
    required uint32 frame_id = 2;
}

//问卷调查

message S2C_GetQuestionUrl {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional string url = 4;
    optional uint32 min_level = 5;
    optional uint32 max_level = 6;
    optional uint32 min_vip = 7;
    optional uint32 max_vip = 8;
    optional uint32 question_qid = 9; //最近一次回答过的qid 如果==qid 说明已经回答过了
    optional uint32 qid = 10; //问卷调查id
}

message C2S_QuestionSurvey {

}

//回答问卷调查
message S2C_QuestionSurvey {
    required uint32 ret = 1;
    //required uint32 question_time = 2;
    optional uint32 qid = 2;
}

message HomePlantInfo {
    required uint32 plant_id = 1; //植物ID
    optional uint32 begin_time = 2;
    optional uint32 water_count = 3; //已浇水次数
    optional uint32 get_fruit_count = 4; //已收获次数
    optional bool get_friend_fruit = 5; //是否收获了好友摘取果实
    optional uint32 total_rate = 6; //总计倍率提升百分比
}

message HomeBuilding {
    required uint64 id = 1;
    required uint32 base_id = 2; //build id
    required uint32 level = 3;
    required uint32 last_production_time = 4;
    required uint32 location = 5;
    repeated Award awards = 6;
    optional uint32 style_id = 7;
    optional HomePlantInfo plant_info = 8; //植物信息
    optional uint32 exp = 9; //目前是炼器坊当前等级经验
    repeated Award costs = 10; //目前是炼器坊消耗
}

message HomeMonster {
    required uint64 id = 1;
    required uint32 base_id = 2;
    required uint32 status = 3; //0 活着 1已被击杀
    required uint32 appear_time = 4; //出现时间
}

message HomeTask {
    required uint32 time = 1;
    required uint32 task_id = 2;
    required uint32 complete_count = 3; //可完成次数
    repeated uint64 complete_uids = 4; //完成好友任务记录 (拉取好友列表时 不推送本字段)
    optional bool is_awarded = 5; //自己是否领奖
    optional uint32 remain_complete_count = 6; //剩余可完成次数
}

message HomeStyle {
    required uint32 style_id = 1;
    required uint32 time = 2; //0为不过期 非0为到期时间
    required uint64 building_id = 3; //穿戴建筑id
}

message C2S_GetHomelandInfo {
}

message S2C_GetHomelandInfo {
    required uint32 ret = 1;
    repeated HomeBuilding buildings = 2;
    repeated HomeMonster monsters = 3;
    optional HomeTask task = 4;
    optional uint32 boom_value = 5;
    optional uint32 remain_assist_count = 6; //协助剩余次数
    optional uint32 purchase_assist_count = 7; //购买协助次数
    optional uint32 purchase_my_hometask_count = 9; //任务购买次数
    optional uint32 use_complete_count = 10; //玩家可完成次数
    optional uint32 purchase_complete_count = 11; //玩家购买次数
    optional CommonCount get_friend_fruit_common_count = 12; //玩家摘取好友果实通用次数
}

message C2S_BuildHomelandBuilding {
    required uint32 id = 1; //build id
    required uint32 location = 2;
}

message S2C_BuildHomelandBuilding {
    required uint32 ret = 1;
    optional HomeBuilding building = 2;
    optional uint32 boom_value = 3;
}

message HomeCosts {
    required uint32 type = 1;
    required uint64 cost_id = 2;
}

message C2S_UpgradeHomelandBuilding {
    required uint64 id = 1; //唯一Id
    repeated Award costs = 2; //目前是炼器坊消耗
    repeated HomeCosts cost_ids = 3;//带有唯一Id的消耗品
}

message S2C_UpgradeHomelandBuilding {
    required uint32 ret = 1;
    optional HomeBuilding building = 2;
    optional uint32 boom_value = 3;
    optional uint32 old_level = 4;
}

message C2S_PurchaseHomelandCount {
    required uint32 count = 1;
}

message S2C_PurchaseHomelandCount {
    required uint32 ret = 1;
    optional uint32 remain_assist_count = 2;
    optional uint32 purchase_assist_count = 3;
}

message HomelandUser {
    optional SimpleUser user = 1;
    optional uint32 boom_value = 2;
    repeated HomeBuilding buildings = 3;
    repeated HomeMonster monsters = 4;
    optional HomeTask task = 5;
    repeated HomeStyle styles = 6;
    optional HomePlantInfo highest_grass_info = 7; //最高品质可收获草信息
    optional HomePlantInfo highest_tree_info = 8; //最高品质可收获树信息
    optional uint32 plant_exp = 9; //种植经验
    optional uint32 plant_level = 10; //种植等级
}

message C2S_GetFriendAndGuildMemberInfo {
}

message S2C_GetFriendAndGuildMemberInfo {
    required uint32 ret = 1;
    repeated HomelandUser users = 2;
    optional uint64 sid = 3; //前端不需要使用
    optional uint64 uid = 4; //前端不需要使用
    optional uint32 timedout = 5;
}

message C2S_GetFriendAndGuildMemberDetailInfo {
    required uint64 friend_uid = 2;
}

message S2C_GetFriendAndGuildMemberDetailInfo {
    required uint32 ret = 1;
    optional HomelandUser user = 2;
    optional uint64 from_uid = 3;
    optional uint64 from_sid = 4;
}

message C2S_AssistFriendAndGuildMember {
    required uint64 friend_uid = 1;
    required uint64 monster_id = 2;
    optional uint64 from_uid = 3;
    optional uint64 from_sid = 4;
}

message S2C_AssistFriendAndGuildMember {
    required uint32 ret = 1;
    required uint64 friend_uid = 2;
    required uint64 monster_id = 3;
    optional BattleReport battle_report = 4;
    repeated Award awards = 5;
    optional uint32 remain_assist_count = 6;
    optional uint32 purchase_assist_count = 7;
    optional SumAddAward sum_add_awards = 8;
    optional uint64 from_uid = 9;
    optional uint64 from_sid = 10;
}

message C2S_AwardBuildingProduction {
    required uint64 id = 1; //唯一Id
}

message S2C_AwardBuildingProduction {
    required uint32 ret = 1;
    optional HomeBuilding building = 2;
    repeated Award awards = 3;
}

message S2C_UpdateGuildDailyTaskInfo {
    repeated GuildDailyTask tasks = 1;
}

message C2S_GetGuildDailyTaskInfo {
}

message GuildDailyTask {
    required uint32 type = 1; //任务类型,与daily_reward_info.xml的类型一致
    required uint64 value = 2; //对应类型的当前积累值
    repeated uint32 reward_id = 3; //已领取过的ID集合
}

message S2C_GetGuildDailyTaskInfo {
    required uint32 ret = 1;
    optional uint32 level = 2; //重置时间点的玩家等级
    repeated GuildDailyTask tasks = 3; //各模块日常任务数据
}

message C2S_GetGuildDailyTaskAward {
    repeated uint32 id = 1; //任务ID
}

message S2C_GetGuildDailyTaskAward {
    required uint32 ret = 1;
    repeated uint32 id = 2; //任务ID
    repeated Award awards = 3; //奖励
    optional uint32 active = 4;
}


message C2S_GetGuildActiveInfo {
}

message S2C_GetGuildActiveInfo {
    required uint32 ret = 1;
    repeated GuildMemberActive users = 2;
    repeated Award awards = 3; //奖励
}

message GuildMemberActive {
    optional uint64 user_id = 1;
    optional SimpleUser simple_user = 2;
    optional uint32 daily_active = 3;
    optional uint32 week_active = 4;
    optional uint32 today_contribution = 5; //今日贡献
    optional uint32 contribution = 6; //贡献
    optional uint32 position = 7; //职位
    optional uint32 time = 8; //加入时间

}

message S2C_SystemMessage {
    optional uint32 channel = 1;
    optional SimpleUser user = 2;
    repeated string content = 3;
    repeated Award award = 4;
    optional uint32 template = 5;
}

message C2S_GetGuildPartyInfo {

}

message S2C_GetGuildPartyInfo {
    required uint32 ret = 1;
    repeated SimpleUser joiners = 2; //参与人数
    optional uint32 cheers = 3; //已敬酒次数
    optional uint32 total_cheers = 4; //帮派总敬酒次数
    repeated Question questions = 5; //
    optional uint32 lucky_result = 6; //幸运签的奖励结果
    optional uint32 total_time = 7; //总累计时间
    optional uint32 last_start_sec = 8; //开始倒计时
    optional uint32 first_join_time = 9; //首先进入时间
}

message Question {
    required uint32 id = 1; //题目id
    repeated uint32 options = 2; //选项
    optional uint32 state = 3; // 0 未答  >0 玩家答题选项
}

message C2S_GuildPartyJoin {
    required uint32 part = 1; //1  敬酒 2 答题 3 幸运签
    optional uint32 options = 2; //答题答案
    optional uint32 question_id = 3; //题目id
    optional string content = 4; //敬酒词
    optional uint32 num = 5; //敬酒次数
}

message S2C_GuildPartyJoin {
    required uint32 ret = 1;
    repeated Award bonus = 2; //奖励
    optional uint32 part = 3;
    optional uint32 bonus_id = 4;
    optional uint32 num = 5; //敬酒次数
    optional uint32 total_cheers = 6; //总敬酒次数
}

message C2S_GuildPartyJoinerState {
}

message S2C_GuildPartyJoinerState {
    required uint32 ret = 1;
}

message S2C_GuildPartyReportJoinerState {
    required uint32 ret = 1;
    optional uint32 state = 2; //1 进入 2 离开
    optional SimpleUser joiner = 3;
}

//结算
message C2S_GuildPartyCalProfit {

}

message S2C_GuildPartyCalProfit {
    required uint32 ret = 1;
    optional uint32 total_time = 2; //总累计时间
    optional uint32 total_cheers = 3; //总敬酒次数
    optional uint32 party_join_time = 4; //开始计时点
}

//龙宫探宝
message Dragon {
    optional bool is_avaliable = 1; //活动是否开始
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 reward_time = 4;
    repeated uint32 all_goods = 5; //所有商品id
    repeated IntMap opens = 6; //宝箱的开启情况
    repeated uint32 reward_ids = 7; //已领奖id
    optional uint32 score = 8;
    optional CommonCount common_count = 9; //刷新次数
    optional uint32 rank = 10; //排名
    optional uint32 use_free_count = 11; //使用的免费次数
}

message C2S_GetDragonInfo {
}

message S2C_GetDragonInfo {
    required uint32 ret = 1;
    optional Dragon info = 2;
}

message C2S_DragonBuyGoods {
    required uint32 index = 1; //0表示一键开启
}

message S2C_DragonBuyGoods {
    required uint32 ret = 1;
    optional uint32 index = 2;
    optional uint32 good_id = 3; //单开的时候返回前端
    optional uint32 score = 4;
    optional uint32 user_rank = 5;
}

//重置商品
message C2S_RefreshDragon {
}

message S2C_RefreshDragon {
    required uint32 ret = 1;
    //repeated uint32 jp_id = 10; //极品商品id
    optional CommonCount common_count = 2; //已使用的免费刷新次数
    repeated uint32 goods = 3;
}

//领取积分奖励
message C2S_DragonReceiveReward {
    required uint32 id = 1;
}

message S2C_DragonReceiveReward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award awards = 3;
}

message DragonScoreRank {
    optional SimpleUser simple_user = 1;
    optional uint64 user_id = 2;
    optional uint32 score = 3;
    optional uint32 rank = 4;
}

message C2S_GetDragonRank {
    optional uint32 rank_type = 1;
}

message S2C_GetDragonRank {
    required uint32 ret = 1;
    repeated DragonScoreRank rank_list = 2;
    optional uint32 user_score = 3;
    optional uint32 user_rank = 4;
    optional uint32 rank_type = 5;
}

message S2C_NewDragonActivity {
    optional uint32 start_time = 1;
    optional uint32 end_time = 2;
    optional uint32 reward_time = 3;
}

//入口
message C2S_ExpeditionEntry {
}

message S2C_ExpeditionEntry {
    required uint32 ret = 1;
    optional uint32 checkpoint = 2; //第几关
    optional uint32 reset_times = 3; //已重置次数
    optional uint32 fight_times = 4; //已挑战次数
    repeated ExpeditionUnit units = 5;
    optional uint32 loot_times = 6; //宝箱已开启次数
}

message ExpeditionUnit {
    optional uint32 base_id = 1; //uid
    optional string name = 2; //昵称
    optional uint64 power = 3; //战力
    optional uint32 state = 4; // 0 正常显示 1 - 战斗中 2 - 已击杀
    optional uint32 level = 5;
    optional uint32 title = 6;
    optional uint32 hp = 7; //剩余血量百分比
    optional uint32 glory_level = 8; //荣耀等级
}

//重置
message C2S_ExpeditionReset {
}

message S2C_ExpeditionReset {
    required uint32 ret = 1;
    repeated ExpeditionUnit units = 2;
}

//挑战
message C2S_ExpeditionFight {
    required uint32 idx = 1; //矩阵所在位置
    optional bool fast = 2; //是否扫荡 true 是 false 否
}

message S2C_ExpeditionFight {
    required uint32 ret = 1;
    optional BattleReport report = 2; //战报
    repeated ExpeditionFomationDetail detail = 3;
    optional uint32 idx = 4;
    repeated Award awards = 5;
    optional uint32 hp = 6;
    optional bool fast = 7;
    optional bool fight_result = 8;
    optional string enemy_name = 9;
    optional uint32 enemy_base_id = 10;
}

message C2S_ExpeditionView {
    required uint32 idx = 1;
}

message S2C_ExpeditionView {
    required uint32 ret = 1;
    optional SimpleUser user = 2;
    repeated ExpeditionFomationDetail detail = 3;
    optional uint32 idx = 4;
}

message ExpeditionFomationDetail {
    optional uint32 base_id = 1;
    optional uint32 hp = 2;
}

message C2S_ExpeditionToNext {
}

message S2C_ExpeditionToNext {
    required uint32 ret = 1;
    repeated ExpeditionUnit units = 2;
    optional uint32 checkpoint = 3;
}

message C2S_ExpeditionLoot {
}

message S2C_ExpeditionLoot {
    required uint32 ret = 1;
    repeated Award award = 2;
}

message C2S_EnterFierceMainUI {
}

message S2C_EnterFierceMainUI {
    required uint32 ret = 1;
    optional uint32 fierce_state = 2; //积分赛状态
    optional uint32 fierce_time = 3; //剩余时间
    optional uint32 fierce_arena_state = 4; //争霸赛状态
    optional uint32 fierce_arena_time = 5; //剩余时间
    optional uint32 right_type = 7; //邀请函类型 1 南天门 2竞技场
    optional uint32 time = 8; //时间
    optional uint32 right_rank = 9; //排名
    optional uint32 race = 10; //如果是南天门 这里是种族
}

message C2S_EnterFierceArenaUI {
}

message FierceArenaUser {
    required SimpleUser user = 1;
    required uint32 rank = 2;
    required uint32 bcheer_count = 3;
}

message S2C_EnterFierceArenaUI {
    required uint32 ret = 1;
    repeated FierceArenaUser users = 2; //挑战玩家
    optional uint32 purchase_challenge_count = 3; //买了多少次
    optional uint32 use_challenge_count = 4; //用了多少次
    optional uint32 state = 5; //争霸赛状态
    optional uint32 remain_time = 6; //剩余时间
    optional uint32 rank = 7; //排名
}

message C2S_ChallengeFierceArenaUser {
    required uint32 rank = 1; //自己排名
    required uint64 cuid = 2; //对手uid
    required uint32 crank = 3; //对手排名
}

message S2C_ChallengeFierceArenaUser {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    repeated Award awards = 3;
    optional uint32 use_challenge_count = 4; //用了多少次
    optional uint32 rank = 7; //挑战后的排名
    optional uint32 cuid = 8; //对手uid
    optional uint32 crank = 9; //对手排名
}

message C2S_EnterFierceArenaRank {
}

message S2C_EnterFierceArenaRank {
    required uint32 ret = 1;
    repeated FierceArenaUser users = 2;
}

message C2S_EnterFierceArenaCheerUI {
    required uint32 begin_index = 1; //从1开始 下一次请求 赋值服务器返回的end_index
}

message S2C_EnterFierceArenaCheerUI {
    required uint32 ret = 1;
    repeated FierceArenaUser users = 2;
    optional uint32 end_index = 4;
    optional bool is_end = 5;
    optional uint32 purchase_cheer_count = 6; //购买助威次数
    optional uint32 remain_cheer_count = 7; //剩余多少次
    optional uint32 next_get_cheer_time = 8; //下次恢复时间
}

message C2S_ExecuteFierceArenaCheer {
    required uint64 uid = 1;
    required uint32 count = 2;
}

message S2C_ExecuteFierceArenaCheer {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional uint32 purchase_cheer_count = 3; //购买助威次数
    optional uint32 remain_cheer_count = 4; //剩余多少次
    optional uint32 next_get_cheer_time = 5; //下次恢复时间
    optional uint64 uid = 6;
    optional uint32 count = 7;
}

message C2S_PurchaseFierceArenaCount {
    required uint32 count = 1;
}

message S2C_PurchaseFierceArenaCount {
    required uint32 ret = 1;
    optional uint32 purchase_challenge_count = 3; //买了多少次
    optional uint32 use_challenge_count = 4; //用了多少次
}

message C2S_PurchaseFierceArenaCheerCount {
    required uint32 count = 1;
}

message S2C_PurchaseFierceArenaCheerCount {
    required uint32 ret = 1;
    optional uint32 purchase_cheer_count = 3; //购买助威次数
    optional uint32 remain_cheer_count = 4; //剩余多少次
    optional uint32 next_get_cheer_time = 5; //下次恢复时间
}

message S2C_GetFierceArenaFlushInfo {
    required uint32 ret = 1;
    optional uint32 fierce_arena_state = 2; //争霸赛状态
    optional uint32 fierce_arena_time = 3; //剩余时间
    //邀请函信息
    optional uint32 right_type = 4; //邀请函类型 1 南天门 2竞技场
    optional uint32 time = 5; //时间
    optional uint32 right_rank = 6; //排名
    optional uint32 race = 7; //如果是南天门 这里是种族
    //挑战次数
    optional uint32 purchase_challenge_count = 8; //买了多少次
    optional uint32 use_challenge_count = 9; //用了多少次
    //助威次数
    optional uint32 purchase_cheer_count = 10; //购买助威次数
    optional uint32 remain_cheer_count = 11; //剩余多少次
    optional uint32 next_get_cheer_time = 12; //下次恢复时间
}

message Dress {
    required uint32 id = 1;
    required uint32 level = 2; //等级
    required uint32 star = 3; //星级
}

message C2S_GetDress {

}
//获取所有时装信息
message S2C_GetDress {
    required uint32 ret = 1;
    repeated Dress dresses = 2;
}

//装备时装
message C2S_UseDress {
    required uint32 id = 1; //0代表卸下
}

message S2C_UseDress {
    required uint32 ret = 1;
    required uint32 id = 2;
}

//时装强化
message C2S_DressLevelUp {
    required uint32 id = 1;
}

message S2C_DressLevelUp {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 level = 3; //新的等级
}

//时装升星
message C2S_DressStarUp {
    required uint32 id = 1;
}

message S2C_DressStarUp {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 star = 3; //新的星级
}

//时装一键强化
message C2S_DressAutoLevelUp {
    required uint32 id = 1;
    required uint32 count = 2; //要升的等级
}

message S2C_DressAutoLevelUp {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 count = 3; //要升的等级
    required uint32 level = 4; //新的等级
    required uint32 star = 5; //新的星级
}

//时装重生
message C2S_DressReborn {
    required uint32 id = 1;
}

message S2C_DressReborn {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated Award awards = 3; //重生后获得的资源
}

//时装更新
message S2C_OpDress {
    repeated Dress update = 1;
    repeated Dress insert = 2;
    repeated uint32 delete = 3;
}

//月基金
message MonthFund {
    optional uint32 type = 1; //1 288; 2 128
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 recharge = 4; //充值
    optional uint32 award_time = 5; //领奖时间
    optional uint32 award_count = 6; //领奖次数
    optional uint32 group = 7; //活动类型
    optional uint32 activate = 8; //是否激活  1激活
    optional uint32 award_end_time = 9;
    optional uint32 count = 10; //
    repeated uint32 award_day = 11;
}

message C2S_GetMonthFund {

}

message S2C_GetMonthFund {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 group = 4; //活动类型
    optional uint32 award_end_time = 5;
    repeated MonthFund month_fund = 6; //月基金
}

message C2S_GetMonthFundAward {
    required uint32 day = 1;
    optional uint32 type = 2; //月基金类型1 288; 2 128
}

message S2C_GetMonthFundAward {
    required uint32 ret = 1;
    repeated Award award = 2;
    required uint32 day = 3;
    optional uint32 type = 4; //月基金类型1 288; 2 128
}

message StageBoss {
    required uint32 id = 1; //怪物id
    required uint32 time_type = 2; //出现时间 1 2 3 代表中午12点 18点 21点
    required uint32 angry = 3; //是否激活1 激活 0 为激活
    required uint32 kill = 4; //是否被击杀 1 激活 0 未击杀
}

message C2S_GetStageBoss {

}

message S2C_GetStageBoss {
    required uint32 ret = 1;
    repeated StageBoss bosses = 2;
}

message C2S_AngryStageBoss {
    required uint32 id = 1; //boss id
}

message S2C_AngryStageBoss {
    required uint32 ret = 1;
    required uint32 id = 2; //boss id
}

message C2S_FightStageBoss {
    required uint32 id = 1; //boss id
    optional bool angry = 2; //是否鼓舞
}

message S2C_FightStageBoss {
    required uint32 ret = 1;
    required uint32 id = 2; //boss id
    optional BattleReport battle_report = 3;
    optional bool is_win = 4; //是否胜利
    repeated Award awards = 5; //奖励
    optional bool angry = 6; //是否鼓舞
    optional uint32 exp = 7;
    optional uint32 money = 8;
    repeated AddAward add_awards = 9; //额外奖励
}

message C2S_GodcostTreasure {
    required uint64 id = 1;
}

message S2C_GodcostTreasure {
    required uint32 ret = 1;
}

message C2S_MelteTreasure {
    repeated uint64 id = 1; //材料
    required uint32 to_id = 2; //目标碎片
}

message S2C_MelteTreasure {
    required uint32 ret = 1;
}

message C2S_GoldTreasureSwallow {
    required uint64 id = 1; //宝物ID
    repeated uint64 treasure_ids = 2; //被吞噬的红宝物
}

message S2C_GoldTreasureSwallow {
    required uint32 ret = 1;
    optional uint64 id = 2; //金宝物ID
    optional uint32 swallow_lv = 3; //金宝物吞噬等级
    optional uint32 swallow_exp = 4; //金宝物当前经验
}

message C2S_GoldTreasureAwaken {
    required uint64 id = 1; //宝物ID
    repeated uint64 materials = 2; //消耗的同名卡
}

message S2C_GoldTreasureAwaken {
    required uint32 ret = 1;
    optional uint64 id = 2; //宝物ID
    optional uint32 level = 3; //宝物觉醒等级
}

message C2S_GoldTreasureTransfer {
    repeated uint64 materials = 1; //要消耗的宝物
}

message S2C_GoldTreasureTransfer {
    required uint32 ret = 1;
}

message C2S_CompleteHomeTask {
    required uint64 uid = 1; //任务所属的玩家
    optional uint32 task_type = 2;
}

message S2C_CompleteHomeTask {
    required uint32 ret = 1;
    required uint64 uid = 2;
    repeated Award awards = 3;
}

message C2S_PurchaseMyHomeTaskCount {
    required uint32 count = 1;
}

message S2C_PurchaseMyHomeTaskCount {
    required uint32 ret = 1;
    required uint32 count = 2;
}

message C2S_PurchaseCompleteCount {
    required uint32 count = 1;
}

message S2C_PurchaseCompleteCount {
    required uint32 ret = 1;
    required uint32 count = 2;
}

message C2S_WearHomeStyle {
    required uint64 id = 1; //建筑id
    required uint32 style_id = 2; //使用风格皮肤
}

message S2C_WearHomeStyle {
    required uint32 ret = 1;
    required uint64 id = 2;
    required uint32 style_id = 3;
}

message C2S_UpdateStyle {
}

message S2C_UpdateStyle {
    required uint32 ret = 1;
    repeated HomeStyle update = 2;
    repeated HomeStyle insert = 3;
    repeated uint32 delete = 4;
}

message C2S_GetHomeTaskInfo {
}

message S2C_GetHomeTaskInfo {
    required uint32 ret = 1;
    optional HomeTask task = 2;
}

message C2S_GetHomeMessageInfo {
    required uint64 uid = 1; //对方玩家uid 自己uid或者好友id
}

message HomeMessage {
    required uint64 uid = 1; //玩家ID
    required string name = 2; //玩家名字
    required uint32 time = 3; //留言时间
    required string context = 4; //留言内容
}

message S2C_GetHomeMessageInfo {
    required uint32 ret = 1;
    required uint64 uid = 2;
    optional string master_msg = 3; //主人
    repeated HomeMessage msgs = 4; //他人留言
}

message C2S_SetHomeMessageInfo {
    required uint32 set_type = 1; //1 修改主人寄语  2 留言
    required uint64 uid = 2; //对方玩家uid 自己uid或者好友id
    required string context = 3; //内容
}

message S2C_SetHomeMessageInfo {
    required uint32 ret = 1;
    required uint32 set_type = 2;
    required uint64 uid = 3;
    optional string master_msg = 4; //主人
    repeated HomeMessage msgs = 5; //他人留言
}

//自己浇水
message C2S_HomeWaterPlant {
    required uint64 build_id = 1;
}

message S2C_HomeWaterPlant {
    required uint32 ret = 1;
    required uint64 build_id = 2;
    optional uint32 total_rate = 3; //总计产量提升百分比
}

//摘取好友果实
message C2S_HomeGetFriendFruit {
    required uint64 build_id = 1;
    required uint64 friend_id = 2; //好友ID
    optional uint64 from_uid = 3;
    optional uint64 from_sid = 4;
    optional uint32 plant_level = 5;
}

message S2C_HomeGetFriendFruit {
    required uint32 ret = 1;
    required uint64 build_id = 2;
    repeated Award awards = 3;
    required uint64 friend_id = 4;
    optional CommonCount get_friend_fruit_common_count = 5; //玩家摘取好友果实通用次数
}

//收获果实
message C2S_HomeGetFruit {
    required uint64 build_id = 1;
}

message S2C_HomeGetFruit {
    required uint32 ret = 1;
    required uint64 build_id = 2;
    repeated Award awards = 3;
    optional uint32 event_plant_id = 4; //触发事件的果实ID
}

//求购事件
message C2S_HomeOtherBuyFruit {
    required uint32 event_plant_id = 1;
}

message S2C_HomeOtherBuyFruit {
    required uint32 ret = 1;
    required uint32 event_plant_id = 2;
    repeated Award awards = 3;
}

message C2S_PurchaseGetFriendFruitCount {
    required uint32 count = 1;
}

message S2C_PurchaseGetFriendFruitCount {
    required uint32 ret = 1;
    optional CommonCount common_count = 2;
}

message C2S_HomePlantSeed {
    required uint64 build_id = 1;
    required uint32 plant_id = 2;
}

message S2C_HomePlantSeed {
    required uint32 ret = 1;
    required uint64 build_id = 2;
    optional HomePlantInfo plant_info = 3; //植物信息
}

message C2S_HomeBuildingReborn {
    required uint64 build_id = 1;
}

message S2C_HomeBuildingReborn {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional HomeBuilding building = 3; //建筑信息
}

message C2S_AcientRank {
}

message S2C_AcientRank {
    required uint32 ret = 1;
    repeated AcientRank info = 2;
    optional uint32 today_soul = 3; //该玩家今日累积兽魂
}

message AcientRank {
    optional uint32 soul = 1; //历史每日最高兽魂
    optional SimpleUser simple_user = 2; //玩家信息
}

//神兽洞天入口
message C2S_AcientEntry {
}

message S2C_AcientEntry {
    repeated AcientEnemy enemies = 1; //对手
    optional uint32 reset_times = 2; //已重置次数
    optional uint32 fight_times = 3; //已挑战次数
    repeated uint32 loot_times = 5; //宝箱已开启次数 从1开始
    required uint32 ret = 6;
    optional uint32 suzaku = 7; //朱雀之力
    optional uint32 basalt = 8; //玄武
    optional uint32 dragon = 9; //青龙
    optional uint32 white_tiger = 10; //白虎
    optional uint32 loot_refresh_time = 11; //宝箱上次刷新时间
}

message AcientEnemy {
    optional uint32 base_id = 1; //武将表id
    optional string name = 2; //昵称
    optional uint64 power = 3; //战力
    optional uint32 state = 4; // 0 - 未击杀 1 - 已击杀
    optional uint32 soul = 5; //兽魂之力
    optional uint32 dress_id = 6; //时装
    optional uint32 position = 7; //从0 开始
    optional uint32 rank_lv = 8; //主角突破等级
    optional uint32 wing_id = 9; //主角翅膀ID
}

//神兽洞天刷新对手
message C2S_AcientReset {
}

message S2C_AcientReset {
    required uint32 ret = 1;
    repeated AcientEnemy enemies = 2;
    optional uint32 reset_times = 3; //已刷新次数
}

//神兽洞天战斗
message C2S_AcientFight {
    required uint32 index = 1; //挑战索引 从0开始
}

message S2C_AcientFight {
    required uint32 ret = 1;
    optional BattleReport report = 2; //战报
    optional uint32 index = 3; //挑战索引
    repeated Award awards = 4; //奖励
    optional uint32 monster_soul = 5; //神兽之力数量
}

//神兽洞天查看玩家信息
message C2S_AcientView {
    required uint32 index = 1; //索引从0开始
}

message S2C_AcientView {
    required uint32 ret = 1;
    optional SimpleUser enemy = 2;
    repeated uint32 formation = 3; //阵容
    optional uint32 index = 4; //索引
}

//神兽洞天开宝箱
message C2S_AcientLoot {
    optional uint32 index = 1; //从0 开始
    optional bool free = 2; // true 免费 false 付费
}

message S2C_AcientLoot {
    required uint32 ret = 1;
    repeated AcientBox box = 2;
    optional bool free = 3;
}

message AcientBox {
    repeated Award awards = 1; //奖励
    optional uint32 index = 2; //从 0 开始
}

//封神之战
//日志
message FightForKingLog {
    optional string name = 1; //战斗目标
    optional uint32 level = 2; //目标段位
    optional uint32 time = 3; //战斗时间
    optional uint64 sid = 4; //目标服务器id
    optional uint32 score = 5; //分数
    optional uint32 isadd = 6; //是否增加 1增加 2减少
    optional uint32 result = 7; //
    optional uint32 now_score = 8; //当前积分
    optional uint32 now_level = 9; //当前段位
    optional uint32 match = 10; //是否主动匹配 1 主动 2挨打
    optional uint32 change_level = 11; //段位变化 没变为0
    optional uint32 up_level = 12; //段位变化  1上升 2下降
}

//赛季物品
message FightForKingGoods {
    optional uint32 id = 1;
    optional uint32 count = 2;
}

//个人信息
message FightForKing {
    optional uint32 count = 1;
    repeated uint32 award = 2;
    optional uint32 max_level = 3;
    optional uint32 season_count = 4;
    optional uint32 season_win_count = 5;
    optional uint32 score = 6;
    repeated FightForKingGoods goods = 7;
    optional uint32 new_log_count = 8;
}

message C2S_GetFightForKingInfo {

}
message S2C_GetFightForKingInfo {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional FightForKing fight_for_king = 4;
    repeated uint32 shop_info = 5; //商品
}
//进入主界面
message C2S_GetFightForKing {

}
message S2C_GetFightForKing {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 all_server_rank = 7; //全服排行
    optional uint32 group_rank = 8; //战区排行
    optional uint32 server_rank = 9; //单服排行
    optional uint32 level = 10; //段位
    optional uint32 score = 11; //分数
    optional uint32 next_score = 12; //下赛季分数
    optional uint32 log_count = 13; //新增日志数量

}

message C2S_GetFightForKingLog {

}
message S2C_GetFightForKingLog {
    required uint32 ret = 1;
    repeated FightForKingLog logs = 2;
    optional uint32 score = 3; //分数
    optional uint32 isadd = 4; //是否增加 1增加 2减少
    optional uint32 count = 5; //新增数量
    optional uint32 now_score = 6; //当前积分
    optional uint32 now_level = 7; //当前段位
}

//进入技能主界面
message FightForKingSkillInfo {
    optional uint32 level = 1;
    optional uint32 exp = 2;
}

message FightForKingSkill {
    optional uint32 id = 1;
    optional FightForKingSkillInfo info = 2;
}

message C2S_GetFightForKingSkill {

}
message S2C_GetFightForKingSkill {
    required uint32 ret = 1;
    repeated FightForKingSkill skill = 2;
}

//学习技能
message C2S_LearnFightForKingSkill {
    required uint32 id = 1;
    optional uint32 points = 2;
}
message S2C_LearnFightForKingSkill {
    required uint32 ret = 1;
    optional uint32 points = 2;
    optional uint32 id = 3;
    optional FightForKingSkillInfo info = 4;
}

message FightForKingUser {
    optional SimpleUser user = 1;
    optional uint32 level = 2; //段位
    optional uint32 score = 3; //分数
    optional uint32 season_count = 4;
    optional uint32 season_win_count = 5;
}

//巅峰对决
message FightForKingReport {
    optional uint64 id = 1;
    optional FightForKingUser attack = 2;
    optional FightForKingUser defense = 3;
    optional uint32 result = 4;
    optional uint32 score = 5; //积分变化
    optional uint32 time = 6;
    repeated uint32 attack_knights = 7; //攻击方队伍
    repeated uint32 defense_knights = 8; //防守方队伍
}


message C2S_GetFightForKingBattle {
    required uint32 battle_type = 1; //1 全服 2 战区
}
message S2C_GetFightForKingBattle {
    required uint32 ret = 1;
    required uint32 battle_type = 2;
    repeated FightForKingReport report = 3;
}

message S2C_SendFightForKingBattle {
    required uint32 ret = 1;
    optional FightForKingReport report = 2;
    optional FightForKingReport group_report = 3;
}

//巅峰对决详细战报
message C2S_GetFightForKingBattleInfo {
    required uint64 id = 1;
    required uint32 battle_type = 2;
}
message S2C_GetFightForKingBattleInfo {
    required uint32 ret = 1;
    optional uint64 id = 2;
    optional uint32 battle_type = 3;
    optional BattleReport report = 4;
}

//进入王者荣誉
message FightForKingHonor {
    repeated FightForKingUser all_users = 1;
    repeated FightForKingUser group_users = 2;
    optional uint32 start_time = 3;
    optional uint32 end_time = 4;
}

message C2S_GetFightForKingHonor {

}
message S2C_GetFightForKingHonor {
    required uint32 ret = 1;
    repeated FightForKingHonor honor = 2;
}

//领取任务奖励
message C2S_GetFightForKingTaskAward {
    repeated uint32 ids = 1;
}
message S2C_GetFightForKingTaskAward {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
    repeated Award award = 3;
}

//
message C2S_GetFightForKingShop {

}
message S2C_GetFightForKingShop {
    required uint32 ret = 1;
    repeated uint32 shop_info = 2; //商品
    optional uint32 max_level = 3;
    repeated FightForKingGoods goods = 4;
    optional uint32 season_win_count = 5;
}

//
message C2S_FightForKingShopBuy {
    required uint32 id = 1;
    required uint32 count = 2;
}
message S2C_FightForKingShopBuy {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 count = 3;
    repeated Award award = 4;
}

//排行榜

message C2S_GetFightForKingRank {
    required uint32 rank_type = 1; //3 全服 2 战区 1 本服
}
message S2C_GetFightForKingRank {
    required uint32 ret = 1;
    required uint32 rank_type = 2;
    repeated FightForKingUser ranks = 3;
}

//匹配
message C2S_FightForKingMatch {

}
message S2C_FightForKingMatch {
    required uint32 ret = 1;
    optional BattleReport report = 2;
    optional FightForKingUser match_user = 3; //匹配玩家
    optional uint32 score = 4; //获取分数
    optional uint32 isadd = 5; //是否增加 1增加 2减少
    optional uint32 change_level = 6; //段位变化 没变为0
    optional uint32 up_level = 7; //段位变化  1上升 2下降
    optional uint32 all_server_rank = 8; //全服排行
    optional uint32 group_rank = 9; //战区排行
    optional uint32 server_rank = 10; //单服排行
    optional uint32 skill_score = 11; //获取分数
    optional uint32 old_server_rank = 12; //单服排行
}

message S2C_FightForKingBeMatch {
    required uint32 ret = 1;
    optional uint32 all_server_rank = 2; //全服排行
    optional uint32 group_rank = 3; //战区排行
    optional uint32 server_rank = 4; //单服排行
    optional uint32 level = 5; //段位
    optional uint32 score = 6; //分数
}

message Pet {
    required uint64 id = 1;
    required uint32 base_id = 2;
    optional uint32 level = 3;
    optional uint32 exp = 4;
    optional uint32 rank_lv = 5;
    optional uint32 star_lv = 6;
    //optional uint32 protect_pos = 7; //护佑的阵位 ，0代表未护佑
    optional uint32 swallow_level = 7; // 吞噬等级
    optional uint32 swallow_exp = 8; // 吞噬总经验
    repeated Award swallow_items = 9; //吞噬材料记录
    //以下三个字段是查看玩家详情的时候需要给前端
    optional uint32 hp = 10;
    optional uint32 atk = 11;
    optional uint32 def = 12;
}

message C2S_GetUserPet {
}

message S2C_GetUserPet {
    required uint32 ret = 1;
    repeated Pet pets = 2;
}

message C2S_PetLevelUp {
    required uint64 id = 1;
    repeated Award items = 2;
}
message S2C_PetLevelUp {
    required uint32 ret = 1;
}

message C2S_PetRankUp {
    required uint64 id = 1;
}

message S2C_PetRankUp {
    required uint32 ret = 1;
}

message C2S_PetStarUp {
    required uint64 id = 1;
}

message S2C_PetStarUp {
    required uint32 ret = 1;
}

message C2S_PetProtect {
    required uint32 pos = 1;
    required uint64 id = 2;
}

message S2C_PetProtect {
    required uint32 ret = 1;
    optional uint32 pos = 2;
    optional uint64 id = 3;
}

message C2S_PetUse {
    required uint64 id = 1; //0代表卸下
}

message S2C_PetUse {
    required uint32 ret = 1;
    repeated uint32 unequip_slots = 2; //那些孔的化身神兽要卸下来
    optional uint64 down_magic_id = 3; //卸下的法术id
}

message C2S_PetSwallow {
    required uint64 id = 1; // 神兽唯一ID
    repeated Award frag_ids = 2; // 被吞噬红兽碎片
}

message S2C_PetSwallow {
    required uint32 ret = 1;
    required uint64 id = 2; // 神兽唯一ID
    optional uint32 swallow_exp = 3; // 吞噬之后的总经验
    optional uint32 swallow_level = 4; // 吞噬之后的等级
}

message C2S_PetEquipIncar {
    required uint64 id = 1; // 神兽ID 0表示卸下
    required uint32 slot = 2; //槽位
}

message S2C_PetEquipIncar {
    required uint32 ret = 1;
    optional uint64 id = 2; // 神兽ID
    optional uint32 slot = 3; //槽位
    optional uint64 old_id = 4; //之前神兽ID
}

message C2S_PetEquipMagic {
    required uint64 magic_id = 1; //法术ID 0表示卸下
}

message S2C_PetEquipMagic {
    required uint32 ret = 1;
    optional uint64 magic_id = 2; //法术ID
    optional uint64 old_magic_id = 3; //之前法术ID
}

message C2S_PetSwapIncar {
    required uint32 slot1 = 1; //槽位1
    required uint32 slot2 = 2; //槽位2
}

message S2C_PetSwapIncar {
    required uint32 ret = 1;
    optional uint32 slot1 = 2; //槽位1
    optional uint32 slot2 = 3; //槽位2
}

message WeekFund {
    required uint32 charge = 1; //是否充值了 0 没有充值 1 已经充值
    repeated uint32 reward_days = 2; //已经领奖的天数
}

message C2S_GetWeekFund {

}

//推送周基金信息
message S2C_GetWeekFund {
    required uint32 ret = 1;
    required WeekFund week_fund = 2;
    required uint32 day = 3; //当前是开服第几天
    required uint32 end_time = 4; //结束时间 第七天的结束时间 时间戳
    optional uint32 days7_id = 5; //对应配表的days7_id
}

message C2S_GetWeekFundAward {
    required uint32 id = 1;
}

message S2C_GetWeekFundAward {
    required uint32 ret = 1; //
    required uint32 day = 2; //第几天
    repeated Award awards = 3; //奖励
    optional uint32 id = 4;
}

message C2S_GetRecallInfo {
    required uint32 main_ty = 1; //类型  0都需要 1福利追回 2回归西游 3再战西游
}

message S2C_GetRecallInfo {
    required uint32 ret = 1;
    required uint32 main_ty = 2;
    repeated RecallInfo infos = 3;
}

message RecallInfo {
    required uint32 main_ty = 1; //类型
    required uint32 start_time = 2; //开始时间
    required uint32 end_time = 3; //结束时间
    required uint32 loss_day = 4; //流失天数
    required uint32 vip_level = 5; //vip等级
    required uint32 role_level = 6; //人物等级
    repeated uint32 login_record = 7; //登录记录
    repeated RecallSell sells = 8; //领奖和购买记录
    optional uint32 single_max_recharge = 9; //每日单笔最大充值金额
    optional uint32 all_recharge = 10; //每日累计充值金额
    optional uint32 is_thank = 11;//是否领取感谢信(1表示领取0表示未领取)
}

message RecallSell {
    required uint32 child_ty = 1; //子类型
    required uint32 id = 2; //id
    required uint32 count = 3; //领奖或购买次数
}

message C2S_GetRecallReward {
    required uint32 main_ty = 1; //主类型
    required uint32 child_ty = 2; //子类型
    optional uint32 id = 3; //领奖或购买id
    required uint32 count = 4; //领奖或购买次数
}

message S2C_GetRecallReward {
    required uint32 ret = 1;
    required uint32 main_ty = 2;
    required uint32 child_ty = 3;
    optional uint32 id = 4;
    optional RecallSell sell = 5;
    repeated Award awards = 6;
}

message S2C_UpdateRecallInfo {
    required uint32 main_ty = 1; //主类型
    required uint32 start_time = 2; //开始时间
    required uint32 end_time = 3; //结束时间
    required uint32 loss_day = 4; //流失天数
    required uint32 vip_level = 5; //vip等级
    required uint32 role_level = 6; //人物等级
    repeated uint32 login_record = 7; //登录记录
    optional uint32 single_max_recharge = 8; //每日单笔最大充值金额
    optional uint32 all_recharge = 9; //每日累计充值金额

}

//入口
message C2S_LotteryEntry {
}

message S2C_LotteryEntry {
    required uint32 ret = 1;
    optional uint32 joined_times = 2; //抽奖次数
    optional uint32 start_time = 3; //开始时间
    optional uint32 end_time = 4; //活动结束时间
    optional uint32 exchange_time = 5; //活动兑换结束时间
    repeated IntMap rebate = 6; //已返利次数
    repeated IntMap exchange = 7; //已兑换次数
    repeated LotteryNotify notices = 8; //推送运气玩家
    optional uint32 free_joined_times = 9; //已使用免费次数
}

message LotteryNotify {
    optional string name = 1; //玩家昵称
    optional uint32 id = 2; //奖励id
}

//抽奖
message C2S_LotteryJoin {
    required uint32 type = 1; // 传1或10
}

message S2C_LotteryJoin {
    required uint32 ret = 1;
    repeated Award awards = 2;
    repeated uint32 id = 3; //奖励id
}

//运气玩家推送
message S2C_LotteryNotify {
    repeated LotteryNotify notice = 1;
}

//兑换
message C2S_LotteryExchange {
    required uint32 id = 1;
    required uint32 num = 2;
}

message S2C_LotteryExchange {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional uint32 id = 3;
    optional uint32 num = 4;
}

//返利
message C2S_LotteryRebate {
    required uint32 id = 1;
    required uint32 num = 2;
}

message S2C_LotteryRebate {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional uint32 id = 3;
    optional uint32 num = 4;
}

//排行榜
message C2S_LotteryLadder {
}

message S2C_LotteryLadder {
    required uint32 ret = 1;
    repeated LotteryRank info = 2;
    optional uint32 self_rank = 3; // 0 未入榜
    optional uint32 self_score = 4; // 积分
}

message LotteryRank {
    optional SimpleUser user = 1;
    optional uint32 score = 2; //积分
}

//三界斗法
message ScuffleEnemy {
    optional uint64 sid = 1;
    optional uint64 uid = 2;
    optional string name = 3;
    optional uint32 base_id = 4;
    optional uint32 rank_lv = 5;
    optional uint32 dress_id = 6;
    optional uint64 power = 7;
    optional uint32 title = 8;
    optional uint32 score = 9;
    optional uint32 fight_count = 10;
    optional bool is_killed = 11;
    optional uint32 wing_id = 12;
}
//进入界面
message C2S_GetScuffleInfo {
}

message S2C_GetScuffleInfo {
    required uint32 ret = 1;
    optional uint32 score = 2;
    optional uint32 server_rank = 3;
    optional uint32 all_rank = 4;
    optional uint32 last_score = 5; //0点结算的积分
    repeated uint32 received_ids = 6;
    repeated ScuffleEnemy enemy = 7;
    optional uint32 last_rank = 8; //0点结算时的全服排名
}

//获取敌军详情
message C2S_GetScuffleEnemyInfo {
    required uint64 uid = 1;
}
message S2C_GetScuffleEnemyInfo {
    required uint32 ret = 1;
    optional SimpleUser user = 2;
    repeated uint32 knight_base_id = 3;
    optional uint32 score = 4;
    optional uint32 rank = 5; //对手全服排名
}

//战斗
message C2S_ScuffleFight {
    required uint64 uid = 1;
}

message S2C_ScuffleFight {
    required uint32 ret = 1;
    optional bool is_win = 2;
    optional uint32 add_score = 3;
    optional uint32 add_point = 4;
    optional BattleReport report = 5;
    optional uint32 server_rank = 6;
    optional uint32 all_rank = 7;
    optional uint32 after_server_rank = 8;
    optional uint32 after_all_rank = 9;
    optional uint64 uid = 10;
    repeated Award awards = 11;
}

//拉取排行榜
message ScuffleRankInfo {
    optional SimpleUser user = 1;
    optional uint32 score = 2;
    optional uint32 rank = 3;
    optional uint32 global_rank = 4;
}

message C2S_GetScuffleRank {
    required uint32 rank_type = 1; // 1->本服 2-》全服
}

message S2C_GetScuffleRank {
    required uint32 ret = 1;
    repeated ScuffleRankInfo rank_list = 2;
    optional uint32 user_score = 3;
    optional uint32 user_rank = 4;
    optional uint32 rank_type = 5;
}

//领取每日奖励
message C2S_GetScuffleDailyReward {
    repeated uint32 id = 1;
}

message S2C_GetScuffleDailyReward {
    required uint32 ret = 1;
    repeated uint32 id = 2;
}

//查看日志
message C2S_GetScuffleLog {
}

message ScuffleLog {
    required uint32 time = 1;
    optional string name = 2;
    optional bool is_win = 3;
    optional uint32 change_score = 4;
    optional uint32 after_score = 5;
    optional uint32 after_rank = 6;
}

message S2C_GetScuffleLog {
    required uint32 ret = 1;
    repeated ScuffleLog log = 2;
    optional uint32 last_time = 3; //上次拉取日志的时间
}

message C2S_GetFlameUIInfo {
}

message S2C_GetFlameUIInfo {
    required uint32 ret = 1;
    optional uint32 score = 2;
    optional uint32 score_rank = 3;
    optional CommonCount common_count = 4;
}

message C2S_CreateFlameTeam {
}

message S2C_CreateFlameTeam {
    required uint32 ret = 1;
}

message FlameTeam {
    required uint64 id = 1;
    repeated FlameUser users = 2;
    optional uint32 state = 3;
}

message FlameUser {
    optional SimpleUser user = 1;
    optional uint32 state = 2;
    optional uint32 locate = 3; //1 2 3 4 5
    optional uint32 right = 4; //1队员 2队长
    optional uint32 title_id = 5; //title表id
    optional uint32 remain_reward_count = 6; //剩余领奖次数
}

message C2S_UserMatchFlameTeam {
    required uint32 op_type = 1; //1 匹配 2取消匹配
}

message S2C_UserMatchFlameTeam {
    required uint32 ret = 1;
    required uint32 op_type = 2; //1 匹配 2取消匹配
}

message C2S_FlameOneKeyRequest {
}

message S2C_FlameOneKeyRequest {
    required uint32 ret = 1;
}

message C2S_FlameTeamMatchFlameTeam {
    required uint32 op_type = 1; //1 匹配 2取消匹配
}

message S2C_FlameTeamMatchFlameTeam {
    required uint32 ret = 1;
    required uint32 op_type = 2; //1 匹配 2取消匹配
}

message S2C_FlameTeamMatchBattle {
    required uint32 ret = 1;
    required uint32 op_type = 2; //1 匹配 2取消匹配
    optional BattleTeamReport battle_report = 3; //战报
    optional uint32 add_coe = 5; //加成系数
    optional uint32 add_score_award = 6; //基础积分奖励
    optional uint32 add_fire_award = 7; //基础火魂奖励
    optional CommonCount common_count = 8;
    optional bool is_two = 10; //奖励是否翻倍
    optional uint32 add_fire_soul_award = 11; //基础火魂精魄奖励
    optional Award buddhism_book = 12; //掉落的修行之书
}

message S2C_UpdateFlameTeamInfo {
    required uint64 uid = 1;
    required FlameTeam team = 2;
}

message C2S_BuyFlameChallengeCount {
    required uint32 count = 1;
}

message S2C_BuyFlameChallengeCount {
    required uint32 ret = 1;
    optional CommonCount common_count = 2;
}

message C2S_GetFlameVideoBaseInfo {
}

message S2C_GetFlameVideoBaseInfo {
    required uint32 ret = 1;
    repeated FlameSimpleVideo videos = 2;
}

message FlameSimpleVideo {
    required uint64 id = 1;
    repeated string win_member = 2;
    repeated string fail_member = 3;
}

message C2S_GetFlameVideoSpeciInfo {
    required uint64 id = 1;
}

message S2C_GetFlameVideoSpeciInfo {
    required uint32 ret = 1;
    optional BattleTeamReport battle_report = 2;
}

message C2S_GetFlameFriendList {
}

message S2C_GetFlameFriendList {
    required uint32 ret = 1;
    repeated FlameFriendUser users = 2;
}

message FlameFriendUser {
    optional SimpleUser user = 1;
    optional uint32 title_id = 2;
    //	optional uint32 last_time = 3; //上次邀请时间
}

message C2S_FlameRequestFriend {
    required uint64 friend_uid = 1;
}

message S2C_FlameRequestFriend {
    required uint32 ret = 1;
    required uint64 friend_uid = 2;
}

message C2S_GetFlameRequestUI {
}

message S2C_GetFlameRequestUI {
    required uint32 ret = 1;
    repeated FlameFriendUser users = 2;
}

message C2S_DealFlameFriendRequest {
    required uint32 op_type = 1; //1同意 2拒绝
    required uint64 friend_uid = 2;
}

message S2C_DealFlameFriendRequest {
    required uint32 ret = 1;
    required uint32 op_type = 2;
    required uint64 friend_uid = 3;
}

message C2S_GetFlameRankInfo {
}

message S2C_GetFlameRankInfo {
    required uint32 ret = 1;
    repeated FlameRank users = 2;
    optional uint32 my_rank = 3;
}

message FlameRank {
    required SimpleUser simple_user = 1;
    required uint32 score = 2;
    required uint32 title_id = 3;
    required uint32 rank = 4;
}

message C2S_FlameTeamMemberReady {
    required uint32 op_type = 1; //1 队员准备  2 取消准备 3 退出队伍
}

message S2C_FlameTeamMemberReady {
    required uint32 ret = 1;
    required uint32 op_type = 2;
}

message C2S_ChangeFlameTeamState {
}

message S2C_ChangeFlameTeamState {
    required uint32 ret = 1;
}

message C2S_KickFlameTeamMember {
    required uint64 uid = 1; //被踢出玩家uid
}

message S2C_KickFlameTeamMember {
    required uint32 ret = 1;
}

message C2S_MoveFlameTeamMemberLocation {
    required uint32 locate1 = 1;
    required uint32 locate2 = 2;
}

message S2C_MoveFlameTeamMemberLocation {
    required uint32 ret = 1;
}

message C2S_GetMyServerFlameTeamUI {
    required uint32 op_type = 1; //1得到信息  2退出界面
}

message S2C_GetMyServerFlameTeamUI {
    required uint32 ret = 1;
    required uint32 op_type = 2;
    repeated FlameTeamSimpleInfo teams = 3;
}

message FlameTeamSimpleInfo {
    required uint64 id = 1;
    required FlameUser user = 2; //队长信息
    required uint32 num = 3; //队伍人数
    required uint32 ave_lv = 4; //平均等级
}

message C2S_RequestJoinMyServerFlameTeam {
    required uint64 uid = 1; //申请加入队伍队长UID
    required uint64 team_id = 2; //申请加入队伍ID
    required uint64 sid = 3; //申请加入队伍队长SID
}

message S2C_RequestJoinMyServerFlameTeam {
    required uint32 ret = 1;
    required uint64 uid = 2;
    required uint64 team_id = 3;
}

message C2S_GetJoinFlameTeamRequestList {
}

message S2C_GetJoinFlameTeamRequestList {
    required uint32 ret = 1;
    repeated FlameUser user = 2; //申请玩家信息
}

message C2S_DealJoinFlameTeamRequest {
    required uint64 request_uid = 1;
    required uint32 op_type = 2; //1 同意 2拒绝
}

message S2C_DealJoinFlameTeamRequest {
    required uint32 ret = 1;
    required uint32 op_type = 2;
    required uint64 request_uid = 3;
}

message S2C_FlameUpdateMyRank {
    required uint32 rank = 2;
}

message C2S_GetFlameShopInfo {
}

message S2C_GetFlameShopInfo {
    required uint32 ret = 1;
    repeated FlameGoods goods = 2;
}

message FlameGoods {
    required uint32 goods_id = 1; //商品ID
    required uint32 count = 2; //购买次数
}

message C2S_BuyFlameShopGoods {
    required uint32 goods_id = 1;
    required uint32 count = 2;
}

message S2C_BuyFlameShopGoods {
    required uint32 ret = 1;
    required uint32 goods_id = 2;
    required uint32 count = 3;
    repeated Award awards = 4;
}

message S2C_FlameUpdateAddCoe {
    repeated uint32 coes = 1; //长度为3，分别代表三种加成值
}

message S2C_FlameCrossServerStop {
    required uint32 ret = 1;
}

message LevelPrize {
    repeated IntMap time_info = 1;
    repeated IntMap count_info = 2;
}

message C2S_GetLevelPrize {

}
message S2C_GetLevelPrize {
    required uint32 ret = 1;
    optional LevelPrize level_prize = 2;
}

message C2S_LevelPrizeBuy {
    optional uint32 id = 1;
    optional uint32 count = 2;
}
message S2C_LevelPrizeBuy {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 count = 3;
}

message C2S_MammonEntry {
}

message S2C_MammonEntry {
    required uint32 ret = 1;
    optional uint32 start = 2;
    optional uint32 end = 3;
    repeated IntMap packages = 4;
}

message C2S_MammonReceive {
    required uint32 id = 1;
    optional uint32 client_id = 2;
}

message S2C_MammonReceive {
    required uint32 ret = 1;
    repeated Award gift = 2;
    optional uint32 id = 3;
    optional uint32 client_id = 4;
}

message BattleTeamReport {
    repeated BattleSimpleMember attack_members = 1;
    repeated BattleSimpleMember defense_members = 2;
    repeated BattleSimpleReport reports = 3;
    optional bool is_win = 4; //攻击方是否胜利
    optional uint32 my_team = 5; //观看的是攻击方还是防守方 1 是攻击方 2是防守方
}

message BattleSimpleMember {
    optional uint32 pos = 1; //位置
    optional SimpleUser user = 2;
    optional uint32 flame_title = 3; //大战火焰山头衔
    optional uint32 monster_id = 4; //PVE简报对应的MonsterID
    optional uint64 monster_power = 5; //monster战力
    optional uint32 buff_id = 6; //buff id
}

//战斗简报
message BattleSimpleReport {
    optional BattleSimpleMemberInfo attack_member = 1; //攻击方
    optional BattleSimpleMemberInfo defense_member = 2; //防守方
    optional bool is_win = 3; //攻击方是否胜利
    optional uint32 first_order = 4; //谁先手 1 攻击方先手 2 防守方先手
    repeated BattleSimpleRound rounds = 5; //攻击回合
}

message BattleSimpleMemberInfo {
    optional uint32 pos = 1; //位置
    optional uint64 max_hp = 3; //最大血量
    optional uint64 hp = 4; //当前血量
}

message BattleSimpleRound {
    optional uint32 attack_type = 1; //攻击方血量变化 1 加血 2 扣血
    optional uint64 attack_value = 2; //攻击方血量变化值
    optional uint32 defense_type = 3;
    optional uint64 defense_value = 4;
}

message C2S_ReName {
    required string name = 1;
}
message S2C_ReName {
    required uint32 ret = 1;
    optional string name = 2;
}

//五行山
message C2S_FiveFingerGetInfo {
}

message S2C_FiveFingerGetInfo {
    required uint32 ret = 1;
    repeated IntMap max_stage = 2;
    repeated IntMap daily_box = 3;
    required CommonCount common_count = 4;
    optional uint32 user_rank = 5;
    optional uint32 user_all_rank = 6;
    optional CommonCount challenge_count = 7;
    optional uint32 challenge_max_stage = 8;
}

//挑战关卡
message C2S_FiveFingerExecuteStage {
    required uint32 id = 1;
    optional uint32 battle_type = 2; //普通挑战:0, 一键挑战:1
}

message S2C_FiveFingerExecuteStage {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional BattleReport battle_report = 3;
    repeated Award award = 4;
    optional Award first_award = 5;
    repeated Award box_award = 6;
    optional uint32 user_rank = 7;
    optional uint32 battle_type = 8; //普通挑战:0, 一键挑战:1
    optional bool is_win = 9;
}

//购买挑战次数
message C2S_FiveFingerBuyCount {
    required uint32 num = 1;
}

message S2C_FiveFingerBuyCount {
    required uint32 ret = 1;
    required uint32 num = 2;
    optional CommonCount common_count = 3;
}

//购买每日宝箱
message C2S_FiveFingerBuyDailyBox {
    required uint32 id = 1;
    optional uint32 cost_gold = 2;
}

message S2C_FiveFingerBuyDailyBox {
    required uint32 ret = 1;
    required uint32 id = 2;
}

//获取排行榜
message FiveFingerRank {
    required SimpleUser user = 1;
    required uint32 total_stage = 2;
    required uint32 rank = 3;
}

message C2S_FiveFingerGetRank {
    required uint32 rank_type = 1; //1 -> 本服排行榜 2 -> 全服排行榜
}

message S2C_FiveFingerGetRank {
    required uint32 ret = 1;
    required uint32 rank_type = 2;
    repeated FiveFingerRank lists = 3;
    optional uint32 user_rank = 4;
    optional uint32 user_all_rank = 5;
}

message C2S_FiveFingerAutoStage {
    required uint32 id = 1;
}

message S2C_FiveFingerAutoStage {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated Award award = 3;
}
//挑战秘境
message C2S_FiveFingerExecuteChallenge {
    required uint32 id = 1;
}

message S2C_FiveFingerExecuteChallenge {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional BattleReport battle_report = 3;
    optional Award first_award = 4;
    repeated Award award = 5;
    optional bool is_win = 6;
    optional CommonCount challenge_count = 7;
    optional uint32 challenge_max_stage = 8;
}

//法术
message OpMagic {
    repeated Magic insert = 1;
    repeated Magic update = 2;
    repeated uint64 delete = 3;
}

message Magic {
    required uint64 id = 1; //id
    required uint32 base_id = 2; //系统id
    required uint32 level = 3; //当前等级
    required uint32 exp = 4; //当前经验
    required uint32 rank = 5; //星级
    repeated Int64Map strong = 6; //增幅
    optional uint64 assist_id = 7; //辅修法术
    optional uint32 assist_base_id = 8; //辅修法术baseid
}

message C2S_LevelUpMagic {
    required uint64 id = 1; //id
    repeated Award items = 2; //
}
message S2C_LevelUpMagic {
    required uint32 ret = 1;
    required uint64 id = 2; //id
}

message C2S_StarUpMagic {
    required uint64 id = 1; //id
}
message S2C_StarUpMagic {
    required uint32 ret = 1;
    required uint64 id = 2; //id
}


message C2S_StrongMagic {
    required uint64 id = 1; //id
    required uint64 to_id = 2; //目标id
    required uint32 pos = 3; //
}
message S2C_StrongMagic {
    required uint32 ret = 1;
    required uint64 id = 2; //id
    required uint64 to_id = 3; //目标id
    required uint32 pos = 4; //
}

message C2S_EquipMagic {
    required uint64 id = 1; //id
    required uint32 team = 2; //
    required uint32 pos = 3; //
}
message S2C_EquipMagic {
    required uint32 ret = 1;
    required uint64 id = 2; //id
    required uint32 team = 3; //
    required uint32 pos = 4; //
    optional uint64 old_id = 5; //
}

message C2S_GetMagic {

}
message S2C_GetMagic {
    required uint32 ret = 1;
    repeated Magic magics = 2;
}
message C2S_AssistMagic {
    required uint64 id = 1; //id
    required uint64 assist_id = 2;
}
message S2C_AssistMagic {
    required uint32 ret = 1;
    required uint64 id = 2; //id
    optional uint64 assist_id = 3;
    optional uint64 old_assist_id = 4;
}

message C2S_GetWealthGodUI {
}

message S2C_GetWealthGodUI {
    required uint32 ret = 1;
    optional uint32 start_time = 2; //活动开始时间
    optional uint32 end_time = 3; //活动结束时间
    repeated uint32 ids = 5; //明细
    repeated IntMap sale_ids = 6; //贩售
}

message WealthGodNotice {
    required string name = 1;
    required uint32 id = 2;
}

message C2S_DrawWealthGod {
}

message S2C_DrawWealthGod {
    required uint32 ret = 1;
    optional uint32 id = 2; //随机到的id
    repeated Award awards = 3; //奖励
}

message S2C_WealthGodNotice {
    required uint32 start_time = 1;
    required uint32 end_time = 2;
}

message C2S_DrawWealthBuy {
    required uint32 sale_id = 1; //商品ID
    required uint32 sale_num = 2; //商品数量
}

message S2C_DrawWealthBuy {
    required uint32 ret = 1;
    repeated Award awards = 2; //奖励
    repeated IntMap sale_ids = 3; //贩售
}

//神将化红
message C2S_KnightChangeLevel {
    required uint64 id = 1; //武将唯一id
}

message S2C_KnightChangeLevel {
    required uint32 ret = 1; //
    required uint64 id = 2; //武将唯一id
}

//金将升星
message C2S_KnightGoldUpgradeStar {
    required uint64 id = 1; //武将唯一id
}

message S2C_KnightGoldUpgradeStar {
    required uint32 ret = 1; //返回值
    required uint64 id = 2; //武将ID
    required uint32 level = 3; //升星之后的等级
}

//金将吞噬
message C2S_KnightGoldSwallowed {
    required uint64 id = 1; //武将唯一id
    repeated Award frag_ids = 2; //被吞噬的红将碎片
}

message S2C_KnightGoldSwallowed {
    required uint32 ret = 1; //返回值
    required uint64 id = 2; //武将ID
    required uint32 swall_exp = 3; //吞噬之后的经验
}

message GuildTalent {
    required uint32 id = 1;
    required uint32 level = 2;
}

message C2S_GetGuildTalent {

}

message S2C_GetGuildTalent {
    required uint32 ret = 1;
    repeated GuildTalent guild_talents = 2;
}

message C2S_LearnGuildTalent {
    required uint32 id = 1; //要学习的技能id
}

message S2C_LearnGuildTalent {
    required uint32 ret = 1;
    optional GuildTalent guild_talent = 2;
}

message C2S_ResetGuildTalent {

}

message S2C_ResetGuildTalent {
    required uint32 ret = 1;
}

message S2C_UpdateGuildBattleInfo {
    required uint64 guild_id = 1;
    repeated GuildBattleMember members = 2;
    optional uint32 fire_city_id = 3;
    optional string enemy_name = 4;
    optional uint32 dec_point = 5;
}

//帮战
message C2S_GetGuildBattleInfo {
}

message S2C_GetGuildBattleInfo {
    required uint32 ret = 1;
    optional GuildBattle guild_battle = 2;
    optional uint32 guild_score = 3; //帮派积分
    optional uint32 guild_score_rank = 4; //帮派排名
    optional uint32 my_score = 5; //个人积分
    optional uint32 my_score_rank = 6; //个人排名
    optional uint32 state = 7; //状态
    optional uint32 state_start_time = 8; //本状态开始时间
    optional uint32 state_end_time = 9; //本状态结束时间
    optional uint32 sign_end_time = 10; //报名截止时间
    optional uint32 battle_start_time = 11; //帮战开始时间
    optional uint32 season_start_time = 12; //赛季开始时间 0 代表第一个赛季
    optional uint32 season_end_time = 13; //赛季结束时间
    optional uint32 guild_last_score = 14; //上个赛季的积分 上个赛季积分大于0才有资格领奖 否则就是上个赛季没有参加
    optional uint32 guild_last_rank = 15; //上个赛季的排名
    optional uint32 my_award_time = 16; //我的领奖时间 如果大于0 代表的是上次的领奖时间 如果在当前赛季内 代表上个赛季的奖励已经领取了
}

message GuildBattle {
    required uint64 guild_id = 1; //帮派ID
    required string guild_name = 2; //办公名字
    required uint32 sign_time = 3; //报名时间
    repeated GuildBattleMember members = 4; //玩家信息
    required uint64 enemy_guild_id = 5; //敌方帮派ID
    optional uint32 guild_icon = 6; //帮派icon
    optional uint64 enemy_guild_sid = 7;
    optional uint32 enemy_guild_icon = 8;
    optional string enemy_guild_name = 9;
}

message GuildBattleMember {
    required SimpleUser simple_user = 1; //
    optional uint32 score = 2; //积分
    optional uint32 city_id = 3; //城池ID
    optional uint32 be_battle_time = 4; //上次被攻打时间
    optional uint32 defense_point = 5; //防御点数
    optional bool is_die = 6; //是否死亡
    optional uint32 be_attack_count = 7; //被攻击次数
}

message C2S_GuildBattleSign {
}

message S2C_GuildBattleSign {
    required uint32 ret = 1;
}

message C2S_GuildBattleArray {
    required uint32 city_id = 2; //城池ID
    repeated uint64 uid = 3; //被布防的玩家UID
}

message S2C_GuildBattleArray {
    required uint32 ret = 1;
    required uint32 city_id = 2;
    repeated uint64 uid = 3;
}

message C2S_GuildBattleAttack {
    required uint64 defense_uid = 1;
}

message S2C_GuildBattleAttack {
    required uint32 ret = 1;
    required uint64 defense_uid = 2;
    optional BattleReport battle_report = 3;
    optional uint32 score = 4;
    optional uint32 attack_count = 5; //攻击次数
    optional uint32 refresh_time = 6; //攻击次数上次恢复时间
    optional uint32 last_attack_time = 7; //上次攻击失败时间
    optional uint32 score_rank = 8; //积分排名
    optional uint32 defense_old_point = 9; //原防御点数
    optional uint32 defense_new_point = 10; //新防御点数
}

message C2S_GuildBattleFire {
    required uint32 city_id = 2; //city_id = 0  表示取消集火
}

message S2C_GuildBattleFire {
    required uint32 ret = 1;
    optional uint32 city_id = 3;
}

message C2S_GetGuildBattleEnemyInfo {
}

message S2C_GetGuildBattleEnemyInfo {
    required uint32 ret = 1;
    optional GuildBattle guild_battle = 2; //敌方帮战信息
    optional uint32 guild_score = 3; //帮派积分
    optional uint32 guild_score_rank = 4; //帮派排名
    optional uint32 my_score = 5; //个人积分
    optional uint32 my_score_rank = 6; //个人排名
    optional uint32 state = 7; //状态
    optional uint32 state_end_time = 8; //本状态结束时间
    optional uint32 attack_count = 9; //攻击次数
    optional uint32 refresh_time = 10; //攻击次数上次恢复时间
    optional uint32 last_attack_time = 11; //上次攻击失败时间
    optional uint32 fire_city_id = 12; //集火城池ID
}

message C2S_GetGuildBattleRank {
    required uint32 type = 1; //1全区 2战区 3个人
}

message S2C_GetGuildBattleRank {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated GuildBattleGuildRank guilds = 3;
    repeated GuildBattleUserRank users = 4;
}

message GuildBattleGuildRank {
    required uint32 rank = 1;
    required uint64 sid = 2;
    required uint64 guild_id = 3;
    required string guild_name = 4;
    required uint32 icon = 5;
    required uint32 guild_score = 6;
    required uint32 guild_lv = 7;
}

message GuildBattleUserRank {
    required uint32 rank = 1;
    required uint32 score = 2;
    required uint32 attack_count = 3;
    required SimpleUser user = 4;
    repeated Award awards = 5;
}

message S2C_GuildBattleEndAccount {
    required uint32 ret = 1;
    optional uint32 is_win = 2;
    optional uint32 old_score = 3;
    optional uint32 new_score = 4;
    repeated Award awards = 5;
}

message C2S_GetGuildBattleStateInfo {
}

message S2C_GetGuildBattleStateInfo {
    required uint32 ret = 1;
    optional uint32 state = 7; //状态
    optional uint32 state_start_time = 8; //本状态开始时间
    optional uint32 state_end_time = 9; //本状态结束时间
    optional uint32 sign_time = 10; //报名时间
    optional bool season_award = 11; //是否有赛季奖励可以领取 false 没有 true 有
}

message C2S_GetGuildBattleTeamView {
    required uint64 sid = 1;
    required uint64 uid = 2;
}

message S2C_GetGuildBattleTeamView {
    required uint32 ret = 1;
    optional SimpleUser simple_user = 2;
    repeated uint32 formation = 3; //阵容
    optional uint64 sid = 4;
    optional uint64 uid = 5;
    optional uint32 win_score = 6;
    optional uint32 lose_score = 7;
}

message C2S_GetGuildBattleReport {
}

message S2C_GetGuildBattleReport {
    required uint32 ret = 1;
    optional GuildBattleReport report = 2;

}

message GuildBattleReport {
    optional uint64 enemy_guild_sid = 1;
    optional uint64 enemy_guild_id = 2;
    optional string enemy_guild_name = 3;
    optional uint32 enemy_guild_icon = 4;
    optional uint32 is_win = 5;
    optional uint32 old_score = 6;
    optional uint32 new_score = 7;
    repeated Award awards = 8;
}

message C2S_GetGuildBattleSeasonAward {
}

message S2C_GetGuildBattleSeasonAward {
    required uint32 ret = 1;
    optional uint32 rank = 2; //上赛季排名
    optional uint32 new_icon = 3; //新的图标 只有变化的时候才会传给前端
    repeated Award awards = 4; //个人奖励 不包括图标

}

message GuildBattleHistory {
    required uint32 start_time = 1; //赛季开始时间
    required uint32 end_time = 2; //赛季结束时间
    repeated GuildBattleGuildRank ranks = 3; //前3名
}

//暂时不做分页
message C2S_GetGuildBattleHistory {

}

message S2C_GetGuildBattleHistory {
    required uint32 ret = 1;
    repeated GuildBattleHistory lists = 2;
}


message C2S_GetMagicChange {

}

message S2C_GetMagicChange {
    required uint32 ret = 1;
    required uint32 count = 2; //兑换次数
    required uint32 start_time = 3; //开始时间
    required uint32 end_time = 4; //结束时间
}

message C2S_DoMagicChange {

}

message S2C_DoMagicChange {
    required uint32 ret = 1;
}


message UserIdentity {
    required uint64 uid = 1;
    required uint64 sid = 2;
    required string uuid = 3;
    required string name = 4; //真实姓名
    required string number = 5; //身份证号码
}

message C2S_GetUserIdentity {

}

message S2C_GetUserIdentity {
    required uint32 ret = 1;
    optional bool has = 2; //是否认证过
    optional UserIdentity user_identity = 3;

}

message C2S_ModifyUserIdentity {
    required string name = 1; //真实姓名
    required string number = 2; //身份证号码
}

message S2C_ModifyUserIdentity {
    required uint32 ret = 1;
}

message C2S_GetIdentityAward {

}

message S2C_GetIdentityAward {
    required uint32 ret = 1;
    repeated Award awards = 2;
}

message C2S_GetGemDrawInfo {
}

message S2C_GetGemDrawInfo {
    required uint32 ret = 1;
    repeated GemDraw gem_draw = 2;
}

message GemDraw {
    required uint32 type = 1; //1普通 2高级
    required uint32 start_time = 2;
    required uint32 end_time = 3;
    required uint32 view_end_time = 4;
    required uint32 today_score = 5;
    required uint32 total_score = 6;
    required uint32 total_rank = 7;
    required uint32 use_count = 8; //用掉的次数
    repeated GemDrawGoods goods = 9;
    optional uint32 total_money = 10; //总共充值金额
}

message GemDrawGoods {
    required uint32 id = 1; //表ID
    required uint32 count = 2; //购买次数
}

message C2S_DrawGemDraw {
    required uint32 type = 1; //1普通  2高级
    required uint32 draw_type = 2; //1免费  2非免费
    required uint32 count = 3;
}

message S2C_DrawGemDraw {
    required uint32 ret = 1;
    optional uint32 type = 2; //1普通  2高级
    optional uint32 draw_type = 3; //1免费  2非免费
    optional uint32 count = 4;
    repeated Award awards = 5; //抽到的奖励
    optional uint32 rank = 6;
    repeated uint32 ids = 7; //抽到的奖励id
}

message C2S_PurchaseGemDrawGoods {
    required uint32 type = 1; //1普通  2高级
    required uint32 id = 2;
    required uint32 count = 3;
}

message S2C_PurchaseGemDrawGoods {
    required uint32 ret = 1;
    optional uint32 type = 2; //1普通  2高级
    optional uint32 id = 3;
    optional uint32 count = 4;
    repeated Award awards = 5;
}

message C2S_GetGemDrawRank {
    required uint32 type = 1; //1普通 2高级
}

message S2C_GetGemDrawRank {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated GemDrawRank ranks = 3;
}

message GemDrawRank {
    required uint32 rank = 1;
    required uint32 score = 2;
    required SimpleUser user = 3;
}

message S2C_NoticeGemDrawActivity {
    optional uint32 op = 1; //1 修改 2删除
    optional uint32 activity_id = 2; //1 灵山 2神山
    optional uint32 start_time = 3;
    optional uint32 end_time = 4;
    optional uint32 reward_time = 5;
}

message Gem {
    required uint32 id = 1; //宝石id
    required uint32 num = 2; //宝石数量
    
}

//

message GemInteam {
    required uint32 t = 1; //类型 1 翅膀
    required uint64 id = 2; //翅膀id
    required uint32 pos = 3; //翅膀位置
    required uint32 gem_id = 4; //宝石id
}

//获取包裹里的宝石信息
message C2S_GemGetInfo {

}

message S2C_GemGetInfo {
    required uint32 ret = 1;
    repeated Gem gems = 2;
    repeated uint32 gem_ids = 3; //所有获得过的宝石ID
    repeated uint32 association_ids = 4; //激活缘分ID
}

message C2S_GemGetInteam {

}

message S2C_GemGetInteam {
    required uint32 ret = 1;
    repeated GemInteam gem_inteams = 2;
}

//更新宝石上阵情况
message S2C_GemUpdateInteam {
    required uint32 ret = 1;
    repeated GemInteam gem_inteams = 2;
}

//宝石合成 非上阵的时候的合成
message C2S_GemSync {
    required uint32 id = 1;
}

message S2C_GemSync {
    required uint32 ret = 1;
    required uint32 id = 2;
    optional uint32 new_id = 3;
    optional uint32 num = 4; //合成新宝石数量
}

//宝石炼化
message C2S_GemChange {
    required uint32 id1 = 1;
    required uint32 id2 = 2;
    required uint32 id3 = 3;
}

message S2C_GemChange {
    required uint32 ret = 1;
    required uint32 id1 = 2;
    required uint32 id2 = 3;
    required uint32 id3 = 4;
    optional uint32 new_id = 5; //获得的新宝石id
}

//宝石镶嵌
message C2S_GemEquip {
    required uint32 wing_id = 1; //翅膀id
    required uint32 pos = 2; //位置
    required uint32 gem_id = 3; //要镶嵌的宝石id 0 卸下  > 0 镶嵌
}

message S2C_GemEquip {
    required uint32 ret = 1;
    required uint32 wing_id = 2; //翅膀id
    required uint32 pos = 3; //位置
    required uint32 gem_id = 4; //要镶嵌的宝石id
    optional uint32 new_id = 5; //新的宝石id
}

//宝石合成 上阵的时候的合成
message C2S_GemUp {
    required uint32 wing_id = 1; //翅膀id
    required uint32 pos = 2;
    required uint32 gem_id = 3; //宝石id
}

message S2C_GemUp {
    required uint32 ret = 1;
    required uint32 wing_id = 2; //翅膀id
    required uint32 pos = 3;
    required uint32 gem_id = 4; //宝石id
    optional uint32 new_id = 5; //新的宝石id
}

//批量合成
message C2S_GemFastSync {

}

message S2C_GemFastSync {
    required uint32 ret = 1;
    repeated Award costs = 2; //消耗的宝石和银两情况
    repeated Award awards = 3; //获取的宝石情况
}

//宝石缘分激活
message C2S_GemAssociation {
    required uint32 id = 1;
}

message S2C_GemAssociation {
    required uint32 ret = 1;
    required uint32 id = 2;
}

message Wing {
    required uint32 id = 1;
    required uint32 level = 2;
    repeated IntMap bless = 3;
    optional uint32 bless_target = 4;
    optional uint32 star = 5;
}

message C2S_WingGetInfo {
}

message S2C_WingGetInfo {
    required uint32 ret = 1;
    repeated Wing wings = 2;
}

//穿戴翅膀
message C2S_WingWear {
    required uint32 wing_id = 1; //0卸下
}

message S2C_WingWear {
    required uint32 ret = 1;
    required uint32 wing_id = 2;
}

//强化
message C2S_WingUpgrade {
    required uint32 wing_id = 1;
    required uint32 lv_incrby = 2; //默认是1
}

message S2C_WingUpgrade {
    required uint32 ret = 1;
    required uint32 wing_id = 2;
    required uint32 level = 3; // 新等级
}

//重生
message C2S_WingReset {
    required uint32 wing_id = 1;
}

message S2C_WingReset {
    required uint32 ret = 1;
    required uint32 wing_id = 2;
    repeated Award awards = 3;
}

//翅膀更新
message S2C_WingInfoUpdate {
    repeated Wing update = 1;
    repeated Wing insert = 2;
    repeated uint32 delete = 3;
}


message S2C_GetKnightCard {
    repeated KnightCard knight_cards = 1; //魂卡信息
}

//激活魂卡队伍
message C2S_ActiveKnightCardTeam {
    required uint32 team_id = 1; //魂卡队伍ID
}

message S2C_ActiveKnightCardTeam {
    required uint32 ret = 1;
    optional uint32 team_id = 2; //魂卡队伍ID
    optional uint32 star = 3; //星数
}

//重生魂卡队伍
message C2S_RollBackKnightCardTeam {
    required uint32 team_id = 1; //魂卡队伍ID
}

message S2C_RollBackKnightCardTeam {
    required uint32 ret = 1;
    optional uint32 team_id = 2;
    repeated Award materials = 3;
}

message ActivedKnightCardTeam {
    required uint32 team_id = 1; //魂卡队伍ID
    required uint32 star = 2; //星数
}

//获取魂卡队伍数据
message C2S_GetActivedKnightCardTeams {

}

message S2C_GetActivedKnightCardTeams {
    repeated ActivedKnightCardTeam actived_list = 1;
}

//奇遇充值 主动刷新数据
message ParadeRecharge {
    required uint32 state = 1; //状态 0未触发 1可领取 2已领取
    required uint32 base_id = 2;
}

//巡游天地
message StParadeEvent {
    required uint32 type = 1; //事件类型 转盘3 商人4 招财5 置换6 直充7
    required uint32 base_id = 2;
    required uint32 start_time = 3;
    repeated uint32 event_items = 4; //转盘的 和 商人的（随机出来的所有数据）
    required uint32 event_id = 5; //服务器标记
    required uint32 map_id = 6;
    repeated uint32 buy_items = 7; //购买过的商人ID
    optional uint32 left_count = 8;//剩余次数
    optional uint32 event_base_id = 9;//表的id(招财,置换,直充)
}

message C2S_GetParadeInfo {

}

message S2C_GetParadeInfo {
    required uint32 ret = 1;
    required ParadeRecharge parade_recharge = 2;
    repeated StParadeEvent parade_events = 3; //未处理巡游事件列表
}

message C2S_GetParadeRechargeInfo {

}

message S2C_GetParadeRechargeInfo {
    required uint32 ret = 1;
    required ParadeRecharge parade_recharge = 2;
}

//奇遇充值 领取奖励
message C2S_GetParadeRecharge {
    required uint32 base_id = 1;
}

message S2C_GetParadeRecharge {
    required uint32 ret = 1;
    required uint32 base_id = 2;
    repeated Award awards = 3;
}

//执行巡游
message C2S_ExecuteParade {
    required uint32 map_id = 1;
}

message S2C_ExecuteParade {
    required uint32 ret = 1;
    required uint32 type = 2; //事件类型 奖励1 神将2 转盘3 商人4 招财5 置换6 直充7
    required uint32 base_id = 3;
    required uint32 map_id = 4;
    optional uint32 start_time = 5;
    repeated Award awards = 6; //奖励
    optional BattleReport battle = 7; //战报
    repeated uint32 event_items = 8; //转盘 和 商人
    optional uint32 event_id = 9;
    optional uint32 event_base_id = 10;//每张表对应的Id(招财,置换,直充)
    optional uint32 left_count = 11;//剩余次数(招财和置换)
}

//执行事件
message C2S_ExecuteParadeEvent {
    required uint32 event_id = 1;
    optional uint32 base_id = 2; //购买的商人ID
    optional uint32 card_id = 3;//魂卡id(用于置换)
}

message S2C_ExecuteParadeEvent {
    required uint32 ret = 1; //结果
    required uint32 event_id = 2;
    repeated Award awards = 3;
    optional uint32 base_id = 4; //转盘转出来ID 或 商人ID
    optional uint32 left_count= 5;//剩余次数(招财和置换)
}

message C2S_GetKnightCardTeamScoreRank {
    required uint32 type = 1; //1本服 2全服
}

message S2C_GetKnightCardTeamScoreRank {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated KnightCardTeamScoreRank ranks = 3;
}

message KnightCardTeamScoreRank {
    required uint32 rank = 1;
    required uint32 score = 2;
    required SimpleUser user = 3;
}

//诸神争霸
//state 分为 1:战前活动状态 2:战斗状态 3:结算状态 4:发奖状态
message GodStriveStage {
    required uint32 stage_id = 1;
    required uint32 begin_time = 2; //战前状态开始时间
    required uint32 battle_begin_time = 3; //战斗状态开始时间
    required uint32 battle_end_time = 4; //战斗状态结束时间 结算状态开始时间
    required uint32 reward_begin_time = 5; //发奖开始时间 结算状态结算时间
    required uint32 end_time = 6; //发奖结束时间
}

message C2S_GodStriveGetInfo {

}

message GodStriveStageInfo {
    repeated GodStriveStage stages = 1; //各阶段状态和时间表
    required uint32 stage_id = 2; //当前阶段 前端状态完全按这个状态来 倒计时结束不自动切换状态
    required uint32 state = 3; //当前状态
}

//登录的时候flush给前段的数据
message S2C_GodStriveGetInfo {
    required uint32 ret = 1;
    optional GodStriveStageInfo stage_info = 2;
    required uint32 begin_time = 3; //报名的开始时间
    required uint32 battle_field_id = 4; //战场id
    required uint32 now_stage_id = 5; //本届排名
    required bool is_finish = 6; //本届是否被淘汰
    optional uint32 last_begin_time = 7; //上届开始时间
    optional uint32 last_end_time = 8; //上届结束时间
    optional uint32 last_battle_field_id = 9; //上届参与战场 0未参加
    optional uint32 last_stage_id = 10; //上届排名
}

//更新状态信息
message S2C_GodStriveUpdateStage {
    required uint32 ret = 1;
    optional GodStriveStageInfo stage_info = 2;
}

//获取名人堂数据
message GodStriveHonorBattle {
    required uint32 battle_field_id = 1;
    repeated SimpleUser users = 2; //前四名
}

message GodStriveHonorTime {
    required uint32 begin_time = 1;
    required uint32 end_time = 2;
}

message GodStriveHonor {
    required uint32 begin_time = 1;
    required uint32 end_time = 2;
    repeated GodStriveHonorBattle battles = 3; //每个战场的信息
}

message C2S_GodStriveGetHonor {
    required uint32 begin_time = 1; //传0代表看最新的一届
}

message S2C_GodStriveGetHonor {
    required uint32 ret = 1;
    repeated GodStriveHonorTime times = 2; //所有届时间情况 从大到小排序
    required uint32 begin_time = 3;
    optional GodStriveHonor honor = 4;
}

//打开报名界面
message C2S_GodStriveGetApplyInfo {

}


message S2C_GodStriveGetApplyInfo {
    required uint32 ret = 1;
    repeated uint32 apply_num = 2; //每个战场报名的人数
}

//报名
message C2S_GodStriveApply {

}

//报名成功之后推送flush数据
message S2C_GodStriveApply {
    required uint32 ret = 1;
}

//报名测试
message C2S_GodStriveApplyTest {
    required uint32 start_level = 1;
    required uint32 end_level = 2;
}


message S2C_GodStriveApplyTest {
    required uint32 ret = 1;
    optional uint32 num = 2;
}

message GodStriveUser {
    required SimpleUser user = 1; //
    optional uint32 rank = 2; //排名
    optional uint32 score = 3; //积分
}

//上轮晋级名单 第二轮开始才有 直接去跨服拉
message C2S_GodStriveGetLastRound {
}

//和战斗结束的推送一致
message S2C_GodStriveGetLastRound {
    required uint32 ret = 1;
    repeated GodStriveUser win_users = 2; //晋级列表
    optional uint32 my_score = 3; //我的积分
    optional uint32 my_rank = 4; //我的排名
}

//自己的投注信息
message C2S_GodStriveGetBetInfo {

}

message S2C_GodStriveGetBetInfo {
    required uint32 ret = 1;
    optional uint32 get_flowers = 2; //获得的鲜花数量
    optional uint32 get_eggs = 3; //获得的鸡蛋数量
    optional GodStrivePreBattleUser flower_user = 4; //鲜花的对象
    optional uint32 flower_num = 5; //鲜花数量
    optional GodStrivePreBattleUser egg_user = 6; //鸡蛋的对象
    optional uint32 egg_num = 7; //鸡蛋数量
    optional uint32 rank = 8; //我的战场排名 0没有
}

//投注列表和排行榜 公用一个协议
message C2S_GodStriveGetBetList {
    required uint32 battle_id = 1;
    required uint32 page = 2; //0为初始
}

message S2C_GodStriveGetBetList {
    required uint32 ret = 1;
    required uint32 battle_id = 2;
    required uint32 page = 3; //0为初始
    optional uint32 total_num = 4; //总玩家人数
    repeated GodStrivePreBattleUser users = 5; //玩家列表
    optional uint32 my_rank = 6; //0未上榜
    optional uint32 my_score = 7; //我的积分
    optional uint32 per_num = 8; //每页玩家数量
    optional GodStrivePreBattleUser my = 9; //我自己的数据
}

//投注
message C2S_GodStriveBetUser {
    required uint64 uid = 1;
    required uint32 battle_id = 2; //战场id
    required uint32 bet_type = 3; //1 鲜花 2 鸡蛋
    required uint32 num = 4; //投注数量
}

message S2C_GodStriveBetUser {
    required uint32 ret = 1;
    required uint64 uid = 2;
    required uint32 battle_id = 3; //战场id
    required uint32 bet_type = 4; //1 鲜花 2 鸡蛋
    required uint32 num = 5; //投注数量
    optional GodStrivePreBattleUser user = 6; //对象
}

//预赛
message GodStrivePreBattleUser {
    required SimpleUser user = 1; //
    optional uint32 score = 2; //积分
    optional uint32 pos = 3; //在哪个位置
    optional uint32 be_attack_time = 4; //上次被攻击时间 这个就是占领房间的时间
    optional uint32 be_rob_time = 5; //上次被抢夺时间
    optional uint32 flowers = 6; //
    optional uint32 eggs = 7; //
    optional uint32 last_rank = 8; //上一轮的排名
    optional uint32 last_score = 9; //上一轮的积分
    optional uint32 total_score = 10; //在位置上累计获得的积分
    optional uint32 debuff = 11; //在位置上的debuff层数
    optional uint32 battle_id = 12; //战场id
}

//这个数据实时同步
message GodStrivePreBattleInfo {
    optional uint32 my_score = 1;
    optional uint32 my_rank = 2;
    repeated GodStrivePreBattleUser rank_users = 3; //前6名
    repeated GodStrivePreBattleUser pos_users = 4; //在位置上的6个玩家
}

//进入战场
message C2S_GodStriveGetPreBattle {

}


message S2C_GodStriveGetPreBattle {
    required uint32 ret = 1;
    optional uint32 battle_id = 2;
    optional uint32 room_id = 3;
    optional uint32 total_user = 4; //房间总人数
    optional GodStrivePreBattleInfo info = 5;
    optional uint32 attack_time = 6; //上次攻击时间
    optional uint32 rob_time = 7; //上次抢夺时间
}

//战斗中查看排行榜
message C2S_GodStriveGetPreBattleRank {

}

message S2C_GodStriveGetPreBattleRank {
    required uint32 ret = 1;
    repeated GodStrivePreBattleUser users = 2; //显示前30名或者前20名
}

//抢夺列表
message C2S_GodStriveGetRobUser {

}

message S2C_GodStriveGetRobUser {
    required uint32 ret = 1;
    repeated GodStrivePreBattleUser rob_users = 2; //抢夺列表
    optional uint32 last_refresh_time = 3; //上次刷新列表时间

}

//抢夺日志
message GodStriveRobLog {
    optional uint32 rob_time = 1;
    optional uint64 uid = 2;
    optional string rob_name = 3;
    optional bool my_rob = 4; //是否是主动抢夺
    optional bool win = 5; //抢夺方是否胜利
    optional uint32 score = 6; //抢夺积分
}

message C2S_GodStriveGetRobLog {

}

message S2C_GodStriveGetRobLog {
    required uint32 ret = 1;
    repeated GodStriveRobLog logs = 2; //
}

//攻占旗子
message C2S_GodStriveFightUser {
    required uint32 pos = 1; //攻占的位置
    required uint64 uid = 2; //抢夺位置的玩家uid
}

message S2C_GodStriveFightUser {
    required uint32 ret = 1;
    required uint32 pos = 2; //攻占的位置
    required uint64 uid = 3; //抢夺位置的玩家uid
    optional BattleReport report = 4;
    optional bool win = 5; //是否胜利
    //optional uint32 score = 6;//获得积分 去掉
    optional uint32 attack_time = 6; //上次攻击时间
    optional string name = 7; //对手名称
}

message C2S_GodStriveRobUser {
    required uint64 uid = 1; //抢夺位置的玩家uid
}

message S2C_GodStriveRobUser {
    required uint32 ret = 1;
    required uint64 uid = 2; //抢夺位置的玩家uid
    optional BattleReport report = 3;
    optional bool win = 4; //是否胜利
    optional uint32 score = 5; //获得积分
    optional uint32 rob_time = 6; //上次抢夺时间
    optional string name = 7; //对手名称
}

//更新自己信息和前6名以及前6个位置的 每次有积分变化都给在线玩家推一次这个数据
message S2C_GodStriveUpdatePreBattleInfo {
    required uint32 ret = 1;
    optional GodStrivePreBattleInfo info = 5;
}

//战斗结束信息 (跨服推过来的,跨服需要推一个)
message S2C_GodStrivePreBattleEnd {
    required uint32 ret = 1;
    repeated GodStriveUser win_users = 2; //竞技列表
    optional uint32 my_score = 3; //我的积分
    optional uint32 my_rank = 4; //我的排名
}

//被抢夺通知
message S2C_GodStriveRobedNotice {
    optional GodStriveRobLog log = 1;
}

//决赛阶段
message GodStriveFinalUser {
    optional SimpleUser user = 1;
    optional uint32 supports = 2; //支持度
}

message GodStriveBattleInfo {
    required uint64 report_id = 1;
    required bool win = 2; //攻击方是否获胜
    required uint32 battle_time = 3;
}

//决赛对阵信息表
message GodStriveFinalMatch {
    optional uint64 attack_uid = 1;
    optional uint64 defense_uid = 2;
    optional uint32 stage_id = 3;
    optional uint32 order = 4; //第几场的比赛
    repeated GodStriveBattleInfo battles = 5; //战斗信息
}

//进入战场
message C2S_GodStriveGetFinalBattle {
    required uint32 battle_id = 1;
}


message S2C_GodStriveGetFinalBattle {
    required uint32 ret = 1;
    optional uint32 battle_id = 2;
    repeated GodStriveFinalUser users = 3; //这个是否可以用GodStrivePreBattleUser 复用
    repeated GodStriveFinalMatch matches = 4; //对阵信息
}

//实时更新比赛信息
message S2C_GodStriveUpdateFinalMatch {
    required uint32 ret = 1;
    repeated GodStriveFinalMatch matches = 2; //更新的比赛信息
    required uint32 battle_id = 3;
}

//查看决赛录像
message GodStriveBattleReport {
    optional uint64 id = 1; //战报id
    optional uint64 attack_user = 2;
    optional uint64 defense_user = 3;
    repeated uint32 attack_knights = 4; //攻击方队伍
    repeated uint32 defense_knights = 5; //防守方队伍
    optional bool win = 6; //攻击方是否胜利
}

message C2S_GodStriveGetReport {
    required uint32 battle_id = 1; //战场id
    required uint32 stage_id = 2; //第几轮的 16=>8 8=>4
    required uint32 order = 3;
}

message S2C_GodStriveGetReport {
    required uint32 ret = 1;
    required uint32 battle_id = 2; //战场id
    required uint32 stage_id = 3; //第几轮的 16=>8 8=>4
    required uint32 order = 4;
    repeated GodStriveBattleReport reports = 5; //录像信息
}

//我的竞猜
message GodStriveChampionGuess {
    required uint32 battle_id = 1;
    required uint64 champion_uid = 2;
}

message GodStriveMatchGuess {
    required uint32 battle_id = 1;
    required uint32 stage_id = 2; //第几阶段的
    required uint32 order = 3; //第几位的比赛
    required uint32 guess_type = 4; //竞猜结果
}

message C2S_GodStriveMyGuess {

}

message S2C_GodStriveMyGuess {
    required uint32 ret = 1;
    repeated GodStriveChampionGuess champions = 2;
    repeated GodStriveMatchGuess matches = 3;
}

//决赛冠军竞猜
message C2S_GodStriveGuessChampion {
    required uint64 uid = 1;
    required uint32 battle_id = 2;
}

message S2C_GodStriveGuessChampion {
    required uint32 ret = 1;
    required uint64 uid = 2;
    required uint32 battle_id = 3;
}

//比分竞猜
message C2S_GodStriveGuessMatch {
    required uint32 battle_id = 1;
    required uint32 stage_id = 2; //第几轮的 16=>8 8=>4
    required uint32 order = 3; //第几位的比赛
    required uint32 guess_type = 4; //结果 左边的比分*10+右边的比分 比如3:1 就是31
}

message S2C_GodStriveGuessMatch {
    required uint32 ret = 1;
    required uint32 battle_id = 2;
    required uint32 stage_id = 3; //第几阶段的
    required uint32 order = 4; //第几位的比赛
    required uint32 guess_type = 5; //结果
}

//查看战报
message C2S_GodStriveGetReportInfo {
    required uint64 report_id = 1; //战报id
}

message S2C_GodStriveGetReportInfo {
    required uint32 ret = 1;
    required uint64 report_id = 2; //战报id
    optional BattleReport battle_report = 3;
}

//当某个玩家支持度变化时会通知
message S2C_GodStriveFinalUserNtf {
    required uint32 battle_field_id = 1;
    repeated GodStriveFinalUser final_users = 2;
}

//客户端收到此条协议，需要重新拉取信息
message S2C_GodStriveBigChangeNtf {
    required uint32 reason = 1;
}

message AnniversaryInfo {
    required uint32 start_time = 1;
    required uint32 end_time = 2;
    required uint32 view_end_time = 3;
    required uint32 sign_last_time = 4; //上次签到时间
    required uint32 sign_days = 5; //签到天数
    repeated HolidayActivityShop discount_shop_counts = 6; //折扣商店购买数量
    repeated HolidayActivityShop word_shop_counts = 7; //字卡商店购买数量
    repeated WeekTask tasks = 8; //周任务信息
    required uint32 total_avsy_active = 9; //活动期间累计活跃值
    required uint32 avsy_active = 10; //活动期间当前活跃值
    required uint32 daily_avsy_active = 11; //活动期间每日活跃值
    required uint32 avsy_cur_step = 12; //当前事件步数
    required bool is_thank = 13; //是否领感谢信
    repeated HolidayActivityShop last_word_shop_counts = 14; //上届字卡商店购买数量
    required uint32 version = 15;//版本号
    required uint32 last_version = 16;//往期版本号
}


message C2S_GetAnniversaryInfo {

}

message S2C_GetAnniversaryInfo {
    required uint32 ret = 1;
    required AnniversaryInfo avsy_info = 2;
}

//周年庆签到奖励
message C2S_GetAnniversarySignAward {

}

message S2C_GetAnniversarySignAward {
    required uint32 ret = 1;
    repeated Award award = 2;
    required uint32 day = 3;
    required uint32 sign_last_time = 4; //上次签到时间
}

//购买周年庆商店商品 （type 1 折扣商店 2 字卡商店）
message C2S_BuyAnniversaryShop {
    required uint32 good_id = 1;
    required uint32 num = 2;
    required uint32 type = 3;
}

message S2C_BuyAnniversaryShop {
    required uint32 ret = 1;
    required uint32 good_id = 2;
    required uint32 type = 3;
    required uint32 num = 4;
    repeated Award awards = 5;
}

//购买上届周年庆商店商品 （type 2 字卡商店）
message C2S_BuyLastAnniversaryShop {
    required uint32 good_id = 1;
    required uint32 num = 2;
    required uint32 type = 3;
}

message S2C_BuyLastAnniversaryShop {
    required uint32 ret = 1;
    required uint32 good_id = 2;
    required uint32 type = 3;
    required uint32 num = 4;
    repeated Award awards = 5;
}

//周年庆更新周任务
message S2C_UpdateAnniversaryWeekTask {
    repeated WeekTask tasks = 1;
}

//周年庆周任务领奖
message C2S_GetAnniversaryWeekTaskAward {
    required uint32 id = 1;
}

message S2C_GetAnniversaryWeekTaskAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated Award awards = 3;
}

//西游之路前进
message C2S_GetAnniversaryEventAward {

}

message S2C_GetAnniversaryEventAward {
    required uint32 ret = 1;
    required uint32 anniversary_cur_step = 2;
    repeated Award awards = 3;
}

message S2C_UpdateAnniversaryActive {
    optional uint32 total_avsy_active = 1; //活动期间累计活跃值
    optional uint32 avsy_active = 2; //活动期间当前活跃值
    optional uint32 daily_avsy_active = 3; //活动期间每日活跃值
}

message C2S_GetAnniversaryThanksAward {

}

message S2C_GetAnniversaryThanksAward {
    required uint32 ret = 1;
    required bool is_thank = 2; //是否领感谢信
    repeated Award awards = 3;
}
//废弃协议
message S2C_NoticeAnniversaryActivity {
    optional uint32 start_time = 1;
    optional uint32 end_time = 2;
    optional uint32 reward_time = 3;
    optional uint32 version = 4;//版本号
    optional uint32 last_version = 5;//往期版本号
}

message S2C_GetServerSuperStatus {
    required uint32 status = 1; // 0:普通 1:超级服
}

// 噩梦副本
message NightmareStage {
    optional uint32 id = 1; //副本ID
    optional uint32 stage_box = 2; //宝箱领取, 0:未领， 1:领取
    optional uint32 max_difficulty = 3; //挑战成功的最高难度记录, 0:未胜利, 难度:[1,2,3]
}

message NightmareChapter {
    optional uint32 id = 1; //章节ID
    optional uint32 total_star = 2;
    repeated uint32 box_record = 3; //宝箱领取记录, 1:铜, 2:银, 3:金
    repeated NightmareStage stages = 4;
}

message C2S_GetNightmareInfo {
}

message S2C_GetNightmareInfo {
    required uint32 ret = 1;
    optional uint32 use_count = 2; //已挑战次数
    optional uint32 extra_count = 3; //奖励的额外挑战次数
    repeated NightmareChapter chapter_info = 4; //章节信息
}

message C2S_NightmareExecuteStage {
    required uint32 stage_id = 1;
    optional uint32 wave = 2;
    optional uint32 difficulty_type = 3; //关卡类型 1:难度1, 2:难度2, 3:难度3
    optional bool is_fast = 4; //是否扫荡
}

message S2C_NightmareExecuteStage {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    optional uint32 wave = 3;
    optional uint32 next_wave_id = 4;
    optional uint32 difficulty_type = 5;
    optional BattleReport battle = 6; //战报
    repeated Award awards = 7;
    optional uint32 use_count = 8;
    optional uint32 extra_count = 9;
    optional bool is_fast = 10; //是否扫荡
}

message NightmareRank {
    required uint64 user_id = 1;
    optional uint32 star = 2;
    optional uint32 rank = 3;
    optional SimpleUser simple_user = 4;
}

// 噩梦副本排行榜
message C2S_GetNightmareRank {

}

message S2C_GetNightmareRank {
    required uint32 ret = 1;
    optional uint32 self_star = 2; //玩家的星数
    optional uint32 self_rank = 3; //玩家的排名
    repeated NightmareRank ranks = 4;
}

message C2S_NightmareGetStageBox {
    required uint32 chapter_id = 1; //章节ID
    optional uint32 stage_id = 2; //关卡ID
    optional uint32 box_type = 3; //宝箱类型 1:铜宝箱 2:银宝箱 3:金宝箱 4:关卡宝箱
}

message S2C_NightmareGetStageBox {
    required uint32 ret = 1;
    optional uint32 chapter_id = 2;
    optional uint32 stage_id = 3;
    optional uint32 box_type = 4;
    repeated Award awards = 5;
    optional uint32 extra_count = 6; //奖励的额外挑战次数
}

message DayRebateSysInfo {
    required uint32 start_time = 1; //开始时间
    required uint32 end_time = 2; //结束时间
    required uint32 award_end_time = 3; //领奖结束时间
    repeated DayRebateSysDay days = 4; //每日奖励
    optional DayRebateSysTotalAward total_award = 5; //累计奖励
    repeated DayRebateSysDrawAward draw_awards = 6; //转盘奖励
}

message DayRebateSysDay {
    required uint32 day = 1;
    required uint32 recharge_num = 2; //充值金额
    required uint32 gold = 3; //价值元宝
    repeated Award awards = 4; //奖励
    optional uint32 award_select = 5; //奖励方式 0 全部领取 1 N选1
}

message DayRebateSysTotalAward {
    required uint32 gold = 1; //价值元宝
    repeated Award awards = 2; //奖励
    optional uint32 award_select = 5; //奖励方式 0 全部领取 1 N选1
}

message DayRebateSysDrawAward {
    required Award award = 1; //奖励
}

message DayRebateUserInfo {
    required uint32 reset_time = 1; //重置时间
    repeated DayRebateDay days = 2; //每天的情况
    required bool total_award = 3;
    required bool draw_award = 4;
    optional bool draw_award2 = 5; //7天的转盘奖励是否领取
}

message DayRebateDay {
    required uint32 day = 1;
    required uint32 status = 2; //0未充值，1已充值未领奖，2已充值已领奖
}

message C2S_DayRebateGetInfo {

}

message S2C_DayRebateGetInfo {
    required uint32 ret = 1;
    optional DayRebateSysInfo sys_info = 2;
    optional DayRebateUserInfo info = 3;
}

//更新玩家数据
message S2C_DayRebateUpdate {
    required uint32 ret = 1;
    optional DayRebateUserInfo info = 2;
}

//开启新活动
message S2C_DayRebateNew {
    optional DayRebateSysInfo sys_info = 1;
}

//领取每天充值奖励
message C2S_DayRebateGetDayAward {
    required uint32 day = 1; //第几天的奖励
    optional uint32 index = 2; //奖励顺序
}

message S2C_DayRebateGetDayAward {
    required uint32 ret = 1;
    required uint32 day = 2; //第几天的奖励
    repeated Award awards = 3;
    optional uint32 index = 4; //奖励顺序
}

//领取累计5天奖励
message C2S_DayRebateGetTotalAward {
    optional uint32 index = 1; //奖励顺序
}

message S2C_DayRebateGetTotalAward {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional uint32 index = 3;
}

//领取转盘
message C2S_DayRebateGetDrawAward {

}

message S2C_DayRebateGetDrawAward {
    required uint32 ret = 1;
    optional uint32 index = 2; //第几个奖励从0开始
    repeated Award awards = 3;
}

//进入公会boss界面
message C2S_GetGuildBossInfo {

}

message S2C_GetGuildBossInfo {
    required uint32 ret = 1;
    optional GuildBossStageInfo stage_info = 2;
    repeated uint32 event_ids = 3; //当前的事件列表
    optional uint32 rob_time = 4; //上次抢夺时间
    optional uint32 attack_time = 5; //上次进攻boss时间
    repeated GuildBossSimpleRankInfo top_user_ranks = 6; //前6用户的排名数据
    repeated GuildBossSimpleRankInfo top_guild_ranks = 7; //前6公会的排名数据

    optional uint32 score = 8;
    optional uint32 rank = 9;
    optional uint32 guild_rank = 10;
    optional uint32 guild_score = 11;

    optional uint32 attack_count = 12; //已攻打boss次数
    optional uint32 rob_count = 13;    //已抢夺玩家次数
    optional uint32 attack_buff_times = 14; //全体buff掉落次数

}

//更新状态信息
message S2C_GuildBossUpdateStage {
    required GuildBossStageInfo stage_info = 2;
}

message GuildBossStageInfo {
    required uint32 start_time = 1;
    required uint32 end_time = 2;
    required uint32 reward_time = 3;
    required uint32 state = 4; // 1活动期 2展示期 3下一轮准备时间
}

//排行榜数据
message C2S_GetGuildBossRankInfo {
    required uint32 type = 1; //1公会 2个人
}

message S2C_GetGuildBossRankInfo {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated GuildBossUserRank user_ranks = 3;
    repeated GuildBossGuildRank guild_ranks = 4;
    optional uint32 self_score = 5;
    optional uint32 self_rank = 6;
    required uint32 guild_attend_num = 7; //本帮参加人数
}

message GuildBossSimpleRankInfo {
    required uint32 score = 1;
    required string name = 2;
    required uint32 base_id = 3; //主角武将系统id
}

message GuildBossUserRank {
    required uint32 rank = 1;
    required uint32 score = 2;
    required SimpleUser user = 3;
}

message GuildBossGuildRank {
    required uint32 rank = 1;
    required uint64 sid = 2;
    required uint64 guild_id = 3;
    required string guild_name = 4;
    required uint32 icon = 5;
    required uint32 guild_score = 6;
    required uint32 guild_exp = 7;
}

//拉取抢夺列表
message C2S_GuildBossGetRobUser {

}

message S2C_GuildBossGetRobUser {
    required uint32 ret = 1;
    repeated GuildBossUser rob_users = 2; //抢夺列表
    optional uint32 last_refresh_time = 3; //上次刷新列表时间
}

//抢夺玩家
message C2S_GuildBossRobUser {
    required uint64 uid = 1; //被抢夺玩家uid
}

message S2C_GuildBossRobUser {
    required uint32 ret = 1;
    required uint64 uid = 2; //被抢夺玩家uid
    optional BattleReport report = 3;
    optional bool win = 4; //是否胜利
    optional uint32 score = 5; //当前积分
    optional uint32 rob_time = 6; //上次抢夺时间
    optional string name = 7; //对手名称
    repeated uint32 trigger_event_ids = 8; //触发的事件
    optional uint32 damage_percent = 9; //对手减少的血量百分比 * 1000

    optional uint32 rank = 10;
    optional uint32 guild_rank = 11;
    optional uint32 guild_score = 12;

    optional uint32 rob_count = 13; //已抢夺次数
}

//更新抢夺列表玩家数据 每次有积分变化都给在线玩家推一次这个数据
message S2C_GuildBossUpdateInfo {
    required GuildBossUser info = 1;
}

//被抢夺通知
message S2C_GuildBossRobedNotice {
    repeated uint32 trigger_event_ids = 1; //触发的事件
}

message GuildBossUser {
    required uint64 uid = 1;
    optional SimpleUser user = 2; //
    optional uint32 score = 3; //当前积分
    optional uint32 robed_time = 4; //上次被抢夺时间

    optional uint32 rank = 9;
    optional uint32 guild_rank = 10;
    optional uint32 guild_score = 11;
    optional uint64 guild_id = 12;
}

//攻打BOSS
message C2S_GuildBossAttack {

}

message S2C_GuildBossAttack {
    required uint32 ret = 1;
    optional uint32 score = 2; //当前积分
    repeated uint32 event_ids = 3; //获得的事件
    optional BattleReport report = 4;
    optional bool win = 5; //是否胜利
    optional uint32 attack_time = 6; //进攻时间

    optional uint32 rank = 8;
    optional uint32 guild_rank = 9;
    optional uint32 guild_score = 10;
    optional uint64 damage = 11; //对boss造成的血量伤害

    optional uint32 attack_count = 12; //已攻击次数
    optional uint32 attack_buff_times = 13; //全体buff掉落次数
}

//拉取弹幕
message C2S_GuildBossGetSubTitle {
    required uint32 ask_num = 1; //请求数目
}

//帮派boss弹幕消息
message GuildBossSubTitle {
    optional SimpleUser user = 1;
    repeated string content = 2;
    repeated Award award = 3;
    repeated uint32 event_ids = 4;
    optional uint32 template = 5;
    optional uint32 add_score = 6;
}

message S2C_GuildBossGetSubTitle {
    required uint32 ret = 1;
    repeated GuildBossSubTitle titles = 2; //弹幕内容
}

//查看日志
message C2S_GetGuildBossLog {
}

message GuildBossLog {
    optional string name = 2; //战斗目标
    required uint32 time = 3; //战斗时间
    required uint64 sid = 4; //目标服务器id
    required uint32 type = 5; //1 boss 2抢夺 3被抢夺
    repeated uint32 event_ids = 6; //借助的事件
    required bool win = 7; //当前玩家是否获胜
    optional uint32 change_score = 8; //减少或增加的积分
    optional string guild_name = 9; //战斗目标公会名
}

message S2C_GetGuildBossLog {
    required uint32 ret = 1;
    repeated GuildBossLog log = 2;
}

//帮派参与情况
message C2S_GetGuildBossGuildAttendInfo {

}

message GuildBossAttendInfo {
    required string name = 1;
    required uint32 score = 2; //当前积分
    required uint32 count = 3; //攻打次数
}

message S2C_GetGuildBossGuildAttendInfo {
    required uint32 ret = 1;
    repeated GuildBossAttendInfo members = 2;
}

//查看周商店信息
message C2S_GetWeekShopInfo {
}

message S2C_GetWeekShopInfo {
    required uint32 ret = 1;
    optional uint32 level = 2;
    repeated IntMap goods = 3; //id=>buy_count
}

message C2S_BuyWeekShop {
    required uint32 id = 1;
    required uint32 count = 2;
}

message S2C_BuyWeekShop {
    required uint32 ret = 1;
    required uint32 id = 2;
    required uint32 count = 3;
    repeated Award awards = 4;
}

//大闹天宫
message TempleUser {
    optional uint32 title_id = 1;
    optional uint32 pos = 2;
    optional uint32 status = 3; //1:玩家正在匹配中, 2:玩家在队伍中, 但是未准备, 3:玩家已准备状态, 4:玩家正在战斗
    optional SimpleUser user = 4;
    optional uint32 layer = 5; //选定层数
}

message TempleOnlineUser {
    optional uint32 title_id = 1;
    optional uint64 team_id = 2; //获取好友邀请列表时, 被邀请的队伍ID
    optional SimpleUser user = 3;
    optional uint32 team_layer = 4; //被邀请到队伍的层数
}

message TempleTeam {
    optional uint64 team_id = 1;
    optional uint64 team_leader = 2;
    optional uint32 team_layer = 3;
    optional uint32 team_status = 4; // 1:队伍正在等待玩家, 2:队伍已准备状态, 3:队伍解散 4:队伍正在战斗
    optional uint32 team_add = 5; //帮派/好友加成
    repeated TempleUser users = 6;
}

message TempleTeamSimpleInfo {
    required uint64 team_id = 1;
    required uint32 num = 2; // 当前人数
    required TempleUser user = 3; //队长信息
    optional uint32 layer = 4; //队伍所在层数
}

message C2S_TempleGetInfo {
}

message S2C_TempleGetInfo {
    optional uint32 max_layer = 1;
    optional uint32 max_wave = 2;
    optional uint32 extra_count = 3;
    optional uint32 award_time = 4;
    repeated uint32 layer_award = 5;
    optional uint32 score = 6;
    optional uint32 score_rank = 7;
    optional CommonCount common_count = 8;
}

message C2S_TempleGetTeamInfo {
}

message S2C_TempleGetTeamInfo {
    optional TempleTeam team = 1;
}

message C2S_TempleUserMatch {
    optional uint32 op_type = 1; //1 匹配 2取消匹配
    optional uint32 layer = 2;
}

message S2C_TempleUserMatch {
    optional uint32 ret = 1;
    optional uint32 op_type = 2;
}

message C2S_TempleBuyChallengeCount {
    optional uint32 count = 1;
}

message S2C_TempleBuyChallengeCount {
    optional uint32 ret = 1;
    optional CommonCount common_count = 2;
}

message C2S_TempleGetOnlineList {
}

message S2C_TempleGetOnlineList {
    required uint32 ret = 1;
    repeated TempleOnlineUser users = 2;
}

message C2S_TempleInviteOnlineUser {
    required uint64 user_id = 1;
    optional uint64 from_sid = 2;
    optional uint64 from_uid = 3;
    optional uint32 timedout = 4;
    optional uint64 temple_id = 5;
    optional SimpleUser simple_user = 6;
    optional uint32 temple_level = 7;
    optional uint64 team_id = 8;
}

message S2C_TempleInviteOnlineUser {
    required uint32 ret = 1;
    optional uint64 user_id = 2;
    optional uint64 from_sid = 3;
    optional uint64 from_uid = 4;
    optional uint32 timedout = 5;
}

message C2S_TempleGetInvitedList {
}

message S2C_TempleGetInvitedList {
    required uint32 ret = 1;
    repeated TempleOnlineUser users = 2;
}

message C2S_TempleTeamMemberReady {
    required uint32 op_type = 1; //1 队员准备  2 取消准备 3 退出队伍
}

message S2C_TempleTeamMemberReady {
    required uint32 ret = 1;
    optional uint32 op_type = 2;
}

message C2S_TempleTeamOpen {
    optional uint32 op_type = 1; //默认1:打开, 2:关闭
}

message S2C_TempleTeamOpen {
    required uint32 ret = 1;
}

message C2S_TempleKickTeamMember {
    required uint64 uid = 1;
}

message S2C_TempleKickTeamMember {
    required uint32 ret = 1;
}

message C2S_TempleSwitchTeamMemberPos {
    optional uint64 uid = 1;
    optional uint32 target_pos = 2;
}

message S2C_TempleSwitchTeamMemberPos {
    required uint32 ret = 1;
}

message C2S_TempleGetSelfServerTeamInfo {
}

message S2C_TempleGetSelfServerTeamInfo {
    required uint32 ret = 1;
    repeated TempleTeamSimpleInfo teams = 2;
}

message C2S_TempleReqJoinTeam {
    required uint64 uid = 1;
    optional uint32 op_type = 2; //1:申请 2:取消申请
    optional uint64 from_uid = 3;
    optional uint64 from_sid = 4;
    optional uint32 timedout = 5;
    optional TempleOnlineUser tou = 6;
    optional uint64 to_uid = 7;
}

message S2C_TempleReqJoinTeam {
    required uint32 ret = 1;
    optional uint32 op_type = 2; //1:申请 2:取消申请
    optional uint64 team_id = 3;
    optional uint64 to_uid = 4;
    optional uint32 timedout = 5;
}

message C2S_TempleGetReqJoinTeamInfo {
}

message S2C_TempleGetReqJoinTeamInfo {
    required uint32 ret = 1;
    repeated TempleOnlineUser user = 2; //申请玩家信息
}

message C2S_TempleReqJoinTeamOp {
    optional uint64 req_uid = 1;
    optional uint32 op_type = 2; //1:同意 2:拒绝
    optional uint32 layer = 3;
    optional uint64 from_sid = 4;
    optional uint64 from_uid = 5;
    optional uint32 timedout = 6;
}

message S2C_TempleReqJoinTeamOp {
    required uint32 ret = 1;
    optional uint32 op_type = 2;
    optional uint64 req_uid = 3;
    optional uint32 timedout = 4;
    optional bytes tu = 5;
}

message C2S_TempleInvitedTeamOp {
    optional uint64 team_id = 1;
    optional uint64 uid = 2; //邀请人
    optional uint32 op_type = 3; //1:同意 2:拒绝
    optional uint64 from_sid = 4;
    optional uint64 from_uid = 5;
    optional uint32 timedout = 6;
}

message S2C_TempleInvitedTeamOp {
    required uint32 ret = 1;
    optional uint32 op_type = 2;
    optional uint64 team_id = 3;
    optional uint64 uid = 4;
    optional uint64 from_uid = 5;
    optional uint32 timedout = 6;
}

message S2C_TempleUpdateMyRank {
    optional uint32 rank = 1;
}

message C2S_TempleCreateTeam {
    optional uint32 layer = 1;
}

message S2C_TempleCreateTeam {
    required uint32 ret = 1;
}

message C2S_TempleBattleBegin {
    optional uint32 type = 1; // 1:单人, 2:组队
    optional uint32 layer = 2; // 层数
}

message S2C_TempleBattleBegin {
    required uint32 ret = 1;
    optional uint32 wave = 2;
    optional uint32 next_wave = 3; //最后一波的next为0
    optional uint32 add_score = 4;
    optional bool is_double = 5;
    optional BattleReport battle_report = 6;
    repeated Award award = 7;
}

message TempleRank {
    required uint64 user_id = 1;
    optional uint32 score = 2;
    optional uint32 title_id = 3;
    optional uint32 rank = 4;
    optional SimpleUser simple_user = 5;
}

message C2S_TempleGetRankInfo {
}

message S2C_TempleGetRankInfo {
    required uint32 ret = 1;
    optional uint32 my_rank = 2;
    repeated TempleRank users = 3;
}

message C2S_TempleGetLayerAward {
    optional uint32 layer = 1;
}

message S2C_TempleGetLayerAward {
    required uint32 ret = 1;
    optional uint32 layer = 2;
    repeated Award award = 3;
}

message S2C_TempleBattleReport {
    required uint32 ret = 1;
    optional uint32 add_rate = 2; //帮派好友加成千分比
    optional uint32 add_score = 3; //增加的积分
    optional bool double = 4; //积分是否翻倍
    repeated Award awards = 5; //奖励
    optional BattleTeamReport battle_report = 6; //战报
}

message S2C_TempleUpdateTeamAdd {
    optional uint32 team_add = 1; //队伍帮派好友加成
}
message C2S_TempleOneKeyInvite {
}
message S2C_TempleOneKeyInvite {
  required uint32 ret = 1;
}

//进入珍宝阁界面:
//玩家珍宝阁信息:
message C2S_GetRareshopPrayUI {
}

message S2C_GetRareshopPrayUI {
    required uint32 ret = 1;
    optional uint32 pray_rareshop_count = 2; //拜访珍宝阁次数
    optional uint32 refresh_pray_count_time = 3; //拜访珍宝阁次数恢复时间
    required uint32 pray_exp = 4; //玩家的声望值
    repeated uint32 reward_id = 5; //已领取声望宝箱id
}

//进行拜访：
message C2S_UserPrayRareshop {
}

message S2C_UserPrayRareshop {
    required uint32 ret = 1;
    repeated Award award = 2; //拜访获得的道具奖励
    optional uint32 award_exp = 3; //拜访获得的声望值
    optional uint32 pray_rareshop_count = 4; //拜访珍宝阁次数
    optional uint32 refresh_pray_count_time = 5; //拜访珍宝阁次数恢复时间
}

//领取声望宝箱：
message C2S_GetRareshopPrayexpReward {
    required uint32 box_id = 1; //宝箱id
}

message S2C_GetRareshopPrayexpReward {
    required uint32 ret = 1;
    optional uint32 box_id = 2; //宝箱id
    repeated Award award = 3; //获得的宝箱奖励
}

//获取珍宝商店信息：
message C2S_GetRareShopInfo {
}

message S2C_GetRareshopInfo {
    required uint32 ret = 1;
    repeated IntMap rareshop_item = 2; //珍宝商店货物信息（key：商品的id		value：本周本商品已购买次数）
    optional uint32 week_reset_time = 3; //每周重置时间
    optional uint32 pray_level = 4; //声望等级
}

//购买珍宝商店商品：
message C2S_BuyRareshopItem {
    required uint32 item_id = 1; //购买的商品的id
    required uint32 buy_count = 2; //购买商品的次数
    optional  uint32 mode = 3;//购买方式
}

message S2C_BuyRareshopItem {
    required uint32 ret = 1;
    optional uint32 item_id = 2; //购买的商品的id
    optional uint32 buy_count = 3; //商品的购买次数
    repeated Award award = 4; //购买的商品
    optional uint32 mode = 5;
}

message C2S_Test_Power {
    required uint64 id = 1; // 上阵武将的唯一ID
}

message Knight_Attr {
    repeated string attr_type = 1; // 一个武将的所有模块, 数值用'-'分割
}

message S2C_Test_Power {
    required uint32 ret = 1;
    required uint64 id = 2;
    optional Knight_Attr knights = 3;
}

message EliminateDemon {
    required uint32 id = 1;
    required uint32 total_star = 2;
    repeated uint32 box_record = 3; //宝箱领取记录, 宝箱ID
    repeated EliminateDemonStage stages = 4;
}

message EliminateDemonStage {
    required uint32 id = 1;
    required uint32 star_a = 2; //各星级的达成情况   0 -> 没达成  1-> 已达成
    required uint32 star_b = 3;
    required uint32 star_c = 4;
    required uint32 star = 5; //总星数
    required uint32 box = 6; //宝箱领取情况   0 -> 未领取 1-> 已领取
}

message C2S_GetEliminateDemonList {

}

message S2C_GetEliminateDemonList {
    required uint32 ret = 1;
    repeated EliminateDemon chapters = 2;
    repeated IntMap buy_goods = 3; //已经购买的商品
    required uint32 server_open_time = 4; //开服时间
}

message C2S_EliminateDemonExecuteStage {
    required uint32 stage_id = 1; //关卡id
}

message S2C_EliminateDemonExecuteStage {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    optional uint32 stage_exp = 3;
    repeated Award awards = 4;
    optional BattleReport battle = 5; //战报
    optional uint32 star_a = 6; //星级a是否达成   1->达成 0->未达成
    optional uint32 star_b = 7;
    optional uint32 star_c = 8;
}

//领取关卡宝箱
message C2S_EliminateDemonFinishChapterBoxRwd {
    required uint32 ch_id = 1; //章节id
    required uint32 box_id = 2; //箱子id
}

message S2C_EliminateDemonFinishChapterBoxRwd {
    required uint32 ret = 1;
    required uint32 ch_id = 2; //章节id
    required uint32 box_id = 3; //箱子id
    repeated Award awards = 4; //奖励
}

//领取关卡宝箱
message C2S_EliminateDemonGetStageBox {
    required uint32 stage_id = 1; //关卡id
}

message S2C_EliminateDemonGetStageBox {
    required uint32 ret = 1;
    required uint32 stage_id = 2; //章节id
    repeated Award awards = 3; //奖励
}

//购买商品
message C2S_BuyEliminateDemonShopItem {
    required uint32 item_id = 1; //购买的商品的id
    required uint32 buy_count = 2; //购买商品的次数
}

message S2C_BuyEliminateDemonShopItem {
    required uint32 ret = 1;
    optional uint32 item_id = 2; //购买的商品的id
    optional uint32 buy_count = 3; //商品的购买次数
    repeated Award award = 4; //购买的商品
}

//折扣狂欢活动：
//折扣狂欢每日任务信息：
message DiscountCarnivalTask {
    required uint32 task_type = 1; //任务类型
    optional uint32 task_value = 2; //任务值
    repeated uint32 reward_id = 3; //已领奖的任务id集合
}

//获取折扣狂欢信息：
message C2S_GetDiscountCarnivalInfo {
}

message S2C_GetDiscountCarnivalInfo {
    required uint32 ret = 1;
    repeated IntMap item_buy_count = 2; //商品已购买次数（商品id => 已购买次数）
    repeated IntMap coupon_buy_count = 3; //折扣券已购买次数（折扣券id => 已购买次数）
    optional uint32 start_time = 4; //活动开始时间
    optional uint32 end_time = 5; //活动结束时间
    optional uint32 reward_time = 6; //活动发奖时间
    repeated DiscountCarnivalTask discount_task = 7; //活动每日任务
}

//购买商品
message C2S_BuyDiscountCarnivalItem {
    required uint32 item_id = 1; //购买商品id
    optional uint32 coupon_id = 2; //使用折扣券id
    required uint32 buy_count = 3; //购买次数
}

message S2C_BuyDiscountCarnivalItem {
    required uint32 ret = 1;
    optional uint32 item_id = 2; //购买商品id
    optional uint32 coupon_id = 3; //使用折扣券id
    optional uint32 buy_count = 4; //购买次数
    repeated Award item = 5; //购买得到的商品
}

//购买折扣券
message C2S_BuyDiscountCarnivalCoupon {
    required uint32 coupon_id = 1; //购买的折扣券id
    required uint32 buy_cout = 2; //购买次数
}

message S2C_BuyDiscountCarnivalCoupon {
    required uint32 ret = 1;
    optional uint32 coupon_id = 2; //购买的折扣券id
    optional uint32 buy_count = 3; //购买次数
    repeated Award coupon = 4; //购买得到的折扣券
}

//获得每日任务信息

message S2C_GetDiscountCarnivalTaskInfo {
    required uint32 ret = 1;
    repeated DiscountCarnivalTask discount_task = 2; //折扣狂欢每日任务信息
}

//领取每日任务奖励
message C2S_GetDiscountCarnivalTaskReward {
    required uint32 task_id = 1; //任务id
}

message S2C_GetDiscountCarnivalTaskReward {
    required uint32 ret = 1;
    optional uint32 task_id = 2; //任务id
    repeated Award task_award = 3; //任务奖励
}

message C2S_PlayerRecallInfo {
}

message S2C_PlayerRecallInfo {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 act_status = 3; //1：开启， 2:关闭
    repeated uint32 act_type = 4; //[1,2,3] 1:vip继承，2：元宝赠送，3：优惠礼包
    optional uint32 vip_status = 5; //是否领取VIP经验, 1:领取
    optional uint32 old_vip_level = 6; //最高vip等级
    optional uint32 old_vip_exp = 7; //vip经验
    repeated uint32 level_gift = 8; //已领取的礼包ID
    repeated uint32 level_shop = 9; //已购买的商品ID
    optional uint32 recharge_money = 10; //累计充值money
    repeated uint32 level_recharge = 11; //已领奖的奖励ID
}

message C2S_PlayerRecallGetVipExp {
}

message S2C_PlayerRecallGetVipExp {
    required uint32 ret = 1;
}

message C2S_PlayerRecallGetGift {
    required uint32 gift_id = 1;
}

message S2C_PlayerRecallGetGift {
    required uint32 ret = 1;
    optional uint32 gift_id = 2;
    repeated Award award = 3;
}

message C2S_PlayerRecallShop {
    required uint32 shop_id = 1;
}

message S2C_PlayerRecallShop {
    required uint32 ret = 1;
    optional uint32 shop_id = 2;
    repeated Award award = 3;
}

message C2S_PlayerRecallRecharge {
    required uint32 recharge_id = 1;
}

message S2C_PlayerRecallRecharge {
    required uint32 ret = 1;
    optional uint32 recharge_id = 2;
    repeated Award award = 3;
}

message Totem {
    required uint32 index = 1;
    required uint32 level = 2;
    required uint32 id_1 = 3;
    required uint32 val_1 = 4;
    required uint32 id_2 = 5;
    required uint32 val_2 = 6;
    required uint32 id_3 = 7;
    required uint32 val_3 = 8;
}

message C2S_GetTotemInfo {
}

message S2C_GetTotemInfo {
    required uint32 ret = 1;
    repeated Totem totems = 2;
}

message C2S_TotemUpgrade {
}

message S2C_TotemUpgrade {
    required uint32 ret = 1;
    optional Totem totem = 2;
}

message C2S_TotemRefining {
    required uint32 index = 1; //仙魂序号
    required uint32 pos = 2; //属性槽位置 1～3
    required uint32 cost_type = 3; // 0：普通， 1，高级， 7，全属性洗练
}

message S2C_TotemRefining {
    required uint32 ret = 1;
    optional uint32 index = 2;
    optional uint32 pos = 3;
    optional uint32 id_1 = 4;
    optional uint32 val_1 = 5;
    optional uint32 id_2 = 6;
    optional uint32 val_2 = 7;
    optional uint32 id_3 = 8;
    optional uint32 val_3 = 9;
}

message C2S_TotemReplace {
    required uint32 pos = 1; // 刷出来的3个新属性的位置 1～3
}

message S2C_TotemReplace {
    required uint32 ret = 1;
    optional uint32 pos = 2; // 需要替换的原属性的位置 1～3, 这个值与C2S_TotemRefining的pos相同
    optional Totem totem = 3;
}

message C2S_TotemMultiRefining {
    required uint32 index = 1; //仙魂序号
    required uint32 pos = 2; //属性槽位置 1～3
    required uint32 cost_type = 3; // 0：普通， 1，高级
    required uint32 times = 4; //洗练次数
}

message S2C_TotemMultiRefining {
    required uint32 ret = 1;
    optional uint32 pos = 2;
    optional Totem totem = 3;
}

//法术奇门：

//获得法术奇门信息：
message C2S_GetMagicSpecialInfo {
}

message S2C_GetMagicSpecialInfo {
    required uint32 ret = 1;
    repeated IntMap magic_special = 2; //法术奇门节点升级信息
}

//升级法术奇门节点
message C2S_UpgradeMagicSpecial {
    required uint32 id = 1; //节点id
}

message S2C_UpgradeMagicSpecial {
    required uint32 ret = 1;
    repeated IntMap magic_special = 2; //法术奇门节点升级信息
}

//重生法术奇门：
message C2S_RebornMagicSpecial {
}

message S2C_RebornMagicSpecial {
    required uint32 ret = 1;
    repeated Award cost_item = 2; //升级消耗的道具
    optional uint32 cost_energy = 3; //升级消耗的法宝能量
}

//获取法术奇门排行榜
message MagicSpecialRankInfo {
    optional SimpleUser user = 1;
    optional uint32 magic_energy = 2;
    optional uint32 rank = 3;
}

message C2S_GetMagicSpecialRank {
    required uint32 rank_type = 1; //排行榜类型（1：本服排行榜	2：全服排行榜）
}

message S2C_GetMagicSpecialRank {
    required uint32 ret = 1;
    repeated MagicSpecialRankInfo rank_list = 2;
    optional uint32 user_magic_energy = 3;
    optional uint32 user_rank = 4;
    optional uint32 rank_type = 5;
}

//拉取跨服玩家雷音寺布阵阵容信息
message C2S_GetThunderTempleFormation {
    required uint64 scene_id = 1; //跨服sceneid
    required uint64 user_id = 2; //跨服userid
    optional uint32 timed_out_handle = 3; //超时id
}

//这个协议体暂时应该是用不上的 只用对应到协议id
message S2C_GetThunderTempleFormation {
    required uint64 scene_id = 1; //跨服sceneid
    required uint64 user_id = 2; //跨服userid
    optional uint32 timed_out_handle = 3; //客户端不用理会该字段，只是服务器需要

}

message ThunderTempleStateInfo {
    required uint32 day = 1; //星期几
    required uint32 session = 2; //第几场比赛
    required uint32 state = 3; //状态 1 没开始 2战斗  3 结束
}

message ThunderTemplePreBattleInfo {
    required uint64 report_id = 1; //战报id  0表示轮空
    optional SimpleUser attack_user = 2;
    optional SimpleUser defense_user = 3;
    repeated uint32 attack_knights = 4; //攻击方队伍
    repeated uint32 defense_knights = 5; //防守方队伍
    required bool win = 6; //攻击方是否胜利
    required uint32 session = 7;
    required uint64 attack_team_power = 8; //攻击方队伍战力
    required uint64 defense_team_power = 9; //防守方队伍战力
}

message ThunderTempleFinalBattleSession {
    required uint64 report_id = 1; //战报id 0表示轮空
    repeated uint32 attack_knights = 2; //攻击方队伍
    repeated uint32 defense_knights = 3; //防守方队伍
    required bool win = 4; //攻击方是否胜利
    required uint32 session = 5; //场次

    required uint64 attack_team_power = 6; //攻击方队伍战力
    required uint64 defense_team_power = 7; //防守方队伍战力
}

message ThunderTempleFinalBattleInfo { //进攻方和防守方和战报ID 为0表示没有，表示轮空
                                       repeated ThunderTempleFinalBattleSession battle_sessions = 1; //场次
                                       required uint64 attack_userid = 2;
                                       required uint64 defense_userid = 3;
                                       required uint32 order = 4; //战斗序号
}

message ThunderTempleKnightInfo {
    required uint32 knight_id = 1;
    required uint64 power = 2;
}

//进入ThunderTemple界面
message C2S_GetThunderTempleInfo {

}

message S2C_GetThunderTempleInfo {
    required uint32 ret = 1;
    optional ThunderTempleStateInfo act_info = 2;

    repeated uint32 sessions = 3; //武将对应场次（例 2,0, 3,4,3,4,5,6,5,6,5,6 第一个武将出现在第二场  第二个武将出现在第三和第四场） 预赛为12个 决赛为6个
    repeated uint32 formations = 4; //武将对应站位 （例 1,0 ,1,1, 2,2 ,1,1 ,2,2, 3,3 跟上面对应 第一个武将出现在第二场第一个位置  第二个武将出现在第三场一号位和第四场）
    repeated ThunderTempleKnightInfo knights = 5; //武将knight_id
    repeated ThunderTemplePreBattleInfo battle_infos = 6; //预赛录像信息
    repeated uint32 reward_sessions = 7; //当天的奖励领取情况
    optional bool has_enroll = 8; //是否报名
    optional uint32 score = 9;
    optional uint32 rank = 10;
    optional uint32 total_win = 11; //当周总胜场
    optional uint32 total_lose = 12; //当周总败场
    optional bool has_yesterday_award = 13; //是否有昨日奖励没领
}

message S2C_GetThunderTempleSimpleInfo {
    optional ThunderTempleStateInfo act_info = 1;
    optional bool has_enroll = 2; //是否报名
    optional bool can_reward = 3; //是否能领奖

    repeated uint32 sessions = 4; //武将对应场次（例 2,0, 3,4,3,4,5,6,5,6,5,6 第一个武将出现在第二场  第二个武将出现在第三和第四场） 预赛为12个 决赛为6个
    repeated uint32 formations = 5; //武将对应站位 （例 1,0 ,1,1, 2,2 ,1,1 ,2,2, 3,3 跟上面对应 第一个武将出现在第二场第一个位置  第二个武将出现在第三场一号位和第四场）
    repeated ThunderTempleKnightInfo knights = 6; //武将knight_id
    optional bool has_yesterday_award = 7; //是否有昨日奖励没领
}

//更新状态
message S2C_ThunderTempleUpdateState {
    required ThunderTempleStateInfo state_info = 1;
}

//布阵
message C2S_ThunderTempleChangeFormation {
    repeated uint32 sessions = 1; //武将对应场次 预赛为12个 决赛为6个
    repeated uint32 formations = 2; //武将对应站位 对应上面的场次
}

message S2C_ThunderTempleChangeFormation {
    required uint32 ret = 1;
    repeated uint32 sessions = 2;
    repeated uint32 formations = 3;
}

message S2C_ThunderTempleUpdatePreBattle {
    required ThunderTemplePreBattleInfo battle_info = 1; //预赛录像信息
}

message ThunderTempleFinalUser {
    optional SimpleUser user = 1;
}

//查看昨天预赛录像
message C2S_GetThunderTempleGetYesterdayPreBattle {

}

message S2C_GetThunderTempleGetYesterdayPreBattle {
    required uint32 ret = 1;
    repeated ThunderTemplePreBattleInfo battle_infos = 2; //昨天预赛录像信息
    repeated uint32 reward_sessions = 3; //昨天的奖励领取情况
}

//查看决赛录像
message C2S_GetThunderTempleGetFinalBattle {

}

message S2C_GetThunderTempleGetFinalBattle {
    required uint32 ret = 1;
    repeated ThunderTempleFinalUser users = 2; //玩家信息
    repeated ThunderTempleFinalBattleInfo final_battles = 3; //对阵情况
    repeated IntMap reward_sessions = 4; //当天的奖励领取情况(参与决赛的有自己才会有这个字段) (key order val round )
    optional uint32 total_win = 6; //当周总胜场
    optional uint32 total_lose = 7; //当周总败场
    optional uint32 score = 8; //当周积分
}

//实时更新决赛
message S2C_ThunderTempleUpdateFinalBattle {
    required ThunderTempleFinalBattleInfo new_final_battle = 1; //新增的
}

//查看战报
message C2S_ThunderTempleGetReportInfo {
    required uint64 report_id = 1; //战报id
    required uint32 type = 2; // 1预赛 2决赛
    optional uint64 oppo_uid = 3; //预赛对手的uid
    optional uint32 timed_out_handle = 4; //超时id
}

message S2C_ThunderTempleGetReportInfo {
    required uint32 ret = 1;
    required uint64 report_id = 2; //战报id
    optional BattleReport battle_report = 3;
}

//开箱子
message C2S_ThunderTempleGetBattleBoxAward {
    required uint32 session = 1;
    required bool is_today = 2; //是否是今天的奖励
}

message S2C_ThunderTempleGetBattleBoxAward {
    required uint32 ret = 1;
    repeated Award award = 2;
    required uint32 session = 3;
    required bool is_today = 4;
}
//一键领取箱子
message C2S_ThunderTempleOneKeyGetBattleBoxAward {
    required bool is_today = 1; //是否是今天的奖励
}

message S2C_ThunderTempleOneKeyGetBattleBoxAward {
    required uint32 ret = 1;
    repeated Award award = 2;
    repeated uint32 session = 3;
    required bool is_today = 4;
}

//排行榜数据
message ThunderTempleUserRank {
    required uint32 rank = 1;
    required uint32 wins = 2; //胜场
    required uint32 score = 3; //积分
    required SimpleUser user = 4;
}

//获取排行榜
message C2S_GetThunderTempleRankInfo {
}

message S2C_GetThunderTempleRankInfo {
    required uint32 ret = 1;
    repeated ThunderTempleUserRank user_ranks = 2;

    optional uint32 self_score = 3;
    optional uint32 self_rank = 4;
    optional uint32 self_win_count = 5; //胜场
}

//同步数据
message C2S_ThunderTempleUpdateKnightData {
}

message S2C_ThunderTempleUpdateKnightData {
    required uint32 ret = 1;
    repeated ThunderTempleKnightInfo knights = 2; //武将
}

//玩家信息更新
message S2C_ThunderTempleUserDataChange {
    optional uint32 score = 1;
    optional uint32 rank = 2;
    optional uint32 total_win = 3; //当周总胜场
    optional uint32 total_lose = 4; //当周总败场
}

//决赛开箱子
message C2S_ThunderTempleGetFinalBattleBoxAward {
    required uint32 round = 1;
    required uint32 order = 2;
}

message S2C_ThunderTempleGetFinalBattleBoxAward {
    required uint32 ret = 1;
    repeated Award award = 2;
    required uint32 round = 3;
    required uint32 order = 4;
}

//获取决赛对阵玩家阵容
message C2S_GetThunderTempleFinalBattleFormation {
    required uint32 order = 1; //对阵序列
}

message S2C_GetThunderTempleFinalBattleFormation {
    required uint32 ret = 1;
    optional ThunderTempleFinalBattleInfo final_battle = 2; //对阵情况
}

//法宝幻化
message C2S_TreasureMagic {
    repeated uint64 treasure_ids = 1; //被幻化的宝物id
    optional uint32 to_treasure_base_id = 2; //幻化目标宝物base_id
}

message S2C_TreasureMagic {
    required uint32 ret = 1;
    repeated Award reduce = 2;
}

//限时找回
message RetrieveEvent {
    required uint32 id = 1;
    required bool got = 2;
    optional uint32 value = 3;
}
message Retrieve {
    repeated RetrieveEvent events = 1;
}

message C2S_GetRetrieveInfo {
}
message S2C_GetRetrieveInfo {
    optional Retrieve info = 1; //只发可领取和已领取的事件
}
message C2S_GetRetrieveAward {
    required uint32 id = 1;
}
message S2C_GetRetrieveAward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award award = 3;
}

//获得神将悟道信息（测试用）
message C2S_GetKnightWudaoInfo {
    required uint64 knight_id = 1; //神将id
}

message S2C_GetKnightWudaoInfo {
    required uint32 ret = 1;
    optional uint64 knight_id = 2; //神将id
    optional uint32 tree_id = 3; //技能树id
    repeated IntMap node_update = 4; //节点升级信息（节点id => 节点等级）
}

//升级节点
message C2S_UpdateKnightWudaoNode {
    required uint64 knight_id = 1; //神将id
    required uint32 tree_id = 2; //悟道技能树id
    required uint32 node_id = 3; //节点id
}

message S2C_UpdateKnightWudaoNode {
    required uint32 ret = 1;
    optional uint64 knight_id = 2;
    optional uint32 tree_id = 3; //悟道技能树id
    optional uint32 node_id = 4;
}

//重置技能树
message C2S_RebornKnightWudao {
    required uint64 knight_id = 1; //神将id
}

message S2C_RebornKnightWudao {
    required uint32 ret = 1;
    optional uint64 knight_id = 2; //神将id
    repeated Award cost_items = 3; //消耗的道具
}

message C2S_NetherWorldInfo {
}

message NetherWorldChapter {
    required uint32 id = 1;
    required uint32 stars = 2;
}

message S2C_NetherWorldInfo {
    required uint32 ret = 1;
    repeated NetherWorldChapter chapters = 2;
    repeated uint32 reward = 3; // 已经领取的章节奖励
    optional uint32 num = 4; // 剩余可挑战次数
    optional uint32 buy_num = 5; // 今日已购买次数
}

message C2S_NetherWorldMove {
    required uint32 x = 1;
    required uint32 y = 2;
    optional uint32 battle = 3; // 二选一事件中， 0:非战斗, 1:战斗
    required uint32 move = 4; // 步数
}

message S2C_NetherWorldMove {
    required uint32 ret = 1;
    optional uint32 x = 2;
    optional uint32 y = 3;
    optional uint32 id = 4; // 事件ID
    optional uint32 hp = 5; // 血量百分比
    optional uint32 state = 6; // 关卡状态 0:进行中,1:胜利,2:失败
    repeated Award awards = 7;
    optional BattleReport battle = 8; //战报
    optional uint32 val = 9; // 随机的参数
    optional uint32 deads = 10; // 死亡人数
}

message C2S_NetherWorldOp {
    required uint32 op = 1; // 1:挑战新关卡, 2:通关并领取奖励, 3:放弃，4:扫荡
    optional uint32 id = 2;
    optional uint32 move = 3;
}

message S2C_NetherWorldOp {
    required uint32 ret = 1;
    optional uint32 op = 2;
    optional uint32 id = 3;
    repeated Award awards = 4;
    optional uint32 stars = 5;
    optional uint32 star_sum = 6; // 这关总星数
}

message C2S_NetherWorldAward {
    required uint32 id = 1;
}

message S2C_NetherWorldAward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award awards = 4;
}

message C2S_NetherWorldBuy {
    required uint32 num = 1;
}

message S2C_NetherWorldBuy {
    required uint32 ret = 1;
    optional uint32 num = 2; // 剩余可挑战次数
    optional uint32 buy_num = 3; // 今日已经购买次数
}
message C2S_NetherWorldRank {
}

message NetherWorldRank {
    optional uint64 uid = 1;
    optional uint64 value = 2;
    optional SimpleUser simple_user = 3;
}

message S2C_NetherWorldRank {
    required uint32 ret = 1;
    repeated NetherWorldRank rank = 2;
}

message C2S_NetherWorldTop {
}

message NetherWorldTop {
    required uint32 id = 1;
    required uint32 move = 2;
    required string name = 3;
}

message S2C_NetherWorldTop {
    required uint32 ret = 1;
    repeated NetherWorldTop tops = 2;
}

//帮派抢矿begin---------------------
message UserCrystal {
    required SimpleUser user = 1;
    required uint32 crystal = 2; //当前晶矿数量
    optional uint32 robed_times = 3; //已抢夺的次数
}
message MyCrystal {
    required uint32 crystal = 1; //当前晶矿数量
    required uint32 rob_crystal = 2; //已抢夺的晶矿数量
    required uint32 daily_rob_crystal = 3; //今日已抢夺数量
}
message GuildCrystal {
    optional Guild guild = 1;
    optional uint64 sid = 2;
    required uint32 crystal = 3;
    optional bool is_focus = 4; //是否集火
    optional bool is_self = 5; //是否自己的帮派
    optional uint32 robCrystal = 6; //今日抢夺量
    optional uint32 rank = 7;
}
//获取帮派抢矿信息
message C2S_GetCrystalInfo {
}
message S2C_GetCrystalInfo {
    required uint32 ret = 1;
    optional bool is_enter = 2; //是否已报名
    optional MyCrystal my_info = 3;
    repeated uint32 user_award_id = 4; //个人奖励已领取列表
    repeated uint32 guild_award_id = 5; //帮派奖励已领取列表
    repeated GuildCrystal guild_info = 6;
    optional CommonCount attack_common_count = 7; //攻打次数
    optional CommonCount revenge_common_count = 8; //复仇次数
    optional uint32 now = 9;
    optional uint32 self_user_rank = 10;
    optional uint32 self_guild_rank = 11;
    optional uint32 begin_time = 12;
    optional uint32 end_time = 13;
    optional bool has_robed_log = 14;
}
message C2S_GetCrystalLastInfo {
}
message S2C_GetCrystalLastInfo {
    required uint32 ret = 1;
    optional uint32 last_store_crystal = 2; //上次上交的总量
    repeated Award last_store_award = 3; //上次上交获得的奖励
}
//获取对手信息 (没报名的接收到此协议后,会做报名操作)
message C2S_GetCrystalGuilds {
}
message S2C_GetCrystalGuilds {
    required uint32 ret = 1;
    repeated GuildCrystal guild_info = 2;
}
message S2C_UpdateCrystal {
    required uint32 tp = 1; //1:自己和帮派 2:帮派 3:自己排行更新
    optional uint32 my_crystal = 2; //当前晶矿数量
    optional uint32 guild_crystal = 3; //帮派晶矿数量
    optional uint32 guild_rob_crystal = 4; //帮派抢夺的晶矿数量
    optional bool has_robed_log = 5;
    optional uint32 self_user_rank = 6;
    optional uint32 self_guild_rank = 7;

}

//刷新对手
message C2S_RefreshCrystal {
}
message S2C_RefreshCrystal {
    required uint32 ret = 1;
    repeated GuildCrystal guild_info = 2;
}
//设置集火目标
message C2S_SetFocusCrystal {
    required uint64 guild_id = 1;
    required uint64 sid = 2;
}
message S2C_SetFocusCrystal {
    required uint32 ret = 1;
    optional uint64 guild_id = 2;
    optional uint64 sid = 3;
}
//获取成员信息
message C2S_GetCrystalUsers {
    required uint64 guild_id = 1;
    required uint64 sid = 2;
}

message S2C_GetCrystalUsers {
    required uint32 ret = 1;
    optional uint64 guild_id = 2;
    optional uint64 sid = 3;
    repeated UserCrystal users = 4;
}
//抢夺晶矿
message C2S_RobCrystal {
    required uint64 guild_id = 1;
    required uint64 sid = 2;
    required uint64 uid = 3;
}
message S2C_RobCrystal {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    repeated Award award = 3;
    optional MyCrystal my_info = 4;
    optional uint32 crystal = 5; //抢夺的晶矿
    optional uint32 extra_crystal = 6; //幸运晶矿
    optional bool is_win = 7;
    optional uint32 reduce_percent = 8;
    optional uint32 robed_times = 9; //已抢夺的次数
    optional uint32 cd_seconds = 10;

}
//复仇
message C2S_RevengeCrystal {
    required uint64 sid = 1;
    required uint64 uid = 2;
    required uint32 tm = 3;
}
message S2C_RevengeCrystal {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    repeated Award award = 3;
    optional MyCrystal my_info = 4;
    optional uint32 crystal = 5; //抢夺的晶矿
    optional uint32 extra_crystal = 6; //幸运晶矿
    optional bool is_win = 7;
    optional uint64 target_sid = 8; //目标sid
    optional uint64 target_uid = 9; //目标uid
    optional uint32 tm = 10;
    optional bool has_robed_log = 11;
    optional uint32 cd_seconds = 12;

}

//领取奖励
message C2S_GetCrystalAward {
    required uint32 tp = 1; //1:个人奖励 2:帮派奖励
    required uint32 id = 2;
}
message S2C_GetCrystalAward {
    required uint32 ret = 1;
    required uint32 tp = 2;
    required uint32 id = 3;
    repeated Award award = 4;
}
//领取奖励
message C2S_GetCrystalMultiAward {
    required uint32 tp = 1; //1:个人奖励 2:帮派奖励
    repeated uint32 id = 2;
}
message S2C_GetCrystalMultiAward {
    required uint32 ret = 1;
    required uint32 tp = 2;
    repeated uint32 id = 3;
    repeated Award award = 4;
}

//帮派晶矿日志
message GuildCrystalMemberLog {
    required string name = 1;
    required uint32 base_id = 2;
    required uint32 crystal = 3;
    required uint32 tm = 4;
}
message UserCrystalLog {
    required SimpleUser user = 1;
    required uint32 tp = 2; //1:被抢夺 2:复仇成功 3:他人协助成功
    required uint32 crystal = 3;
    required uint32 tm = 4;
    optional string helper_name = 5;
    optional uint32 helper_base_id = 6;
    optional uint32 cur_crystal = 7; //对方当前晶矿数量

}
message C2S_GetGuildCrystalLog {
}
message S2C_GetGuildCrystalLog {
    required uint32 ret = 1;
    repeated GuildCrystalMemberLog log = 2;
}
message C2S_GetUserCrystalLog {
    required uint32 tp = 1; //1:所有日志 2:被抢夺日志
}
message S2C_GetUserCrystalLog {
    required uint32 ret = 1;
    repeated UserCrystalLog log = 2;
    required uint32 tp = 3;
}
message C2S_CrystalBuyCount {
    required uint32 tp = 1; //1:攻打次数 2:复仇次数
    optional uint32 num = 2;
}

message S2C_CrystalBuyCount {
    optional uint32 ret = 1;
    optional uint32 tp = 2;
    optional CommonCount common_count = 3;
}
message GuildCrystaGuildRank {
    required uint32 rank = 1;
    required uint64 sid = 2;
    required uint64 guild_id = 3;
    required string guild_name = 4;
    required uint32 icon = 5;
    required uint32 guild_score = 6;
    required uint32 guild_exp = 7;
}

message GuildCrystaUserRank {
    required uint32 rank = 1;
    required uint32 score = 2;
    required SimpleUser user = 3;
}

message C2S_GetGuildCrystalRank {
    required uint32 type = 1; //1:个人 2:帮派 3:上期排名
}

message S2C_GetGuildCrystalRank {
    required uint32 ret = 1;
    required uint32 type = 2;
    repeated GuildCrystaGuildRank guilds = 3;
    repeated GuildCrystaUserRank users = 4;
    optional uint32 self_user_rank = 5;
    optional uint32 self_user_score = 6;
    optional uint32 self_guild_rank = 7;
    optional uint32 self_guild_score = 8;

}

message C2S_GetCrystalLastStoreInfo {
}
message S2C_GetCrystalLastStoreInfo {
    required uint32 ret = 1;
    optional uint32 rob_crystal = 2;
    optional uint32 rob_crystal_total = 3;
    optional uint32 store_crystal = 4;
    optional uint32 guild_crystal = 5;
    optional uint32 guild_rank = 6;
    optional uint32 user_rank = 7;
}

//帮派抢矿End----------------

message BattleMouldKnight {
    required uint64 id = 1; // 唯一ID
    repeated IntMap attr = 2;
}

message C2S_GetBattleMouldInfo {
}

message S2C_GetBattleMouldInfo {
    required uint32 ret = 1;
    repeated BattleMouldKnight knights = 2;
}

//翅膀护阵
message C2S_GetWingBlessInfo {
}

message S2C_GetWingBlessInfo {
    required uint32 ret = 1;
    optional uint32 wing_id = 2; //被护阵的翅膀id
    repeated IntMap bless_wing = 3; //翅膀的护阵信息（护阵阵位 -> 护阵翅膀id）
}

message C2S_WingBless {
    required uint32 wing_id = 1; //护阵的翅膀id
    required uint32 to_bless_id = 2; //被护阵的翅膀id
    required uint32 pos = 3; //护阵位置（1,2,3...）
}

message S2C_WingBless {
    required uint32 ret = 1;
    optional uint32 wing_id = 2; //护阵的翅膀id
    optional uint32 to_bless_id = 3; //被护阵的翅膀id
    optional uint32 pos = 4; //护阵位置（1,2,3...）
}

//H5活动界面查看
message H5Activity {
    optional string url = 1; //网址
    optional string name = 2; //活动名
    optional uint32 start_time = 3; //活动开始时间
    optional uint32 end_time = 4; //活动开始时间
    optional uint32 type = 5; //1:活动预览 2:新春活动
    optional string icon = 6; //icon
}
message C2S_GetH5ActivityView {
}

message S2C_GetH5ActivityView {
    repeated H5Activity acts = 1;
}

message C2S_GetWeChatBindCode {
}

message S2C_GetWeChatBindCode {
    required uint32 ret = 1;
    optional string bind_code = 2;
}

message C2S_GetRealmInfo {
}

message S2C_GetRealmInfo {
    required uint32 ret = 1;
    optional uint32 id = 3; //已通过的关卡ID
    optional uint32 refresh = 4; //已刷新次数
    repeated SimpleUser users = 5; //可挑战玩家
    repeated uint32 buff = 6;
    optional uint32 star = 7; //总星数
    repeated uint32 count = 8; //关卡内选择次数
    //optional uint32 last_rank = 9; //上周名次
    optional uint32 score = 10; //总积分
    repeated uint32 grades = 11; // 已领段位奖励
    repeated uint32 stage_buff = 12; //本关卡可选的3个buff
    optional uint32 rank = 13; //自己的排名，0: 未上榜
    optional uint32 max_fast_stage = 14;
}

message C2S_RealmAction {
    repeated uint32 index = 2; //操作的序号，从1开始
    optional bool fast = 3;
}

message S2C_RealmAction {
    required uint32 ret = 1;
    repeated uint32 index = 3;
    optional BattleReport battle = 4;
    repeated Award award = 5;
    optional uint32 score = 6; // 本次获得积分
    optional uint32 star = 7; // 获得星数
    optional uint32 count = 8; // 已使用次数
    optional uint32 remain_star = 9; //剩余可用星数
    repeated Award total_award = 10; //当天的总通关奖励
    optional bool fast = 11;
    repeated Award runestone = 12;
}

message C2S_RealmRefresh {
}

message S2C_RealmRefresh {
    required uint32 ret = 1;
    optional uint32 refresh = 2; //已刷新次数
    repeated SimpleUser users = 3; //可挑战玩家
}

message C2S_RealmRank {
}

message RealmRank {
    optional uint64 uid = 1;
    optional uint64 value = 2;
    optional SimpleUser simple_user = 3;
}

message S2C_RealmRank {
    required uint32 ret = 1;
    repeated RealmRank ranks = 2;
}

message C2S_RealmGrade {
    optional uint32 id = 1;
}

message S2C_RealmGrade {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award award = 3;
}

//金时装祈福
message GoldPrayScoreRank {
    required uint64 user_id = 1;
    optional SimpleUser simple_user = 2;
    optional uint32 score = 3;
    optional uint32 rank = 4;
}

message C2S_GoldPrayGetInfo {
}

message S2C_GoldPrayGetInfo {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 reward_time = 4;
    optional uint32 count = 5;
    optional uint32 rank = 6; //积分排行
    optional uint32 score = 7; //今日积分
    optional uint32 total_score = 8; //总积分
    optional uint32 gold_pool = 9; //祈福池元宝
    optional uint32 recharge_money = 10; //活动期间充值
    optional uint32 level_rank = 11; //等级排行
    optional uint32 act_type = 12; //活动类型 1:金时装 2:紫金时装
}

//祈福
message C2S_GoldPrayBuyGood {
    required uint32 count = 1; //1-> 祈福一次 10-> 祈福10次
}

message S2C_GoldPrayBuyGood {
    required uint32 ret = 1;
    repeated uint32 buy_id = 2;
    optional uint32 rank = 3; //玩家的排名
    optional uint32 daily_score = 4;
    optional uint32 total_score = 5;
    optional uint32 count = 6;
    repeated Award awards = 7;
}

//获取排行榜
message C2S_GoldPrayRank {
    required uint32 type = 1; //1:显示排行 2:发奖排行
}

message S2C_GoldPrayRank {
    required uint32 ret = 1;
    repeated GoldPrayScoreRank rank_list = 2;
    optional uint32 user_rank = 3;
    optional uint32 user_score = 4; //总积分
    optional uint32 type = 5;
}

//祈福池元宝变化
message S2C_GoldPrayGoldPool {
    optional uint32 gold_count = 1;
}

message S2C_GoldPrayNewActivity {
    optional uint32 start_time = 1;
    optional uint32 end_time = 2;
    optional uint32 reward_time = 3;
}

//主角修行
//获取升金任务信息
message C2S_GetPracticeBuddhismInfo {
}

message S2C_GetPracticeBuddhismInfo {
    required uint32 ret = 1;
    optional uint32 now_task = 2; //当前任务id
    optional uint32 task_complete = 3; //当前任务是否已完成
}

//完成任务
message C2S_CompleteBuddhismTask {
    required uint32 task_id = 1; //任务id
}

message S2C_CompleteBuddhismTask {
    required uint32 ret = 1;
    optional uint32 task_id = 2; //任务id
    optional uint32 next_task_id = 3; //下一个任务id
}

//获得神符信息
message C2S_GetRuneInfo {
}

message S2C_GetRuneInfo {
    repeated Rune runes = 3; //神符信息
}

message Rune {
    optional uint64 id = 1; //唯一ID
    optional uint32 base_id = 2; //baseid
    optional uint32 level = 3; //神符强化等级
    optional uint32 exp = 4; //神符强化当前等级经验
    optional uint32 advance_level = 5; //神符进阶等级
    optional uint32 advance_exp = 6; //神符进阶当前等级经验
    optional uint32 lucky_value = 7; //神符进阶幸运值
    repeated Award cost_log = 8; //消耗材料记录
    repeated Int64Map bless_rune = 9; //护佑神符
    repeated IntMap rune_stone = 10; //符石
}

//神符强化
message C2S_LevelUpRune {
    required uint64 id = 1; //id
    repeated Award items = 2;
}

message S2C_LevelUpRune {
    required uint32 ret = 1;
    required uint64 id = 2; //id
}

//神符进阶
message C2S_AdvanceLevelUpRune {
    required uint64 id = 1; //id
    optional bool speed_up = 2; //是否加速十倍
}

message S2C_AdvanceLevelUpRune {
    required uint32 ret = 1;
    required uint64 id = 2;
    optional uint32 crit_num = 3; //暴击倍数
    optional bool speed_up = 4; //是否加速十倍
 
}

//神符装备
message C2S_EquipRune {
    required uint64 id = 1; //id
    required uint32 team = 2;
    required uint32 pos = 3;
    optional bool replace_rune_stone = 4; //是否自动替换符石
    optional bool replace_bless_rune = 5; //是否自动替换护阵神符
}

message S2C_EquipRune {
    required uint32 ret = 1;
    required uint64 id = 2; //id
    required uint32 team = 3;
    required uint32 pos = 4;
    optional uint64 old_id = 5;
    optional bool replace_rune_stone = 6; //是否自动替换符石
    optional bool replace_bless_rune = 7; //是否自动替换护阵神符
}
//通用排行榜
message NewCommonRankInfo {
    required uint64 uid = 1;
    optional uint64 value = 2; //排名的分值
    optional uint32 rank = 3; //排名
    optional uint64 sp1 = 4; //扩展字段1
    optional SimpleUser simple_user = 5;
}

message C2S_GetNewCommonRank {
    required uint32 id = 1; //102（仙族荣誉）, 103（仙族最大伤害）, 104（妖族荣誉）, 105（妖族最大伤害）, 106（人族荣誉）, 107（人族最大伤害）
}

message S2C_GetNewCommonRank {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated NewCommonRankInfo rank = 3;
    optional uint64 user_value = 4;
    optional uint32 user_rank = 5;
}

//春节跨服活动
//进入活动界面
message C2S_GetFeedBeastInfo {

}

message S2C_GetFeedBeastInfo {
    required uint32 ret = 1;
    optional uint32 single_feed_value = 2; //个人喂养进度
    optional uint64 all_feed_value = 3; //全服喂养进度
    repeated uint32 reward_ids = 4; //玩家已领取进度宝箱id
    optional uint32 can_send_red_packet_num = 5; //可以发放红包的次数
    optional uint32 last_get_time = 6; //上次领取红包的时间
    optional uint32 buy_count = 7; //已购买喂食次数
    optional uint32 use_count = 8; //已喂食次数
    optional uint32 can_get_red_packet = 9; //是否可以领取红包（0：不可以	1：可以）
    optional uint32 start_time = 10; //活动开始时间
    optional uint32 end_time = 11; //活动结束时间
    optional uint32 reward_time = 12; //活动领奖时间
    repeated AllUserFeedBeastLog feed_beast_log = 13; //喂养日志
    optional uint32 buy_bone_amount = 14; //今天已购买大骨头的次数
    repeated IntMap exchange_count = 15; //商品兑换次数
}

//喂食瑞兽灵犬
message C2S_FeedBeast {

}

message S2C_FeedBeast {
    required uint32 ret = 1;
    optional uint32 single_feed_value = 2; //个人喂养进度
    optional uint64 all_feed_value = 3; //全服喂养进度
    optional uint32 can_send_red_packet_num = 4; //可以发放红包的次数
    optional uint32 buy_count = 5; //已购买喂食次数
    optional uint32 use_count = 6; //已喂食次数
    repeated Award rewards = 7; //喂食获得的奖励
    optional bool has_new_red_packet_num = 8; //是否有新的发红包次数
}

//购买喂食大骨头
message C2S_BuyFeedBeastBone {
    required uint32 buy_bone_num = 1; //购买的大骨头数量
}

message S2C_BuyFeedBeastBone {
    required uint32 ret = 1;
    optional uint32 buy_bone_amount = 2; //今天已购买大骨头的次数
    repeated Award buy_bone = 3; //购买得到的大骨头
}

//领取喂食进度宝箱
message C2S_GetFeedBeastBox {
    required uint32 box_id = 1;
}

message S2C_GetFeedBeastBox {
    required uint32 ret = 1;
    optional uint32 box_id = 2;
    repeated Award award = 3;
}

//发放红包
message C2S_SendFeedBeastRedPacket {
    required uint32 red_packet_type = 1; //发放红包的大小类型
}

message S2C_SendFeedBeastRedPacket {
    required uint32 ret = 1;
    optional uint32 can_send_red_packet_num = 2; //可以发放的红包数量
    repeated Award award = 3; //发放红包获得的奖励
}

//当前是否可以领取红包（有本服红包则在本服广播可领取红包协议）
//message C2S_CanGetRedPacket {

//}//本协议暂时不用

message S2C_CanGetRedPacket {
    required uint32 ret = 1;
    required uint32 can_get_red_packet = 2; //是否可以领取红包（0：不可以	1：可以）
}

//领取红包
message C2S_GetFeedBeastRedPacket {

}

message S2C_GetFeedBeastRedPacket {
    required uint32 ret = 1;
    optional uint32 gold_num = 2; //获得元宝数量
    optional uint32 last_get_time = 3; //上次领取红包的时间
    optional uint64 sender_sid = 4;
    optional string sender_name = 5;
    optional uint32 sender_quality = 6;
    optional uint32 packet_type = 7;

}

//获得红包日志
message FeedBeastRedPacketLog {
    required uint32 time = 1;
    required uint64 sid = 2; //服务器id
    required string name = 3; //玩家姓名
    required uint32 quality = 4; //玩家品质
    required uint32 gold_num = 5; //获得or发放元宝数
    required uint32 red_packet_type = 6; //发放或者抢红包（0：发红包	1：抢红包）
    required uint32 packet_type = 7; //红包类型
}

message C2S_GetFeedBeastRedPacketLog {

}

message S2C_GetFeedBeastRedPacketLog {
    required uint32 ret = 1;
    repeated FeedBeastRedPacketLog red_packet_log = 2; //玩家红包日志
    optional uint32 red_packet_num = 3; //剩余可领取红包数量
    optional uint32 all_gold_num = 4; //已领取元宝总数

}

//打开排行榜
//喂食排行榜
message FeedBeastValueRankInfo {
    required SimpleUser user = 1;
    required uint32 feed_value = 2; //喂养值
    required uint32 rank = 3;
}

//红包排行榜
message FeedBeastRedPacketRankInfo {
    required SimpleUser user = 1;
    required uint32 gold_num = 2; //发放的元宝数量
    required uint32 send_red_packet_num = 3; //发放红包数量
    required uint32 rank = 4;
}

message C2S_GetFeedBeastRank {
    required uint32 rank_type = 1; //排行榜类型（1：喂养值排行榜	2：红包排行榜）
}

//喂养值排行榜
message S2C_GetFeedBeastFeedValueRank {
    required uint32 ret = 1;
    repeated FeedBeastValueRankInfo feed_value_rank = 2;
    optional uint32 my_feed_rank = 3;
}

//红包排行榜
message S2C_GetFeedBeastRedPacketRank {
    required uint32 ret = 1;
    repeated FeedBeastRedPacketRankInfo red_packet_rank = 2;
    optional uint32 my_red_packet_rank = 3;
}

//停留在活动界面，每隔一定时间拉取全服数据
//喂食日志
message AllUserFeedBeastLog {
    required uint32 time = 1; //时间
    required uint64 sid = 2; //服务器sid
    required string name = 3; //玩家姓名
    required uint32 quality = 4; //玩家品质
    repeated Award award = 5; //获得的奖励
}

message C2S_GetAllFeedBeastInfo {
    required uint32 max_log_time = 1; //当前最新的喂养日志时间
}

message S2C_GetAllFeedBeastInfo {
    required uint32 ret = 1;
    optional uint64 all_feed_value = 2; //全服喂食值
    repeated AllUserFeedBeastLog user_feed_log = 3; //最新的全服喂食日志
}

//推送跑马灯领取红包
message S2C_GetRedPacketBullet {
    optional uint64 get_sid = 1; //领取红包玩家所在服务器sid
    optional string get_name = 2; //领取红包玩家姓名
    optional uint32 get_quality = 3; //领取红包玩家品质
    optional uint64 send_sid = 4; //发送红包玩家所在服务器sid
    optional string send_name = 5; //发送红包玩家姓名
    optional uint32 send_quality = 6; //发送红包玩家品质
    optional uint32 gold_num = 7; //领取元宝数量
    optional uint32 packet_type = 8; //发送红包类型
}

//兑换商品
message C2S_FeedBeastExchangeItem {
    required uint32 item_id = 1;
    required uint32 exchange_count = 2;
}

message S2C_FeedBeastExchangeItem {
    required uint32 ret = 1;
    optional uint32 item_id = 2;
    optional uint32 exchange_count = 3;
    repeated Award item = 4;
}

//神将护佑
message C2S_GetBlessKnightInfo {
}

message S2C_GetBlessKnightInfo {
    repeated uint64 knight_id = 1;
}

message C2S_ChangeBlessKnight {
    required uint32 pos = 1;
    required uint64 knight_id = 2; //下阵时 knight_id = 0
}

message S2C_ChangeBlessKnight {
    required uint32 ret = 1;
    required uint32 pos = 2;
    required uint64 knight_id = 3;
    optional uint64 old_knight_id = 4;
}

//国战
message CountryWarUser {
    optional uint32 city_field = 1; //站位
    optional uint32 defend_time = 2; //上次被攻击时间
    optional SimpleUser simple_user = 3;
    optional uint32 country_id = 4;
    optional string country_name = 5;
    optional uint32 score = 6; //当前获得分数
    optional uint32 occupy_time = 7; //占领位置时间
    optional uint32 use_protected_num = 8; //使用免死次数
    optional uint32 defend_num = 9; //被攻击次数
}

message CountryWarWall {
    optional uint32 id = 1; //城墙ID
    optional uint32 country_id = 2; //联盟ID
    optional string country_name = 3; //占领联盟
    optional uint32 own_time = 4; //占领时间
    optional uint64 hp = 5;
    optional uint64 max_hp = 6;
    optional uint32 use_item_time = 7;
}

//盟前挑衅玩家信息
message CountryWarProvokeUser {
  required uint64 uid = 1;
  required uint32 title = 2;//头衔等级
  required SimpleUser simple_user = 3;
}

message CityBaseInfo {
    optional uint32 city_id = 1;
    optional string country_name = 2;
    optional uint32 city_count = 3; //人数
    optional uint32 country_id = 4; //本盟ID
    optional uint64 city_monster_hp = 5; //大小怪城的血量
    optional uint64 city_monster_max_hp = 6; //总血量
    optional uint64 city_monster_id = 7; //怪物ID
    optional uint32 city_monster_time = 8; //出生时间
    optional uint32 country_rank = 11; //本盟排名
    optional CountryWarProvokeUser top1_user = 12;//士气最高的玩家
    optional uint32 slogan = 13;//口号
}

message CountryWarCountryTask {
    required uint32 id = 1;
    required uint32 task_type = 2; //任务类型
    required uint32 city_id = 3;
    required uint32 task_color = 4; //任务品质
    required uint32 rank = 5;
    required uint64 uid = 6;
    required uint32 time = 7; //触发时间
    optional uint32 value = 8; //累计次数
}

message CountryWarCountryInfo {
    optional uint32 country_id = 1;
    optional uint32 country_icon = 2;
    optional string country_name = 3;
    optional uint32 country_exp = 4;
    optional uint32 country_city = 5;
    optional uint32 today_exp = 6; //当日经验
    repeated uint64 sids = 7; //同一个联盟的sid
    repeated CountryWarCountryTask tasks = 8; //联盟任务信息
    optional uint32 country_add_rate = 9; //奖励加成
    optional uint32 country_exp_rate = 10; //经验加成
    optional uint32 country_rate_city = 11; //加成城市ID
}

message CountryWarRankCountry {
    required uint32 country_id = 1;
    optional CountryWarCountryInfo country_info = 2;
    optional uint32 score = 3;
    optional uint32 rank = 4;
}

message CountryWarRankUser {
    required uint64 user_id = 1;
    optional uint32 score = 2;
    optional uint32 rank = 3;
    optional SimpleUser simple_user = 4;
    optional uint32 country_id = 5;//仙盟ID
}

message CountryWarCountryDamage {
    optional CountryWarCountryInfo country = 1;
    optional uint64 country_damage = 2;
}

message CountryWarSubTitle {
    required uint32 sub_type = 1; //弹幕事件类型 1-5
    optional string country_name = 2;
    optional string user_name = 3;
    optional uint32 city_id = 4;
    optional uint32 wall_id = 5;
    optional uint64 damage = 6;
    optional uint32 add_score = 7;
}

message CountryWarSystemLog {
    required uint32 sub_type = 1; //1-6:个人任务模板, 7-10:联盟任务模板
    optional uint32 city_id = 2;
    optional string country_name = 3;
    optional uint32 country_rank = 4; //联盟此次封印的排名
    optional uint32 country_score = 5; //联盟共获得积分
    optional uint32 user_score = 6; //个人的贡献
    optional string user_name = 7; //攻击方名字
    optional string defend_name = 8; //防守方名字
    optional uint32 monster_id = 9; //怪物ID
    optional uint64 user_id = 10;
}

message CountryWarCitySmallMonster {
    optional uint32 city_id = 1;
    repeated CountryWarUser field_users = 2;
    optional uint32 time = 3; //出现时间
    optional uint64 cur_hp = 4; //当前血量
    optional uint64 max_hp = 5; //总血量
    optional uint32 monster_id = 6; //怪物ID
}

message CountryWarCityBigMonster {
    optional uint32 city_id = 1;
    optional uint32 time = 2; //出现时间
    optional uint32 monster_id = 3; //怪物ID
    repeated CountryWarCountryDamage countries_damage = 5; //每个联盟的伤害
}

message CountryWarCityAttackCity {
    required uint32 city_id = 1;
    repeated CountryWarWall walls = 2; //城墙信息
    required uint32 time = 3; //出现时间
    required uint32 owner_country = 4; //占有的仙盟
    repeated CountryWarUser wall_users = 5; //外城玩家（随机）
    repeated CountryWarUser inner_users = 6;
    optional uint32 user_score = 7; //这个城的个人积分
    optional uint32 country_score = 8;
    optional uint32 country_rank = 9;
    optional string owner_country_name = 10; //占有的仙盟名称
    optional uint32 extra_plus = 11; //额外伤害加成
}

message CountryOccupyInfo {
    optional uint32 city_id = 1;
    optional uint32 occupy_time = 2;
    optional uint32 occupy_value = 3;
    optional uint32 battle_count = 4;
    optional uint32 city_level = 5;
}

message CountryWarTaskInfo {
    repeated IntMap user_task_value = 1; //个人任务 针对任务类型5,6,7
    repeated uint32 user_task_rewards = 2; //领奖记录 针对任务类型1,4,5,6,7
    repeated uint32 user_special_task_rewards = 3; //领奖记录 针对任务类型2,3
}

message CountryWarComment {
    required uint32 id = 1;
    optional string content = 2;
    optional uint32 cid = 3;
    optional uint32 groupid = 4;
    optional uint32 top = 5;
    optional uint32 time = 6;
    optional string name = 7;
    optional uint64 sid = 8;
}

message CountryWarWallHp {
    required uint32 wall_id = 1;
    optional uint64 wall_cur_hp = 2;
}

message CountryWarCityWallsHp {
    repeated CountryWarWallHp walls = 1;
}

message C2S_CountryWarGetInfo {
}

message S2C_CountryWarGetInfo {
    required uint32 begin_time = 1; //活动开始时间
    required uint32 end_time = 2;
    required uint32 city_id = 3; //当前城堡ID
    optional uint32 score = 4; //个人分数
    optional uint32 move_time = 5; //上次移动时间
    optional CountryWarCountryInfo country_info = 6;
    optional CountryWarTaskInfo country_task = 7;
    repeated uint32 box_record = 8;
    repeated uint32 score_rewards = 9; //联盟积分领取情况
    optional uint32 user_attack_time = 10; //上次攻击时间
    optional uint32 inner_attack_time = 11; //内城上次攻击时间
    optional uint32 purchase_count = 12;
    optional uint32 use_count = 13;
    optional uint32 msg_count = 14; //今日留言次数
    optional CommonCount provoke_count = 15; //盟前挑衅次数
}

message C2S_CountryWarMove {
    required uint32 city_id = 1;
}

message S2C_CountryWarMove {
    required uint32 ret = 1;
    optional uint32 city_id = 2;
    optional uint32 move_time = 3;
}

message C2S_CountryWarGetCityInfo {
    required uint32 city_id = 1;
    optional uint32 city_type = 2; //1:获取放大镜信息, 2:获取攻城战的城墙信息, 3:获取攻城战内城信息
}

message S2C_CountryWarGetCityInfo {
    required uint32 ret = 1;
    required uint32 city_id = 2;
    optional uint32 city_type = 3;
    optional CountryWarCitySmallMonster small_city = 4;
    optional CountryWarCityBigMonster big_city = 5;
    optional CountryWarCityAttackCity attack_city = 6;
    optional uint32 country_score = 7; //今日联盟积分
    optional uint32 user_number = 8; //进去的人数
}

message C2S_CountryWarGetRankInfo {
}

message S2C_CountryWarGetRankInfo {
    required uint32 ret = 1;
    repeated CountryWarRankCountry countrys = 2;
    optional uint32 country_rank = 3;
    optional uint32 country_score = 4; //总积分
}

message C2S_CountryWarGetUserRankInfo {
}

message S2C_CountryWarGetUserRankInfo {
    required uint32 ret = 1;
    repeated CountryWarRankUser users = 2;
    optional uint32 user_rank = 3;
    optional uint32 user_score = 4; //总积分
}

message C2S_CountryWarGetAward {
    required uint32 task_id = 1;
}

message S2C_CountryWarGetAward {
    required uint32 ret = 1;
    optional uint32 task_id = 2;
    repeated Award awards = 3;
}

message C2S_CountryWarGetLog {
    required uint32 log_type = 1; //[1:联盟日志], [2:个人日志]
}

message S2C_CountryWarGetLog {
    required uint32 ret = 1;
    required uint32 log_type = 2; //[1:联盟日志], [2:个人日志]
    repeated CountryWarCountryLog clogs = 3;
    repeated CountryWarUserLog ulogs = 4;
}

message C2S_CountryWarGetComments {
}

message S2C_CountryWarGetComments {
    required uint32 ret = 1;
    repeated CountryWarComment comments = 2;
}

//message C2S_CountryWarModifyBase {
//	required uint32 type = 1; //[1:修改名字] [2:修改头像]
//	optional string name = 2;
//	optional uint32 icon = 3;
//}
//
//message S2C_CountryWarModifyBase {
//	required uint32 ret = 1;
//}

message C2S_CountryWarGetMapInfo {
}

message S2C_CountryWarGetMapInfo {
    required uint32 ret = 1;
    optional uint32 map_type = 2; //1:全部, 2:更新
    repeated CityBaseInfo city_base_infos = 3;
    optional uint32 cur_city = 4; //当前城市
    optional bool has_pos = 5; //有位置
}

message C2S_CountryWarBattle {
    required uint32 city_id = 1;
    required uint32 battle_type = 2; //1:怪物，2:玩家
    optional uint32 attack_field = 3; //攻击目标站位
    optional uint64 attack_uid = 4; //目标id
}

message S2C_CountryWarBattle {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    repeated Award awards = 3;
    optional uint32 add_score = 4;
    optional bool is_win = 5;
    optional uint64 damage = 6; //本次造成的伤害
    optional uint32 attack_time = 7; //本次个人的攻击时间
    optional uint32 inner_attack_time = 8; //攻城战内城个人上次攻击时间
    optional bool is_invincible = 9; //是否无敌
}

message S2C_CountryWarDanmuku {
    repeated CountryWarCountryLog logs = 1; //弹幕内容
}

message C2S_CountryWarGiveUp {
    required uint32 city_id = 1;
}

message S2C_CountryWarGiveUp {
    required uint32 ret = 1;
}

message C2S_CountryWarGetScoreAward {
    required uint32 award_id = 1;
}

message S2C_CountryWarGetScoreAward {
    required uint32 ret = 1;
    optional uint32 award_id = 2;
    repeated Award awards = 3;
}

message C2S_CountryWarGetCountryInfo {
    required uint32 country_id = 1;
}

message S2C_CountryWarGetCountryInfo {
    required uint32 ret = 1;
    optional CountryWarCountryInfo country_info = 2;
    optional uint32 self_country_rank = 3; //本联盟排名
    optional uint32 sum_country_count = 4; //总联盟数
}

message C2S_CountryWarGetOccupyInfo {
}

message S2C_CountryWarGetOccupyInfo {
    required uint32 ret = 1;
    optional uint32 occupy_num = 2;
    optional uint32 score_value = 3;
    optional uint32 occupy_rank = 4;
    repeated CountryOccupyInfo occupy_logs = 5;
}

message C2S_CountryWarComment {
    required string content = 1;
}

message S2C_CountryWarComment {
    required uint32 ret = 1;
    optional CountryWarComment comment = 2;
    optional uint32 msg_count = 3; //今日留言次数
}

message C2S_CountryWarUseItem {
    required uint32 item_id = 1;
    required uint32 city_id = 2;
    required uint32 wall_id = 3;
}

message S2C_CountryWarUseItem {
    required uint32 ret = 1;
    optional uint32 item_id = 2;
    optional uint32 city_id = 3;
    optional uint32 wall_id = 4;
}

message C2S_CountryWarGetAttackCityRank {
    required uint32 city_id = 1;
}

message S2C_CountryWarGetAttackCityRank {
    required uint32 ret = 1;
    repeated CountryWarCountryInfo countries = 2;
}

message S2C_CountryWarUpdateCityInfo {
    optional CountryWarCitySmallMonster small_city = 1;
    optional CountryWarCityBigMonster big_city = 2;
    optional CountryWarCityAttackCity attack_city = 3;
    optional uint32 auto_dec_hp = 4; //1:自动扣血
    repeated CountryWarCityWallsHp wall_hp_list = 5; //攻击序列, 血量值
}

message C2S_CountryWarBuyChallengeCount {
    optional uint32 count = 1;
}

message S2C_CountryWarBuyChallengeCount {
    optional uint32 ret = 1;
    optional uint32 purchase_count = 2;
    optional uint32 use_count = 3;
}

message C2S_CountryWarExitCountry {
}

message S2C_CountryWarExitCountry {
    required uint32 ret = 1;
}

//更新玩家个人任务信息
message S2C_CountryWarUpdateUserTask {
    required CountryWarTaskInfo country_task = 1;
}

//更新个人积分信息
message S2C_CountryWarUpdateUserInfo {
    required uint32 score = 1;
}

//更新活动信息
message S2C_CountryWarUpdateActInfo {
    required uint32 begin_time = 1; //活动开始时间
    required uint32 end_time = 2;
}

//联盟日志 走马灯通用这一个
message CountryWarCountryLog {
    optional uint32 type = 1; //1:封印小怪;2攻打大怪;3攻占城池;击溃城池
    optional uint32 cid = 2; //同盟id
    optional string cname = 3; //同盟名称
    optional uint32 city_id = 4; //城池id
    optional uint64 uid = 5; //玩家uid
    optional string name = 6; //玩家名称
    optional uint32 rank = 7; //排名
    optional uint32 door_id = 8; //城门id
    optional uint32 exp = 9; //增加个人经验
    optional uint32 monster_id = 10; //怪物id
    optional uint32 time = 11;
}

//玩家日志
message CountryWarUserLog {
    optional uint32 type = 1; //1 攻打小怪;2 攻打城池
    optional uint32 type2 = 2; //类型2 1;战胜玩家;2 被击败；3 封印小怪或者击溃城门
    optional uint64 sid = 3;
    optional uint64 uid = 4;
    optional uint32 cid = 5; //城池id
    optional string op_uname = 6; //对手名称
    optional uint32 door_id = 7;
    optional uint32 monster_id = 8; //怪物id
    optional uint32 time = 9;
    optional string op_cname = 10; //对手同盟名称
}

message CountryWarProvokeEnemyLayer {
    optional uint32 layer = 1;
    repeated NewCommonCrossRank enemies = 2;
    repeated uint64 attacked_enemies = 3;//已挑战过的玩家
}

//拉取盟前挑衅敌人信息
message C2S_CountryWarGetProvokeEnemyList {
    required uint32 country_id = 1;
    required bool refresh_all = 2;//是否所有层
    optional uint32 layer = 3;
}

message S2C_CountryWarGetProvokeEnemyList {
    required uint32 ret = 1;
    required uint32 country_id = 2;
    required bool refresh_all = 3;//是否所有层
    repeated CountryWarProvokeEnemyLayer layers = 4;//目标仙盟信息
    optional CountryWarProvokeEnemyLayer myInfo = 5;//如果有我的话 我自己所在的层数信息
}

//刷新盟前挑衅敌人信息
message C2S_CountryWarRefreshProvokeEnemyList {
    required uint32 country_id = 1;
    required uint32 layer = 2;
}

message S2C_CountryWarRefreshProvokeEnemyList {
    required uint32 ret = 1;
    optional uint32 country_id = 2;
    optional CountryWarProvokeEnemyLayer layer = 3;//目标仙盟信息
    optional CountryWarProvokeEnemyLayer myInfo = 4;//如果有我的话 我自己所在的层数信息
}

//挑衅别的盟玩家
message C2S_CountryWarAttackProvokeEnemy {
    required uint64 target_id = 1;
    required uint32 country_id = 2;
}

message S2C_CountryWarAttackProvokeEnemy {
    required uint32 ret = 1;
    optional uint32 layer = 2;//目标对应层数
    optional uint64 target_id = 3;
    optional uint32 my_rank = 5;//我当前士气排名
    optional BattleReport battle_report = 6;
    repeated Award award = 7;
    repeated Award extra_award = 8;//随机奖励
    optional CommonCount provoke_count = 9; //盟前挑衅次数
    optional uint32 cur_morale_level = 10; //当前士气段位等级
}

message C2S_CountryWarGetUserMoraleRankInfo {
}

message S2C_CountryWarGetUserMoraleRankInfo {
    required uint32 ret = 1;
    repeated CountryWarRankUser users = 2;
    optional uint32 user_rank = 3;
    optional uint32 user_score = 4; //总士气
}

message C2S_CountryWarSetCountrySlogan {
    required uint32 slogan = 1;
}

message S2C_CountryWarSetCountrySlogan {
    required uint32 ret = 1;
    optional uint32 slogan = 2;
}

//战斗测试
message C2S_PveTest2 {
    required uint32 monster_team_id = 1; //怪物id
}

message S2C_PveTest2 {
    required uint32 ret = 1;
    required uint32 monster_team_id = 2; //怪物id
    optional BattleReport battle = 3; //战报
}

//神符护佑
message C2S_RuneBless {
    required uint64 bless_rune = 1; //护佑的神符id（卸下神符时该值为0）
    required uint64 to_bless_rune = 2; //护佑目标的神符id
    required uint32 bless_pos = 3; //护佑的槽位（从1开始，目前只有一个槽位）
}

message S2C_RuneBless {
    required uint32 ret = 1;
    optional uint64 old_rune_id = 2; //原来护佑神符的id
    optional uint64 bless_rune_id = 3; //新的护佑神符id
    optional uint64 to_bless_rune_id = 4; //被护佑的神符id
}
//获得赛季商店信息
message C2S_GetSeasonShopInfo {
    required uint32 shop_id = 1;
}

message S2C_GetSeasonShopInfo {
    required uint32 ret = 1;
    required uint32 shop_id = 2;
    repeated IntMap goods = 3;
}

//购买赛季商品
message C2S_BuySeasonShopGoods {
    required uint32 shop_id = 1; //购买商品所属商店
    required uint32 goods_id = 2; //购买商品id
    required uint32 buy_count = 3; //购买数量
}

message S2C_BuySeasonShopGoods {
    required uint32 ret = 1;
    optional uint32 shop_id = 2; //购买商品所属商店
    optional uint32 goods_id = 3; //购买商品id
    optional uint32 buy_count = 4; //购买数量
    repeated Award award = 5;
}

message C2S_AccountCopy {

}

message S2C_AccountCopy {

}

message C2S_GenderChange {
}

message S2C_GenderChange {
    required uint32 ret = 1;
    optional uint32 num = 2; //变身次数
    optional uint32 tm = 3; //变身CD时间
}

message C2S_GenderChangeInfo {
}

message S2C_GenderChangeInfo {
    required uint32 ret = 1;
    optional uint32 num = 2; //变身次数
    optional uint32 tm = 3; //变身CD时间
}
//玄灵仙岛
//获取玄灵仙岛信息
message SoulIslands {
    required uint32 chapter_id = 1; //当前章节id
    required uint32 stage_id = 2; //当前关卡id
    optional uint32 max_chapter_id = 3; //已通关的最大章节id
    repeated uint32 chapter_award_id = 4; //已领取首通奖励的章节id
    required uint32 checked_num = 5; //本章已洞察次数
    required uint32 has_bought_check_num = 6; //本章已购买洞察次数
    required uint32 boss_type = 7; //当前章节boss种类
    required uint32 award_type = 8; //选择的奖励类型（1：原奖励  2：紫金仙灵奖励）
}

message C2S_GetSoulIslandsInfo {

}

message S2C_GetSoulIslandsInfo {
    required uint32 ret = 1;
    optional SoulIslands soul_islands_info = 2; //玄灵秘岛信息
    optional CommonCount challenge_count = 3; //挑战次数
}

//进入章节
message C2S_EnterSoulIslandsChapter {
    required uint32 chapter_id = 1; //要进入的章节id
}

message S2C_EnterSoulIslandsChapter {
    required uint32 ret = 1;
    optional uint32 chapter_id = 2; //进入的章节id
    optional uint32 stage_id = 3; //当前关卡id
    optional uint32 boss_type = 4; //本章boss种类
    optional bool has_checked = 5; //本关是否已经洞察过
    repeated IntIntMap attribute = 6; //已获得的抗灭属性（key：抗灭种类 value：抗灭数值）
    repeated uint32 monsters = 7; //当前关卡的怪物（key：怪物位置，boss为0 value：怪物种类）
    repeated Award bag_awards = 8; //背包奖励
    optional uint32 left_check_count = 9; //本章当前剩余洞察次数
    optional uint32 bought_check_count = 10; //本章已购买洞察次数
}

//挑战关卡
message C2S_ChallengeSoulIslandsStage {
    required uint32 monster_pos = 1; //挑战的怪物位置（boss战为0）
}

message S2C_ChallengeSoulIslandsStage {
    required uint32 ret = 1;
    optional uint32 monster_pos = 2; //挑战的怪物位置（boss战为0）
    optional BattleReport battle_report = 3; //战报
    optional uint32 max_chapter_id = 4; //已通关的最大章节id
    repeated Award awards = 5; //获得的奖励
    repeated Award bag_awards = 6; //背包中的总奖励
    optional uint32 buff_type = 7; //获得的属性类型
    optional uint32 buff_value = 8; //获得的属性值
    optional uint32 monster = 9; //当前怪物种类
    repeated IntIntMap total_buff = 10; //当前的总属性
    optional uint32 next_stage_id = 11; //下一关id（失败发送当前关卡id）
}

//洞察
message C2S_CheckSoulIslandsStage {

}

message S2C_CheckSoulIslandsStage {
    required uint32 ret = 1;
    optional uint32 left_check_count = 2; //本章当前剩余洞察次数
    repeated uint32 monster_info = 3; //怪物信息
    optional uint32 bought_check_count = 4; //本章已购买洞察次数
}

//领取章节奖励
message C2S_GetSoulIslandsChapterAward {
    required uint32 chapter_id = 1; //领取奖励的章节id
}

message S2C_GetSoulIslandsChapterAward {
    required uint32 ret = 1;
    optional uint32 chapter_id = 2; //领取奖励的章节id
    repeated Award awards = 3; //奖励
}

//放弃挑战
message C2S_GiveUpSoulIslandsChapter {
    required uint32 choice = 1; //放弃章节的选择（0：获得奖励 1：放弃奖励）
}

message S2C_GiveUpSoulIslandsChapter {
    required uint32 ret = 1;
    optional uint32 choice = 2; //放弃章节的选择（0：获得奖励 1：放弃奖励）
    optional CommonCount count = 3; //挑战次数
    repeated Award awards = 4; //奖励
}

//购买挑战次数
message C2S_BuySoulIslandsCount {
    required uint32 buy_count = 1; //购买次数
}

message S2C_BuySoulIslandsCount {
    required uint32 ret = 1;
    optional CommonCount challenge_count = 2; //挑战次数
}

//购买洞察次数
message C2S_BuySoulIslandsCheckCount {
    required uint32 buy_check_count = 1; //购买的洞察次数
}

message S2C_BuySoulIslandsCheckCount {
    required uint32 ret = 1;
    optional uint32 left_check_count = 2; //本章当前剩余洞察次数
    optional uint32 bought_check_count = 3; //本章已购买洞察次数
}

//扫荡
message C2S_FastSoulIslandsChapter {
    required uint32 chapter_id = 1; //扫荡的章节id
}

message S2C_FastSoulIslandsChapter {
    required uint32 ret = 1;
    optional CommonCount challenge_count = 2; //挑战次数
    repeated Award awards = 3; //奖励
}

//获得排行榜
message SoulIslandsRankInfo {
    optional SimpleUser user = 1;
    optional uint32 chapter_id = 2; //章节id
    optional uint32 rank = 3;
}

message C2S_GetSoulIslandsRank {
    required uint32 rank_type = 1; //排行榜类型（0：本服排行榜	1：全服排行榜）
}

message S2C_GetSoulIslandsRank {
    required uint32 ret = 1;
    repeated SoulIslandsRankInfo rank_info = 2; //排行榜信息
    optional uint32 self_rank = 3; //本人的排行
    optional uint32 self_chapter_id = 4; //本人的章节id
    optional uint32 rank_type = 5; //排行榜类型
}

//选择玄灵仙岛的奖励类型（1：原奖励  2：紫金仙灵奖励）
message C2S_ChooseSoulIslandsAward {
    required uint32 award_type = 1;
}

message S2C_ChooseSoulIslandsAward {
    required uint32 ret = 1;
    optional uint32 award_type = 2;
}

//新的跨服通用排行榜
message NewCommonCrossRank {
    required SimpleUser user = 1;
    required uint64 rank_value = 2; //排行榜数值
    required uint32 rank = 3; //排名
    optional string extend = 4; //扩展字段
}

message CrossRankSelf {
    required uint32 self_rank = 1; //本人的排行
    required uint64 self_value = 2; //本人的排行榜数值
    optional string self_extend = 3; //本人的排行榜扩展字段
}

message C2S_GetNewCommonCrossRank {
    required uint32 rank_id = 1; //排行榜id
}

message S2C_GetNewCommonCrossRank {
    required uint32 ret = 1;
    repeated NewCommonCrossRank rank_info = 2; //排行榜信息
    optional CrossRankSelf self_info = 3; //玩家本人的信息（当玩家没有进入排行榜时，不发送此字段，需要由前端自行获取需要的玩家信息）
}

message LionRidgeTeam {
    required uint64 id = 1;
    repeated LionRidgeUser users = 2;
    optional uint32 state = 3; //
    repeated uint32 coes = 4; //队伍加成 长度为3，分别代表三种加成值
}

message LionRidgeUser {
    optional SimpleUser user = 1;
    optional uint32 state = 2;
    optional uint32 locate = 3; //1 2 3
    optional uint32 right = 4; //1队员 2队长
    optional uint32 left_count = 5; //剩余次数
    optional uint32 buff_index = 6; //被加的buff
}

//后端强推更新队伍信息
message S2C_UpdateLionRidgeTeamInfo {
    required LionRidgeTeam team = 2;
}

//主界面信息
message C2S_GetLionRidgeUIInfo {
}

message S2C_GetLionRidgeUIInfo {
    required uint32 ret = 1;
    optional uint32 score = 2;
    optional uint32 score_rank = 3;
    optional CommonCount common_count = 4;
}

//创建队伍
message C2S_CreateLionRidgeTeam {
}

message S2C_CreateLionRidgeTeam {
    required uint32 ret = 1;
}

//自动匹配队伍(个人匹配队伍)
message C2S_UserMatchLionRidgeTeam {
    required uint32 op_type = 1; //1 匹配 2取消匹配
}

message S2C_UserMatchLionRidgeTeam {
    required uint32 ret = 1;
    required uint32 op_type = 2; //1 匹配 2取消匹配
}

//队伍匹配队伍(队伍匹配)
message C2S_LionRidgeTeamMatchLionRidgeTeam {
    required uint32 op_type = 1; //1 匹配 2取消匹配
}

message S2C_LionRidgeTeamMatchLionRidgeTeam {
    required uint32 ret = 1;
    required uint32 op_type = 2; //1 匹配 2取消匹配
}

//一键邀请
message C2S_LionRidgeOneKeyRequest {
}

message S2C_LionRidgeOneKeyRequest {
    required uint32 ret = 1;
}

//购买挑战次数
message C2S_BuyLionRidgeChallengeCount {
    required uint32 count = 1;
}

message S2C_BuyLionRidgeChallengeCount {
    required uint32 ret = 1;
    optional CommonCount common_count = 2;
}

//得到录像回放基本信息(拉取录像列表)
message LionRidgeSimpleVideo {
    required uint64 id = 1;
    repeated string win_member = 2;
    repeated string fail_member = 3;
}

message C2S_GetLionRidgeVideoBaseInfo {
}

message S2C_GetLionRidgeVideoBaseInfo {
    required uint32 ret = 1;
    repeated LionRidgeSimpleVideo videos = 2;
}

//得到好友列表
message C2S_GetLionRidgeFriendList {
}

message S2C_GetLionRidgeFriendList {
    required uint32 ret = 1;
    repeated SimpleUser users = 2;
}

//邀请好友加入队伍
message C2S_LionRidgeRequestFriend {
    required uint64 friend_uid = 1;
}

message S2C_LionRidgeRequestFriend {
    required uint32 ret = 1;
    required uint64 friend_uid = 2;
}

//得到好友邀请界面
message C2S_GetLionRidgeRequestUI {
}

message S2C_GetLionRidgeRequestUI {
    required uint32 ret = 1;
    repeated SimpleUser users = 2;
}

//处理好友邀请信息
message C2S_DealLionRidgeFriendRequest {
    required uint32 op_type = 1; //1同意 2拒绝
    required uint64 friend_uid = 2;
}

message S2C_DealLionRidgeFriendRequest {
    required uint32 ret = 1;
    required uint32 op_type = 2;
    required uint64 friend_uid = 3;
}

//上buff
message C2S_SetLionRidgeUserBuff {
    required uint32 buff_index = 1; //策划配的狮驼岭buffid
}

message S2C_SetLionRidgeUserBuff {
    required uint32 ret = 1;
    optional uint32 buff_index = 2;
}

//队员准备 或者 取消准备 或者 退出队伍
message C2S_LionRidgeTeamMemberReady {
    required uint32 op_type = 1; //1 队员准备  2 取消准备 3 退出队伍
}

message S2C_LionRidgeTeamMemberReady {
    required uint32 ret = 1;
    required uint32 op_type = 2;
}

//开放或者关闭房间
message C2S_ChangeLionRidgeTeamState {
}

message S2C_ChangeLionRidgeTeamState {
    required uint32 ret = 1;
}

//踢出队员
message C2S_KickLionRidgeTeamMember {
    required uint64 uid = 1; //被踢出玩家uid
}

message S2C_KickLionRidgeTeamMember {
    required uint32 ret = 1;
}

//队长移动站位
message C2S_MoveLionRidgeTeamMemberLocation {
    required uint32 locate1 = 1;
    required uint32 locate2 = 2;
}

message S2C_MoveLionRidgeTeamMemberLocation {
    required uint32 ret = 1;
}

//得到本服队伍信息（未组队玩家所见）
message C2S_GetMyServerLionRidgeTeamUI {
    required uint32 op_type = 1; //1得到信息  2退出界面
}

message LionRidgeTeamSimpleInfo {
    required uint64 id = 1;
    required LionRidgeUser user = 2; //队长信息
    required uint32 num = 3; //队伍人数
    required uint32 ave_lv = 4; //平均等级
}

message S2C_GetMyServerLionRidgeTeamUI {
    required uint32 ret = 1;
    required uint32 op_type = 2;
    repeated LionRidgeTeamSimpleInfo teams = 3;
}

//申请加入本服或好友队伍（未组队玩家所见）
message C2S_RequestJoinMyServerLionRidgeTeam {
    required uint64 uid = 1; //申请加入队伍队长UID
    required uint64 sid = 2; //申请加入队长的服务器SID
    required uint64 team_id = 3; //申请加入队伍ID
}

message S2C_RequestJoinMyServerLionRidgeTeam {
    required uint32 ret = 1;
    required uint64 uid = 2;
    required uint64 sid = 3;
    required uint64 team_id = 4;
}

//得到申请加入队伍申请列表
message C2S_GetJoinLionRidgeTeamRequestList {
}

message S2C_GetJoinLionRidgeTeamRequestList {
    required uint32 ret = 1;
    repeated LionRidgeUser user = 2; //申请玩家信息
}

//处理加入队伍申请（队长权限）
message C2S_DealJoinLionRidgeTeamRequest {
    required uint64 request_uid = 1;
    required uint32 op_type = 2; //1 同意 2拒绝
}

message S2C_DealJoinLionRidgeTeamRequest {
    required uint32 ret = 1;
    required uint32 op_type = 2;
    required uint64 request_uid = 3;
}

//
//message S2C_LionRidgeUpdateAddCoe {
//	repeated uint32 coes = 1;  //长度为3，分别代表三种加成值
//}
//

//跨服挂掉广播推送
message S2C_LionRidgeCrossServerStop {
    required uint32 ret = 1;
}

//队伍与队伍匹配战斗结果返回
message S2C_LionRidgeTeamMatchBattle {
    required uint32 ret = 1;
    required uint32 op_type = 2; //1 匹配 2取消匹配
    optional BattleTeamReport battle_report = 3; //战报
    optional uint32 add_coe = 5; //加成系数
    optional uint32 add_score_award = 6; //基础积分奖励
    optional uint32 add_lion_coin = 7; //基础狮王币奖励
    optional CommonCount common_count = 8;
    optional bool is_two = 10; //奖励是否翻倍
    repeated Award extra_awards = 11; //额外奖励
}

//有邀请的红点通知
message S2C_LionRidgeInviteNotify {
    //required uint64 uid = 1;
    //required uint64 sid = 2;
    //required uint64 team_id = 3;
    required uint32 type = 1; //1 是邀请 2是申请
}

message C2S_GetLionRidgeRankInfo {
}

message S2C_GetLionRidgeRankInfo {
    required uint32 ret = 1;
    repeated LionRidgeRank users = 2;
    optional uint32 my_rank = 3;
}

message LionRidgeRank {
    required SimpleUser simple_user = 1;
    required uint32 score = 2;
    required uint32 rank = 3;
}

message S2C_LionRidgeUpdateMyRank {
    required uint32 rank = 1;
}

message C2S_GetLionRidgeVideoSpeciInfo {
    required uint64 id = 1;
}

message S2C_GetLionRidgeVideoSpeciInfo {
    required uint32 ret = 1;
    optional BattleTeamReport battle_report = 2;
}

message S2C_UUZU_TV_Broadcast {
    optional uint32 send_gift_num = 1;
    optional float total_price = 2;
    optional uint32 pay_type = 3;
    optional string user_nick_name = 4;
    optional string user_avator = 5;
    optional string anchor_nick_name = 6;
    optional string room_name = 7;
    optional string show_scope = 8; //all_server:全服， single_server:单服
    optional uint32 sid = 9;
    optional string sid_name = 10;
    optional string gift_name = 11;
}

message C2S_ResolveInstrument {
    required uint32 instrument_id = 1;
}

message S2C_ResolveInstrument {
    required uint32 ret = 1;
    optional uint32 instrument_id = 2;
    repeated Award instrument_fragment = 3;
}

message IntKey64Map {
    required uint64 Key = 1; //map id
    required uint32 Value = 2; //map value
}

message C2S_RuneStoneInfo {
}

message S2C_RuneStoneInfo {
    required uint32 ret = 1;
    repeated RuneStone ids = 2; //key:id, value:数量
}

message C2S_RuneStoneWear {
    required uint32 knight_pos = 1; //第几个神将
    required uint32 rune_pos = 2; //神符的位置
    repeated uint32 id = 3; //不发代表脱
}

message S2C_RuneStoneWear {
    required uint32 ret = 1;
    required uint32 knight_pos = 2;
    required uint32 rune_pos = 3;
    repeated uint32 id = 4;
}

message C2S_RuneStoneComposite {
    required uint32 id = 1; //消耗的ID
    required uint32 num = 2; //需要合成几次 
}

message S2C_RuneStoneComposite {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 num = 3;
}

message C2S_RuneStoneCompositeKey {
    required uint32 knight_pos = 1; //第几个神将
    required uint32 rune_pos = 2; //神符的位置
}

message S2C_RuneStoneCompositeKey {
    required uint32 ret = 1;
    optional uint32 knight_pos = 2;
    optional uint32 rune_pos = 3;
    optional uint32 id = 4; //合成后的id
}

message RuneStone {
    required uint32 id = 1;
    required uint32 num = 2;
}

message C2S_RuneStoneCompositeAll {
}

message S2C_RuneStoneCompositeAll {
    required uint32 ret = 1;
    repeated IntMap stone = 2;
}

message DevilBossEventInfo {
    required uint32 begin_time = 1; //开始生效时间
    required uint32 event_id = 2;
    optional uint64 sid = 3; //生效服务器， 0：全战区生效
}

message DevilBossInfo {
    required uint32 boss_id = 1;
    required uint64 boss_cur_hp = 2;
    required uint64 boss_max_hp = 3; //boss最大血量
    required bool boss_is_died = 4;
    required uint32 boss_died_time = 5;
    required uint32 boss_wave = 6; //boss波数
    repeated DevilBossEventInfo event_info = 7;
    optional SimpleUser user = 8;
}

message DevilBossUserInfo {
    optional uint32 race_group = 1; //阵营
    optional uint64 maxDamage = 2;
    optional uint64 sumDamage = 3;
    repeated uint32 other_event = 4;
    repeated uint32 card_event = 5;
    //repeated DevilBossEvent events = 4;
}

message DevilBossRankUser {
    required uint64 user_id = 1;
    optional uint64 score = 2;
    optional uint32 rank = 3;
    optional SimpleUser simple_user = 4;
}

message C2S_DevilBossGetInfo {
}

message S2C_DevilBossGetInfo {
    required uint32 ret = 1;
    optional DevilBossUserInfo devil_boss_user_info = 2;
    optional DevilBossInfo devil_boss_info = 3;
    optional uint32 purchase_count = 4;
    optional uint32 left_count = 5;
    optional uint32 sum_damage_rank = 6;
    optional uint32 max_damage_rank = 7;
}

message C2S_DevilBossChooseRace {
    required uint32 race = 1; //1:仙族, 3:妖族 4:人族
}

message S2C_DevilBossChooseRace {
    required uint32 ret = 1;
    optional uint32 race = 2;
}

message C2S_DevilBossBattle {
    repeated uint32 event_info = 1;
}

message S2C_DevilBossBattle {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    repeated uint32 event_info = 3;
    repeated Award extend_awards = 4;
    optional uint64 boss_damage = 5;
    optional uint64 score = 6;
    repeated Award lucky_awards = 7;
    optional bool add_count = 8;
}

message C2S_DevilBossGetRank {
    required uint32 type = 1; //1:个人荣誉战区排行, 2:个人最高伤害战区排行
    required uint32 race_type = 2; //1:仙族, 3:妖族 4:人族
}

message S2C_DevilBossGetRank {
    required uint32 ret = 1;
    required uint32 type = 2;
    required uint32 race_type = 3;
    repeated DevilBossRankUser users = 4;
    optional uint32 self_rank = 5;
}

message C2S_DevilBossBuyChallengeCount {
    required uint32 count = 1;
}

message S2C_DevilBossBuyChallengeCount {
    required uint32 ret = 1;
    optional uint32 purchase_count = 2;
    optional uint32 left_count = 3;
}

message DevilBossLog {
    required uint32 log_type = 1; //1:元宝 2:全服 3:击杀
    optional uint32 timestamp = 2;
    optional uint32 boss_id = 3;
    optional uint32 boss_wave = 4;
    optional uint32 event_id = 5;
    repeated Award event_award = 6;
    optional uint64 user_sid = 7;
    optional string user_name = 8;
    optional uint32 log_id = 9;
}

message C2S_DevilBossGetLog {
}

message S2C_DevilBossGetLog {
    required uint32 ret = 1;
    optional bool is_pull = 2; //是否主动拉
    repeated DevilBossLog logs = 3;
}

message C2S_DevilBossExit {
}

message S2C_DevilBossExit {
    required uint32 ret = 1;
}

message C2S_DevilBossHonor {
}

message S2C_DevilBossHonor {
    required uint32 ret = 1;
    optional DevilBossRankUser angel_user = 2; //仙族第一
    optional DevilBossRankUser devil_user = 3; //妖
    optional DevilBossRankUser human_user = 4;
}

//周年庆
//获得周年庆典的信息
message ActivityTime {
    required uint32 activity_type = 1; //阶段类型（1：许愿  2：步步为营）
    required uint32 start_time = 2; //开始时间
    required uint32 end_time = 3; //结束时间
}

message C2S_CelebrateGetInfo {

}

message S2C_CelebrateGetInfo {
    required uint32 ret = 1;
    optional uint32 start_time = 2; //活动的开始时间
    optional uint32 end_time = 3; //活动的结束时间
    optional uint32 award_time = 4; //活动的兑换时间
    repeated ActivityTime activity_time = 5; //各个阶段的时间信息
    optional bool get_gold = 6; //是否领取过元宝
    optional uint32 days = 7; //玩家的注册天数
    repeated bool sign_in_day = 8; //玩家的签到信息
    optional uint32 score = 9; //积分数据
    repeated uint32 get_achievement_ids = 10; //玩家已领取奖励的成就id
    repeated IntMap goods_buy_info = 11; //玩家的商店购买信息（key => 商品id  value => 商品购买次数）
    optional bool can_get_wish_award = 12; //是否可以领取愿望奖励
    optional bool can_choose_wish = 13; //是否可以许愿
    optional CommonCount dice_count = 14; //骰子次数
}

//领取元宝
message C2S_CelebrateGetGold {

}

message S2C_CelebrateGetGold {
    required uint32 ret = 1;
    repeated Award award = 2;
}

//签到领取奖励
message C2S_CelebrateSignIn {
    required uint32 day = 1; //签到的天数
}

message S2C_CelebrateSignIn {
    required uint32 ret = 1;
    optional uint32 day = 2;
    repeated Award award = 3;
}

//获得愿望信息
message AssistFriendInfo {
    required uint64 assist_uid = 1; //协助的朋友的uid
    required uint64 assist_sid = 2; //协助的朋友的sid
    required string assist_name = 3; //协助的朋友的name
}

message C2S_CelebrateGetWishInfo {

}

message S2C_CelebrateGetWishInfo {
    required uint32 ret = 1;
    optional uint32 wish_id = 2; //许的愿望的id
    optional uint32 wish_time = 3; //许愿的时间
    repeated AssistFriendInfo assist_friend_info = 4; //朋友的协助信息
    optional bool get_wish_award = 5; //是否领取许愿奖励
    optional uint32 assist_count = 6; //今天协助他人的次数
    optional bool can_get_wish_award = 7; //是否可以领取愿望奖励
}

//选择愿望进行许愿
message C2S_CelebrateChooseWish {
    required uint32 wish_id = 1; //选择的愿望的id
}

message S2C_CelebrateChooseWish {
    required uint32 ret = 1;
    optional uint32 wish_id = 2;
    optional uint32 wish_time = 3;
}

//领取许的愿望的奖励
message C2S_CelebrateGetWishAwards {

}

message S2C_CelebrateGetWishAwards {
    required uint32 ret = 1;
    repeated Award award = 2;
}

//协助他人的愿望
message C2S_CelebrateAssistOtherFriend {
    required uint64 assist_other_sid = 1; //协助他人的sid
    required uint64 assist_other_uid = 2; //协助他人的uid
}

message S2C_CelebrateAssistOtherFriend {
    required uint32 ret = 1;
    optional uint64 assist_other_sid = 2;
    optional uint64 assist_other_uid = 3;
}

//邀请在线好友协助
message C2S_CelebrateInviteFriend {

}

message S2C_CelebrateInviteFriend {
    required uint32 ret = 1;
}

message S2C_CelebrateSendInvitation {
    required FriendWishInfo invite_user_info = 1; //邀请人的信息
}

//获得好友许愿的信息
message FriendWishInfo {
    required SimpleUser friend = 1; //好友信息
    required uint32 assist_num = 2; //好友已被协助次数
}

message C2S_CelebrateGetFriendWishData {

}

message S2C_CelebrateGetFriendWishData {
    required uint32 ret = 1;
    repeated FriendWishInfo friend_wish_info = 2; //好友许愿信息
}

//收到好友的协助信息
message S2C_CelebrateReceiveAssistData {
    required AssistFriendInfo assist_data = 1;
}

//获得步步为营的信息
message CelebrateCardInfo {
    required uint32 card_type = 1; //卡牌类型
    required uint32 buy_card_count = 2; //今天已购买该卡牌的次数
}

message C2S_CelebrateGetMazeInfo {

}

message S2C_CelebrateGetMazeInfo {
    required uint32 ret = 1;
    optional uint32 maze_id = 2; //地图id
    optional uint32 step = 3; //当前地图的步数
    repeated uint32 complete_event = 4; //已完成事件的格子的步数
    repeated uint32 good_ids = 5; //元宝贩售的物品id
    repeated IntMap bought_good = 6; //已经购买的元宝贩售的物品(key => 物品id  value => 已购买次数)
    optional uint32 use_card_type = 7; //使用的卡牌类型（1：减速卡  2：遥控卡）
    optional uint32 card_buff = 8; //目前卡牌持续的卡牌buff（减速卡：剩余回合数  遥控卡：选择的点数）
    optional CommonCount buy_dice_count = 9; //购买骰子的次数
    repeated CelebrateCardInfo card_info = 10; //卡牌数据
    optional uint32 score = 11; //积分数据
    repeated uint32 get_achievement_ids = 12; //已领取奖励的成就id
    optional uint32 question_id = 13; //当前格子的问题的id
    repeated uint32 answers = 14; //当前格子问题的答案
}

//扔骰子走格子
message C2S_CelebrateThrowDice {

}

message S2C_CelebrateThrowDice {
    required uint32 ret = 1;
    optional uint32 count = 2; //扔出的点数
    optional uint32 maze_id = 3; //地图的id
    optional uint32 step = 4; //本张地图已走的步数
    optional uint32 event_type = 5; //格子的事件类型
    optional uint32 question_id = 6; //问题的id
    repeated uint32 question_answers = 7; //打乱顺序的问题的选项
    repeated uint32 good_ids = 8; //元宝贩售的物品id
    optional uint32 use_card_type = 9; //使用的卡牌类型
    optional uint32 card_buff = 10; //当前卡牌的剩余回合数
}

//格子事件
message C2S_CelebrateGridEvent {
    required uint32 event_type = 1; //当前格子的事件类型（1：奖励事件  2：答题  3：元宝贩售）
    optional uint32 event_value = 2; //当前事件的值（奖励事件：ID  答题：选择的选项  元宝贩售：购买的物品id）
    optional uint32 buy_count = 3; //元宝贩售的购买次数
    optional string couplets_order = 4; //对联答案的顺序
}

message S2C_CelebrateGridEvent {
    required uint32 ret = 1;
    optional uint32 event_type = 2;
    optional uint32 event_value = 3;
    optional uint32 buy_count = 4; //元宝贩售的购买次数
    optional bool true_answer = 5; //是否答对题目
    repeated Award awards = 6;
    optional uint32 score = 7;
}

//使用卡牌
message C2S_CelebrateUseCard {
    required uint32 card_type = 1; //使用的卡牌类型（1：减速卡  2：遥控卡）
    optional uint32 card_value = 2; //使用遥控卡时选择的点数
}

message S2C_CelebrateUseCard {
    required uint32 ret = 1;
    optional uint32 card_type = 2;
    optional uint32 card_value = 3; //使用遥控卡时选择的点数
}

//购买卡牌或骰子
message C2S_CelebrateBuyItem {
    required uint32 buy_item_type = 1; //购买的道具类型（1：骰子  2：卡牌）
    required uint32 buy_item_num = 2; //购买的数量
    optional uint32 buy_card_type = 3; //如果购买卡牌，则为购买卡牌的类型
}

message S2C_CelebrateBuyItem {
    required uint32 ret = 1;
    optional uint32 buy_item_type = 2;
    optional uint32 buy_item_num = 3;
    optional uint32 buy_card_type = 4;
    repeated Award awards = 5;
}

//领取任务或成就奖励
message C2S_CelebrateGetAchievementAward {
    required uint32 get_award_id = 1; //成就id
}

message S2C_CelebrateGetAchievementAward {
    required uint32 ret = 1;
    optional uint32 get_award_id = 2;
    repeated Award awards = 3;
}

//获取周年商店信息
message C2S_CelebrateGetShopData {

}

message S2C_CelebrateGetShopData {
    required uint32 ret = 1;
    repeated IntMap good_data = 2; //key => 商品id value => 商品已购买次数
}

//购买周年商店商品
message C2S_CelebrateBuyShopGood {
    required uint32 good_id = 1; //购买的商品的id
    required uint32 buy_count = 2; //购买的数量
}

message S2C_CelebrateBuyShopGood {
    required uint32 ret = 1;
    optional uint32 good_id = 2;
    optional uint32 buy_count = 3;
    repeated Award awards = 4;
}

//变身卡界面
//获得变身卡使用数据
message C2S_GetAvatarCardInfo {

}

message S2C_GetAvatarCardInfo {
    required uint32 ret = 1;
    repeated IntMap avatar_card_info = 2;
}

//激活变身卡
message C2S_ActiveAvatarCard {
    required uint32 card_id = 1; //激活的变身卡id
    required uint32 card_item_id = 2; //变身卡的道具id
}

message S2C_ActiveAvatarCard {
    required uint32 ret = 1;
    optional uint32 card_id = 2;
    optional uint32 dead_time = 3;
}

//使用变身卡
message C2S_UseAvatarCard {
    required uint32 card_id = 1; //使用的变身卡id(不使用则为0)
}

message S2C_UseAvatarCard {
    required uint32 ret = 1;
    optional uint32 card_id = 2;
    optional uint32 dead_time = 3; //变身卡截止时间
}

//神符重生活动
message C2S_DoRuneRebornActivity {
    required uint64 rune_id = 1;
}
message S2C_DoRuneRebornActivity {
    required uint32 ret = 1;
    required uint64 rune_id = 2;
    repeated Award awards = 3;
    optional uint32 del_collection_id = 4;
}

message C2S_KnightDrawInfo {
}

message S2C_KnightDrawInfo {
    required uint32 ret = 1;
    required uint32 cur_id = 2; //当前拼图
    repeated uint32 draw_id = 3; //已完成拼图
    repeated uint32 piece_id = 4; //已拼碎片
    repeated IntMap achievement = 5; //成就数据
    repeated uint32 finish = 6; //完成成就
    repeated IntMap tm = 7; //评论时间
}

message C2S_KnightDrawAchievement {
    required uint32 id = 1;
}

message S2C_KnightDrawAchievement {
    required uint32 ret = 1;
    optional uint32 id = 2;
}

message C2S_ActivateKnightDraw {
    required uint32 id = 1; //碎片ID
}

message S2C_ActivateKnightDraw {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award award = 3;
    optional bool finish = 4; //是否全部完成
}

message C2S_LikeKnightDraw {
    required uint32 id = 1;
}

message S2C_LikeKnightDraw {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 num = 3; //喜欢总数
}

message C2S_KnightDrawMessage {
    required string info = 1;
    required uint32 id = 2;
}

message S2C_KnightDrawMessage {
    required uint32 ret = 1;
    optional uint32 id = 2;
    optional uint32 comment_time = 3; //评论成功时间
    optional KnightDrawMessage message = 4;
}

message C2S_KnightDrawPraise {
    required uint32 id = 1; //立绘ID
    required uint32 index = 2; //评论序号
    required uint32 op = 3; //1:顶,2:踩
}

message S2C_KnightDrawPraise {
    required uint32 ret = 1;
    optional uint32 index = 2; //评论序号
    optional uint32 op = 3; //1:顶,2:踩
    optional uint32 id = 4; //立绘ID
}

message C2S_KnightDrawMessageInfo {
    required uint32 id = 1;
}

message KnightDrawMessage {
    required uint32 index = 1;
    required string info = 2;
    required string name = 3;
    required uint32 up = 4;
    required uint32 down = 5;
    required uint32 is_op = 6; //0:没点过，1:顶，2:踩
    required uint32 tm = 7; //评论时间
    required uint32 quality = 8; //主角品质
}

message S2C_KnightDrawMessageInfo {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated KnightDrawMessage info = 3; //非热门
    optional uint32 num = 4; //点评数量
    optional uint32 like = 5; //喜欢总数  
    optional bool is_like = 6; //是否点过喜欢
    repeated KnightDrawMessage hot = 7; //热门
}

message S2C_UpdateKnightDrawAchievement {
    required uint32 ret = 1;
    repeated IntMap achievement = 5; //成就数据
}

//主角法宝封灵
message C2S_InstrumentSealSprite {
}

message S2C_InstrumentSealSprite {
    required uint32 ret = 1;
    optional uint32 node_id = 2; //升级的节点id
}

message RoadToWestRankUser {
    required uint64 user_id = 1;
    optional uint32 score = 2;
    optional uint32 rank = 3;
    optional SimpleUser simple_user = 4;
}

message RoadToWestKnight {
    required uint32 base_id = 1;
    required uint64 power = 2;
    required uint32 rank_lv = 3; //突破
    optional uint32 star_lv = 4; //升星等级
}

message RoadToWestFriend {
    required SimpleUser uinfo = 1; //好友信息
    required RoadToWestKnight lend_knight = 2;
}

//主界面信息
message C2S_GetRoadToWestInfo {
}

message S2C_GetRoadToWestInfo {
    required uint32 ret = 1;
    optional uint32 score = 2;
    optional uint32 begin_time = 3;
    optional uint32 end_time = 4;
    repeated uint32 stage_ids = 5; //当前副本IDs 第一个是星期天
    repeated uint32 max_stage_ids = 6; //当前能打的最大副本IDs 第一个是星期天
    repeated RoadToWestRankUser last_score_rank_users = 7; //上届积分榜前三，活动结束后才发
    optional uint32 remain_challenge_count = 8; //剩余挑战次数
    repeated uint32 reward_grades = 9; // 已领段位奖励
    repeated uint32 first_reward_grades = 10; // 已领首次段位奖励
    optional uint32 self_score_rank = 11; //当前积分排名
    optional uint32 friendship_value = 12; //友情值
    optional uint32 self_friendship_value_rank = 13; //当前友情值排名
    optional RoadToWestKnight self_lend_knight = 14; //自己出租的神将
    optional uint32 can_achieve_friendship_coin = 15; //可以领取友谊币
    optional uint32 daily_friendship_coin = 16; //当天好友赠送友谊币数量
    repeated uint32 achievement_ids = 17;//已经领取的id奖励
}

//查看好友列表
message C2S_GetRoadToWestFriendList {
}

message S2C_GetRoadToWestFriendList {
    required uint32 ret = 1;
    repeated RoadToWestFriend users = 2;
    repeated uint64 rent_friend_ids = 3; //借过的玩家列表
}

//出租神将
message C2S_LendRoadToWestKnight {
    required uint64 knight_id = 1;
}

message S2C_LendRoadToWestKnight {
    required uint32 ret = 1;
    required uint64 knight_id = 2;
}

message RoadToKnightFriendKnightId {
    required uint64 friend_id = 1;
    required uint32 base_id = 2;
}

//战斗
message C2S_ChallengeRoadToWestStage {
    required uint32 stage_id = 1;
    repeated RoadToKnightFriendKnightId friends = 2; //好友ID
    optional bool is_fast= 3;//是否快速扫荡
}

message S2C_ChallengeRoadToWestStage {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    optional uint32 max_stage_id = 3; //当前能打的最大副本ID
    optional BattleReport battle_report = 4;
    repeated Award awards = 5;
    optional uint32 add_score = 6; //新增积分
    optional uint32 remain_challenge_count = 8; //剩余挑战次数
    repeated uint32 friend_knight_base_ids = 9; //好友的神将base_id
    optional uint32 self_score_rank = 10; //个人积分榜排名
    optional bool is_fast= 11;//是否快速扫荡
}

//收获友谊币
message C2S_GetRoadToWestFriendShipCoin {

}

message S2C_GetRoadToWestFriendShipCoin {
    required uint32 ret = 1;
    optional uint32 friendship_coin = 2;
}

//查看排行榜
message C2S_GetRoadToWestRank {
    required uint32 tp = 1; //1 是积分榜 2本服章节榜 3跨服章节榜 4 友谊值榜
    optional uint32 chapter_id = 2; //章节ID
}

message S2C_GetRoadToWestRank {
    required uint32 ret = 1;
    required uint32 tp = 2;
    repeated RoadToWestRankUser ranks = 3;
    optional uint32 my_rank = 4;
    optional uint32 chapter_id = 5; //章节ID
    optional uint32 value = 6; // 排行对应数值
}

//领取段位奖励
message C2S_GetRoadToWestGradeAward {
    required uint32 grade = 1;
    required bool is_first = 2; //是否领取首次奖励
}

message S2C_GetRoadToWestGradeAward {
    required uint32 ret = 1;
    required uint32 grade = 2;
    repeated Award award = 3;
    required bool is_first = 4; //是否领取首次奖励
}

message S2C_SendRoadToWestStateChange {
}

message C2S_InstrumentSuperCast {
    required uint64 knight_id = 1; //神铸法宝的神将的id
    repeated Award consume_instruments = 2; //神铸消耗的法宝
}

message S2C_InstrumentSuperCast {
    required uint32 ret = 1;
    optional uint64 knight_id = 2; //神铸的法宝的神将的id
    optional uint32 rank = 3; //神铸之后法宝的阶数
}

message C2S_KnightZhuLing {
    required uint64 knight_id = 1; //目标武将id
    required uint32 add_type = 2; //选择加的属性的类型
    repeated Award fragments = 3; //注灵消耗的碎片
}

message S2C_KnightZhuLing {
    required uint32 ret = 1;
    optional uint64 knight_id = 2; //目标武将id
    optional uint32 add_type = 3; //选择加的属性的类型
    optional uint32 zhu_ling_value = 4; //注灵之后的属性值
}

message C2S_KnightZhuLingAdvance {
    required uint64 knight_id = 1; //目标武将id
}

message S2C_KnightZhuLingAdvance {
    required uint32 ret = 1;
    optional uint64 knight_id = 2;
    optional uint32 zhu_ling_rank = 3; //升阶之后的阶数
}

//神兽签到
message C2S_GetDayLoginSignInfo {

}

message S2C_GetDayLoginSignInfo {
    required uint32 ret = 1;
    optional uint32 begin_time = 2;
    optional uint32 end_time = 3;
    repeated uint32 sign_days = 4; //签到天数
    optional uint32 sign_last_time = 5; //上次签到时间
    required uint32 version = 6;//版本号
    repeated uint32 sign_bonus = 7; //签到暴击倍数 固定为31个数
}

message C2S_GetDayLoginSignAward {
}

message S2C_GetDayLoginSignAward {
    required uint32 ret = 1;
    optional Award award = 2;
    optional uint32 sign_last_time = 3; //上次签到时间
    optional uint32 bonus = 4;
}

message C2S_GetDayLoginReSignAward {
    required uint32 sign_day = 1;
}

message S2C_GetDayLoginReSignAward {
    required uint32 ret = 1;
    optional Award award = 2;
    optional uint32 sign_day = 3; //签到天数
    optional uint32 bonus = 4;
}

//方寸山学艺
message SquareInchEnemy {
    required uint32 index = 1;
    required SimpleUser enemy = 2;
}

message C2S_GetSquareInchData {

}

message S2C_GetSquareInchData {
    required uint32 ret = 1;
    optional uint32 formula_id = 2; //当前公式id
    optional uint32 luck_num = 3; //辛运数字
    repeated SquareInchEnemy enemy_datas = 4; //匹配到的玩家信息
    repeated uint32 enemy_indexes = 5; //已战胜的玩家的序号
    optional CommonCount count = 6; //刷新次数
    optional bool get_luck_award = 7; //是否已领取幸运奖励
    optional bool get_pass_award = 8; //是否已领取通关奖励
    optional uint64 max_power = 9;
    optional uint32 days = 10; //累计天数
    optional uint32 use_count = 11; //已使用满分券次数
    repeated uint32 get_boxes = 12; //已经领取的宝箱
}

message C2S_ChallengeSquareInchEnemy {
    required uint32 challenge_index = 1; //挑战的玩家的序号
}

message S2C_ChallengeSquareInchEnemy {
    required uint32 ret = 1;
    optional uint32 challenge_index = 2; //挑战的玩家的序号
    optional BattleReport battle_report = 3;
    repeated Award awards = 4;
    optional uint32 enemy_score = 5; //挑战敌人的积分
    optional uint64 max_power = 6;
}

message C2S_RefreshSquareInch {

}

message S2C_RefreshSquareInch {
    required uint32 ret = 1;
    repeated SquareInchEnemy enemy_datas = 2;
    optional CommonCount count = 3;
    optional uint64 max_power = 4;
}

//获得通关奖励
message C2S_GetSquareInchPassAward {

}

message S2C_GetSquareInchPassAward {
    required uint32 ret = 1;
    repeated Award pass_award = 2;
}

//获得幸运奖励
message C2S_GetSquareInchLuckAward {

}

message S2C_GetSquareInchLuckAward {
    required uint32 ret = 1;
    repeated Award luck_award = 2;
    optional uint32 day = 3;
}

//获得敌人数据
message C2S_GetSquareInchEnemiesData {

}

message S2C_GetSquareInchEnemiesData {
    required uint32 ret = 1;
    optional uint64 max_power = 2;
    repeated SquareInchEnemy enemy_datas = 4; //匹配到的玩家信息
}

//放弃挑战
message C2S_SquareInchGiveUp {
    required uint32 index = 1; //放弃挑战的序号
}

message S2C_SquareInchGiveUp {
    required uint32 ret = 1;
    optional uint32 index = 2;
    optional uint32 score = 3;
    repeated Award awards = 4;
    optional uint32 all_score = 5;
    optional uint64 max_power = 6;
}

//领取满分券
message C2S_SquareInchGetTicket {
    required uint32 box_type = 1;
}

message S2C_SquareInchGetTicket {
    required uint32 ret = 1;
    optional uint32 box_type = 2;
    repeated Award award = 3;
    optional uint32 day = 4;
}

//使用满分券
message C2S_SquareInchUseTicket {
    required uint32 index = 1;
}

message S2C_SquareInchUseTicket {
    required uint32 ret = 1;
    optional uint32 index = 2;
    repeated Award award = 3;
    optional uint32 score = 4;
    optional uint64 power = 5;
}

//获得跨服排行榜（根据funcid）
message C2S_GetNewCommonCrossRankInfoByFuncId {
    required uint32 func_id = 1;
}

message S2C_GetNewCommonCrossRankInfoByFuncId {
    required uint32 ret = 1;
    optional uint32 func_id = 2;
    repeated NewCommonCrossRank ranks = 3;
    optional CrossRankSelf self_info = 4; //玩家本人的信息
}

//许愿树活动
//许愿树每日任务信息
message PromiseTreeTask {
    required uint32 task_type = 1; //任务类型
    optional uint32 task_value = 2; //任务值
    repeated uint32 reward_id = 3; //已领奖的任务id集合
}

//节点奖励
message PromiseTreeNode {
    required uint32 id = 1; //唯一ID
    required Award award = 2;
    required uint32 max_recharge = 3; //充值额度
    required bool is_get = 4; //是否已领取
}

//获取许愿树信息
message C2S_PromiseTreeGetInfo {
}

message S2C_PromiseTreeGetInfo {
    required uint32 ret = 1;
    optional uint32 start_time = 2; //活动开始时间
    optional uint32 end_time = 3; //活动结束时间
    optional uint32 reward_time = 4; //活动发奖时间
    required uint32 cur_recharge = 5; //当前进度
    required uint32 sum_coin= 6; //总共获取的许愿币
    repeated PromiseTreeTask tasks = 7; //活动每日任务
    repeated PromiseTreeNode node_info = 8; //节点奖励信息
}

message C2S_PromiseTreeDrop {
    required uint32 count = 1; //许愿次数
}

message S2C_PromiseTreeDrop {
    required uint32 ret = 1;
    repeated Award awards = 2;
    required uint32 count = 3;
}

message C2S_PromiseTreeGetTaskAward {
    required uint32 id = 1; //表ID
}

message S2C_PromiseTreeGetTaskAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated Award awards = 3;
}

message C2S_PromiseTreeGetNodeAward {
    required uint32 id = 1; //ID
}

message S2C_PromiseTreeGetNodeAward {
    required uint32 ret = 1;
    required uint32 id = 2; //ID
    repeated Award awards = 3;
}

//任务更新
message S2C_PromiseTreeUpdateTaskInfo {
    required uint32 ret = 1;
    repeated PromiseTreeTask tasks = 2;
}

//节点信息更新
message S2C_PromiseTreeUpdateNodeInfo {
    required uint32 ret = 1;
    repeated PromiseTreeNode node_info = 2;
}

message S2C_PromiseTreeUpdateOtherInfo {
    required uint32 ret = 1;
    required uint32 sum_coin = 2;
}

message CommonTask {
    required uint32 type = 1;
    required uint32 value = 2;
    repeated uint32 reward_id = 3;
}

message SystemCommonTask {
    required uint32 system = 1;// 1撒豆成兵 2砍价商店
    repeated CommonTask tasks = 2;
}

//通用更新任务
message S2C_UpdateCommonTask {
    required SystemCommonTask system_task = 1;
}

//通用任务领奖
message C2S_GetCommonTaskAward {
    required uint32 system = 1;// 1撒豆成兵
    required uint32 id = 2;
}

message S2C_GetCommonTaskAward {
    required uint32 ret = 1;
    required uint32 system = 2;// 1撒豆成兵
    required uint32 id = 3;
    repeated Award awards = 4;
}

//通用任务信息拉取
message C2S_GetCommonTaskList {
}

message S2C_GetCommonTaskList {
    required uint32 ret = 1;
    repeated SystemCommonTask system_tasks = 2; 
}

//获取指定任务系统列表
message C2S_GetCommonTaskSystemList {
    required uint32 system = 1;
}

message S2C_GetCommonTaskSystemList {
    required uint32 ret = 1;
    required uint32 system = 2;
    optional SystemCommonTask system_task = 3; 
}

//盘丝洞
message SpiderCaveDeadInfo {
    required uint32 monster_dead_count = 1; //死亡次数
    optional uint32 monster_num = 2; //怪物个数
}

message SpiderCaveMonsterInfo {
    required uint32 monster_id = 1;
    optional uint32 monster_num = 2; //怪物的总数量
    repeated SpiderCaveDeadInfo dead_info = 3;
}

message SpiderCaveMonsterHp {
    required uint32 monster_id = 1;
    optional uint64 min_damage = 2;
    optional uint64 max_damage = 3;
}

message C2S_SpiderCaveGetInfo {
}

message S2C_SpiderCaveGetInfo {
    required uint32 ret = 1;
    optional uint32 max_stage_id = 2;
    repeated uint32 award_record = 3; //大师奖励记录
    optional uint32 purchase_count = 4;
    optional uint32 left_count = 5;
    repeated IntMap stage_record = 6; //stage信息
}

message C2S_SpiderCaveGetStageInfo {
    required uint32 stage_id = 1;
}

message S2C_SpiderCaveGetStageInfo {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    repeated SpiderCaveMonsterHp monster_damage = 3;
    optional string magic_key = 4;
}

message C2S_SpiderCaveResult {
    required uint32 stage_id = 1;
    repeated SpiderCaveMonsterInfo result = 2;
    optional string magic_key = 3; //id1-max_damage|id1-max_damage|id1-max_damage,uid|time|stageId&md5
    optional uint32 dec_value = 4; //扣血万分比
}

message S2C_SpiderCaveResult {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    optional BattleReport battle_report = 3;
    repeated Award awards = 4;
    optional uint32 dec_value = 5; //扣血万分比
}

//扫荡
message C2S_SpiderCaveAutoStage {
    required uint32 stage_id = 1;
}

message S2C_SpiderCaveAutoStage {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    repeated Award awards = 3;
}

message C2S_SpiderCaveGetAward {
    required uint32 stage_id = 1;
}

message S2C_SpiderCaveGetAward {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    repeated Award awards = 3;
}

message C2S_SpiderCaveTryBattle {
    required uint32 stage_id = 1;
    optional uint32 monster_id = 2;
}

message S2C_SpiderCaveTryBattle {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    optional uint32 monster_id = 3;
    optional BattleReport battle_report = 4;
}

message C2S_SpiderCaveBuyChallengeCount {
    optional uint32 count = 1;
}

message S2C_SpiderCaveBuyChallengeCount {
    optional uint32 ret = 1;
    optional uint32 purchase_count = 2;
    optional uint32 left_count = 3;
}

//仙阵养成
message C2S_UpdateMatrix {
    required uint32 matrix_id = 1;
}

message S2C_UpdateMatrix {
    required uint32 ret = 1;
    optional uint32 matrix_id = 2;
    optional uint32 level = 3;
}

message C2S_GetMatrixData {
}

message S2C_GetMatrixData {
    required uint32 ret = 1;
    repeated IntMap matrix_data = 2; //key=>阵眼id  value=>阵眼等级
}
   
message C2S_UpdateWingStar {
      required uint32 wing_id = 1;
}
message S2C_UpdateWingStar {
    required uint32 ret = 1;
    optional uint32 old_wing_id = 2;
    optional uint32 new_wing_id = 3;
}

message C2S_ResetGuildSkill {

}

message S2C_ResetGuildSkill {
    required uint32 ret = 1;
    optional uint32 contribution_num = 2;
}
//金宝石
message C2S_GemGrowthGold {
  required uint32 gem_id = 1;
}

message S2C_GemGrowthGold {
  required uint32 ret = 1;
  required uint32 gem_id = 2;
  optional uint32 new_id =3;
}

//在阵上
 message C2S_GemGrowthGoldOnWing{
      required uint32 wing_id = 1;
      required uint32 pos = 2;
      required uint32 gem_id = 3;
}

message S2C_GemGrowthGoldOnWing {
    required uint32 ret = 1;
    required uint32 wing_id = 2;
    required uint32 pos = 3;
    required uint32 gem_id = 4;
    required uint32 new_id = 5;
}
//金宝石重生
 message C2S_RollBackGemGold {
     required uint32 gem_id = 1;
     optional uint32 wing_id = 2;
     optional uint32 pos =3;
}

 message S2C_RollBackGemGold {
    required uint32 ret = 1;
    optional uint32 gem_id = 2;
    optional uint32 wing_id = 3;
    repeated Award materials = 4;
    optional uint32 pos = 5;
 }

 //获得砍价商店信息
message C2S_GetBargainShopInfo {
}

message S2C_GetBargainShopInfo {
    required uint32 ret = 1;
    repeated IntMap goods = 2;
    optional uint32 start_time = 3; //活动开始时间
    optional uint32 end_time = 4; //活动结束时间(商店开放时间)
    optional uint32 reward_time = 5; //活动发奖时间（真正结束时间）
    optional uint32 return_gold = 6;// 活动结束返还元宝数量
}

message S2C_NotifyBargainShopActInfo {
    required uint32 start_time = 1; //活动开始时间
    required uint32 end_time = 2; //活动结束时间(商店开放时间)
    required uint32 reward_time = 3; //活动发奖时间（真正结束时间）
}

//购买砍价商品
message C2S_BuyBargainShopGoods {
    required uint32 goods_id = 1; //购买商品id
    required uint32 buy_count = 2; //购买数量
}

message S2C_BuyBargainShopGoods {
    required uint32 ret = 1;
    optional uint32 goods_id = 2; //购买商品id
    optional uint32 buy_count = 3; //购买数量
    repeated Award award = 4;
}

message S2C_BargainShopReturnGoldInfo {
    required uint32 return_gold = 1;// 活动结束返还元宝数量
}

//领取章节奖励
message C2S_GetRoadToWestAchievementAward{
    required uint32 achievement_id = 1; //领取奖励的章节id
}

message S2C_GetRoadToWestAchievementAward{
    required uint32 ret = 1;
    optional uint32 achievement_id = 2; //领取奖励的章节id
    repeated Award awards = 3; //奖励
}


//三界夺宝
//获得活动数据
message ForTreasureItemData {
    required uint32 item_id = 1; //商品id
    required uint32 period_num = 2; //商品期数
    required uint32 total_ticket = 3; //该商品总券数
    optional uint32 use_ticket = 4; //该商品该玩家已投入券数
    optional uint32 get_times = 5; //该商品该玩家的中奖次数
}

message ForTreasureLog {
    required uint32 item_id = 1; //商品id
    required uint32 period_num = 2; //期数
    required uint64 sid = 3;
    required uint64 uid = 4;
    required string name = 5;
    required uint32 time = 6;
    required uint32 total_ticket = 7;
}

message ForTreasureUserLog {
    required uint32 log_type = 1; //日志类型（1：投入券的日志  2：中奖日志  3：未中奖日志）
    required uint32 period_num = 2; //商品期数
    required uint32 item_id = 3; //商品id
    optional uint32 use_ticket_num = 4; //使用券的数量
    required uint32 time = 5;
}

message ForTreasureActivityTime {
    required uint32 start_time = 1;
    required uint32 end_time = 2;
    required uint32 award_time = 3;
}

message C2S_GetForTreasureInfo {
}

message S2C_GetForTreasureInfo{
    required uint32 ret = 1;
    optional ForTreasureActivityTime activity_time = 2; //活动时间
    repeated ForTreasureItemData item_data = 3; //商品数据
}

//使用券
message C2S_UseForTreasureTicket {
    required uint32 item_id = 1; //商品id
    required uint32 ticket_num = 2; //使用券的数量
    required uint32 period_num = 3; //商品的期数
}

message S2C_UseForTreasureTicket {
    required uint32 ret = 1;
    optional ForTreasureItemData item_data = 2; //该商品数据
}

//开奖
message ForTreasureDrawItemData {
    required uint32 item_id = 1;
    required uint32 period_num = 2;
    required uint64 sid = 3;
    required uint64 uid = 4;
    required string name = 5;
    required uint32 nex_period_num = 6;
}

message S2C_DrawForTreasureLottery {
    repeated ForTreasureDrawItemData item_data = 1; //商品数据
}

//拉取最新数据
message C2S_GetForTreasureNewData {
}

message S2C_GetForTreasureNewData {
    required uint32 ret = 1;
    repeated ForTreasureItemData item_data = 2;
}

//拉日志
message C2S_GetForTreasureLog {
    required uint32 log_type = 1; //(1:个人日志  2：全服日志)
    required uint32 log_newest_time = 2; //最近的一条日志的时间
}

message S2C_GetForTreasureLog {
    required uint32 ret = 1;
    optional uint32 log_type = 2;
    repeated ForTreasureLog for_log = 3; //全服日志
    repeated ForTreasureUserLog for_user_log = 4; //个人日志
}

message C2S_OperateForTreasureInterface {
    required uint32 operate_type = 1; //1:玩家进入一元夺宝  2：玩家离开一元夺宝
}

//宝物淬炼
message C2S_PurpleGoldTreasure{
    required uint64 id = 1;//宝物id
}

message S2C_PurpleGoldTreasure{
    required uint32 ret = 1;
    optional uint32 purplegold_lv = 4;//淬金后的等级
}

//客户端登录拉简易数据
message PlayInfoBase {
  optional uint32 begin_time = 1;//开始时间
  optional uint32 end_time = 2; //结束时间
  optional uint32 award_time = 3;//领奖结束时间
  optional uint32 left_count = 4;//剩余次数
  optional uint32 use_count = 5; //已使用次数
  optional uint32 buyed_count = 6; //已购买次数
  optional bool has_redpoint = 7;//是否有红点
  optional uint32 extra_param = 8; //复用字段
  optional uint32 score = 9;  //积分
  optional uint32 self_rank = 10;  //排名
  repeated IntMap extra_param2 = 11; //复用结构
}

message C2S_GetPlayInfoBase {
}

message S2C_GetPlayInfoBase {
  optional PlayInfoBase spider_cave = 1; //盘丝洞
  optional PlayInfoBase square_inch = 2; //方寸山
  optional PlayInfoBase road_to_west = 3;//通天之路
  optional PlayInfoBase devil_boss = 4;  //灭世妖圣
  optional PlayInfoBase lion_ridge = 5;  //狮驼岭
  optional PlayInfoBase temple = 6;      //大闹天宫
  optional PlayInfoBase flame = 7;       //大战火焰山
  optional PlayInfoBase realm = 8;       //神符灵界
  optional PlayInfoBase nether_world = 9;//地府试炼
  optional PlayInfoBase fight_for_king = 10;//封神之战
  optional PlayInfoBase five_finger = 11;//五行秘境
  optional PlayInfoBase guild_crystal = 12;//帮派抢矿
  optional PlayInfoBase flame_cave = 13; //烈焰秘窟
  optional PlayInfoBase scuffle = 14; //三界斗法
  optional PlayInfoBase cloud_palace = 15; //遣云宫
  optional PlayInfoBase deposit = 16;//储蓄罐
  optional PlayInfoBase star_god_legend = 17; //星君副本
  optional PlayInfoBase home_dig = 18; //家园寻宝
  optional PlayInfoBase illusory_land = 20;//须弥幻境
  optional PlayInfoBase dress_draw = 21;//紫金时装转盘
  optional PlayInfoBase manual_scroll = 22; //西游天卷
  optional PlayInfoBase activity_youth = 23;//616少年节
  optional PlayInfoBase random_task = 24; //三界悬赏
  optional PlayInfoBase blood_demon = 25; //血月妖界
  optional PlayInfoBase ceremony = 26; //三界盛典
  optional PlayInfoBase proving_ground = 27; //胚子试炼场
  optional PlayInfoBase active_chapter = 28; //双11福利副本
}

//烈焰秘窟
message FlameCaveEnemyData {
    required uint32 position = 1; //敌人位置
    required SimpleUser enemy_data = 2; //敌人数据
}

message FlameCaveKnightHp {
    required uint32 position = 1; //玩家神将位置
    required uint32 knight_hp = 2; //玩家神将血量（万分比）
}

//获得烈焰秘窟数据
message C2S_FlameCaveGetInfo {
}

message S2C_FlameCaveGetInfo {
    required uint32 ret = 1;
    repeated FlameCaveEnemyData enemies = 2;
    repeated FlameCaveKnightHp knight_hp = 3;
    //optional uint64 total_hp = 4; //总血量
    optional uint32 max_enemy_pos = 5; //已击败的敌人的最大的位置
    repeated uint32 get_award_ids = 6; //已经领取的宝箱的id
    optional uint32 total_add_attr_times = 7; //总的属性的购买次数
    optional uint32 current_add_attr_times = 8; //当前关加成的属性的购买次数
    optional uint32 buy_hp_times = 9; //当天购买血量的次数
}

//攻打敌人
message C2S_FlameCaveAttackEnemy {
    required uint32 enemy_position = 1; //攻打的敌人的位置
}

message S2C_FlameCaveAttackEnemy {
    required uint32 ret = 1;
    repeated FlameCaveKnightHp knight_hp = 2;
    optional BattleReport battle_report = 3;
    repeated Award awards = 4;
}

//购买血量
message C2S_FlameCaveBuyHp {
}

message S2C_FlameCaveBuyHp {
    required uint32 ret = 1;
    optional uint32 buy_hp_times = 2;
}

//购买属性
message C2S_FlameCaveBuyAttr {
}

message S2C_FlameCaveBuyAttr {
    required uint32 ret = 1;
    optional uint32 total_add_attr_times = 2; //总的属性的购买次数
    optional uint32 current_add_attr_times = 3; //当前关加成的属性的购买次数
}

//领取宝箱
message C2S_FlameCaveGetBox {
    required uint32 box_id = 1;
}

message S2C_FlameCaveGetBox {
    required uint32 ret = 1;
    repeated Award award = 2;
    optional uint32 box_id = 3;
}

message C2S_FlameCaveFlushInfo {
}

message S2C_FlameCaveFlushInfo {
    required uint32 ret = 1;
    optional uint32 max_enemy_pos = 2; //已击败的敌人的最大的位置
    repeated uint32 get_award_ids = 3; //已经领取的宝箱的id
}

message RechargeExtraParam {
    optional uint32 extratype = 1; //0:通用充值，1:等级礼包购买
    optional uint32 extraappid = 2;
    optional uint32 param = 3; //等级礼包购买的id
}

message StarKnight {
    required uint32 id = 1;
    required uint32 star = 2;
    optional uint32 pulse_improve_count = 3;//提升属性次数
    repeated IntMap pulse_slots = 4;//经脉信息 pulse_id => value
    optional uint32 pulse_improve_extra_count = 5;//提升属性上限次数
}

message C2S_StarKnightGetInfo {
}

message S2C_StarKnightGetInfo {
    required uint32 ret = 1;
    repeated StarKnight star_knights = 2;
}

message C2S_StarKnightUpgrade {
    required uint32 id = 1;
}

message S2C_StarKnightUpgrade {
    required uint32 ret = 1;
    optional StarKnight star_knight = 2;
}

//星君装备
message C2S_StarKnightEquip {
    required uint32 id = 1; //id
    required uint32 team = 2;
    required uint32 pos = 3;
}

message S2C_StarKnightEquip {
    required uint32 ret = 1;
    required uint32 id = 2; //id
    required uint32 team = 3;
    required uint32 pos = 4;
}

message C2S_StarKnightPulseUseItem {
    required uint32 item_id = 1;
    required uint32 star_id = 2;
    repeated uint32 slots = 3;//洗练时锁定的孔
    optional uint32 param1 = 4;//拱星（聚脉）为孔位 移星（冲脉）为孔位 传承（移脉）为目标星君
    optional uint32 num = 5;//冲脉时使用数量
}

message S2C_StarKnightPulseUseItem {
    required uint32 ret = 1;
    optional uint32 item_id = 2;
    required uint32 star_id = 3;
    optional uint32 param1 = 4;//拱星（聚脉）为孔位 移星（冲脉）为孔位 传承（移脉）为目标星君
    optional uint32 num = 5;
    optional StarKnight star_knight = 6;
    optional StarKnight target_star_knight = 7;
    repeated IntMap pulse_slots = 8;//经脉信息 pulse_id => value
}

message C2S_StarKnightPulseSave {
    required uint32 star_id = 1;
}

message S2C_StarKnightPulseSave {
    required uint32 ret = 1;
    optional StarKnight star_knight = 2;
}

message C2S_GetUserStarKnightPulseInfo {
    required uint32 star_id = 1; 
}

message S2C_GetUserStarKnightPulseInfo {
    required uint32 ret = 1;
    optional uint32 star_id = 2; 
    repeated IntMap pulse_slots = 3;//经脉信息 pulse_id => value
    optional uint32 type = 4;//1单条洗练 2多条洗练
    optional uint32 slot = 5;//单条哪条变化
}

//遣云宫
message CloudPalaceRoomUserData {
    required uint32 pos = 1;
    required SimpleUser user = 2;
    required uint32 win_times = 3;
    required bool is_defeated = 4;
}

//进入玩法拉取数据
message C2S_CloudPalaceGetInfo {

}

message S2C_CloudPalaceGetInfo {
    required uint32 ret = 1;
    optional uint32 seg_id = 2; //段位
    optional uint32 room_index = 3; //房间序号
    optional uint32 last_up_time = 4; //最新直升时间
    optional uint32 max_seg = 5; //赛季最高段位
    optional CommonCount change_room_times = 6; //更换房间次数
    optional uint32 last_change_room = 7; //上次换房间的时间
    repeated uint32 get_award_seg = 8; //已经领取奖励的段位
    repeated CloudPalaceRoomUserData user_data = 9; //房间中玩家的数据
    optional uint32 max_user_num = 10; //房间中玩家最大数量
    optional uint32 all_rank = 11; //全服排名
    optional uint32 local_rank = 12; //本服排名
    optional uint32 last_seg = 13; //上次段位
    repeated SimpleUser peak_user = 14; //巅峰前三
    repeated SimpleUser group_user = 15; //战区前三
    optional uint32 last_one_key_time = 16;
    optional uint32 up_type = 17; //段位升级类型（1：结算升级 2：直升升级）
    optional bool get_back_rank = 18; //是否拉取备份榜
    optional bool log_red_point = 19; //日志红点
}

//根据位置拉取敌人数据
message C2S_CloudPalaceGetEnemyData {
    required uint32 min_pos = 1; //敌人位置的下限
    required uint32 max_pos = 2; //敌人位置的上限
}

message S2C_CloudPalaceGetEnemyData {
    required uint32 ret = 1;
    repeated CloudPalaceRoomUserData user_data = 2;
}

//挑战
message C2S_CloudPalaceChallengeEnemy {
    required uint64 uid = 1; //挑战的敌人
    required uint32 challenge_type = 2; //挑战类型（1：单独挑战  2：批量挑战）
}

message S2C_CloudPalaceChallengeEnemy {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    optional uint32 win_times = 3; //胜场次数
    optional uint64 enemy_uid = 4; //敌人的uid
    optional uint64 enemy_sid = 5; //敌人的sid
    optional uint32 enemy_win_times = 6; //敌人的胜场次数
    optional bool result = 7; //是否获胜
    optional string enemy_name = 8;
    optional uint32 pos = 9; //玩家的位置
    optional uint32 local_rank = 10; //本服排名
    optional uint32 group_rank = 11; //全服排名
    optional uint32 last_one_key_time = 12;
}

//直升
message CloudPalaceUpResult {
    required uint32 round = 1;
    required uint32 hp_percent = 2;
    required uint64 minus_hp = 3;
}

message C2S_CloudPalaceUp {

}

message S2C_CloudPalaceUp {
    required uint32 ret = 1;
    optional bool result = 2; //直升是否成功
    optional uint32 seg = 3; //段位
    optional uint32 room_index = 4; //房间序号
    optional uint32 pos = 5; //玩家位置
    optional uint32 last_up_time = 6; //最新直升时间
    repeated CloudPalaceRoomUserData user_data = 7;
    repeated CloudPalaceUpResult up_result = 8;
    optional uint32 max_seg_user_num = 9; //最高段位玩家数
    optional uint32 local_rank = 10;
    optional uint32 group_rank = 11;
}

//换房间
message C2S_CloudPalaceChangeRoom {
}

message S2C_CloudPalaceChangeRoom {
    required uint32 ret = 1;
    optional uint32 room_index = 2;
    optional uint32 pos = 3;
    repeated CloudPalaceRoomUserData user_data = 4;
    optional CommonCount change_room_times = 5;
    optional uint32 last_change_room = 6; //上次换房间的时间
    optional uint32 max_user_num = 7;
}

//更新玩家数据
message S2C_CloudPalaceUpdateUserData {
    optional uint32 local_rank = 1;
    optional uint32 group_rank = 2;
    repeated CloudPalaceRoomUserData user_data = 3; //房间中玩家的数据
    optional uint32 max_user_num = 4; //房间中玩家的数量
    optional bool log_red_point = 5; //日志红点
    //optional uint32 enter_type = 6; //1:进入房间  2:离开房间  0:没有玩家进入或者离开
}

//领取段位奖励
message C2S_CloudPalaceGetSegAward {
    required uint32 seg_id = 1;
}

message S2C_CloudPalaceGetSegAward {
    required uint32 ret = 1;
    optional uint32 seg_id = 2;
    repeated Award award = 3;
}

//获取日志
message CloudPalaceLog {
    required uint32 log_type = 1; //日志类型（1：挑战战报  2：被挑战战报  3：直升战报）
    required uint32 time = 2;
    optional uint64 enemy_sid = 3; //敌人sid
    optional uint64 enemy_uid = 4; //敌人uid
    optional string enemy_name = 5;
    optional uint32 result = 6; // 最终胜场变化 0不变  1上升 2下降
    optional uint32 win_times = 7; //胜场次数
    optional uint32 seg = 8; //段位
}

message C2S_CloudPalaceGetLog {
}

message S2C_CloudPalaceGetLog {
    required uint32 ret = 1;
    repeated CloudPalaceLog log = 2;
}

//批量挑战
message C2S_CloudPalaceGetBatchData {
    required uint32 index = 1;
}

message S2C_CloudPalaceGetBatchData {
    required uint32 ret = 1;
    repeated SimpleUser user_data = 2;
}

//离开遣云宫玩法
message C2S_CloudPalaceQuitModule {

}

message S2C_CloudPalaceQuitModule{
    required uint32 ret = 1;
}

//停止批量挑战之后推送给客户端数据
message C2S_CloudPalaceEndBatchChallenge{
}

message S2C_CloudPalaceEndBatchChallenge {
    required uint32 ret = 1;
    repeated CloudPalaceRoomUserData user_data = 2;
}

//排行榜奖励发完之后通知前端拉取备份榜
message S2C_CloudPalaceIssueRankOver{
}

//储蓄罐信息
message Deposit{
    required uint32 choise = 1;//方式（1:表示方式一，2:表示方式二）
    optional uint32 invest_time = 2;//投资的时间
    optional uint32 recived_time = 3;//领取奖励的时间
    optional uint32 gold_num = 4;//投资的元宝数/天数
} 
//活动时间
message DepositActivityTime {
   required uint32 start_time = 1; //活动开启的时间
   required uint32 buy_time = 2;   //购买时间
   required uint32 end_time = 3;  //活动结束的时间
}


//获得储蓄罐信息
message C2S_DepositGetInfo{
}

message S2C_DepositGetInfo{
    required uint32 ret = 1;
    optional DepositActivityTime activity_time = 2;
    repeated Deposit deposit = 3;//储蓄罐信息

}

//投资储蓄罐
message C2S_Deposit{
    required uint32 choise = 1;//方式
    required uint32 gold_num = 2;//投资的元宝数
}

message S2C_Deposit{
    required uint32 ret = 1;
    optional Deposit deposit = 2;
}

//领取储蓄罐奖励
message C2S_GetDepositAward{
    optional uint32 choise = 1;
}

message S2C_GetDepositAward{
    required uint32 ret = 1;
    optional uint32 choise = 2;
    optional uint32 id = 3;//随机的权重id
    optional uint32 recived_time = 4;//领取奖励的时间(实时时间)
    repeated Award awards = 5;//发放奖励
}

//领取记录日志
message DepositAwardLog {
   optional uint32 rate = 1;//收益率
   optional uint32 recived_time = 2;//领取奖励的时间
   optional uint32 total_num = 3;//收益后的元宝数
 
}

message C2S_GetDepositAwardLog{
    required uint32 choise = 1;//方式
}

message S2C_GetDepositAwardLog{
    required  uint32 ret = 1;
    optional uint32 choise = 2;
    repeated DepositAwardLog depositaward_log= 3;
    optional uint32 gold_num = 4;
}

//星宿副本
message C2S_StarGodLegendGetInfo {
}

message StarGodLegendStageReward {
	required uint32 chapter_id = 1;
	required uint32 stage_index = 2; //关卡序列
}

message S2C_StarGodLegendGetInfo {
	required uint32 ret = 1;
	repeated uint32 stages = 2; //通关关卡
	repeated StarGodLegendStageReward reward_chapters = 3;//领奖的章节ID
	optional CommonCount count = 4;//参与次数
}

message C2S_StarGodLegendMove {
	required uint32 event_id = 1;
}

message S2C_StarGodLegendMove {
	required uint32 ret = 1;
	optional uint32 event_id = 3;
    optional uint32 hp_percent = 5; // 血量百分比
    optional uint32 state = 6; // 关卡状态 0:进行中,1:胜利,2:失败
    repeated Award awards = 7;
	optional BattleReport battle = 8;
    optional uint32 buff = 9; // 获得的BUFF
}

message C2S_StarGodLegendOp {
	required uint32 op = 1; //1新关卡 2放弃 3扫荡 4复活 5结算 6失败 7进入章节
	optional uint32 stage_id = 2;
	optional uint32 chapter_id = 3;
}

message S2C_StarGodLegendOp {
	required uint32 ret = 1;
	optional uint32 op = 2;
	optional uint32 stage_id = 3;
	repeated Award awards = 4;
    repeated uint32 reward_event_id = 5;//已完成的唯一事件
    repeated bool has_reward_events = 6;//每个小关是否有奖励
}

message C2S_StarGodLegendFirstStagePassAward {
	required uint32 stage_index = 1;//关卡索引
    required uint32 chapter_id = 2;//章节Id 
}

message S2C_StarGodLegendFirstStagePassAward {
	required uint32 ret = 1;
	optional uint32 stage_index = 2;
    optional uint32 chapter_id = 3;
	repeated Award awards = 4;
}

message C2S_CloudPalaceApplyTest {
}

message C2S_CloudPalaceGetFirstUidTest {
}

message S2C_CloudPalaceGetFirstUidTest {
    required uint32 ret = 1;
    optional uint64 uid = 2;
}

message HomeDig {
    required uint32 sum_score = 1;
    required uint32 last_score = 2;
    required uint32 max_score = 3;
    required uint32 count = 4;
    required uint32 recover_time = 5;
    repeated uint32 award_record = 6;
}

message C2S_HomeDigGetInfo {
}

message S2C_HomeDigGetInfo {
    required uint32 ret = 1;
    required HomeDig home_dig = 2;
}

message C2S_HomeDigResult {
    required uint32 score = 1;
    required uint64 build_id = 2;
    repeated IntMap events = 3;
}

message S2C_HomeDigResult {
    required uint32 ret = 1;
    required HomeDig home_dig = 2;
    repeated Award awards = 3;
}

message C2S_HomeDigGetAward {
    required uint32 id = 1;
}

message S2C_HomeDigGetAward {
    required uint32 ret = 1;
    required uint32 id = 2;
    repeated Award awards = 3;
}

message S2C_AntiAddictionNotify {
  optional uint32 game_time = 1; //在线总时长(分钟)
  optional uint32 remain_time = 2; //剩余时间(分钟)
  optional uint32 adult_type = 3; //0:未成年 2:未实名 1:已成年
  optional uint32 max_minutes = 4; //最大在线时长
  optional uint32 recharge_status = 5; //充值状态
}

message C2S_PulseGetInfo {
}

message S2C_PulseGetInfo {
    required uint32 ret = 1;
    optional uint32 current_max_id = 2; //当前已经升级的最大id
}

message C2S_PulseUpdate {
    required uint32 node_id = 1; //节点id
}

message S2C_PulseUpdate {
    required uint32 ret = 1;
    optional uint32 current_max_id = 2; //当前已经升级的最大id
}


//须弥幻境的进度信息
message IllusoryLand{
    required uint32 stage_id = 1;//关卡id
    required uint32 refresh_count = 2;//刷新次数
    repeated uint32 monster = 3;//幻影（下标对应印记的属性，value对应值）
    repeated uint32 boss_signets = 4;//boss获得印记
    repeated uint32 user_signets = 5;//玩家获得印记
    required uint32 wave = 6;//波次
    repeated uint32 signet = 7;//印记(下标表示位置,value:某个位置上的印记)
    required uint32 boss_scores =8;//boss获得的分数
    required uint32 user_scores = 9;//玩家获得的分数
}

//须弥幻境困难关卡的进度信息
message IllusoryLandElite {
    required uint32 max_id = 1;//最大通关关卡Id
    required uint32 refresh_count = 2;//刷新次数
    repeated uint32 chosen_id = 3;//已选择的天赋
    repeated uint32 talent_id = 4;//刷出来的天赋
    required uint32 stage_id = 5;//当前关卡Id
}

//拉取信息
message C2S_IllusoryLandGetInfo {
}

message S2C_IllusoryLandGetInfo {
    required uint32 ret = 1;
    repeated uint32 hide_reward_stages = 2;//领取隐藏奖励的stage
    optional uint32 max_stage_id = 3;//当前的最大关卡
    optional CommonCount challenge_count = 4;//挑战次数
    optional IllusoryLand illusory_land = 5;//当前的进度信息
    repeated uint32 reach_condition_stages = 6;//达到隐藏条件的stage
    optional IllusoryLandElite illusory_elite = 7;
}

//进入关卡
message C2S_IllusoryLandEnter {
    required uint32 stage_id = 1;//关卡id
}

message S2C_IllusoryLandEnter {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    repeated uint32 signet = 3;//印记（下标-位置，value:印记值)
    repeated uint32 monster = 4;//怪物
}

//关卡挑战
message C2S_IllusoryLandChallenge {
    required uint32 monster_pos = 1;
}

message S2C_IllusoryLandChallenge {
    required uint32 ret = 1;
    required uint32 monster_pos = 2;
    optional BattleReport battle_report = 3;//战报
    repeated Award awards = 4;//获得掉落奖励
    optional bool is_condition = 5;//达成隐藏奖励的条件
    optional IllusoryLand illusory_land = 6;//进度信息
    optional CommonCount challenge_count = 7;//挑战次数
    optional bool is_finsh = 8;//是否结算
}

//扫荡
message C2S_IllusoryLandFastChallenge {
    required uint32 stage_id = 1;
}

message S2C_IllusoryLandFastChallenge {
    required uint32 ret = 1;
    optional CommonCount challenge_count = 2;
    repeated Award awards = 3;//只有掉落奖励
}

message C2S_IllusoryLandEliteEnter {
    required uint32 stage_id = 1;//关卡id
}

message S2C_IllusoryLandEliteEnter {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    repeated uint32 talent_id = 3;
}

//关卡挑战
message C2S_IllusoryLandEliteChallenge {
    required uint32 stage_id = 1;//关卡id
	repeated uint32 talent_id = 2;
}

message S2C_IllusoryLandEliteChallenge {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;//战报
    repeated Award awards = 3;//获得掉落奖励
    optional CommonCount challenge_count = 4;//挑战次数
    optional IllusoryLandElite illusory_elite = 5;
}

//扫荡
message C2S_IllusoryLandEliteFastChallenge {
    required uint32 stage_id = 1;
}

message S2C_IllusoryLandEliteFastChallenge {
    required uint32 ret = 1;
    optional CommonCount challenge_count = 2;
    repeated Award awards = 3;//只有掉落奖励
}

message C2S_IllusoryLandEliteChooseBuff {
    repeated uint32 talent_id = 1;
}

message S2C_IllusoryLandEliteChooseBuff {
    required uint32 ret = 1;
	repeated uint32 talent_id = 2;
}

//刷新
message C2S_IllusoryLandRefresh {
    required uint32 monster_pos = 1;//幻影的位置
}

message S2C_IllusoryLandRefresh {
    required uint32 ret = 1;
    repeated uint32 signet = 2;//(key表示位置,value:表示某个属性的印记)
    optional uint32 monster_pos = 3;//幻影的位置
}

message C2S_IllusoryLandEliteRefresh {
    required uint32 stage_id = 1;//关卡id
}

message S2C_IllusoryLandEliteRefresh {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    repeated uint32 talent_id = 3;
}
//放弃
message C2S_IllusoryLandGiveUp {
 
}
message S2C_IllusoryLandGiveUp {
    required uint32 ret = 1;
}

//领取隐藏奖励
message C2S_IllusoryLandGetHideRewards{
    required uint32 stage_id = 1;//关卡id
} 
message S2C_IllusoryLandGetHideRewards{
    required uint32 ret = 1;
    optional uint32 stage_id = 2;//已经领取隐藏奖励的关卡id
    repeated Award awards = 3;//隐藏奖励
}
message DressDrawLog {
    optional SimpleUser user = 1;
    repeated uint32 award_ids = 2;
    optional uint32 timestamp = 3;
    optional uint32 draw_count = 4;
    optional uint32 draw_type = 5;
}

message C2S_DressDrawGetInfo {
}

message S2C_DressDrawGetInfo {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32 reward_time = 4;
    optional uint32 use_count = 5;
    optional uint32 act_use_count = 6; //活动期间元宝抽的次数
    repeated DressDrawLog logs = 7;
}

message C2S_DressDrawGetAward {
    required uint32 draw_type = 1; //1:元宝抽奖, 2:财神令抽奖
    required uint32 count = 2; //最大100
}

message S2C_DressDrawGetAward {
    required uint32 ret = 1;
    required uint32 draw_type = 2;
    optional uint32 count = 3;
    optional uint32 use_count = 4;
    optional uint32 act_use_count = 5; //活动期间元宝抽的次数
    repeated uint32 award_ids = 6;
    repeated Award awards = 7;
}

message S2C_DressDrawLogNotify {
    repeated DressDrawLog logs = 1;
}

message S2C_DressDrawDanmuNotify {
    repeated DressDrawLog logs = 1;
}

message C2S_DressDrawExit {
}

message S2C_DressDrawExit {
    required uint32 ret = 1;
}

//一键炼魂
message C2S_KnightZhuLingFast {
    required uint64 knight_id = 1; //目标武将id
    repeated Award fragments = 2; //消耗的碎片
}

message S2C_KnightZhuLingFast {
    required uint32 ret = 1;
    optional uint64 knight_id = 2; //目标武将id
    optional uint32 rank = 3;//变化的阶数
    repeated IntMap Attr = 4;//变化的属性(下标表示类型，value表示属性值)
}

//一键炼器
message C2S_InstrumentSuperCastFast {
    required uint64 knight_id = 1;
    repeated Award fragments = 2;
}

message S2C_InstrumentSuperCastFast{
    required uint32 ret = 1;
    optional uint64 knight_id = 2;
    optional uint32 rank = 3;//阶数
}

//西游天卷
message C2S_ManualScrollGetInfo {
}

message S2C_ManualScrollGetInfo {
    required uint32 ret = 1;
    repeated IntMap task_data = 2; //type=>value
    repeated uint32 get_award_id = 3; //已领取奖励的id
}

//领取西游天卷奖励
message C2S_ManualScrollGetAward {
    required uint32 id = 1; //任务id
}

message S2C_ManualScrollGetAward {
    required uint32 ret = 1;
    optional uint32 id = 2;
    repeated Award award = 3;
}

//任务数据发生变化
message S2C_ManualScrollModifyTaskData {
    repeated IntMap modify_data = 1;
}

//魂卡化金和化紫金
message C2S_KnightCardUpdate {
    required uint32 target_id = 1; //目标魂卡id
    repeated IntMap source_ids = 2; //选择的魂卡id=>数量
}

message S2C_KnightCardUpdate {
    required uint32 ret = 1;
    optional uint32 target_id = 2; //目标魂卡id
    optional uint32 num = 3; //数量
}

//西游之路字卡任务一键领取奖励
message C2S_GetAnniversaryWeekTaskAllAward {
    repeated uint32 id = 1;//任务id
}

message S2C_GetAnniversaryWeekTaskAllAward {
    required uint32 ret = 1;
    repeated uint32 id = 2;//任务id
    repeated Award awards = 3;
}


 //任务
message ActivityTask {
    required uint32 task_id = 1;
    required uint32 task_value = 2;
}

//路径
message ConPathTaskIds {
    repeated uint32 con_ids  = 1;//连线id
    required uint32  task_id = 2;//特殊任务id
}
//获得少年节信息
message C2S_GetActivityYouthInfo{
      
}
message S2C_GetActivityYouthInfo {
    required uint32 ret = 1;
    optional uint32 start_time = 2;
    optional uint32 end_time = 3;
    optional uint32  reward_time = 4;//发奖时间
    repeated ActivityTask activity_task = 5;//任务信息
    optional uint32 round = 6;//波数
    repeated uint32 reward_id = 7;//领取奖励的id
    repeated ConPathTaskIds path = 8;//连线的路径
}

//具体某个任务信息
message S2C_GetActivityYouthTaskInfo {
    required uint32 ret = 1;
    repeated ActivityTask task = 2; //少年节具体的任务信息
}

//领取奖励
message C2S_GetActivityYouthAward {
    required uint32 task_id = 1;//任务id
    repeated uint32 con_ids = 2;//连线任务的id                
}
message S2C_GetActivityYouthAward {
    required uint32 ret = 1;
    optional uint32 task_id = 2;//任务id
    repeated Award task_award = 3;//任务奖励
    repeated uint32 con_ids = 4;//连线任务的id
}

//进入下一波(所有特殊任务完成进入下一波)
message C2S_GetActivityYouthNext{
    
}

message S2C_GetActivityYouthNext{
    required uint32 ret = 1;
    optional uint32 round  = 2;//(最后一波将round置为0)
    repeated Award awards = 3;//（爆掉其他的奖励）惊喜大奖以及没有完成的id对应的奖励
}

//测试完成单个任务（消耗道具）
message C2S_FinshActivityYouthTask{
    required uint32 id = 1;//任务id
}

message S2C_FinshActivityYouthTask {
    required uint32 ret = 1;
    repeated ActivityTask task = 2;//任务进度
}

//三界悬赏
message RandomTaskTaskData {
    required uint32 task_id = 1;
    optional uint32 friend_value = 2; //好友的进度
    optional SimpleUser friend = 3; //接受任务的好友
    optional uint32 self_value = 4; //自己的进度
    required uint64 owner = 5; //任务的拥有者uid
}

message RandomTaskGetAward {
    required uint64 owner = 1; //任务的拥有者的uid
    repeated uint32 task_ids = 2; //已经领取奖励的任务的id
}

//主界面协议
message C2S_RandomTaskGetData {
}

message S2C_RandomTaskGetData {
    required uint32 ret = 1;
    repeated RandomTaskTaskData task_data = 2; //任务的数据
    required bool invite_red_point = 3; //好友的邀请红点
    repeated RandomTaskGetAward get_award_task = 4; //已经领取奖励的任务
}

//领取奖励
message C2S_RandomTaskGetAward {
    required uint32 task_id = 1;
    required uint64 owner = 2; //该任务是自己的还是好友的，此处传uid
}

message S2C_RandomTaskGetAward {
    required uint32 ret = 1;
    optional uint32 task_id = 2;
    optional uint64 owner = 3;
    repeated Award award = 4;
}

//好友的邀请
message S2C_RandomTaskReceiveInvitation {
    required bool invite_red_point = 1; //好友的邀请红点
}

//拉取好友列表
message C2S_RandomTaskGetFriend {
    required uint32 task_id = 1;
}

//邀请好友
message C2S_RandomTaskInviteFriend{
    required uint32 task_id = 1;
    required uint64 friend_sid = 2;
    required uint64 friend_uid = 3;
    required uint32 operate_type = 4; //1：邀请好友  2：取消邀请
}

message S2C_RandomTaskInviteFriend {
    required uint32 ret = 1;
    optional uint32 task_id = 2;
    optional uint64 friend_sid = 3;
    optional uint64 friend_uid = 4;
    optional uint32 operate_type = 5;
}

message S2C_RandomTaskGetFriend {
    required uint32 ret = 1;
    repeated SimpleUser friend_data = 2;
    repeated uint64 invite_friend_uids = 3; //自己邀请好友的uid
    optional uint32 last_change_time = 4; //上次换人时间
    optional uint32 task_id = 5;
}

//更新任务数据
message S2C_RandomTaskUpdateTaskValue {
    required RandomTaskTaskData task_data = 1;
}

//拉取好友的邀请列表
message RandomTaskFriendInvitation {
    required SimpleUser friend = 1;
    required uint32 task_id = 2; //邀请人的任务id
}

message C2S_RandomTaskGetFriendInvitation {
}

message S2C_RandomTaskGetFriendInvitation {
    required uint32 ret = 1;
    repeated RandomTaskFriendInvitation friend_invitation = 2;
}

//接受或者拒绝好友邀请
message C2S_RandomTaskUserOperate {
    required uint64 friend_uid = 1;
    required uint32 operate_type = 2; //1：接受  2：拒绝
}

message S2C_RandomTaskUserOperate {
    required uint32 ret = 1;
    optional RandomTaskFriendOperate friend_data = 2; //接受的话发送好友的数据
}

//接受或者拒绝或者被替换后通知给好友，登陆时推送
message RandomTaskFriendOperate {
    required uint32 task_id = 1;
    required SimpleUser friend_data = 2;
    required uint32 operate_type = 3; //1：接受  2：拒绝  3：被换掉
    required uint64 task_owner = 4;
}

message S2C_RandomTaskUserOperateNotifyFriend {
    required uint32 ret = 1;
    repeated RandomTaskFriendOperate friend_data = 2;
}

//刷新任务，测试用！！！！！
message C2S_RandomTaskResetTaskTest {

}

message S2C_RandomTaskResetTaskTest {
    required uint32 ret = 1;
}

//回归西游领取感谢信
message C2S_GetRecallThankAward {
   required uint32 main_ty = 1;//主任务类型
}


message S2C_GetRecallThankAward {
    required uint32 ret = 1;
    optional uint32 is_thank = 2;
    repeated Award awards = 3;//奖励
    required uint32 main_ty = 4;//主任务类型
} 

//////////////////三周年广场begin
message CeremonyQuest {
  required uint32 id = 1; //题目id
  required uint32 clue = 2; //已使用的线索数量
  optional bool over = 3; //是否答完了 
  repeated uint32 error_id = 4; //已答错的id
  required uint32 rate = 5; //当前第几题
}
message CeremonyCard {
  repeated IntMap open_cards = 1; //已翻的卡牌 key:格子 value:卡牌id
  optional IntMap show_card = 2; //显示正面的卡牌
  required uint32 pass_card_stage = 3; //已通关第几关
  required uint32 curr_card_stage = 4; //当前关卡
  optional bool   curr_stage_pass = 5; //当前关卡是否通关
}

message CeremonyData {
  required bool sign_award = 1; //登录奖励 1:已领取
  optional CeremonyQuest quest = 2; //答题
  required CeremonyCard card_data = 3; //连连看
  required uint32 score = 4; //积分
  required uint32 hot = 5; //热度
  required uint32 correct_card = 6; //翻牌值
  repeated uint32 hot_award_ids = 7; //已领取的热度奖励id
  repeated uint32 card_first_award_ids = 8; //已领取的翻牌首通奖励id
}

message C2S_GetCeremonyInfo {
}
message S2C_GetCeremonyInfo {
  required uint32 ret = 1;
  optional uint32 start_time = 2;
  optional uint32 open_time = 3;
  optional uint32 end_time = 4;
  optional uint32 reward_time = 5;
  optional uint32 server_hot = 6; //全服热度
  optional CeremonyData data = 7;
}

message C2S_CeremonySign {
}
message S2C_CeremonySign {
  required uint32 ret = 1;
  repeated Award awards = 2;
}
message C2S_CeremonyAnswer {
  required uint32 tp = 1; //1:开始答题 2:使用线索 3:答题
  optional uint32 value = 2;
}
message S2C_CeremonyAnswer {
  required uint32 ret = 1;
  optional CeremonyQuest quest = 2;
  repeated Award awards = 3;
  optional uint32 score = 4;
  optional uint32 hot = 5;
  optional bool is_correct = 6;
  required uint32 tp = 7;
  optional uint32 add_score = 8;
  optional uint32 add_hot = 9;
}

message C2S_CeremonyOpenCard {
  required uint32 id = 1;
}
message S2C_CeremonyOpenCard {
  required uint32 ret = 1;
  optional IntMap operate_card = 2; 
  optional CeremonyCard card_data = 3;
  repeated Award awards = 4;
  optional uint32 hot = 5;
  repeated uint32 clear_ids = 6;//当前消除的2张卡 
  optional uint32 add_hot = 7;
  optional bool is_pass = 8; //当前是否通关
}
message C2S_CeremonyGoCardStage {
  required uint32 stage_id = 1; 
}
message S2C_CeremonyGoCardStage {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  optional CeremonyCard card_data = 3;
}

message C2S_CeremonyGetHotAward {
  required uint32 id = 1;
}
message S2C_CeremonyGetHotAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}
message C2S_CeremonyGetFireworksAward {
}
message S2C_CeremonyGetFireworksAward {
  required uint32 ret = 1;
  repeated Award awards = 2;
}
message C2S_CeremonyGetCardFirstAward {
  required uint32 id = 1;
}
message S2C_CeremonyGetCardFirstAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}



//////////////////三周年广场end


//主界面
message BloodDemonScore {
    required uint32 total_score = 1; //总积分
    required uint32 group_rank = 2; //战区排名
    required uint32 theme_score = 3; //主题积分
    required uint32 theme_rank = 4; //主题排名
    required uint32 max_boss_score = 5; //boss积分
}

message C2S_BloodDemonGetData {
}

message S2C_BloodDemonGetData {
    required uint32 ret = 1;
    optional uint32 open_chapter_id = 2; //当前开放的章节id
    optional uint32 max_stage_id = 3; //已经通关的最大关卡id
    optional BloodDemonScore score_rank = 4; //积分和排名
    optional CommonCount attack_boss_count = 5; //攻打boss次数
    repeated SimpleUser peak_user = 6; //全服前三
    repeated SimpleUser group_user = 7; //战区前三
}

message C2S_BloodDemonAttackMonster {
    required uint32 stage_id = 1;
}

message S2C_BloodDemonAttackMonster {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    optional BloodDemonScore score_rank = 3;
    repeated Award awards = 4;
    optional uint32 stage_id = 5;
}

message C2S_BloodDemonAttackBoss {
}

message S2C_BloodDemonAttackBoss{
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
    optional BloodDemonScore score_rank = 3;
    repeated Award awards = 4;
    optional uint32 boss_score = 5;
    optional uint64 damage = 6;
}

message C2S_BloodDemonRankTest {

}

message S2C_BloodDemonRankTest {
    required uint32 ret = 1;
}

message LoginPopAct {
    required uint32 index = 1;
    required string title = 2;
    required string picture_url = 3;
    required uint32 start_time = 4;
    required uint32 end_time = 5;
    optional uint32 game_module = 6;
    optional bool open_out = 7;
    optional string go_url = 8;
}

message S2C_LoginPopActData {
    required uint32 ret = 1;
    //optional uint32 start_time = 2;
    //optional uint32 end_time = 3;
    repeated LoginPopAct data = 4;
}

message Artifact {
    required uint64 id = 1;//唯一ID
    required uint32 base_id = 2;//神器ID
    required uint32 exp = 3;//神器当前经验值
    required uint32 lev = 4;//神器当前等级
    required uint32 star = 5;//神器当前星级
}

//神器信息
message C2S_ArtifactInfo {

}

message S2C_ArtifactInfo {
    required uint32 ret = 1;
    repeated Artifact artifacts = 2;
}

//神器合成
message C2S_ArtifactCompose {
    repeated uint64 artifact_ids = 1;
    required uint32 draw_id = 2;
}

message S2C_ArtifactCompose {
    required uint32 ret = 1;
    optional uint64 artifactid = 2;
}

//神器升级
message C2S_ArtifactUpLevel {
    required uint64 id = 1;
    repeated Award materials = 2;
}

message S2C_ArtifactUpLevel {
    required uint32 ret = 1;
    optional Artifact artifact = 2;
}

//神器升星
message C2S_ArtifactUpStar {
    required uint64 id = 1;
    repeated uint64 cost_ids = 2;
}

message S2C_ArtifactUpStar {
    required uint32 ret = 1;
    optional Artifact artifact = 2;
}

//神器穿戴
message C2S_ArtifactEquip {
    required uint64 id = 1;
    required uint32 pos = 2;
}

message S2C_ArtifactEquip {
    required uint32 ret = 1;
    optional uint64 id = 2;
    optional uint32 pos = 3;
}

//神器抽宝箱
message C2S_ArtifactDraw{
  required uint32 tp = 1; //1:抽一次 2:抽10次
}
message S2C_ArtifactDraw{
  required uint32 ret = 1;
  required uint32 tp = 2;
  optional uint32 total_times = 3;
  repeated Award awards = 4;
}
message C2S_ArtifactDrawInfo{
}
message S2C_ArtifactDrawInfo{
  required uint32 ret = 1;
  optional uint32 total_times = 2;
  optional CommonCount common_count = 3;
}
//神器抽宝箱测试
message C2S_ArtifactDrawTest{
  required uint32 num = 1; 
}
message S2C_ArtifactDrawTest{
  required uint32 ret = 1;
  repeated IntMap id_num = 2; 
}
////////////////开服7日的天天返利
message Days7RebateUserInfo {
    repeated IntMap days = 1; //day=>status[0:未充值 1:已充值 2:已领取]
    optional bool total_award = 2; //累计奖励
    optional uint32 turn_times = 3; //已抽奖次数
}

message C2S_Days7RebateGetInfo {
}

message S2C_Days7RebateGetInfo {
    required uint32 ret = 1;
    optional Days7RebateUserInfo info = 2;
    optional uint32 days7_id = 3;
    optional bool   is_open = 4; //是否开启
}

//更新玩家数据
message S2C_Days7RebateUpdate {
    optional Days7RebateUserInfo info = 1;
}

//领取每天充值奖励
message C2S_Days7RebateGetDayAward {
    required uint32 day = 1; //第几天的奖励
    optional uint32 index = 2; //奖励顺序
}

message S2C_Days7RebateGetDayAward {
    required uint32 ret = 1;
    required uint32 day = 2; //第几天的奖励
    repeated Award awards = 3;
    optional uint32 index = 4; //奖励顺序
}

//领取累计5天奖励
message C2S_Days7RebateGetTotalAward {
    optional uint32 index = 1; //奖励顺序
}

message S2C_Days7RebateGetTotalAward {
    required uint32 ret = 1;
    repeated Award awards = 2;
    optional uint32 index = 3;
}

//领取转盘
message C2S_Days7RebateGetTurnAward {

}

message S2C_Days7RebateGetTurnAward {
    required uint32 ret = 1;
    optional uint32 id  = 2; //配表id
    repeated Award awards = 3;
    optional uint32 turn_times = 4;
}

//胚子试炼场
//拉取试炼场数据
message ProvingGroundTrialItem {
    required uint32 type = 1; //胚子类型(法术为40,和resource_manage中一样)
    required uint32 base_id = 2; //胚子id
}

message ProvingGroundEquipItem {
    required uint32 type = 1;
    required uint32 base_id = 2;
    optional uint32 star = 3; //胚子星数
    optional uint32 pos = 4; //胚子位置
}

message C2S_ProvingGroundGetInfo {
}

message S2C_ProvingGroundGetInfo {
    required uint32 ret = 1;
    repeated ProvingGroundTrialItem trial_item = 2; //可试用胚子
    repeated ProvingGroundEquipItem equip_item = 3; //试用中的胚子
    optional SimpleUser enemy_data = 4; //选择的敌方玩家
    repeated uint32 formation = 5; //布阵
}

//装备试用胚子
message C2S_ProvingGroundEquip {
    required uint32 type = 1; //type和base_id传0代表卸下在pos位置的胚子
    required uint32 base_id = 2;
    required uint32 pos = 3;
    optional uint32 star = 4;
}

message S2C_ProvingGroundEquip {
    required uint32 ret = 1;
    repeated ProvingGroundEquipItem equip_item = 2;
}

//拉取敌方玩家信息
message C2S_ProvingGroundGetEnemy {
    required uint64 sid = 1; //服务器id
    optional string name = 2; //查找的玩家姓名
}

message S2C_ProvingGroundGetEnemy {
    required uint32 ret = 1;
    optional uint64 sid = 2;
    repeated SimpleUser enemy_data = 3;
}

//攻打敌方玩家
message C2S_ProvingGroundAttackEnemy {
    required uint64 sid = 1;
    required uint64 uid = 2;
}

message S2C_ProvingGroundAttackEnemy {
    required uint32 ret = 1;
    optional BattleReport battle_report = 2;
}

//选取一个敌方玩家
message C2S_ProvingGroundSelectEnemy {
    required uint64 sid = 1;
    required uint64 uid = 2;
}

message S2C_ProvingGroundSelectEnemy {
    required uint32 ret = 1;
    optional SimpleUser enemy = 2;
}

//选择星数
message C2S_ProvingGroundChangeStar {
    required uint32 item_type = 1; //胚子类型
    required uint32 base_id = 2; //胚子baseId
    required uint32 star = 3; //星数
}

message S2C_ProvingGroundChangeStar {
    required uint32 ret = 1;
    optional ProvingGroundEquipItem equip_item = 2;
}

//前端配置版本号
message C2S_GetPatchNum {
}

message S2C_GetPatchNum {
    required uint32 ret = 1;
    optional string patch_num = 2;
}

////////////////////异兽来袭begin
message GodBeastUserDamage {
  required SimpleUser simple_user = 1;
  required uint64 damage = 2;
}
message GodBeastSmallBoss {
  required uint32 id = 1; //boss id
  required uint32 pos = 2; //1->5
  required uint64 max_hp = 3;
  required uint64 hp = 4;
  optional uint64 damage = 5; //我的伤害
  repeated GodBeastUserDamage top_user = 6;

}
message C2S_GodBeastGetInfo {
}
message S2C_GodBeastGetInfo {
  required uint32 ret = 1;
  optional CommonCount small_boss_count = 2; //小boss攻打次数
  optional CommonCount big_boss_count = 3; //大boss攻打次数
  optional uint32 big_boss_floor = 4; //已攻打的大boss
}
message C2S_GodBeastGetFloorInfo {
  required uint32 floor = 1;
}
message S2C_GodBeastGetFloorInfo {
  required uint32 ret = 1;
  optional uint32 search_times = 2; //剩余搜寻次数
  repeated GodBeastSmallBoss small_boss = 3;
  optional uint32 alive_count = 4;//小boss存活数量
  optional uint64 big_boss_damage = 5; //大boss伤害
  repeated uint32 box = 6; //已领的进度奖励
}
message C2S_GodBeastSearchSmallBoss {
  required uint32 floor = 1; 
}
message S2C_GodBeastSearchSmallBoss {
  required uint32 ret = 1;
  optional uint32 search_times = 2; //剩余搜寻次数
  optional GodBeastSmallBoss small_boss = 3;
}
message C2S_GodBeastAttackSmallBoss {
  required uint32 floor = 1; 
  required uint32 id = 2;
}
message S2C_GodBeastAttackSmallBoss {
  required uint32 ret = 1;
  optional CommonCount small_boss_count = 2; //小boss攻打次数
  optional GodBeastSmallBoss small_boss = 3;
  optional BattleReport battle_report = 4;
  optional bool is_win = 5; //是否击杀
  optional bool is_valid = 6; //是否攻击有效
  repeated Award awards = 7; //奖励
}
message C2S_GodBeastGetSmallBossRank {
  required uint32 floor = 1; 
  required uint32 id = 2;
}
message S2C_GodBeastGetSmallBossRank {
  required uint32 ret = 1;
  repeated GodBeastUserDamage damage_user = 2; 
}
message C2S_GodBeastAttackBigBoss {
  required uint32 floor = 1;
  required uint32 tp = 2; //1:攻打 2:试炼
}
message S2C_GodBeastAttackBigBoss {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  optional CommonCount big_boss_count = 3; //大boss攻打次数
}
message C2S_GodBeastLeaveFloor {
}
message S2C_GodBeastLeaveFloor {
  required uint32 ret = 1; 
}
message S2C_GodBeastSmallBossNtf {
  repeated GodBeastSmallBoss small_boss = 1;
  optional uint32 alive_count = 2;//小boss存活数量
}
message S2C_GodBeastBigBossNtf {
  required uint32 floor = 1;
  optional uint64 big_boss_damage = 2; //大boss伤害
}
////////////////////异兽来袭end

//双11福利副本
message C2S_ActiveChapterGetInfo {
}

message S2C_ActiveChapterGetInfo {
    required uint32 ret = 1;
    optional uint32 open_chapter_id = 2; //当前开启的副本id
    optional uint32 max_stage_id = 3; //已经首通的最大关卡id
}

message C2S_ActiveChapterChallengeStage {
    required uint32 stage_id = 1;
}

message S2C_ActiveChapterChallengeStage {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    repeated Award awards = 4;
}

message C2S_ActiveChapterFastChallenge {
    required uint32 stage_id = 1;
}

message S2C_ActiveChapterFastChallenge {
    required uint32 ret = 1;
    optional uint32 stage_id = 2;
    repeated Award awards = 4;
}
