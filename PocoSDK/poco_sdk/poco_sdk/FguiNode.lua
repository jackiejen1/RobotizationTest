---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by cuiyl.
--- DateTime: 2019/10/16 20:15
---
function import(moduleName, currentModuleName)
    local currentModuleNameParts
    local moduleFullName = moduleName
    local offset = 1

    while true do
        if string.byte(moduleName, offset) ~= 46 then
            moduleFullName = string.sub(moduleName, offset)
            if currentModuleNameParts and #currentModuleNameParts > 0 then
                moduleFullName = table.concat(currentModuleNameParts, ".") .. "." .. moduleFullName
            end
            break
        end
        offset = offset + 1

        if not currentModuleNameParts then
            if not currentModuleName then
                local n, v = debug.getlocal(3, 1)
                currentModuleName = v
            end
            currentModuleNameParts = string.split(currentModuleName, ".")
        end
        table.remove(currentModuleNameParts, #currentModuleNameParts)
    end

    return require(moduleFullName)
end
-- 修改cc调用
-- local cc = _G.cc or require('cc')
local AbstractNode = import('.sdk.AbstractNode')
local FguiNode = {}
FguiNode.__index = FguiNode
setmetatable(FguiNode, AbstractNode)
function FguiNode:new(node, screenWidth, screenHeight)
    local n = {}
    setmetatable(n, FguiNode)
    n.node = node
    n.screenWidth = screenWidth
    n.screenHeight = screenHeight
    return n
end

function FguiNode:getParent()
    local parent = self.node:getParent()
    if parent ==nil then
        return nil
    end
    self:new(parent, self.screenWidth, self.screenHeight)
end
function FguiNode:getChildren()
    local children = {}
    if self.node.getChildren then
        for _, child in ipairs(self.node:getChildren()) do
            table.insert(children, self:new(child, self.screenWidth, self.screenHeight))
        end
    end
    return children
end
function FguiNode:getAvailableAttributeNames()
    local ret = {
        'text',
        'touchable',
        'enabled',
        'rotation',
        'skew',
        '_instanceId',
        'getVisible',
    }
    for _, name in ipairs(AbstractNode.getAvailableAttributeNames(self)) do
        table.insert(ret, name)
    end
    return ret
end

function FguiNode:getAttr(attrName)
    if attrName =='visible' then
        local visible = self.node:isVisible()
        if not visible then
            return false
        end
        -- if the node is visible, check its parent's visibility
        local parent = self.node:getParent()
        while parent do
            local parentVisible = parent:isVisible()
            if not parentVisible then
                return false
            end
            parent = parent:getParent()
        end
        return true
    elseif attrName =='name' then
        local name = self.node:getName()
        if name == '' then
            name = "未命名"
        end
        return name
    elseif attrName =='text' then
        if self.node.getText then
            return self.node:getText():match("^%s*(.-)%s*$")
        elseif self.node.getTitle then
            return self.node:getTitle():match("^%s*(.-)%s*$")
        end
        return nil
    elseif attrName =='type' then
        local nodeType = tolua.type(self.node)
        nodeType = nodeType:gsub("^fgui%.",'')
        return nodeType
    elseif attrName =='pos' then
        -- 修改cc调用
        -- local pos = self.node:localToGlobal(cc.p(0, 0),false)
        local pos = self.node:localToGlobal(ccp(0, 0),false)
        pos.x = pos.x / self.screenWidth
        pos.y = pos.y / self.screenHeight
        local size = self.node:getSize()
        if size ~= nil then
            size.width = size.width / self.screenWidth
            size.height = size.height / self.screenHeight
        end
        if not self.node:isPivotAsAnchor() then
            pos.x = pos.x +0.5*size.width
            pos.y = pos.y +0.5*size.height
        end
        pos.x = math.min(1,math.max(0,pos.x))
        pos.y = math.min(1,math.max(0,pos.y))
        return {pos.x, pos.y}
    elseif attrName =='size' then
        local size = self.node:getSize()
        if size ~= nil then
            size.width = size.width / self.screenWidth
            size.height = size.height / self.screenHeight
            return {size.width, size.height}
        end
    elseif attrName =='scale' then
        --local scale = self.node:getScale()
        return {self.node:getScaleX(), self.node:getScaleY()}
    elseif attrName=='anchorPoint' then
        local povit =self.node:getPivot()
        return {0.5,0.5}
        --return {povit.x,povit.y}
    elseif attrName =='zOrders' then
        --local sortOrder = self.node:getSortingOrder()
        local zOrders = {
            global = self.node:getSortingOrder(),
            ['local'] = self.node:getSortingOrder(),
        }
        return zOrders
    elseif attrName=="touchable" then
        if self.node.isTouchable then
            return self.node:isTouchable()
        end
        return nil
    elseif attrName == 'enabled' then--按钮等（判断的是controller）
        if self.node.isEnabled then
            return self.node:isEnabled()
        end
        return nil
    elseif attrName == 'rotation' then
        if self.node.getRotation then
            return self.node:getRotation()
        end
        return 0
    elseif  attrName == 'skew' then
        if self.node.getSkewX and self.node.getSkewY then
            return {self.node:getSkewX(), self.node:getSkewY()}
        end
        return nil
    elseif attrName == '_instanceId' then
        if self.node.setText ~= nil then
            return tostring(self.node)
        end
    elseif attrName=="getVisible" then
        local visible = self.node:displayObject():isVisible()
        if not visible then
            return false
        end
        -- if the node is visible, check its parent's visibility
        local parent = self.node:getParent()
        while parent do
            local parentVisible = parent:displayObject():isVisible()
            if not parentVisible then
                return false
            end
            parent = parent:getParent()
        end
        return true
    end

    return AbstractNode.getAttr(self, attrName)
end

function FguiNode:setAttr(attrName, val)
    if attrName == 'text' then
        if self.node.setText then
            self.node:setText(val)
            return true
        end
    end
    return AbstractNode.setAttr(self, attrName, val)
end

return FguiNode